
cmwx1zzabz_0xx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fe90  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002350  0800ff50  0800ff50  00010f50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080122a0  080122a0  000132a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080122a8  080122a8  000132a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080122ac  080122ac  000132ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000134  20000000  080122b0  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00001aac  20000134  080123e4  00014134  2**2
                  ALLOC
  8 ._user_heap_stack 00000800  20001be0  080123e4  00014be0  2**0
                  ALLOC
  9 .ARM.attributes 00000028  00000000  00000000  00014134  2**0
                  CONTENTS, READONLY
 10 .debug_info   00042566  00000000  00000000  0001415c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000b60c  00000000  00000000  000566c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002500  00000000  00000000  00061cd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 000027ad  00000000  00000000  000641d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00023c57  00000000  00000000  0006697d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00046413  00000000  00000000  0008a5d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000b1208  00000000  00000000  000d09e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  00181bef  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000659c  00000000  00000000  00181c34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_loclists 00012140  00000000  00000000  001881d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 00000193  00000000  00000000  0019a310  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000134 	.word	0x20000134
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800ff38 	.word	0x0800ff38

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000138 	.word	0x20000138
 8000104:	0800ff38 	.word	0x0800ff38

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_sqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5609      	ldrsb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			@ (mov r8, r8)

0800012c <__gnu_thumb1_case_uqi>:
 800012c:	b402      	push	{r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0049      	lsls	r1, r1, #1
 8000134:	5c09      	ldrb	r1, [r1, r0]
 8000136:	0049      	lsls	r1, r1, #1
 8000138:	448e      	add	lr, r1
 800013a:	bc02      	pop	{r1}
 800013c:	4770      	bx	lr
 800013e:	46c0      	nop			@ (mov r8, r8)

08000140 <__gnu_thumb1_case_shi>:
 8000140:	b403      	push	{r0, r1}
 8000142:	4671      	mov	r1, lr
 8000144:	0849      	lsrs	r1, r1, #1
 8000146:	0040      	lsls	r0, r0, #1
 8000148:	0049      	lsls	r1, r1, #1
 800014a:	5e09      	ldrsh	r1, [r1, r0]
 800014c:	0049      	lsls	r1, r1, #1
 800014e:	448e      	add	lr, r1
 8000150:	bc03      	pop	{r0, r1}
 8000152:	4770      	bx	lr

08000154 <__gnu_thumb1_case_uhi>:
 8000154:	b403      	push	{r0, r1}
 8000156:	4671      	mov	r1, lr
 8000158:	0849      	lsrs	r1, r1, #1
 800015a:	0040      	lsls	r0, r0, #1
 800015c:	0049      	lsls	r1, r1, #1
 800015e:	5a09      	ldrh	r1, [r1, r0]
 8000160:	0049      	lsls	r1, r1, #1
 8000162:	448e      	add	lr, r1
 8000164:	bc03      	pop	{r0, r1}
 8000166:	4770      	bx	lr

08000168 <__udivsi3>:
 8000168:	2200      	movs	r2, #0
 800016a:	0843      	lsrs	r3, r0, #1
 800016c:	428b      	cmp	r3, r1
 800016e:	d374      	bcc.n	800025a <__udivsi3+0xf2>
 8000170:	0903      	lsrs	r3, r0, #4
 8000172:	428b      	cmp	r3, r1
 8000174:	d35f      	bcc.n	8000236 <__udivsi3+0xce>
 8000176:	0a03      	lsrs	r3, r0, #8
 8000178:	428b      	cmp	r3, r1
 800017a:	d344      	bcc.n	8000206 <__udivsi3+0x9e>
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d328      	bcc.n	80001d4 <__udivsi3+0x6c>
 8000182:	0c03      	lsrs	r3, r0, #16
 8000184:	428b      	cmp	r3, r1
 8000186:	d30d      	bcc.n	80001a4 <__udivsi3+0x3c>
 8000188:	22ff      	movs	r2, #255	@ 0xff
 800018a:	0209      	lsls	r1, r1, #8
 800018c:	ba12      	rev	r2, r2
 800018e:	0c03      	lsrs	r3, r0, #16
 8000190:	428b      	cmp	r3, r1
 8000192:	d302      	bcc.n	800019a <__udivsi3+0x32>
 8000194:	1212      	asrs	r2, r2, #8
 8000196:	0209      	lsls	r1, r1, #8
 8000198:	d065      	beq.n	8000266 <__udivsi3+0xfe>
 800019a:	0b03      	lsrs	r3, r0, #12
 800019c:	428b      	cmp	r3, r1
 800019e:	d319      	bcc.n	80001d4 <__udivsi3+0x6c>
 80001a0:	e000      	b.n	80001a4 <__udivsi3+0x3c>
 80001a2:	0a09      	lsrs	r1, r1, #8
 80001a4:	0bc3      	lsrs	r3, r0, #15
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x46>
 80001aa:	03cb      	lsls	r3, r1, #15
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0b83      	lsrs	r3, r0, #14
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x52>
 80001b6:	038b      	lsls	r3, r1, #14
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0b43      	lsrs	r3, r0, #13
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x5e>
 80001c2:	034b      	lsls	r3, r1, #13
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	0b03      	lsrs	r3, r0, #12
 80001ca:	428b      	cmp	r3, r1
 80001cc:	d301      	bcc.n	80001d2 <__udivsi3+0x6a>
 80001ce:	030b      	lsls	r3, r1, #12
 80001d0:	1ac0      	subs	r0, r0, r3
 80001d2:	4152      	adcs	r2, r2
 80001d4:	0ac3      	lsrs	r3, r0, #11
 80001d6:	428b      	cmp	r3, r1
 80001d8:	d301      	bcc.n	80001de <__udivsi3+0x76>
 80001da:	02cb      	lsls	r3, r1, #11
 80001dc:	1ac0      	subs	r0, r0, r3
 80001de:	4152      	adcs	r2, r2
 80001e0:	0a83      	lsrs	r3, r0, #10
 80001e2:	428b      	cmp	r3, r1
 80001e4:	d301      	bcc.n	80001ea <__udivsi3+0x82>
 80001e6:	028b      	lsls	r3, r1, #10
 80001e8:	1ac0      	subs	r0, r0, r3
 80001ea:	4152      	adcs	r2, r2
 80001ec:	0a43      	lsrs	r3, r0, #9
 80001ee:	428b      	cmp	r3, r1
 80001f0:	d301      	bcc.n	80001f6 <__udivsi3+0x8e>
 80001f2:	024b      	lsls	r3, r1, #9
 80001f4:	1ac0      	subs	r0, r0, r3
 80001f6:	4152      	adcs	r2, r2
 80001f8:	0a03      	lsrs	r3, r0, #8
 80001fa:	428b      	cmp	r3, r1
 80001fc:	d301      	bcc.n	8000202 <__udivsi3+0x9a>
 80001fe:	020b      	lsls	r3, r1, #8
 8000200:	1ac0      	subs	r0, r0, r3
 8000202:	4152      	adcs	r2, r2
 8000204:	d2cd      	bcs.n	80001a2 <__udivsi3+0x3a>
 8000206:	09c3      	lsrs	r3, r0, #7
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xa8>
 800020c:	01cb      	lsls	r3, r1, #7
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0983      	lsrs	r3, r0, #6
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xb4>
 8000218:	018b      	lsls	r3, r1, #6
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	0943      	lsrs	r3, r0, #5
 8000220:	428b      	cmp	r3, r1
 8000222:	d301      	bcc.n	8000228 <__udivsi3+0xc0>
 8000224:	014b      	lsls	r3, r1, #5
 8000226:	1ac0      	subs	r0, r0, r3
 8000228:	4152      	adcs	r2, r2
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d301      	bcc.n	8000234 <__udivsi3+0xcc>
 8000230:	010b      	lsls	r3, r1, #4
 8000232:	1ac0      	subs	r0, r0, r3
 8000234:	4152      	adcs	r2, r2
 8000236:	08c3      	lsrs	r3, r0, #3
 8000238:	428b      	cmp	r3, r1
 800023a:	d301      	bcc.n	8000240 <__udivsi3+0xd8>
 800023c:	00cb      	lsls	r3, r1, #3
 800023e:	1ac0      	subs	r0, r0, r3
 8000240:	4152      	adcs	r2, r2
 8000242:	0883      	lsrs	r3, r0, #2
 8000244:	428b      	cmp	r3, r1
 8000246:	d301      	bcc.n	800024c <__udivsi3+0xe4>
 8000248:	008b      	lsls	r3, r1, #2
 800024a:	1ac0      	subs	r0, r0, r3
 800024c:	4152      	adcs	r2, r2
 800024e:	0843      	lsrs	r3, r0, #1
 8000250:	428b      	cmp	r3, r1
 8000252:	d301      	bcc.n	8000258 <__udivsi3+0xf0>
 8000254:	004b      	lsls	r3, r1, #1
 8000256:	1ac0      	subs	r0, r0, r3
 8000258:	4152      	adcs	r2, r2
 800025a:	1a41      	subs	r1, r0, r1
 800025c:	d200      	bcs.n	8000260 <__udivsi3+0xf8>
 800025e:	4601      	mov	r1, r0
 8000260:	4152      	adcs	r2, r2
 8000262:	4610      	mov	r0, r2
 8000264:	4770      	bx	lr
 8000266:	e7ff      	b.n	8000268 <__udivsi3+0x100>
 8000268:	b501      	push	{r0, lr}
 800026a:	2000      	movs	r0, #0
 800026c:	f000 f8f0 	bl	8000450 <__aeabi_idiv0>
 8000270:	bd02      	pop	{r1, pc}
 8000272:	46c0      	nop			@ (mov r8, r8)

08000274 <__aeabi_uidivmod>:
 8000274:	2900      	cmp	r1, #0
 8000276:	d0f7      	beq.n	8000268 <__udivsi3+0x100>
 8000278:	e776      	b.n	8000168 <__udivsi3>
 800027a:	4770      	bx	lr

0800027c <__divsi3>:
 800027c:	4603      	mov	r3, r0
 800027e:	430b      	orrs	r3, r1
 8000280:	d47f      	bmi.n	8000382 <__divsi3+0x106>
 8000282:	2200      	movs	r2, #0
 8000284:	0843      	lsrs	r3, r0, #1
 8000286:	428b      	cmp	r3, r1
 8000288:	d374      	bcc.n	8000374 <__divsi3+0xf8>
 800028a:	0903      	lsrs	r3, r0, #4
 800028c:	428b      	cmp	r3, r1
 800028e:	d35f      	bcc.n	8000350 <__divsi3+0xd4>
 8000290:	0a03      	lsrs	r3, r0, #8
 8000292:	428b      	cmp	r3, r1
 8000294:	d344      	bcc.n	8000320 <__divsi3+0xa4>
 8000296:	0b03      	lsrs	r3, r0, #12
 8000298:	428b      	cmp	r3, r1
 800029a:	d328      	bcc.n	80002ee <__divsi3+0x72>
 800029c:	0c03      	lsrs	r3, r0, #16
 800029e:	428b      	cmp	r3, r1
 80002a0:	d30d      	bcc.n	80002be <__divsi3+0x42>
 80002a2:	22ff      	movs	r2, #255	@ 0xff
 80002a4:	0209      	lsls	r1, r1, #8
 80002a6:	ba12      	rev	r2, r2
 80002a8:	0c03      	lsrs	r3, r0, #16
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d302      	bcc.n	80002b4 <__divsi3+0x38>
 80002ae:	1212      	asrs	r2, r2, #8
 80002b0:	0209      	lsls	r1, r1, #8
 80002b2:	d065      	beq.n	8000380 <__divsi3+0x104>
 80002b4:	0b03      	lsrs	r3, r0, #12
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d319      	bcc.n	80002ee <__divsi3+0x72>
 80002ba:	e000      	b.n	80002be <__divsi3+0x42>
 80002bc:	0a09      	lsrs	r1, r1, #8
 80002be:	0bc3      	lsrs	r3, r0, #15
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x4c>
 80002c4:	03cb      	lsls	r3, r1, #15
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0b83      	lsrs	r3, r0, #14
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x58>
 80002d0:	038b      	lsls	r3, r1, #14
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0b43      	lsrs	r3, r0, #13
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0x64>
 80002dc:	034b      	lsls	r3, r1, #13
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	0b03      	lsrs	r3, r0, #12
 80002e4:	428b      	cmp	r3, r1
 80002e6:	d301      	bcc.n	80002ec <__divsi3+0x70>
 80002e8:	030b      	lsls	r3, r1, #12
 80002ea:	1ac0      	subs	r0, r0, r3
 80002ec:	4152      	adcs	r2, r2
 80002ee:	0ac3      	lsrs	r3, r0, #11
 80002f0:	428b      	cmp	r3, r1
 80002f2:	d301      	bcc.n	80002f8 <__divsi3+0x7c>
 80002f4:	02cb      	lsls	r3, r1, #11
 80002f6:	1ac0      	subs	r0, r0, r3
 80002f8:	4152      	adcs	r2, r2
 80002fa:	0a83      	lsrs	r3, r0, #10
 80002fc:	428b      	cmp	r3, r1
 80002fe:	d301      	bcc.n	8000304 <__divsi3+0x88>
 8000300:	028b      	lsls	r3, r1, #10
 8000302:	1ac0      	subs	r0, r0, r3
 8000304:	4152      	adcs	r2, r2
 8000306:	0a43      	lsrs	r3, r0, #9
 8000308:	428b      	cmp	r3, r1
 800030a:	d301      	bcc.n	8000310 <__divsi3+0x94>
 800030c:	024b      	lsls	r3, r1, #9
 800030e:	1ac0      	subs	r0, r0, r3
 8000310:	4152      	adcs	r2, r2
 8000312:	0a03      	lsrs	r3, r0, #8
 8000314:	428b      	cmp	r3, r1
 8000316:	d301      	bcc.n	800031c <__divsi3+0xa0>
 8000318:	020b      	lsls	r3, r1, #8
 800031a:	1ac0      	subs	r0, r0, r3
 800031c:	4152      	adcs	r2, r2
 800031e:	d2cd      	bcs.n	80002bc <__divsi3+0x40>
 8000320:	09c3      	lsrs	r3, r0, #7
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xae>
 8000326:	01cb      	lsls	r3, r1, #7
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0983      	lsrs	r3, r0, #6
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xba>
 8000332:	018b      	lsls	r3, r1, #6
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	0943      	lsrs	r3, r0, #5
 800033a:	428b      	cmp	r3, r1
 800033c:	d301      	bcc.n	8000342 <__divsi3+0xc6>
 800033e:	014b      	lsls	r3, r1, #5
 8000340:	1ac0      	subs	r0, r0, r3
 8000342:	4152      	adcs	r2, r2
 8000344:	0903      	lsrs	r3, r0, #4
 8000346:	428b      	cmp	r3, r1
 8000348:	d301      	bcc.n	800034e <__divsi3+0xd2>
 800034a:	010b      	lsls	r3, r1, #4
 800034c:	1ac0      	subs	r0, r0, r3
 800034e:	4152      	adcs	r2, r2
 8000350:	08c3      	lsrs	r3, r0, #3
 8000352:	428b      	cmp	r3, r1
 8000354:	d301      	bcc.n	800035a <__divsi3+0xde>
 8000356:	00cb      	lsls	r3, r1, #3
 8000358:	1ac0      	subs	r0, r0, r3
 800035a:	4152      	adcs	r2, r2
 800035c:	0883      	lsrs	r3, r0, #2
 800035e:	428b      	cmp	r3, r1
 8000360:	d301      	bcc.n	8000366 <__divsi3+0xea>
 8000362:	008b      	lsls	r3, r1, #2
 8000364:	1ac0      	subs	r0, r0, r3
 8000366:	4152      	adcs	r2, r2
 8000368:	0843      	lsrs	r3, r0, #1
 800036a:	428b      	cmp	r3, r1
 800036c:	d301      	bcc.n	8000372 <__divsi3+0xf6>
 800036e:	004b      	lsls	r3, r1, #1
 8000370:	1ac0      	subs	r0, r0, r3
 8000372:	4152      	adcs	r2, r2
 8000374:	1a41      	subs	r1, r0, r1
 8000376:	d200      	bcs.n	800037a <__divsi3+0xfe>
 8000378:	4601      	mov	r1, r0
 800037a:	4152      	adcs	r2, r2
 800037c:	4610      	mov	r0, r2
 800037e:	4770      	bx	lr
 8000380:	e05d      	b.n	800043e <__divsi3+0x1c2>
 8000382:	0fca      	lsrs	r2, r1, #31
 8000384:	d000      	beq.n	8000388 <__divsi3+0x10c>
 8000386:	4249      	negs	r1, r1
 8000388:	1003      	asrs	r3, r0, #32
 800038a:	d300      	bcc.n	800038e <__divsi3+0x112>
 800038c:	4240      	negs	r0, r0
 800038e:	4053      	eors	r3, r2
 8000390:	2200      	movs	r2, #0
 8000392:	469c      	mov	ip, r3
 8000394:	0903      	lsrs	r3, r0, #4
 8000396:	428b      	cmp	r3, r1
 8000398:	d32d      	bcc.n	80003f6 <__divsi3+0x17a>
 800039a:	0a03      	lsrs	r3, r0, #8
 800039c:	428b      	cmp	r3, r1
 800039e:	d312      	bcc.n	80003c6 <__divsi3+0x14a>
 80003a0:	22fc      	movs	r2, #252	@ 0xfc
 80003a2:	0189      	lsls	r1, r1, #6
 80003a4:	ba12      	rev	r2, r2
 80003a6:	0a03      	lsrs	r3, r0, #8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d30c      	bcc.n	80003c6 <__divsi3+0x14a>
 80003ac:	0189      	lsls	r1, r1, #6
 80003ae:	1192      	asrs	r2, r2, #6
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d308      	bcc.n	80003c6 <__divsi3+0x14a>
 80003b4:	0189      	lsls	r1, r1, #6
 80003b6:	1192      	asrs	r2, r2, #6
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d304      	bcc.n	80003c6 <__divsi3+0x14a>
 80003bc:	0189      	lsls	r1, r1, #6
 80003be:	d03a      	beq.n	8000436 <__divsi3+0x1ba>
 80003c0:	1192      	asrs	r2, r2, #6
 80003c2:	e000      	b.n	80003c6 <__divsi3+0x14a>
 80003c4:	0989      	lsrs	r1, r1, #6
 80003c6:	09c3      	lsrs	r3, r0, #7
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x154>
 80003cc:	01cb      	lsls	r3, r1, #7
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	0983      	lsrs	r3, r0, #6
 80003d4:	428b      	cmp	r3, r1
 80003d6:	d301      	bcc.n	80003dc <__divsi3+0x160>
 80003d8:	018b      	lsls	r3, r1, #6
 80003da:	1ac0      	subs	r0, r0, r3
 80003dc:	4152      	adcs	r2, r2
 80003de:	0943      	lsrs	r3, r0, #5
 80003e0:	428b      	cmp	r3, r1
 80003e2:	d301      	bcc.n	80003e8 <__divsi3+0x16c>
 80003e4:	014b      	lsls	r3, r1, #5
 80003e6:	1ac0      	subs	r0, r0, r3
 80003e8:	4152      	adcs	r2, r2
 80003ea:	0903      	lsrs	r3, r0, #4
 80003ec:	428b      	cmp	r3, r1
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x178>
 80003f0:	010b      	lsls	r3, r1, #4
 80003f2:	1ac0      	subs	r0, r0, r3
 80003f4:	4152      	adcs	r2, r2
 80003f6:	08c3      	lsrs	r3, r0, #3
 80003f8:	428b      	cmp	r3, r1
 80003fa:	d301      	bcc.n	8000400 <__divsi3+0x184>
 80003fc:	00cb      	lsls	r3, r1, #3
 80003fe:	1ac0      	subs	r0, r0, r3
 8000400:	4152      	adcs	r2, r2
 8000402:	0883      	lsrs	r3, r0, #2
 8000404:	428b      	cmp	r3, r1
 8000406:	d301      	bcc.n	800040c <__divsi3+0x190>
 8000408:	008b      	lsls	r3, r1, #2
 800040a:	1ac0      	subs	r0, r0, r3
 800040c:	4152      	adcs	r2, r2
 800040e:	d2d9      	bcs.n	80003c4 <__divsi3+0x148>
 8000410:	0843      	lsrs	r3, r0, #1
 8000412:	428b      	cmp	r3, r1
 8000414:	d301      	bcc.n	800041a <__divsi3+0x19e>
 8000416:	004b      	lsls	r3, r1, #1
 8000418:	1ac0      	subs	r0, r0, r3
 800041a:	4152      	adcs	r2, r2
 800041c:	1a41      	subs	r1, r0, r1
 800041e:	d200      	bcs.n	8000422 <__divsi3+0x1a6>
 8000420:	4601      	mov	r1, r0
 8000422:	4663      	mov	r3, ip
 8000424:	4152      	adcs	r2, r2
 8000426:	105b      	asrs	r3, r3, #1
 8000428:	4610      	mov	r0, r2
 800042a:	d301      	bcc.n	8000430 <__divsi3+0x1b4>
 800042c:	4240      	negs	r0, r0
 800042e:	2b00      	cmp	r3, #0
 8000430:	d500      	bpl.n	8000434 <__divsi3+0x1b8>
 8000432:	4249      	negs	r1, r1
 8000434:	4770      	bx	lr
 8000436:	4663      	mov	r3, ip
 8000438:	105b      	asrs	r3, r3, #1
 800043a:	d300      	bcc.n	800043e <__divsi3+0x1c2>
 800043c:	4240      	negs	r0, r0
 800043e:	b501      	push	{r0, lr}
 8000440:	2000      	movs	r0, #0
 8000442:	f000 f805 	bl	8000450 <__aeabi_idiv0>
 8000446:	bd02      	pop	{r1, pc}

08000448 <__aeabi_idivmod>:
 8000448:	2900      	cmp	r1, #0
 800044a:	d0f8      	beq.n	800043e <__divsi3+0x1c2>
 800044c:	e716      	b.n	800027c <__divsi3>
 800044e:	4770      	bx	lr

08000450 <__aeabi_idiv0>:
 8000450:	4770      	bx	lr
 8000452:	46c0      	nop			@ (mov r8, r8)

08000454 <__aeabi_cdrcmple>:
 8000454:	4684      	mov	ip, r0
 8000456:	0010      	movs	r0, r2
 8000458:	4662      	mov	r2, ip
 800045a:	468c      	mov	ip, r1
 800045c:	0019      	movs	r1, r3
 800045e:	4663      	mov	r3, ip
 8000460:	e000      	b.n	8000464 <__aeabi_cdcmpeq>
 8000462:	46c0      	nop			@ (mov r8, r8)

08000464 <__aeabi_cdcmpeq>:
 8000464:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000466:	f000 ff4f 	bl	8001308 <__ledf2>
 800046a:	2800      	cmp	r0, #0
 800046c:	d401      	bmi.n	8000472 <__aeabi_cdcmpeq+0xe>
 800046e:	2100      	movs	r1, #0
 8000470:	42c8      	cmn	r0, r1
 8000472:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000474 <__aeabi_dcmpeq>:
 8000474:	b510      	push	{r4, lr}
 8000476:	f000 fe8f 	bl	8001198 <__eqdf2>
 800047a:	4240      	negs	r0, r0
 800047c:	3001      	adds	r0, #1
 800047e:	bd10      	pop	{r4, pc}

08000480 <__aeabi_dcmplt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f000 ff41 	bl	8001308 <__ledf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	db01      	blt.n	800048e <__aeabi_dcmplt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			@ (mov r8, r8)

08000494 <__aeabi_dcmple>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f000 ff37 	bl	8001308 <__ledf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	dd01      	ble.n	80004a2 <__aeabi_dcmple+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			@ (mov r8, r8)

080004a8 <__aeabi_dcmpgt>:
 80004a8:	b510      	push	{r4, lr}
 80004aa:	f000 feb9 	bl	8001220 <__gedf2>
 80004ae:	2800      	cmp	r0, #0
 80004b0:	dc01      	bgt.n	80004b6 <__aeabi_dcmpgt+0xe>
 80004b2:	2000      	movs	r0, #0
 80004b4:	bd10      	pop	{r4, pc}
 80004b6:	2001      	movs	r0, #1
 80004b8:	bd10      	pop	{r4, pc}
 80004ba:	46c0      	nop			@ (mov r8, r8)

080004bc <__aeabi_dcmpge>:
 80004bc:	b510      	push	{r4, lr}
 80004be:	f000 feaf 	bl	8001220 <__gedf2>
 80004c2:	2800      	cmp	r0, #0
 80004c4:	da01      	bge.n	80004ca <__aeabi_dcmpge+0xe>
 80004c6:	2000      	movs	r0, #0
 80004c8:	bd10      	pop	{r4, pc}
 80004ca:	2001      	movs	r0, #1
 80004cc:	bd10      	pop	{r4, pc}
 80004ce:	46c0      	nop			@ (mov r8, r8)

080004d0 <__aeabi_uldivmod>:
 80004d0:	2b00      	cmp	r3, #0
 80004d2:	d111      	bne.n	80004f8 <__aeabi_uldivmod+0x28>
 80004d4:	2a00      	cmp	r2, #0
 80004d6:	d10f      	bne.n	80004f8 <__aeabi_uldivmod+0x28>
 80004d8:	2900      	cmp	r1, #0
 80004da:	d100      	bne.n	80004de <__aeabi_uldivmod+0xe>
 80004dc:	2800      	cmp	r0, #0
 80004de:	d002      	beq.n	80004e6 <__aeabi_uldivmod+0x16>
 80004e0:	2100      	movs	r1, #0
 80004e2:	43c9      	mvns	r1, r1
 80004e4:	0008      	movs	r0, r1
 80004e6:	b407      	push	{r0, r1, r2}
 80004e8:	4802      	ldr	r0, [pc, #8]	@ (80004f4 <__aeabi_uldivmod+0x24>)
 80004ea:	a102      	add	r1, pc, #8	@ (adr r1, 80004f4 <__aeabi_uldivmod+0x24>)
 80004ec:	1840      	adds	r0, r0, r1
 80004ee:	9002      	str	r0, [sp, #8]
 80004f0:	bd03      	pop	{r0, r1, pc}
 80004f2:	46c0      	nop			@ (mov r8, r8)
 80004f4:	ffffff5d 	.word	0xffffff5d
 80004f8:	b403      	push	{r0, r1}
 80004fa:	4668      	mov	r0, sp
 80004fc:	b501      	push	{r0, lr}
 80004fe:	9802      	ldr	r0, [sp, #8]
 8000500:	f000 f834 	bl	800056c <__udivmoddi4>
 8000504:	9b01      	ldr	r3, [sp, #4]
 8000506:	469e      	mov	lr, r3
 8000508:	b002      	add	sp, #8
 800050a:	bc0c      	pop	{r2, r3}
 800050c:	4770      	bx	lr
 800050e:	46c0      	nop			@ (mov r8, r8)

08000510 <__aeabi_lmul>:
 8000510:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000512:	46ce      	mov	lr, r9
 8000514:	4699      	mov	r9, r3
 8000516:	0c03      	lsrs	r3, r0, #16
 8000518:	469c      	mov	ip, r3
 800051a:	0413      	lsls	r3, r2, #16
 800051c:	4647      	mov	r7, r8
 800051e:	0c1b      	lsrs	r3, r3, #16
 8000520:	001d      	movs	r5, r3
 8000522:	000e      	movs	r6, r1
 8000524:	4661      	mov	r1, ip
 8000526:	0404      	lsls	r4, r0, #16
 8000528:	0c24      	lsrs	r4, r4, #16
 800052a:	b580      	push	{r7, lr}
 800052c:	0007      	movs	r7, r0
 800052e:	0c10      	lsrs	r0, r2, #16
 8000530:	434b      	muls	r3, r1
 8000532:	4365      	muls	r5, r4
 8000534:	4341      	muls	r1, r0
 8000536:	4360      	muls	r0, r4
 8000538:	0c2c      	lsrs	r4, r5, #16
 800053a:	18c0      	adds	r0, r0, r3
 800053c:	1824      	adds	r4, r4, r0
 800053e:	468c      	mov	ip, r1
 8000540:	42a3      	cmp	r3, r4
 8000542:	d903      	bls.n	800054c <__aeabi_lmul+0x3c>
 8000544:	2380      	movs	r3, #128	@ 0x80
 8000546:	025b      	lsls	r3, r3, #9
 8000548:	4698      	mov	r8, r3
 800054a:	44c4      	add	ip, r8
 800054c:	4649      	mov	r1, r9
 800054e:	4379      	muls	r1, r7
 8000550:	4356      	muls	r6, r2
 8000552:	0c23      	lsrs	r3, r4, #16
 8000554:	042d      	lsls	r5, r5, #16
 8000556:	0c2d      	lsrs	r5, r5, #16
 8000558:	1989      	adds	r1, r1, r6
 800055a:	4463      	add	r3, ip
 800055c:	0424      	lsls	r4, r4, #16
 800055e:	1960      	adds	r0, r4, r5
 8000560:	18c9      	adds	r1, r1, r3
 8000562:	bcc0      	pop	{r6, r7}
 8000564:	46b9      	mov	r9, r7
 8000566:	46b0      	mov	r8, r6
 8000568:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800056a:	46c0      	nop			@ (mov r8, r8)

0800056c <__udivmoddi4>:
 800056c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800056e:	4657      	mov	r7, sl
 8000570:	464e      	mov	r6, r9
 8000572:	4645      	mov	r5, r8
 8000574:	46de      	mov	lr, fp
 8000576:	b5e0      	push	{r5, r6, r7, lr}
 8000578:	0004      	movs	r4, r0
 800057a:	000d      	movs	r5, r1
 800057c:	4692      	mov	sl, r2
 800057e:	4699      	mov	r9, r3
 8000580:	b083      	sub	sp, #12
 8000582:	428b      	cmp	r3, r1
 8000584:	d830      	bhi.n	80005e8 <__udivmoddi4+0x7c>
 8000586:	d02d      	beq.n	80005e4 <__udivmoddi4+0x78>
 8000588:	4649      	mov	r1, r9
 800058a:	4650      	mov	r0, sl
 800058c:	f000 ffd0 	bl	8001530 <__clzdi2>
 8000590:	0029      	movs	r1, r5
 8000592:	0006      	movs	r6, r0
 8000594:	0020      	movs	r0, r4
 8000596:	f000 ffcb 	bl	8001530 <__clzdi2>
 800059a:	1a33      	subs	r3, r6, r0
 800059c:	4698      	mov	r8, r3
 800059e:	3b20      	subs	r3, #32
 80005a0:	d434      	bmi.n	800060c <__udivmoddi4+0xa0>
 80005a2:	469b      	mov	fp, r3
 80005a4:	4653      	mov	r3, sl
 80005a6:	465a      	mov	r2, fp
 80005a8:	4093      	lsls	r3, r2
 80005aa:	4642      	mov	r2, r8
 80005ac:	001f      	movs	r7, r3
 80005ae:	4653      	mov	r3, sl
 80005b0:	4093      	lsls	r3, r2
 80005b2:	001e      	movs	r6, r3
 80005b4:	42af      	cmp	r7, r5
 80005b6:	d83b      	bhi.n	8000630 <__udivmoddi4+0xc4>
 80005b8:	42af      	cmp	r7, r5
 80005ba:	d100      	bne.n	80005be <__udivmoddi4+0x52>
 80005bc:	e079      	b.n	80006b2 <__udivmoddi4+0x146>
 80005be:	465b      	mov	r3, fp
 80005c0:	1ba4      	subs	r4, r4, r6
 80005c2:	41bd      	sbcs	r5, r7
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	da00      	bge.n	80005ca <__udivmoddi4+0x5e>
 80005c8:	e076      	b.n	80006b8 <__udivmoddi4+0x14c>
 80005ca:	2200      	movs	r2, #0
 80005cc:	2300      	movs	r3, #0
 80005ce:	9200      	str	r2, [sp, #0]
 80005d0:	9301      	str	r3, [sp, #4]
 80005d2:	2301      	movs	r3, #1
 80005d4:	465a      	mov	r2, fp
 80005d6:	4093      	lsls	r3, r2
 80005d8:	9301      	str	r3, [sp, #4]
 80005da:	2301      	movs	r3, #1
 80005dc:	4642      	mov	r2, r8
 80005de:	4093      	lsls	r3, r2
 80005e0:	9300      	str	r3, [sp, #0]
 80005e2:	e029      	b.n	8000638 <__udivmoddi4+0xcc>
 80005e4:	4282      	cmp	r2, r0
 80005e6:	d9cf      	bls.n	8000588 <__udivmoddi4+0x1c>
 80005e8:	2200      	movs	r2, #0
 80005ea:	2300      	movs	r3, #0
 80005ec:	9200      	str	r2, [sp, #0]
 80005ee:	9301      	str	r3, [sp, #4]
 80005f0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d001      	beq.n	80005fa <__udivmoddi4+0x8e>
 80005f6:	601c      	str	r4, [r3, #0]
 80005f8:	605d      	str	r5, [r3, #4]
 80005fa:	9800      	ldr	r0, [sp, #0]
 80005fc:	9901      	ldr	r1, [sp, #4]
 80005fe:	b003      	add	sp, #12
 8000600:	bcf0      	pop	{r4, r5, r6, r7}
 8000602:	46bb      	mov	fp, r7
 8000604:	46b2      	mov	sl, r6
 8000606:	46a9      	mov	r9, r5
 8000608:	46a0      	mov	r8, r4
 800060a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800060c:	4642      	mov	r2, r8
 800060e:	469b      	mov	fp, r3
 8000610:	2320      	movs	r3, #32
 8000612:	1a9b      	subs	r3, r3, r2
 8000614:	4652      	mov	r2, sl
 8000616:	40da      	lsrs	r2, r3
 8000618:	4641      	mov	r1, r8
 800061a:	0013      	movs	r3, r2
 800061c:	464a      	mov	r2, r9
 800061e:	408a      	lsls	r2, r1
 8000620:	0017      	movs	r7, r2
 8000622:	4642      	mov	r2, r8
 8000624:	431f      	orrs	r7, r3
 8000626:	4653      	mov	r3, sl
 8000628:	4093      	lsls	r3, r2
 800062a:	001e      	movs	r6, r3
 800062c:	42af      	cmp	r7, r5
 800062e:	d9c3      	bls.n	80005b8 <__udivmoddi4+0x4c>
 8000630:	2200      	movs	r2, #0
 8000632:	2300      	movs	r3, #0
 8000634:	9200      	str	r2, [sp, #0]
 8000636:	9301      	str	r3, [sp, #4]
 8000638:	4643      	mov	r3, r8
 800063a:	2b00      	cmp	r3, #0
 800063c:	d0d8      	beq.n	80005f0 <__udivmoddi4+0x84>
 800063e:	07fb      	lsls	r3, r7, #31
 8000640:	0872      	lsrs	r2, r6, #1
 8000642:	431a      	orrs	r2, r3
 8000644:	4646      	mov	r6, r8
 8000646:	087b      	lsrs	r3, r7, #1
 8000648:	e00e      	b.n	8000668 <__udivmoddi4+0xfc>
 800064a:	42ab      	cmp	r3, r5
 800064c:	d101      	bne.n	8000652 <__udivmoddi4+0xe6>
 800064e:	42a2      	cmp	r2, r4
 8000650:	d80c      	bhi.n	800066c <__udivmoddi4+0x100>
 8000652:	1aa4      	subs	r4, r4, r2
 8000654:	419d      	sbcs	r5, r3
 8000656:	2001      	movs	r0, #1
 8000658:	1924      	adds	r4, r4, r4
 800065a:	416d      	adcs	r5, r5
 800065c:	2100      	movs	r1, #0
 800065e:	3e01      	subs	r6, #1
 8000660:	1824      	adds	r4, r4, r0
 8000662:	414d      	adcs	r5, r1
 8000664:	2e00      	cmp	r6, #0
 8000666:	d006      	beq.n	8000676 <__udivmoddi4+0x10a>
 8000668:	42ab      	cmp	r3, r5
 800066a:	d9ee      	bls.n	800064a <__udivmoddi4+0xde>
 800066c:	3e01      	subs	r6, #1
 800066e:	1924      	adds	r4, r4, r4
 8000670:	416d      	adcs	r5, r5
 8000672:	2e00      	cmp	r6, #0
 8000674:	d1f8      	bne.n	8000668 <__udivmoddi4+0xfc>
 8000676:	9800      	ldr	r0, [sp, #0]
 8000678:	9901      	ldr	r1, [sp, #4]
 800067a:	465b      	mov	r3, fp
 800067c:	1900      	adds	r0, r0, r4
 800067e:	4169      	adcs	r1, r5
 8000680:	2b00      	cmp	r3, #0
 8000682:	db24      	blt.n	80006ce <__udivmoddi4+0x162>
 8000684:	002b      	movs	r3, r5
 8000686:	465a      	mov	r2, fp
 8000688:	4644      	mov	r4, r8
 800068a:	40d3      	lsrs	r3, r2
 800068c:	002a      	movs	r2, r5
 800068e:	40e2      	lsrs	r2, r4
 8000690:	001c      	movs	r4, r3
 8000692:	465b      	mov	r3, fp
 8000694:	0015      	movs	r5, r2
 8000696:	2b00      	cmp	r3, #0
 8000698:	db2a      	blt.n	80006f0 <__udivmoddi4+0x184>
 800069a:	0026      	movs	r6, r4
 800069c:	409e      	lsls	r6, r3
 800069e:	0033      	movs	r3, r6
 80006a0:	0026      	movs	r6, r4
 80006a2:	4647      	mov	r7, r8
 80006a4:	40be      	lsls	r6, r7
 80006a6:	0032      	movs	r2, r6
 80006a8:	1a80      	subs	r0, r0, r2
 80006aa:	4199      	sbcs	r1, r3
 80006ac:	9000      	str	r0, [sp, #0]
 80006ae:	9101      	str	r1, [sp, #4]
 80006b0:	e79e      	b.n	80005f0 <__udivmoddi4+0x84>
 80006b2:	42a3      	cmp	r3, r4
 80006b4:	d8bc      	bhi.n	8000630 <__udivmoddi4+0xc4>
 80006b6:	e782      	b.n	80005be <__udivmoddi4+0x52>
 80006b8:	4642      	mov	r2, r8
 80006ba:	2320      	movs	r3, #32
 80006bc:	2100      	movs	r1, #0
 80006be:	1a9b      	subs	r3, r3, r2
 80006c0:	2200      	movs	r2, #0
 80006c2:	9100      	str	r1, [sp, #0]
 80006c4:	9201      	str	r2, [sp, #4]
 80006c6:	2201      	movs	r2, #1
 80006c8:	40da      	lsrs	r2, r3
 80006ca:	9201      	str	r2, [sp, #4]
 80006cc:	e785      	b.n	80005da <__udivmoddi4+0x6e>
 80006ce:	4642      	mov	r2, r8
 80006d0:	2320      	movs	r3, #32
 80006d2:	1a9b      	subs	r3, r3, r2
 80006d4:	002a      	movs	r2, r5
 80006d6:	4646      	mov	r6, r8
 80006d8:	409a      	lsls	r2, r3
 80006da:	0023      	movs	r3, r4
 80006dc:	40f3      	lsrs	r3, r6
 80006de:	4644      	mov	r4, r8
 80006e0:	4313      	orrs	r3, r2
 80006e2:	002a      	movs	r2, r5
 80006e4:	40e2      	lsrs	r2, r4
 80006e6:	001c      	movs	r4, r3
 80006e8:	465b      	mov	r3, fp
 80006ea:	0015      	movs	r5, r2
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	dad4      	bge.n	800069a <__udivmoddi4+0x12e>
 80006f0:	4642      	mov	r2, r8
 80006f2:	002f      	movs	r7, r5
 80006f4:	2320      	movs	r3, #32
 80006f6:	0026      	movs	r6, r4
 80006f8:	4097      	lsls	r7, r2
 80006fa:	1a9b      	subs	r3, r3, r2
 80006fc:	40de      	lsrs	r6, r3
 80006fe:	003b      	movs	r3, r7
 8000700:	4333      	orrs	r3, r6
 8000702:	e7cd      	b.n	80006a0 <__udivmoddi4+0x134>

08000704 <__aeabi_fsub>:
 8000704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000706:	4647      	mov	r7, r8
 8000708:	46ce      	mov	lr, r9
 800070a:	024e      	lsls	r6, r1, #9
 800070c:	0243      	lsls	r3, r0, #9
 800070e:	0045      	lsls	r5, r0, #1
 8000710:	0a72      	lsrs	r2, r6, #9
 8000712:	0fc4      	lsrs	r4, r0, #31
 8000714:	0048      	lsls	r0, r1, #1
 8000716:	b580      	push	{r7, lr}
 8000718:	4694      	mov	ip, r2
 800071a:	0a5f      	lsrs	r7, r3, #9
 800071c:	0e2d      	lsrs	r5, r5, #24
 800071e:	099b      	lsrs	r3, r3, #6
 8000720:	0e00      	lsrs	r0, r0, #24
 8000722:	0fc9      	lsrs	r1, r1, #31
 8000724:	09b6      	lsrs	r6, r6, #6
 8000726:	28ff      	cmp	r0, #255	@ 0xff
 8000728:	d024      	beq.n	8000774 <__aeabi_fsub+0x70>
 800072a:	2201      	movs	r2, #1
 800072c:	4051      	eors	r1, r2
 800072e:	1a2a      	subs	r2, r5, r0
 8000730:	428c      	cmp	r4, r1
 8000732:	d00f      	beq.n	8000754 <__aeabi_fsub+0x50>
 8000734:	2a00      	cmp	r2, #0
 8000736:	dc00      	bgt.n	800073a <__aeabi_fsub+0x36>
 8000738:	e16a      	b.n	8000a10 <__aeabi_fsub+0x30c>
 800073a:	2800      	cmp	r0, #0
 800073c:	d135      	bne.n	80007aa <__aeabi_fsub+0xa6>
 800073e:	2e00      	cmp	r6, #0
 8000740:	d100      	bne.n	8000744 <__aeabi_fsub+0x40>
 8000742:	e0a2      	b.n	800088a <__aeabi_fsub+0x186>
 8000744:	1e51      	subs	r1, r2, #1
 8000746:	2a01      	cmp	r2, #1
 8000748:	d100      	bne.n	800074c <__aeabi_fsub+0x48>
 800074a:	e124      	b.n	8000996 <__aeabi_fsub+0x292>
 800074c:	2aff      	cmp	r2, #255	@ 0xff
 800074e:	d021      	beq.n	8000794 <__aeabi_fsub+0x90>
 8000750:	000a      	movs	r2, r1
 8000752:	e02f      	b.n	80007b4 <__aeabi_fsub+0xb0>
 8000754:	2a00      	cmp	r2, #0
 8000756:	dc00      	bgt.n	800075a <__aeabi_fsub+0x56>
 8000758:	e167      	b.n	8000a2a <__aeabi_fsub+0x326>
 800075a:	2800      	cmp	r0, #0
 800075c:	d05e      	beq.n	800081c <__aeabi_fsub+0x118>
 800075e:	2dff      	cmp	r5, #255	@ 0xff
 8000760:	d018      	beq.n	8000794 <__aeabi_fsub+0x90>
 8000762:	2180      	movs	r1, #128	@ 0x80
 8000764:	04c9      	lsls	r1, r1, #19
 8000766:	430e      	orrs	r6, r1
 8000768:	2a1b      	cmp	r2, #27
 800076a:	dc00      	bgt.n	800076e <__aeabi_fsub+0x6a>
 800076c:	e076      	b.n	800085c <__aeabi_fsub+0x158>
 800076e:	002a      	movs	r2, r5
 8000770:	3301      	adds	r3, #1
 8000772:	e032      	b.n	80007da <__aeabi_fsub+0xd6>
 8000774:	002a      	movs	r2, r5
 8000776:	3aff      	subs	r2, #255	@ 0xff
 8000778:	4691      	mov	r9, r2
 800077a:	2e00      	cmp	r6, #0
 800077c:	d042      	beq.n	8000804 <__aeabi_fsub+0x100>
 800077e:	428c      	cmp	r4, r1
 8000780:	d055      	beq.n	800082e <__aeabi_fsub+0x12a>
 8000782:	464a      	mov	r2, r9
 8000784:	2a00      	cmp	r2, #0
 8000786:	d100      	bne.n	800078a <__aeabi_fsub+0x86>
 8000788:	e09c      	b.n	80008c4 <__aeabi_fsub+0x1c0>
 800078a:	2d00      	cmp	r5, #0
 800078c:	d100      	bne.n	8000790 <__aeabi_fsub+0x8c>
 800078e:	e077      	b.n	8000880 <__aeabi_fsub+0x17c>
 8000790:	000c      	movs	r4, r1
 8000792:	0033      	movs	r3, r6
 8000794:	08db      	lsrs	r3, r3, #3
 8000796:	2b00      	cmp	r3, #0
 8000798:	d100      	bne.n	800079c <__aeabi_fsub+0x98>
 800079a:	e06e      	b.n	800087a <__aeabi_fsub+0x176>
 800079c:	2280      	movs	r2, #128	@ 0x80
 800079e:	03d2      	lsls	r2, r2, #15
 80007a0:	4313      	orrs	r3, r2
 80007a2:	025b      	lsls	r3, r3, #9
 80007a4:	20ff      	movs	r0, #255	@ 0xff
 80007a6:	0a5b      	lsrs	r3, r3, #9
 80007a8:	e024      	b.n	80007f4 <__aeabi_fsub+0xf0>
 80007aa:	2dff      	cmp	r5, #255	@ 0xff
 80007ac:	d0f2      	beq.n	8000794 <__aeabi_fsub+0x90>
 80007ae:	2180      	movs	r1, #128	@ 0x80
 80007b0:	04c9      	lsls	r1, r1, #19
 80007b2:	430e      	orrs	r6, r1
 80007b4:	2101      	movs	r1, #1
 80007b6:	2a1b      	cmp	r2, #27
 80007b8:	dc08      	bgt.n	80007cc <__aeabi_fsub+0xc8>
 80007ba:	0031      	movs	r1, r6
 80007bc:	2020      	movs	r0, #32
 80007be:	40d1      	lsrs	r1, r2
 80007c0:	1a82      	subs	r2, r0, r2
 80007c2:	4096      	lsls	r6, r2
 80007c4:	0032      	movs	r2, r6
 80007c6:	1e50      	subs	r0, r2, #1
 80007c8:	4182      	sbcs	r2, r0
 80007ca:	4311      	orrs	r1, r2
 80007cc:	1a5b      	subs	r3, r3, r1
 80007ce:	015a      	lsls	r2, r3, #5
 80007d0:	d460      	bmi.n	8000894 <__aeabi_fsub+0x190>
 80007d2:	2107      	movs	r1, #7
 80007d4:	002a      	movs	r2, r5
 80007d6:	4019      	ands	r1, r3
 80007d8:	d057      	beq.n	800088a <__aeabi_fsub+0x186>
 80007da:	210f      	movs	r1, #15
 80007dc:	4019      	ands	r1, r3
 80007de:	2904      	cmp	r1, #4
 80007e0:	d000      	beq.n	80007e4 <__aeabi_fsub+0xe0>
 80007e2:	3304      	adds	r3, #4
 80007e4:	0159      	lsls	r1, r3, #5
 80007e6:	d550      	bpl.n	800088a <__aeabi_fsub+0x186>
 80007e8:	1c50      	adds	r0, r2, #1
 80007ea:	2afe      	cmp	r2, #254	@ 0xfe
 80007ec:	d045      	beq.n	800087a <__aeabi_fsub+0x176>
 80007ee:	019b      	lsls	r3, r3, #6
 80007f0:	b2c0      	uxtb	r0, r0
 80007f2:	0a5b      	lsrs	r3, r3, #9
 80007f4:	05c0      	lsls	r0, r0, #23
 80007f6:	4318      	orrs	r0, r3
 80007f8:	07e4      	lsls	r4, r4, #31
 80007fa:	4320      	orrs	r0, r4
 80007fc:	bcc0      	pop	{r6, r7}
 80007fe:	46b9      	mov	r9, r7
 8000800:	46b0      	mov	r8, r6
 8000802:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000804:	2201      	movs	r2, #1
 8000806:	4051      	eors	r1, r2
 8000808:	428c      	cmp	r4, r1
 800080a:	d1ba      	bne.n	8000782 <__aeabi_fsub+0x7e>
 800080c:	464a      	mov	r2, r9
 800080e:	2a00      	cmp	r2, #0
 8000810:	d010      	beq.n	8000834 <__aeabi_fsub+0x130>
 8000812:	2d00      	cmp	r5, #0
 8000814:	d100      	bne.n	8000818 <__aeabi_fsub+0x114>
 8000816:	e098      	b.n	800094a <__aeabi_fsub+0x246>
 8000818:	2300      	movs	r3, #0
 800081a:	e7bb      	b.n	8000794 <__aeabi_fsub+0x90>
 800081c:	2e00      	cmp	r6, #0
 800081e:	d034      	beq.n	800088a <__aeabi_fsub+0x186>
 8000820:	1e51      	subs	r1, r2, #1
 8000822:	2a01      	cmp	r2, #1
 8000824:	d06e      	beq.n	8000904 <__aeabi_fsub+0x200>
 8000826:	2aff      	cmp	r2, #255	@ 0xff
 8000828:	d0b4      	beq.n	8000794 <__aeabi_fsub+0x90>
 800082a:	000a      	movs	r2, r1
 800082c:	e79c      	b.n	8000768 <__aeabi_fsub+0x64>
 800082e:	2a00      	cmp	r2, #0
 8000830:	d000      	beq.n	8000834 <__aeabi_fsub+0x130>
 8000832:	e088      	b.n	8000946 <__aeabi_fsub+0x242>
 8000834:	20fe      	movs	r0, #254	@ 0xfe
 8000836:	1c6a      	adds	r2, r5, #1
 8000838:	4210      	tst	r0, r2
 800083a:	d000      	beq.n	800083e <__aeabi_fsub+0x13a>
 800083c:	e092      	b.n	8000964 <__aeabi_fsub+0x260>
 800083e:	2d00      	cmp	r5, #0
 8000840:	d000      	beq.n	8000844 <__aeabi_fsub+0x140>
 8000842:	e0a4      	b.n	800098e <__aeabi_fsub+0x28a>
 8000844:	2b00      	cmp	r3, #0
 8000846:	d100      	bne.n	800084a <__aeabi_fsub+0x146>
 8000848:	e0cb      	b.n	80009e2 <__aeabi_fsub+0x2de>
 800084a:	2e00      	cmp	r6, #0
 800084c:	d000      	beq.n	8000850 <__aeabi_fsub+0x14c>
 800084e:	e0ca      	b.n	80009e6 <__aeabi_fsub+0x2e2>
 8000850:	2200      	movs	r2, #0
 8000852:	08db      	lsrs	r3, r3, #3
 8000854:	025b      	lsls	r3, r3, #9
 8000856:	0a5b      	lsrs	r3, r3, #9
 8000858:	b2d0      	uxtb	r0, r2
 800085a:	e7cb      	b.n	80007f4 <__aeabi_fsub+0xf0>
 800085c:	0031      	movs	r1, r6
 800085e:	2020      	movs	r0, #32
 8000860:	40d1      	lsrs	r1, r2
 8000862:	1a82      	subs	r2, r0, r2
 8000864:	4096      	lsls	r6, r2
 8000866:	0032      	movs	r2, r6
 8000868:	1e50      	subs	r0, r2, #1
 800086a:	4182      	sbcs	r2, r0
 800086c:	430a      	orrs	r2, r1
 800086e:	189b      	adds	r3, r3, r2
 8000870:	015a      	lsls	r2, r3, #5
 8000872:	d5ae      	bpl.n	80007d2 <__aeabi_fsub+0xce>
 8000874:	1c6a      	adds	r2, r5, #1
 8000876:	2dfe      	cmp	r5, #254	@ 0xfe
 8000878:	d14a      	bne.n	8000910 <__aeabi_fsub+0x20c>
 800087a:	20ff      	movs	r0, #255	@ 0xff
 800087c:	2300      	movs	r3, #0
 800087e:	e7b9      	b.n	80007f4 <__aeabi_fsub+0xf0>
 8000880:	22ff      	movs	r2, #255	@ 0xff
 8000882:	2b00      	cmp	r3, #0
 8000884:	d14b      	bne.n	800091e <__aeabi_fsub+0x21a>
 8000886:	000c      	movs	r4, r1
 8000888:	0033      	movs	r3, r6
 800088a:	08db      	lsrs	r3, r3, #3
 800088c:	2aff      	cmp	r2, #255	@ 0xff
 800088e:	d100      	bne.n	8000892 <__aeabi_fsub+0x18e>
 8000890:	e781      	b.n	8000796 <__aeabi_fsub+0x92>
 8000892:	e7df      	b.n	8000854 <__aeabi_fsub+0x150>
 8000894:	019f      	lsls	r7, r3, #6
 8000896:	09bf      	lsrs	r7, r7, #6
 8000898:	0038      	movs	r0, r7
 800089a:	f000 fe2b 	bl	80014f4 <__clzsi2>
 800089e:	3805      	subs	r0, #5
 80008a0:	4087      	lsls	r7, r0
 80008a2:	4285      	cmp	r5, r0
 80008a4:	dc21      	bgt.n	80008ea <__aeabi_fsub+0x1e6>
 80008a6:	003b      	movs	r3, r7
 80008a8:	2120      	movs	r1, #32
 80008aa:	1b42      	subs	r2, r0, r5
 80008ac:	3201      	adds	r2, #1
 80008ae:	40d3      	lsrs	r3, r2
 80008b0:	1a8a      	subs	r2, r1, r2
 80008b2:	4097      	lsls	r7, r2
 80008b4:	1e7a      	subs	r2, r7, #1
 80008b6:	4197      	sbcs	r7, r2
 80008b8:	2200      	movs	r2, #0
 80008ba:	433b      	orrs	r3, r7
 80008bc:	0759      	lsls	r1, r3, #29
 80008be:	d000      	beq.n	80008c2 <__aeabi_fsub+0x1be>
 80008c0:	e78b      	b.n	80007da <__aeabi_fsub+0xd6>
 80008c2:	e78f      	b.n	80007e4 <__aeabi_fsub+0xe0>
 80008c4:	20fe      	movs	r0, #254	@ 0xfe
 80008c6:	1c6a      	adds	r2, r5, #1
 80008c8:	4210      	tst	r0, r2
 80008ca:	d112      	bne.n	80008f2 <__aeabi_fsub+0x1ee>
 80008cc:	2d00      	cmp	r5, #0
 80008ce:	d152      	bne.n	8000976 <__aeabi_fsub+0x272>
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d07c      	beq.n	80009ce <__aeabi_fsub+0x2ca>
 80008d4:	2e00      	cmp	r6, #0
 80008d6:	d0bb      	beq.n	8000850 <__aeabi_fsub+0x14c>
 80008d8:	1b9a      	subs	r2, r3, r6
 80008da:	0150      	lsls	r0, r2, #5
 80008dc:	d400      	bmi.n	80008e0 <__aeabi_fsub+0x1dc>
 80008de:	e08b      	b.n	80009f8 <__aeabi_fsub+0x2f4>
 80008e0:	2401      	movs	r4, #1
 80008e2:	2200      	movs	r2, #0
 80008e4:	1af3      	subs	r3, r6, r3
 80008e6:	400c      	ands	r4, r1
 80008e8:	e7e8      	b.n	80008bc <__aeabi_fsub+0x1b8>
 80008ea:	4b56      	ldr	r3, [pc, #344]	@ (8000a44 <__aeabi_fsub+0x340>)
 80008ec:	1a2a      	subs	r2, r5, r0
 80008ee:	403b      	ands	r3, r7
 80008f0:	e7e4      	b.n	80008bc <__aeabi_fsub+0x1b8>
 80008f2:	1b9f      	subs	r7, r3, r6
 80008f4:	017a      	lsls	r2, r7, #5
 80008f6:	d446      	bmi.n	8000986 <__aeabi_fsub+0x282>
 80008f8:	2f00      	cmp	r7, #0
 80008fa:	d1cd      	bne.n	8000898 <__aeabi_fsub+0x194>
 80008fc:	2400      	movs	r4, #0
 80008fe:	2000      	movs	r0, #0
 8000900:	2300      	movs	r3, #0
 8000902:	e777      	b.n	80007f4 <__aeabi_fsub+0xf0>
 8000904:	199b      	adds	r3, r3, r6
 8000906:	2501      	movs	r5, #1
 8000908:	3201      	adds	r2, #1
 800090a:	0159      	lsls	r1, r3, #5
 800090c:	d400      	bmi.n	8000910 <__aeabi_fsub+0x20c>
 800090e:	e760      	b.n	80007d2 <__aeabi_fsub+0xce>
 8000910:	2101      	movs	r1, #1
 8000912:	484d      	ldr	r0, [pc, #308]	@ (8000a48 <__aeabi_fsub+0x344>)
 8000914:	4019      	ands	r1, r3
 8000916:	085b      	lsrs	r3, r3, #1
 8000918:	4003      	ands	r3, r0
 800091a:	430b      	orrs	r3, r1
 800091c:	e7ce      	b.n	80008bc <__aeabi_fsub+0x1b8>
 800091e:	1e57      	subs	r7, r2, #1
 8000920:	2a01      	cmp	r2, #1
 8000922:	d05a      	beq.n	80009da <__aeabi_fsub+0x2d6>
 8000924:	000c      	movs	r4, r1
 8000926:	2aff      	cmp	r2, #255	@ 0xff
 8000928:	d033      	beq.n	8000992 <__aeabi_fsub+0x28e>
 800092a:	2201      	movs	r2, #1
 800092c:	2f1b      	cmp	r7, #27
 800092e:	dc07      	bgt.n	8000940 <__aeabi_fsub+0x23c>
 8000930:	2120      	movs	r1, #32
 8000932:	1bc9      	subs	r1, r1, r7
 8000934:	001a      	movs	r2, r3
 8000936:	408b      	lsls	r3, r1
 8000938:	40fa      	lsrs	r2, r7
 800093a:	1e59      	subs	r1, r3, #1
 800093c:	418b      	sbcs	r3, r1
 800093e:	431a      	orrs	r2, r3
 8000940:	0005      	movs	r5, r0
 8000942:	1ab3      	subs	r3, r6, r2
 8000944:	e743      	b.n	80007ce <__aeabi_fsub+0xca>
 8000946:	2d00      	cmp	r5, #0
 8000948:	d123      	bne.n	8000992 <__aeabi_fsub+0x28e>
 800094a:	22ff      	movs	r2, #255	@ 0xff
 800094c:	2b00      	cmp	r3, #0
 800094e:	d09b      	beq.n	8000888 <__aeabi_fsub+0x184>
 8000950:	1e51      	subs	r1, r2, #1
 8000952:	2a01      	cmp	r2, #1
 8000954:	d0d6      	beq.n	8000904 <__aeabi_fsub+0x200>
 8000956:	2aff      	cmp	r2, #255	@ 0xff
 8000958:	d01b      	beq.n	8000992 <__aeabi_fsub+0x28e>
 800095a:	291b      	cmp	r1, #27
 800095c:	dd2c      	ble.n	80009b8 <__aeabi_fsub+0x2b4>
 800095e:	0002      	movs	r2, r0
 8000960:	1c73      	adds	r3, r6, #1
 8000962:	e73a      	b.n	80007da <__aeabi_fsub+0xd6>
 8000964:	2aff      	cmp	r2, #255	@ 0xff
 8000966:	d088      	beq.n	800087a <__aeabi_fsub+0x176>
 8000968:	199b      	adds	r3, r3, r6
 800096a:	085b      	lsrs	r3, r3, #1
 800096c:	0759      	lsls	r1, r3, #29
 800096e:	d000      	beq.n	8000972 <__aeabi_fsub+0x26e>
 8000970:	e733      	b.n	80007da <__aeabi_fsub+0xd6>
 8000972:	08db      	lsrs	r3, r3, #3
 8000974:	e76e      	b.n	8000854 <__aeabi_fsub+0x150>
 8000976:	2b00      	cmp	r3, #0
 8000978:	d110      	bne.n	800099c <__aeabi_fsub+0x298>
 800097a:	2e00      	cmp	r6, #0
 800097c:	d043      	beq.n	8000a06 <__aeabi_fsub+0x302>
 800097e:	2401      	movs	r4, #1
 8000980:	0033      	movs	r3, r6
 8000982:	400c      	ands	r4, r1
 8000984:	e706      	b.n	8000794 <__aeabi_fsub+0x90>
 8000986:	2401      	movs	r4, #1
 8000988:	1af7      	subs	r7, r6, r3
 800098a:	400c      	ands	r4, r1
 800098c:	e784      	b.n	8000898 <__aeabi_fsub+0x194>
 800098e:	2b00      	cmp	r3, #0
 8000990:	d104      	bne.n	800099c <__aeabi_fsub+0x298>
 8000992:	0033      	movs	r3, r6
 8000994:	e6fe      	b.n	8000794 <__aeabi_fsub+0x90>
 8000996:	2501      	movs	r5, #1
 8000998:	1b9b      	subs	r3, r3, r6
 800099a:	e718      	b.n	80007ce <__aeabi_fsub+0xca>
 800099c:	2e00      	cmp	r6, #0
 800099e:	d100      	bne.n	80009a2 <__aeabi_fsub+0x29e>
 80009a0:	e6f8      	b.n	8000794 <__aeabi_fsub+0x90>
 80009a2:	2280      	movs	r2, #128	@ 0x80
 80009a4:	03d2      	lsls	r2, r2, #15
 80009a6:	4297      	cmp	r7, r2
 80009a8:	d304      	bcc.n	80009b4 <__aeabi_fsub+0x2b0>
 80009aa:	4594      	cmp	ip, r2
 80009ac:	d202      	bcs.n	80009b4 <__aeabi_fsub+0x2b0>
 80009ae:	2401      	movs	r4, #1
 80009b0:	0033      	movs	r3, r6
 80009b2:	400c      	ands	r4, r1
 80009b4:	08db      	lsrs	r3, r3, #3
 80009b6:	e6f1      	b.n	800079c <__aeabi_fsub+0x98>
 80009b8:	001a      	movs	r2, r3
 80009ba:	2520      	movs	r5, #32
 80009bc:	40ca      	lsrs	r2, r1
 80009be:	1a69      	subs	r1, r5, r1
 80009c0:	408b      	lsls	r3, r1
 80009c2:	1e59      	subs	r1, r3, #1
 80009c4:	418b      	sbcs	r3, r1
 80009c6:	4313      	orrs	r3, r2
 80009c8:	0005      	movs	r5, r0
 80009ca:	199b      	adds	r3, r3, r6
 80009cc:	e750      	b.n	8000870 <__aeabi_fsub+0x16c>
 80009ce:	2e00      	cmp	r6, #0
 80009d0:	d094      	beq.n	80008fc <__aeabi_fsub+0x1f8>
 80009d2:	2401      	movs	r4, #1
 80009d4:	0033      	movs	r3, r6
 80009d6:	400c      	ands	r4, r1
 80009d8:	e73a      	b.n	8000850 <__aeabi_fsub+0x14c>
 80009da:	000c      	movs	r4, r1
 80009dc:	2501      	movs	r5, #1
 80009de:	1af3      	subs	r3, r6, r3
 80009e0:	e6f5      	b.n	80007ce <__aeabi_fsub+0xca>
 80009e2:	0033      	movs	r3, r6
 80009e4:	e734      	b.n	8000850 <__aeabi_fsub+0x14c>
 80009e6:	199b      	adds	r3, r3, r6
 80009e8:	2200      	movs	r2, #0
 80009ea:	0159      	lsls	r1, r3, #5
 80009ec:	d5c1      	bpl.n	8000972 <__aeabi_fsub+0x26e>
 80009ee:	4a15      	ldr	r2, [pc, #84]	@ (8000a44 <__aeabi_fsub+0x340>)
 80009f0:	4013      	ands	r3, r2
 80009f2:	08db      	lsrs	r3, r3, #3
 80009f4:	2201      	movs	r2, #1
 80009f6:	e72d      	b.n	8000854 <__aeabi_fsub+0x150>
 80009f8:	2a00      	cmp	r2, #0
 80009fa:	d100      	bne.n	80009fe <__aeabi_fsub+0x2fa>
 80009fc:	e77e      	b.n	80008fc <__aeabi_fsub+0x1f8>
 80009fe:	0013      	movs	r3, r2
 8000a00:	2200      	movs	r2, #0
 8000a02:	08db      	lsrs	r3, r3, #3
 8000a04:	e726      	b.n	8000854 <__aeabi_fsub+0x150>
 8000a06:	2380      	movs	r3, #128	@ 0x80
 8000a08:	2400      	movs	r4, #0
 8000a0a:	20ff      	movs	r0, #255	@ 0xff
 8000a0c:	03db      	lsls	r3, r3, #15
 8000a0e:	e6f1      	b.n	80007f4 <__aeabi_fsub+0xf0>
 8000a10:	2a00      	cmp	r2, #0
 8000a12:	d100      	bne.n	8000a16 <__aeabi_fsub+0x312>
 8000a14:	e756      	b.n	80008c4 <__aeabi_fsub+0x1c0>
 8000a16:	1b47      	subs	r7, r0, r5
 8000a18:	003a      	movs	r2, r7
 8000a1a:	2d00      	cmp	r5, #0
 8000a1c:	d100      	bne.n	8000a20 <__aeabi_fsub+0x31c>
 8000a1e:	e730      	b.n	8000882 <__aeabi_fsub+0x17e>
 8000a20:	2280      	movs	r2, #128	@ 0x80
 8000a22:	04d2      	lsls	r2, r2, #19
 8000a24:	000c      	movs	r4, r1
 8000a26:	4313      	orrs	r3, r2
 8000a28:	e77f      	b.n	800092a <__aeabi_fsub+0x226>
 8000a2a:	2a00      	cmp	r2, #0
 8000a2c:	d100      	bne.n	8000a30 <__aeabi_fsub+0x32c>
 8000a2e:	e701      	b.n	8000834 <__aeabi_fsub+0x130>
 8000a30:	1b41      	subs	r1, r0, r5
 8000a32:	2d00      	cmp	r5, #0
 8000a34:	d101      	bne.n	8000a3a <__aeabi_fsub+0x336>
 8000a36:	000a      	movs	r2, r1
 8000a38:	e788      	b.n	800094c <__aeabi_fsub+0x248>
 8000a3a:	2280      	movs	r2, #128	@ 0x80
 8000a3c:	04d2      	lsls	r2, r2, #19
 8000a3e:	4313      	orrs	r3, r2
 8000a40:	e78b      	b.n	800095a <__aeabi_fsub+0x256>
 8000a42:	46c0      	nop			@ (mov r8, r8)
 8000a44:	fbffffff 	.word	0xfbffffff
 8000a48:	7dffffff 	.word	0x7dffffff

08000a4c <__aeabi_ui2f>:
 8000a4c:	b570      	push	{r4, r5, r6, lr}
 8000a4e:	1e04      	subs	r4, r0, #0
 8000a50:	d00e      	beq.n	8000a70 <__aeabi_ui2f+0x24>
 8000a52:	f000 fd4f 	bl	80014f4 <__clzsi2>
 8000a56:	239e      	movs	r3, #158	@ 0x9e
 8000a58:	0001      	movs	r1, r0
 8000a5a:	1a1b      	subs	r3, r3, r0
 8000a5c:	2b96      	cmp	r3, #150	@ 0x96
 8000a5e:	dc0c      	bgt.n	8000a7a <__aeabi_ui2f+0x2e>
 8000a60:	2808      	cmp	r0, #8
 8000a62:	d02f      	beq.n	8000ac4 <__aeabi_ui2f+0x78>
 8000a64:	3908      	subs	r1, #8
 8000a66:	408c      	lsls	r4, r1
 8000a68:	0264      	lsls	r4, r4, #9
 8000a6a:	0a64      	lsrs	r4, r4, #9
 8000a6c:	b2d8      	uxtb	r0, r3
 8000a6e:	e001      	b.n	8000a74 <__aeabi_ui2f+0x28>
 8000a70:	2000      	movs	r0, #0
 8000a72:	2400      	movs	r4, #0
 8000a74:	05c0      	lsls	r0, r0, #23
 8000a76:	4320      	orrs	r0, r4
 8000a78:	bd70      	pop	{r4, r5, r6, pc}
 8000a7a:	2b99      	cmp	r3, #153	@ 0x99
 8000a7c:	dc16      	bgt.n	8000aac <__aeabi_ui2f+0x60>
 8000a7e:	1f42      	subs	r2, r0, #5
 8000a80:	2805      	cmp	r0, #5
 8000a82:	d000      	beq.n	8000a86 <__aeabi_ui2f+0x3a>
 8000a84:	4094      	lsls	r4, r2
 8000a86:	0022      	movs	r2, r4
 8000a88:	4810      	ldr	r0, [pc, #64]	@ (8000acc <__aeabi_ui2f+0x80>)
 8000a8a:	4002      	ands	r2, r0
 8000a8c:	0765      	lsls	r5, r4, #29
 8000a8e:	d009      	beq.n	8000aa4 <__aeabi_ui2f+0x58>
 8000a90:	250f      	movs	r5, #15
 8000a92:	402c      	ands	r4, r5
 8000a94:	2c04      	cmp	r4, #4
 8000a96:	d005      	beq.n	8000aa4 <__aeabi_ui2f+0x58>
 8000a98:	3204      	adds	r2, #4
 8000a9a:	0154      	lsls	r4, r2, #5
 8000a9c:	d502      	bpl.n	8000aa4 <__aeabi_ui2f+0x58>
 8000a9e:	239f      	movs	r3, #159	@ 0x9f
 8000aa0:	4002      	ands	r2, r0
 8000aa2:	1a5b      	subs	r3, r3, r1
 8000aa4:	0192      	lsls	r2, r2, #6
 8000aa6:	0a54      	lsrs	r4, r2, #9
 8000aa8:	b2d8      	uxtb	r0, r3
 8000aaa:	e7e3      	b.n	8000a74 <__aeabi_ui2f+0x28>
 8000aac:	0002      	movs	r2, r0
 8000aae:	0020      	movs	r0, r4
 8000ab0:	321b      	adds	r2, #27
 8000ab2:	4090      	lsls	r0, r2
 8000ab4:	0002      	movs	r2, r0
 8000ab6:	1e50      	subs	r0, r2, #1
 8000ab8:	4182      	sbcs	r2, r0
 8000aba:	2005      	movs	r0, #5
 8000abc:	1a40      	subs	r0, r0, r1
 8000abe:	40c4      	lsrs	r4, r0
 8000ac0:	4314      	orrs	r4, r2
 8000ac2:	e7e0      	b.n	8000a86 <__aeabi_ui2f+0x3a>
 8000ac4:	0264      	lsls	r4, r4, #9
 8000ac6:	2096      	movs	r0, #150	@ 0x96
 8000ac8:	0a64      	lsrs	r4, r4, #9
 8000aca:	e7d3      	b.n	8000a74 <__aeabi_ui2f+0x28>
 8000acc:	fbffffff 	.word	0xfbffffff

08000ad0 <__aeabi_dadd>:
 8000ad0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ad2:	4657      	mov	r7, sl
 8000ad4:	464e      	mov	r6, r9
 8000ad6:	4645      	mov	r5, r8
 8000ad8:	46de      	mov	lr, fp
 8000ada:	b5e0      	push	{r5, r6, r7, lr}
 8000adc:	b083      	sub	sp, #12
 8000ade:	9000      	str	r0, [sp, #0]
 8000ae0:	9101      	str	r1, [sp, #4]
 8000ae2:	030c      	lsls	r4, r1, #12
 8000ae4:	004f      	lsls	r7, r1, #1
 8000ae6:	0fce      	lsrs	r6, r1, #31
 8000ae8:	0a61      	lsrs	r1, r4, #9
 8000aea:	9c00      	ldr	r4, [sp, #0]
 8000aec:	031d      	lsls	r5, r3, #12
 8000aee:	0f64      	lsrs	r4, r4, #29
 8000af0:	430c      	orrs	r4, r1
 8000af2:	9900      	ldr	r1, [sp, #0]
 8000af4:	9200      	str	r2, [sp, #0]
 8000af6:	9301      	str	r3, [sp, #4]
 8000af8:	00c8      	lsls	r0, r1, #3
 8000afa:	0059      	lsls	r1, r3, #1
 8000afc:	0d4b      	lsrs	r3, r1, #21
 8000afe:	4699      	mov	r9, r3
 8000b00:	9a00      	ldr	r2, [sp, #0]
 8000b02:	9b01      	ldr	r3, [sp, #4]
 8000b04:	0a6d      	lsrs	r5, r5, #9
 8000b06:	0fd9      	lsrs	r1, r3, #31
 8000b08:	0f53      	lsrs	r3, r2, #29
 8000b0a:	432b      	orrs	r3, r5
 8000b0c:	469a      	mov	sl, r3
 8000b0e:	9b00      	ldr	r3, [sp, #0]
 8000b10:	0d7f      	lsrs	r7, r7, #21
 8000b12:	00da      	lsls	r2, r3, #3
 8000b14:	4694      	mov	ip, r2
 8000b16:	464a      	mov	r2, r9
 8000b18:	46b0      	mov	r8, r6
 8000b1a:	1aba      	subs	r2, r7, r2
 8000b1c:	428e      	cmp	r6, r1
 8000b1e:	d100      	bne.n	8000b22 <__aeabi_dadd+0x52>
 8000b20:	e0b0      	b.n	8000c84 <__aeabi_dadd+0x1b4>
 8000b22:	2a00      	cmp	r2, #0
 8000b24:	dc00      	bgt.n	8000b28 <__aeabi_dadd+0x58>
 8000b26:	e078      	b.n	8000c1a <__aeabi_dadd+0x14a>
 8000b28:	4649      	mov	r1, r9
 8000b2a:	2900      	cmp	r1, #0
 8000b2c:	d100      	bne.n	8000b30 <__aeabi_dadd+0x60>
 8000b2e:	e0e9      	b.n	8000d04 <__aeabi_dadd+0x234>
 8000b30:	49c9      	ldr	r1, [pc, #804]	@ (8000e58 <__aeabi_dadd+0x388>)
 8000b32:	428f      	cmp	r7, r1
 8000b34:	d100      	bne.n	8000b38 <__aeabi_dadd+0x68>
 8000b36:	e195      	b.n	8000e64 <__aeabi_dadd+0x394>
 8000b38:	2501      	movs	r5, #1
 8000b3a:	2a38      	cmp	r2, #56	@ 0x38
 8000b3c:	dc16      	bgt.n	8000b6c <__aeabi_dadd+0x9c>
 8000b3e:	2180      	movs	r1, #128	@ 0x80
 8000b40:	4653      	mov	r3, sl
 8000b42:	0409      	lsls	r1, r1, #16
 8000b44:	430b      	orrs	r3, r1
 8000b46:	469a      	mov	sl, r3
 8000b48:	2a1f      	cmp	r2, #31
 8000b4a:	dd00      	ble.n	8000b4e <__aeabi_dadd+0x7e>
 8000b4c:	e1e7      	b.n	8000f1e <__aeabi_dadd+0x44e>
 8000b4e:	2120      	movs	r1, #32
 8000b50:	4655      	mov	r5, sl
 8000b52:	1a8b      	subs	r3, r1, r2
 8000b54:	4661      	mov	r1, ip
 8000b56:	409d      	lsls	r5, r3
 8000b58:	40d1      	lsrs	r1, r2
 8000b5a:	430d      	orrs	r5, r1
 8000b5c:	4661      	mov	r1, ip
 8000b5e:	4099      	lsls	r1, r3
 8000b60:	1e4b      	subs	r3, r1, #1
 8000b62:	4199      	sbcs	r1, r3
 8000b64:	4653      	mov	r3, sl
 8000b66:	40d3      	lsrs	r3, r2
 8000b68:	430d      	orrs	r5, r1
 8000b6a:	1ae4      	subs	r4, r4, r3
 8000b6c:	1b45      	subs	r5, r0, r5
 8000b6e:	42a8      	cmp	r0, r5
 8000b70:	4180      	sbcs	r0, r0
 8000b72:	4240      	negs	r0, r0
 8000b74:	1a24      	subs	r4, r4, r0
 8000b76:	0223      	lsls	r3, r4, #8
 8000b78:	d400      	bmi.n	8000b7c <__aeabi_dadd+0xac>
 8000b7a:	e10f      	b.n	8000d9c <__aeabi_dadd+0x2cc>
 8000b7c:	0264      	lsls	r4, r4, #9
 8000b7e:	0a64      	lsrs	r4, r4, #9
 8000b80:	2c00      	cmp	r4, #0
 8000b82:	d100      	bne.n	8000b86 <__aeabi_dadd+0xb6>
 8000b84:	e139      	b.n	8000dfa <__aeabi_dadd+0x32a>
 8000b86:	0020      	movs	r0, r4
 8000b88:	f000 fcb4 	bl	80014f4 <__clzsi2>
 8000b8c:	0003      	movs	r3, r0
 8000b8e:	3b08      	subs	r3, #8
 8000b90:	2120      	movs	r1, #32
 8000b92:	0028      	movs	r0, r5
 8000b94:	1aca      	subs	r2, r1, r3
 8000b96:	40d0      	lsrs	r0, r2
 8000b98:	409c      	lsls	r4, r3
 8000b9a:	0002      	movs	r2, r0
 8000b9c:	409d      	lsls	r5, r3
 8000b9e:	4322      	orrs	r2, r4
 8000ba0:	429f      	cmp	r7, r3
 8000ba2:	dd00      	ble.n	8000ba6 <__aeabi_dadd+0xd6>
 8000ba4:	e173      	b.n	8000e8e <__aeabi_dadd+0x3be>
 8000ba6:	1bd8      	subs	r0, r3, r7
 8000ba8:	3001      	adds	r0, #1
 8000baa:	1a09      	subs	r1, r1, r0
 8000bac:	002c      	movs	r4, r5
 8000bae:	408d      	lsls	r5, r1
 8000bb0:	40c4      	lsrs	r4, r0
 8000bb2:	1e6b      	subs	r3, r5, #1
 8000bb4:	419d      	sbcs	r5, r3
 8000bb6:	0013      	movs	r3, r2
 8000bb8:	40c2      	lsrs	r2, r0
 8000bba:	408b      	lsls	r3, r1
 8000bbc:	4325      	orrs	r5, r4
 8000bbe:	2700      	movs	r7, #0
 8000bc0:	0014      	movs	r4, r2
 8000bc2:	431d      	orrs	r5, r3
 8000bc4:	076b      	lsls	r3, r5, #29
 8000bc6:	d009      	beq.n	8000bdc <__aeabi_dadd+0x10c>
 8000bc8:	230f      	movs	r3, #15
 8000bca:	402b      	ands	r3, r5
 8000bcc:	2b04      	cmp	r3, #4
 8000bce:	d005      	beq.n	8000bdc <__aeabi_dadd+0x10c>
 8000bd0:	1d2b      	adds	r3, r5, #4
 8000bd2:	42ab      	cmp	r3, r5
 8000bd4:	41ad      	sbcs	r5, r5
 8000bd6:	426d      	negs	r5, r5
 8000bd8:	1964      	adds	r4, r4, r5
 8000bda:	001d      	movs	r5, r3
 8000bdc:	0223      	lsls	r3, r4, #8
 8000bde:	d400      	bmi.n	8000be2 <__aeabi_dadd+0x112>
 8000be0:	e12d      	b.n	8000e3e <__aeabi_dadd+0x36e>
 8000be2:	4a9d      	ldr	r2, [pc, #628]	@ (8000e58 <__aeabi_dadd+0x388>)
 8000be4:	3701      	adds	r7, #1
 8000be6:	4297      	cmp	r7, r2
 8000be8:	d100      	bne.n	8000bec <__aeabi_dadd+0x11c>
 8000bea:	e0d3      	b.n	8000d94 <__aeabi_dadd+0x2c4>
 8000bec:	4646      	mov	r6, r8
 8000bee:	499b      	ldr	r1, [pc, #620]	@ (8000e5c <__aeabi_dadd+0x38c>)
 8000bf0:	08ed      	lsrs	r5, r5, #3
 8000bf2:	4021      	ands	r1, r4
 8000bf4:	074a      	lsls	r2, r1, #29
 8000bf6:	432a      	orrs	r2, r5
 8000bf8:	057c      	lsls	r4, r7, #21
 8000bfa:	024d      	lsls	r5, r1, #9
 8000bfc:	0b2d      	lsrs	r5, r5, #12
 8000bfe:	0d64      	lsrs	r4, r4, #21
 8000c00:	0524      	lsls	r4, r4, #20
 8000c02:	432c      	orrs	r4, r5
 8000c04:	07f6      	lsls	r6, r6, #31
 8000c06:	4334      	orrs	r4, r6
 8000c08:	0010      	movs	r0, r2
 8000c0a:	0021      	movs	r1, r4
 8000c0c:	b003      	add	sp, #12
 8000c0e:	bcf0      	pop	{r4, r5, r6, r7}
 8000c10:	46bb      	mov	fp, r7
 8000c12:	46b2      	mov	sl, r6
 8000c14:	46a9      	mov	r9, r5
 8000c16:	46a0      	mov	r8, r4
 8000c18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c1a:	2a00      	cmp	r2, #0
 8000c1c:	d100      	bne.n	8000c20 <__aeabi_dadd+0x150>
 8000c1e:	e084      	b.n	8000d2a <__aeabi_dadd+0x25a>
 8000c20:	464a      	mov	r2, r9
 8000c22:	1bd2      	subs	r2, r2, r7
 8000c24:	2f00      	cmp	r7, #0
 8000c26:	d000      	beq.n	8000c2a <__aeabi_dadd+0x15a>
 8000c28:	e16d      	b.n	8000f06 <__aeabi_dadd+0x436>
 8000c2a:	0025      	movs	r5, r4
 8000c2c:	4305      	orrs	r5, r0
 8000c2e:	d100      	bne.n	8000c32 <__aeabi_dadd+0x162>
 8000c30:	e127      	b.n	8000e82 <__aeabi_dadd+0x3b2>
 8000c32:	1e56      	subs	r6, r2, #1
 8000c34:	2a01      	cmp	r2, #1
 8000c36:	d100      	bne.n	8000c3a <__aeabi_dadd+0x16a>
 8000c38:	e23b      	b.n	80010b2 <__aeabi_dadd+0x5e2>
 8000c3a:	4d87      	ldr	r5, [pc, #540]	@ (8000e58 <__aeabi_dadd+0x388>)
 8000c3c:	42aa      	cmp	r2, r5
 8000c3e:	d100      	bne.n	8000c42 <__aeabi_dadd+0x172>
 8000c40:	e26a      	b.n	8001118 <__aeabi_dadd+0x648>
 8000c42:	2501      	movs	r5, #1
 8000c44:	2e38      	cmp	r6, #56	@ 0x38
 8000c46:	dc12      	bgt.n	8000c6e <__aeabi_dadd+0x19e>
 8000c48:	0032      	movs	r2, r6
 8000c4a:	2a1f      	cmp	r2, #31
 8000c4c:	dd00      	ble.n	8000c50 <__aeabi_dadd+0x180>
 8000c4e:	e1f8      	b.n	8001042 <__aeabi_dadd+0x572>
 8000c50:	2620      	movs	r6, #32
 8000c52:	0025      	movs	r5, r4
 8000c54:	1ab6      	subs	r6, r6, r2
 8000c56:	0007      	movs	r7, r0
 8000c58:	4653      	mov	r3, sl
 8000c5a:	40b0      	lsls	r0, r6
 8000c5c:	40d4      	lsrs	r4, r2
 8000c5e:	40b5      	lsls	r5, r6
 8000c60:	40d7      	lsrs	r7, r2
 8000c62:	1e46      	subs	r6, r0, #1
 8000c64:	41b0      	sbcs	r0, r6
 8000c66:	1b1b      	subs	r3, r3, r4
 8000c68:	469a      	mov	sl, r3
 8000c6a:	433d      	orrs	r5, r7
 8000c6c:	4305      	orrs	r5, r0
 8000c6e:	4662      	mov	r2, ip
 8000c70:	1b55      	subs	r5, r2, r5
 8000c72:	45ac      	cmp	ip, r5
 8000c74:	4192      	sbcs	r2, r2
 8000c76:	4653      	mov	r3, sl
 8000c78:	4252      	negs	r2, r2
 8000c7a:	000e      	movs	r6, r1
 8000c7c:	464f      	mov	r7, r9
 8000c7e:	4688      	mov	r8, r1
 8000c80:	1a9c      	subs	r4, r3, r2
 8000c82:	e778      	b.n	8000b76 <__aeabi_dadd+0xa6>
 8000c84:	2a00      	cmp	r2, #0
 8000c86:	dc00      	bgt.n	8000c8a <__aeabi_dadd+0x1ba>
 8000c88:	e08e      	b.n	8000da8 <__aeabi_dadd+0x2d8>
 8000c8a:	4649      	mov	r1, r9
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	d175      	bne.n	8000d7c <__aeabi_dadd+0x2ac>
 8000c90:	4661      	mov	r1, ip
 8000c92:	4653      	mov	r3, sl
 8000c94:	4319      	orrs	r1, r3
 8000c96:	d100      	bne.n	8000c9a <__aeabi_dadd+0x1ca>
 8000c98:	e0f6      	b.n	8000e88 <__aeabi_dadd+0x3b8>
 8000c9a:	1e51      	subs	r1, r2, #1
 8000c9c:	2a01      	cmp	r2, #1
 8000c9e:	d100      	bne.n	8000ca2 <__aeabi_dadd+0x1d2>
 8000ca0:	e191      	b.n	8000fc6 <__aeabi_dadd+0x4f6>
 8000ca2:	4d6d      	ldr	r5, [pc, #436]	@ (8000e58 <__aeabi_dadd+0x388>)
 8000ca4:	42aa      	cmp	r2, r5
 8000ca6:	d100      	bne.n	8000caa <__aeabi_dadd+0x1da>
 8000ca8:	e0dc      	b.n	8000e64 <__aeabi_dadd+0x394>
 8000caa:	2501      	movs	r5, #1
 8000cac:	2938      	cmp	r1, #56	@ 0x38
 8000cae:	dc14      	bgt.n	8000cda <__aeabi_dadd+0x20a>
 8000cb0:	000a      	movs	r2, r1
 8000cb2:	2a1f      	cmp	r2, #31
 8000cb4:	dd00      	ble.n	8000cb8 <__aeabi_dadd+0x1e8>
 8000cb6:	e1a2      	b.n	8000ffe <__aeabi_dadd+0x52e>
 8000cb8:	2120      	movs	r1, #32
 8000cba:	4653      	mov	r3, sl
 8000cbc:	1a89      	subs	r1, r1, r2
 8000cbe:	408b      	lsls	r3, r1
 8000cc0:	001d      	movs	r5, r3
 8000cc2:	4663      	mov	r3, ip
 8000cc4:	40d3      	lsrs	r3, r2
 8000cc6:	431d      	orrs	r5, r3
 8000cc8:	4663      	mov	r3, ip
 8000cca:	408b      	lsls	r3, r1
 8000ccc:	0019      	movs	r1, r3
 8000cce:	1e4b      	subs	r3, r1, #1
 8000cd0:	4199      	sbcs	r1, r3
 8000cd2:	4653      	mov	r3, sl
 8000cd4:	40d3      	lsrs	r3, r2
 8000cd6:	430d      	orrs	r5, r1
 8000cd8:	18e4      	adds	r4, r4, r3
 8000cda:	182d      	adds	r5, r5, r0
 8000cdc:	4285      	cmp	r5, r0
 8000cde:	4180      	sbcs	r0, r0
 8000ce0:	4240      	negs	r0, r0
 8000ce2:	1824      	adds	r4, r4, r0
 8000ce4:	0223      	lsls	r3, r4, #8
 8000ce6:	d559      	bpl.n	8000d9c <__aeabi_dadd+0x2cc>
 8000ce8:	4b5b      	ldr	r3, [pc, #364]	@ (8000e58 <__aeabi_dadd+0x388>)
 8000cea:	3701      	adds	r7, #1
 8000cec:	429f      	cmp	r7, r3
 8000cee:	d051      	beq.n	8000d94 <__aeabi_dadd+0x2c4>
 8000cf0:	2101      	movs	r1, #1
 8000cf2:	4b5a      	ldr	r3, [pc, #360]	@ (8000e5c <__aeabi_dadd+0x38c>)
 8000cf4:	086a      	lsrs	r2, r5, #1
 8000cf6:	401c      	ands	r4, r3
 8000cf8:	4029      	ands	r1, r5
 8000cfa:	430a      	orrs	r2, r1
 8000cfc:	07e5      	lsls	r5, r4, #31
 8000cfe:	4315      	orrs	r5, r2
 8000d00:	0864      	lsrs	r4, r4, #1
 8000d02:	e75f      	b.n	8000bc4 <__aeabi_dadd+0xf4>
 8000d04:	4661      	mov	r1, ip
 8000d06:	4653      	mov	r3, sl
 8000d08:	4319      	orrs	r1, r3
 8000d0a:	d100      	bne.n	8000d0e <__aeabi_dadd+0x23e>
 8000d0c:	e0bc      	b.n	8000e88 <__aeabi_dadd+0x3b8>
 8000d0e:	1e51      	subs	r1, r2, #1
 8000d10:	2a01      	cmp	r2, #1
 8000d12:	d100      	bne.n	8000d16 <__aeabi_dadd+0x246>
 8000d14:	e164      	b.n	8000fe0 <__aeabi_dadd+0x510>
 8000d16:	4d50      	ldr	r5, [pc, #320]	@ (8000e58 <__aeabi_dadd+0x388>)
 8000d18:	42aa      	cmp	r2, r5
 8000d1a:	d100      	bne.n	8000d1e <__aeabi_dadd+0x24e>
 8000d1c:	e16a      	b.n	8000ff4 <__aeabi_dadd+0x524>
 8000d1e:	2501      	movs	r5, #1
 8000d20:	2938      	cmp	r1, #56	@ 0x38
 8000d22:	dd00      	ble.n	8000d26 <__aeabi_dadd+0x256>
 8000d24:	e722      	b.n	8000b6c <__aeabi_dadd+0x9c>
 8000d26:	000a      	movs	r2, r1
 8000d28:	e70e      	b.n	8000b48 <__aeabi_dadd+0x78>
 8000d2a:	4a4d      	ldr	r2, [pc, #308]	@ (8000e60 <__aeabi_dadd+0x390>)
 8000d2c:	1c7d      	adds	r5, r7, #1
 8000d2e:	4215      	tst	r5, r2
 8000d30:	d000      	beq.n	8000d34 <__aeabi_dadd+0x264>
 8000d32:	e0d0      	b.n	8000ed6 <__aeabi_dadd+0x406>
 8000d34:	0025      	movs	r5, r4
 8000d36:	4662      	mov	r2, ip
 8000d38:	4653      	mov	r3, sl
 8000d3a:	4305      	orrs	r5, r0
 8000d3c:	431a      	orrs	r2, r3
 8000d3e:	2f00      	cmp	r7, #0
 8000d40:	d000      	beq.n	8000d44 <__aeabi_dadd+0x274>
 8000d42:	e137      	b.n	8000fb4 <__aeabi_dadd+0x4e4>
 8000d44:	2d00      	cmp	r5, #0
 8000d46:	d100      	bne.n	8000d4a <__aeabi_dadd+0x27a>
 8000d48:	e1a8      	b.n	800109c <__aeabi_dadd+0x5cc>
 8000d4a:	2a00      	cmp	r2, #0
 8000d4c:	d100      	bne.n	8000d50 <__aeabi_dadd+0x280>
 8000d4e:	e16a      	b.n	8001026 <__aeabi_dadd+0x556>
 8000d50:	4663      	mov	r3, ip
 8000d52:	1ac5      	subs	r5, r0, r3
 8000d54:	4653      	mov	r3, sl
 8000d56:	1ae2      	subs	r2, r4, r3
 8000d58:	42a8      	cmp	r0, r5
 8000d5a:	419b      	sbcs	r3, r3
 8000d5c:	425b      	negs	r3, r3
 8000d5e:	1ad3      	subs	r3, r2, r3
 8000d60:	021a      	lsls	r2, r3, #8
 8000d62:	d400      	bmi.n	8000d66 <__aeabi_dadd+0x296>
 8000d64:	e203      	b.n	800116e <__aeabi_dadd+0x69e>
 8000d66:	4663      	mov	r3, ip
 8000d68:	1a1d      	subs	r5, r3, r0
 8000d6a:	45ac      	cmp	ip, r5
 8000d6c:	4192      	sbcs	r2, r2
 8000d6e:	4653      	mov	r3, sl
 8000d70:	4252      	negs	r2, r2
 8000d72:	1b1c      	subs	r4, r3, r4
 8000d74:	000e      	movs	r6, r1
 8000d76:	4688      	mov	r8, r1
 8000d78:	1aa4      	subs	r4, r4, r2
 8000d7a:	e723      	b.n	8000bc4 <__aeabi_dadd+0xf4>
 8000d7c:	4936      	ldr	r1, [pc, #216]	@ (8000e58 <__aeabi_dadd+0x388>)
 8000d7e:	428f      	cmp	r7, r1
 8000d80:	d070      	beq.n	8000e64 <__aeabi_dadd+0x394>
 8000d82:	2501      	movs	r5, #1
 8000d84:	2a38      	cmp	r2, #56	@ 0x38
 8000d86:	dca8      	bgt.n	8000cda <__aeabi_dadd+0x20a>
 8000d88:	2180      	movs	r1, #128	@ 0x80
 8000d8a:	4653      	mov	r3, sl
 8000d8c:	0409      	lsls	r1, r1, #16
 8000d8e:	430b      	orrs	r3, r1
 8000d90:	469a      	mov	sl, r3
 8000d92:	e78e      	b.n	8000cb2 <__aeabi_dadd+0x1e2>
 8000d94:	003c      	movs	r4, r7
 8000d96:	2500      	movs	r5, #0
 8000d98:	2200      	movs	r2, #0
 8000d9a:	e731      	b.n	8000c00 <__aeabi_dadd+0x130>
 8000d9c:	2307      	movs	r3, #7
 8000d9e:	402b      	ands	r3, r5
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d000      	beq.n	8000da6 <__aeabi_dadd+0x2d6>
 8000da4:	e710      	b.n	8000bc8 <__aeabi_dadd+0xf8>
 8000da6:	e093      	b.n	8000ed0 <__aeabi_dadd+0x400>
 8000da8:	2a00      	cmp	r2, #0
 8000daa:	d074      	beq.n	8000e96 <__aeabi_dadd+0x3c6>
 8000dac:	464a      	mov	r2, r9
 8000dae:	1bd2      	subs	r2, r2, r7
 8000db0:	2f00      	cmp	r7, #0
 8000db2:	d100      	bne.n	8000db6 <__aeabi_dadd+0x2e6>
 8000db4:	e0c7      	b.n	8000f46 <__aeabi_dadd+0x476>
 8000db6:	4928      	ldr	r1, [pc, #160]	@ (8000e58 <__aeabi_dadd+0x388>)
 8000db8:	4589      	cmp	r9, r1
 8000dba:	d100      	bne.n	8000dbe <__aeabi_dadd+0x2ee>
 8000dbc:	e185      	b.n	80010ca <__aeabi_dadd+0x5fa>
 8000dbe:	2501      	movs	r5, #1
 8000dc0:	2a38      	cmp	r2, #56	@ 0x38
 8000dc2:	dc12      	bgt.n	8000dea <__aeabi_dadd+0x31a>
 8000dc4:	2180      	movs	r1, #128	@ 0x80
 8000dc6:	0409      	lsls	r1, r1, #16
 8000dc8:	430c      	orrs	r4, r1
 8000dca:	2a1f      	cmp	r2, #31
 8000dcc:	dd00      	ble.n	8000dd0 <__aeabi_dadd+0x300>
 8000dce:	e1ab      	b.n	8001128 <__aeabi_dadd+0x658>
 8000dd0:	2120      	movs	r1, #32
 8000dd2:	0025      	movs	r5, r4
 8000dd4:	1a89      	subs	r1, r1, r2
 8000dd6:	0007      	movs	r7, r0
 8000dd8:	4088      	lsls	r0, r1
 8000dda:	408d      	lsls	r5, r1
 8000ddc:	40d7      	lsrs	r7, r2
 8000dde:	1e41      	subs	r1, r0, #1
 8000de0:	4188      	sbcs	r0, r1
 8000de2:	40d4      	lsrs	r4, r2
 8000de4:	433d      	orrs	r5, r7
 8000de6:	4305      	orrs	r5, r0
 8000de8:	44a2      	add	sl, r4
 8000dea:	4465      	add	r5, ip
 8000dec:	4565      	cmp	r5, ip
 8000dee:	4192      	sbcs	r2, r2
 8000df0:	4252      	negs	r2, r2
 8000df2:	4452      	add	r2, sl
 8000df4:	0014      	movs	r4, r2
 8000df6:	464f      	mov	r7, r9
 8000df8:	e774      	b.n	8000ce4 <__aeabi_dadd+0x214>
 8000dfa:	0028      	movs	r0, r5
 8000dfc:	f000 fb7a 	bl	80014f4 <__clzsi2>
 8000e00:	0003      	movs	r3, r0
 8000e02:	3318      	adds	r3, #24
 8000e04:	2b1f      	cmp	r3, #31
 8000e06:	dc00      	bgt.n	8000e0a <__aeabi_dadd+0x33a>
 8000e08:	e6c2      	b.n	8000b90 <__aeabi_dadd+0xc0>
 8000e0a:	002a      	movs	r2, r5
 8000e0c:	3808      	subs	r0, #8
 8000e0e:	4082      	lsls	r2, r0
 8000e10:	429f      	cmp	r7, r3
 8000e12:	dd00      	ble.n	8000e16 <__aeabi_dadd+0x346>
 8000e14:	e0a9      	b.n	8000f6a <__aeabi_dadd+0x49a>
 8000e16:	1bdb      	subs	r3, r3, r7
 8000e18:	1c58      	adds	r0, r3, #1
 8000e1a:	281f      	cmp	r0, #31
 8000e1c:	dc00      	bgt.n	8000e20 <__aeabi_dadd+0x350>
 8000e1e:	e1ac      	b.n	800117a <__aeabi_dadd+0x6aa>
 8000e20:	0015      	movs	r5, r2
 8000e22:	3b1f      	subs	r3, #31
 8000e24:	40dd      	lsrs	r5, r3
 8000e26:	2820      	cmp	r0, #32
 8000e28:	d005      	beq.n	8000e36 <__aeabi_dadd+0x366>
 8000e2a:	2340      	movs	r3, #64	@ 0x40
 8000e2c:	1a1b      	subs	r3, r3, r0
 8000e2e:	409a      	lsls	r2, r3
 8000e30:	1e53      	subs	r3, r2, #1
 8000e32:	419a      	sbcs	r2, r3
 8000e34:	4315      	orrs	r5, r2
 8000e36:	2307      	movs	r3, #7
 8000e38:	2700      	movs	r7, #0
 8000e3a:	402b      	ands	r3, r5
 8000e3c:	e7b0      	b.n	8000da0 <__aeabi_dadd+0x2d0>
 8000e3e:	08ed      	lsrs	r5, r5, #3
 8000e40:	4b05      	ldr	r3, [pc, #20]	@ (8000e58 <__aeabi_dadd+0x388>)
 8000e42:	0762      	lsls	r2, r4, #29
 8000e44:	432a      	orrs	r2, r5
 8000e46:	08e4      	lsrs	r4, r4, #3
 8000e48:	429f      	cmp	r7, r3
 8000e4a:	d00f      	beq.n	8000e6c <__aeabi_dadd+0x39c>
 8000e4c:	0324      	lsls	r4, r4, #12
 8000e4e:	0b25      	lsrs	r5, r4, #12
 8000e50:	057c      	lsls	r4, r7, #21
 8000e52:	0d64      	lsrs	r4, r4, #21
 8000e54:	e6d4      	b.n	8000c00 <__aeabi_dadd+0x130>
 8000e56:	46c0      	nop			@ (mov r8, r8)
 8000e58:	000007ff 	.word	0x000007ff
 8000e5c:	ff7fffff 	.word	0xff7fffff
 8000e60:	000007fe 	.word	0x000007fe
 8000e64:	08c0      	lsrs	r0, r0, #3
 8000e66:	0762      	lsls	r2, r4, #29
 8000e68:	4302      	orrs	r2, r0
 8000e6a:	08e4      	lsrs	r4, r4, #3
 8000e6c:	0013      	movs	r3, r2
 8000e6e:	4323      	orrs	r3, r4
 8000e70:	d100      	bne.n	8000e74 <__aeabi_dadd+0x3a4>
 8000e72:	e186      	b.n	8001182 <__aeabi_dadd+0x6b2>
 8000e74:	2580      	movs	r5, #128	@ 0x80
 8000e76:	032d      	lsls	r5, r5, #12
 8000e78:	4325      	orrs	r5, r4
 8000e7a:	032d      	lsls	r5, r5, #12
 8000e7c:	4cc3      	ldr	r4, [pc, #780]	@ (800118c <__aeabi_dadd+0x6bc>)
 8000e7e:	0b2d      	lsrs	r5, r5, #12
 8000e80:	e6be      	b.n	8000c00 <__aeabi_dadd+0x130>
 8000e82:	4660      	mov	r0, ip
 8000e84:	4654      	mov	r4, sl
 8000e86:	000e      	movs	r6, r1
 8000e88:	0017      	movs	r7, r2
 8000e8a:	08c5      	lsrs	r5, r0, #3
 8000e8c:	e7d8      	b.n	8000e40 <__aeabi_dadd+0x370>
 8000e8e:	4cc0      	ldr	r4, [pc, #768]	@ (8001190 <__aeabi_dadd+0x6c0>)
 8000e90:	1aff      	subs	r7, r7, r3
 8000e92:	4014      	ands	r4, r2
 8000e94:	e696      	b.n	8000bc4 <__aeabi_dadd+0xf4>
 8000e96:	4abf      	ldr	r2, [pc, #764]	@ (8001194 <__aeabi_dadd+0x6c4>)
 8000e98:	1c79      	adds	r1, r7, #1
 8000e9a:	4211      	tst	r1, r2
 8000e9c:	d16b      	bne.n	8000f76 <__aeabi_dadd+0x4a6>
 8000e9e:	0022      	movs	r2, r4
 8000ea0:	4302      	orrs	r2, r0
 8000ea2:	2f00      	cmp	r7, #0
 8000ea4:	d000      	beq.n	8000ea8 <__aeabi_dadd+0x3d8>
 8000ea6:	e0db      	b.n	8001060 <__aeabi_dadd+0x590>
 8000ea8:	2a00      	cmp	r2, #0
 8000eaa:	d100      	bne.n	8000eae <__aeabi_dadd+0x3de>
 8000eac:	e12d      	b.n	800110a <__aeabi_dadd+0x63a>
 8000eae:	4662      	mov	r2, ip
 8000eb0:	4653      	mov	r3, sl
 8000eb2:	431a      	orrs	r2, r3
 8000eb4:	d100      	bne.n	8000eb8 <__aeabi_dadd+0x3e8>
 8000eb6:	e0b6      	b.n	8001026 <__aeabi_dadd+0x556>
 8000eb8:	4663      	mov	r3, ip
 8000eba:	18c5      	adds	r5, r0, r3
 8000ebc:	4285      	cmp	r5, r0
 8000ebe:	4180      	sbcs	r0, r0
 8000ec0:	4454      	add	r4, sl
 8000ec2:	4240      	negs	r0, r0
 8000ec4:	1824      	adds	r4, r4, r0
 8000ec6:	0223      	lsls	r3, r4, #8
 8000ec8:	d502      	bpl.n	8000ed0 <__aeabi_dadd+0x400>
 8000eca:	000f      	movs	r7, r1
 8000ecc:	4bb0      	ldr	r3, [pc, #704]	@ (8001190 <__aeabi_dadd+0x6c0>)
 8000ece:	401c      	ands	r4, r3
 8000ed0:	003a      	movs	r2, r7
 8000ed2:	0028      	movs	r0, r5
 8000ed4:	e7d8      	b.n	8000e88 <__aeabi_dadd+0x3b8>
 8000ed6:	4662      	mov	r2, ip
 8000ed8:	1a85      	subs	r5, r0, r2
 8000eda:	42a8      	cmp	r0, r5
 8000edc:	4192      	sbcs	r2, r2
 8000ede:	4653      	mov	r3, sl
 8000ee0:	4252      	negs	r2, r2
 8000ee2:	4691      	mov	r9, r2
 8000ee4:	1ae3      	subs	r3, r4, r3
 8000ee6:	001a      	movs	r2, r3
 8000ee8:	464b      	mov	r3, r9
 8000eea:	1ad2      	subs	r2, r2, r3
 8000eec:	0013      	movs	r3, r2
 8000eee:	4691      	mov	r9, r2
 8000ef0:	021a      	lsls	r2, r3, #8
 8000ef2:	d454      	bmi.n	8000f9e <__aeabi_dadd+0x4ce>
 8000ef4:	464a      	mov	r2, r9
 8000ef6:	464c      	mov	r4, r9
 8000ef8:	432a      	orrs	r2, r5
 8000efa:	d000      	beq.n	8000efe <__aeabi_dadd+0x42e>
 8000efc:	e640      	b.n	8000b80 <__aeabi_dadd+0xb0>
 8000efe:	2600      	movs	r6, #0
 8000f00:	2400      	movs	r4, #0
 8000f02:	2500      	movs	r5, #0
 8000f04:	e67c      	b.n	8000c00 <__aeabi_dadd+0x130>
 8000f06:	4da1      	ldr	r5, [pc, #644]	@ (800118c <__aeabi_dadd+0x6bc>)
 8000f08:	45a9      	cmp	r9, r5
 8000f0a:	d100      	bne.n	8000f0e <__aeabi_dadd+0x43e>
 8000f0c:	e090      	b.n	8001030 <__aeabi_dadd+0x560>
 8000f0e:	2501      	movs	r5, #1
 8000f10:	2a38      	cmp	r2, #56	@ 0x38
 8000f12:	dd00      	ble.n	8000f16 <__aeabi_dadd+0x446>
 8000f14:	e6ab      	b.n	8000c6e <__aeabi_dadd+0x19e>
 8000f16:	2580      	movs	r5, #128	@ 0x80
 8000f18:	042d      	lsls	r5, r5, #16
 8000f1a:	432c      	orrs	r4, r5
 8000f1c:	e695      	b.n	8000c4a <__aeabi_dadd+0x17a>
 8000f1e:	0011      	movs	r1, r2
 8000f20:	4655      	mov	r5, sl
 8000f22:	3920      	subs	r1, #32
 8000f24:	40cd      	lsrs	r5, r1
 8000f26:	46a9      	mov	r9, r5
 8000f28:	2a20      	cmp	r2, #32
 8000f2a:	d006      	beq.n	8000f3a <__aeabi_dadd+0x46a>
 8000f2c:	2140      	movs	r1, #64	@ 0x40
 8000f2e:	4653      	mov	r3, sl
 8000f30:	1a8a      	subs	r2, r1, r2
 8000f32:	4093      	lsls	r3, r2
 8000f34:	4662      	mov	r2, ip
 8000f36:	431a      	orrs	r2, r3
 8000f38:	4694      	mov	ip, r2
 8000f3a:	4665      	mov	r5, ip
 8000f3c:	1e6b      	subs	r3, r5, #1
 8000f3e:	419d      	sbcs	r5, r3
 8000f40:	464b      	mov	r3, r9
 8000f42:	431d      	orrs	r5, r3
 8000f44:	e612      	b.n	8000b6c <__aeabi_dadd+0x9c>
 8000f46:	0021      	movs	r1, r4
 8000f48:	4301      	orrs	r1, r0
 8000f4a:	d100      	bne.n	8000f4e <__aeabi_dadd+0x47e>
 8000f4c:	e0c4      	b.n	80010d8 <__aeabi_dadd+0x608>
 8000f4e:	1e51      	subs	r1, r2, #1
 8000f50:	2a01      	cmp	r2, #1
 8000f52:	d100      	bne.n	8000f56 <__aeabi_dadd+0x486>
 8000f54:	e0fb      	b.n	800114e <__aeabi_dadd+0x67e>
 8000f56:	4d8d      	ldr	r5, [pc, #564]	@ (800118c <__aeabi_dadd+0x6bc>)
 8000f58:	42aa      	cmp	r2, r5
 8000f5a:	d100      	bne.n	8000f5e <__aeabi_dadd+0x48e>
 8000f5c:	e0b5      	b.n	80010ca <__aeabi_dadd+0x5fa>
 8000f5e:	2501      	movs	r5, #1
 8000f60:	2938      	cmp	r1, #56	@ 0x38
 8000f62:	dd00      	ble.n	8000f66 <__aeabi_dadd+0x496>
 8000f64:	e741      	b.n	8000dea <__aeabi_dadd+0x31a>
 8000f66:	000a      	movs	r2, r1
 8000f68:	e72f      	b.n	8000dca <__aeabi_dadd+0x2fa>
 8000f6a:	4c89      	ldr	r4, [pc, #548]	@ (8001190 <__aeabi_dadd+0x6c0>)
 8000f6c:	1aff      	subs	r7, r7, r3
 8000f6e:	4014      	ands	r4, r2
 8000f70:	0762      	lsls	r2, r4, #29
 8000f72:	08e4      	lsrs	r4, r4, #3
 8000f74:	e76a      	b.n	8000e4c <__aeabi_dadd+0x37c>
 8000f76:	4a85      	ldr	r2, [pc, #532]	@ (800118c <__aeabi_dadd+0x6bc>)
 8000f78:	4291      	cmp	r1, r2
 8000f7a:	d100      	bne.n	8000f7e <__aeabi_dadd+0x4ae>
 8000f7c:	e0e3      	b.n	8001146 <__aeabi_dadd+0x676>
 8000f7e:	4663      	mov	r3, ip
 8000f80:	18c2      	adds	r2, r0, r3
 8000f82:	4282      	cmp	r2, r0
 8000f84:	4180      	sbcs	r0, r0
 8000f86:	0023      	movs	r3, r4
 8000f88:	4240      	negs	r0, r0
 8000f8a:	4453      	add	r3, sl
 8000f8c:	181b      	adds	r3, r3, r0
 8000f8e:	07dd      	lsls	r5, r3, #31
 8000f90:	085c      	lsrs	r4, r3, #1
 8000f92:	2307      	movs	r3, #7
 8000f94:	0852      	lsrs	r2, r2, #1
 8000f96:	4315      	orrs	r5, r2
 8000f98:	000f      	movs	r7, r1
 8000f9a:	402b      	ands	r3, r5
 8000f9c:	e700      	b.n	8000da0 <__aeabi_dadd+0x2d0>
 8000f9e:	4663      	mov	r3, ip
 8000fa0:	1a1d      	subs	r5, r3, r0
 8000fa2:	45ac      	cmp	ip, r5
 8000fa4:	4192      	sbcs	r2, r2
 8000fa6:	4653      	mov	r3, sl
 8000fa8:	4252      	negs	r2, r2
 8000faa:	1b1c      	subs	r4, r3, r4
 8000fac:	000e      	movs	r6, r1
 8000fae:	4688      	mov	r8, r1
 8000fb0:	1aa4      	subs	r4, r4, r2
 8000fb2:	e5e5      	b.n	8000b80 <__aeabi_dadd+0xb0>
 8000fb4:	2d00      	cmp	r5, #0
 8000fb6:	d000      	beq.n	8000fba <__aeabi_dadd+0x4ea>
 8000fb8:	e091      	b.n	80010de <__aeabi_dadd+0x60e>
 8000fba:	2a00      	cmp	r2, #0
 8000fbc:	d138      	bne.n	8001030 <__aeabi_dadd+0x560>
 8000fbe:	2480      	movs	r4, #128	@ 0x80
 8000fc0:	2600      	movs	r6, #0
 8000fc2:	0324      	lsls	r4, r4, #12
 8000fc4:	e756      	b.n	8000e74 <__aeabi_dadd+0x3a4>
 8000fc6:	4663      	mov	r3, ip
 8000fc8:	18c5      	adds	r5, r0, r3
 8000fca:	4285      	cmp	r5, r0
 8000fcc:	4180      	sbcs	r0, r0
 8000fce:	4454      	add	r4, sl
 8000fd0:	4240      	negs	r0, r0
 8000fd2:	1824      	adds	r4, r4, r0
 8000fd4:	2701      	movs	r7, #1
 8000fd6:	0223      	lsls	r3, r4, #8
 8000fd8:	d400      	bmi.n	8000fdc <__aeabi_dadd+0x50c>
 8000fda:	e6df      	b.n	8000d9c <__aeabi_dadd+0x2cc>
 8000fdc:	2702      	movs	r7, #2
 8000fde:	e687      	b.n	8000cf0 <__aeabi_dadd+0x220>
 8000fe0:	4663      	mov	r3, ip
 8000fe2:	1ac5      	subs	r5, r0, r3
 8000fe4:	42a8      	cmp	r0, r5
 8000fe6:	4180      	sbcs	r0, r0
 8000fe8:	4653      	mov	r3, sl
 8000fea:	4240      	negs	r0, r0
 8000fec:	1ae4      	subs	r4, r4, r3
 8000fee:	2701      	movs	r7, #1
 8000ff0:	1a24      	subs	r4, r4, r0
 8000ff2:	e5c0      	b.n	8000b76 <__aeabi_dadd+0xa6>
 8000ff4:	0762      	lsls	r2, r4, #29
 8000ff6:	08c0      	lsrs	r0, r0, #3
 8000ff8:	4302      	orrs	r2, r0
 8000ffa:	08e4      	lsrs	r4, r4, #3
 8000ffc:	e736      	b.n	8000e6c <__aeabi_dadd+0x39c>
 8000ffe:	0011      	movs	r1, r2
 8001000:	4653      	mov	r3, sl
 8001002:	3920      	subs	r1, #32
 8001004:	40cb      	lsrs	r3, r1
 8001006:	4699      	mov	r9, r3
 8001008:	2a20      	cmp	r2, #32
 800100a:	d006      	beq.n	800101a <__aeabi_dadd+0x54a>
 800100c:	2140      	movs	r1, #64	@ 0x40
 800100e:	4653      	mov	r3, sl
 8001010:	1a8a      	subs	r2, r1, r2
 8001012:	4093      	lsls	r3, r2
 8001014:	4662      	mov	r2, ip
 8001016:	431a      	orrs	r2, r3
 8001018:	4694      	mov	ip, r2
 800101a:	4665      	mov	r5, ip
 800101c:	1e6b      	subs	r3, r5, #1
 800101e:	419d      	sbcs	r5, r3
 8001020:	464b      	mov	r3, r9
 8001022:	431d      	orrs	r5, r3
 8001024:	e659      	b.n	8000cda <__aeabi_dadd+0x20a>
 8001026:	0762      	lsls	r2, r4, #29
 8001028:	08c0      	lsrs	r0, r0, #3
 800102a:	4302      	orrs	r2, r0
 800102c:	08e4      	lsrs	r4, r4, #3
 800102e:	e70d      	b.n	8000e4c <__aeabi_dadd+0x37c>
 8001030:	4653      	mov	r3, sl
 8001032:	075a      	lsls	r2, r3, #29
 8001034:	4663      	mov	r3, ip
 8001036:	08d8      	lsrs	r0, r3, #3
 8001038:	4653      	mov	r3, sl
 800103a:	000e      	movs	r6, r1
 800103c:	4302      	orrs	r2, r0
 800103e:	08dc      	lsrs	r4, r3, #3
 8001040:	e714      	b.n	8000e6c <__aeabi_dadd+0x39c>
 8001042:	0015      	movs	r5, r2
 8001044:	0026      	movs	r6, r4
 8001046:	3d20      	subs	r5, #32
 8001048:	40ee      	lsrs	r6, r5
 800104a:	2a20      	cmp	r2, #32
 800104c:	d003      	beq.n	8001056 <__aeabi_dadd+0x586>
 800104e:	2540      	movs	r5, #64	@ 0x40
 8001050:	1aaa      	subs	r2, r5, r2
 8001052:	4094      	lsls	r4, r2
 8001054:	4320      	orrs	r0, r4
 8001056:	1e42      	subs	r2, r0, #1
 8001058:	4190      	sbcs	r0, r2
 800105a:	0005      	movs	r5, r0
 800105c:	4335      	orrs	r5, r6
 800105e:	e606      	b.n	8000c6e <__aeabi_dadd+0x19e>
 8001060:	2a00      	cmp	r2, #0
 8001062:	d07c      	beq.n	800115e <__aeabi_dadd+0x68e>
 8001064:	4662      	mov	r2, ip
 8001066:	4653      	mov	r3, sl
 8001068:	08c0      	lsrs	r0, r0, #3
 800106a:	431a      	orrs	r2, r3
 800106c:	d100      	bne.n	8001070 <__aeabi_dadd+0x5a0>
 800106e:	e6fa      	b.n	8000e66 <__aeabi_dadd+0x396>
 8001070:	0762      	lsls	r2, r4, #29
 8001072:	4310      	orrs	r0, r2
 8001074:	2280      	movs	r2, #128	@ 0x80
 8001076:	08e4      	lsrs	r4, r4, #3
 8001078:	0312      	lsls	r2, r2, #12
 800107a:	4214      	tst	r4, r2
 800107c:	d008      	beq.n	8001090 <__aeabi_dadd+0x5c0>
 800107e:	08d9      	lsrs	r1, r3, #3
 8001080:	4211      	tst	r1, r2
 8001082:	d105      	bne.n	8001090 <__aeabi_dadd+0x5c0>
 8001084:	4663      	mov	r3, ip
 8001086:	08d8      	lsrs	r0, r3, #3
 8001088:	4653      	mov	r3, sl
 800108a:	000c      	movs	r4, r1
 800108c:	075b      	lsls	r3, r3, #29
 800108e:	4318      	orrs	r0, r3
 8001090:	0f42      	lsrs	r2, r0, #29
 8001092:	00c0      	lsls	r0, r0, #3
 8001094:	08c0      	lsrs	r0, r0, #3
 8001096:	0752      	lsls	r2, r2, #29
 8001098:	4302      	orrs	r2, r0
 800109a:	e6e7      	b.n	8000e6c <__aeabi_dadd+0x39c>
 800109c:	2a00      	cmp	r2, #0
 800109e:	d100      	bne.n	80010a2 <__aeabi_dadd+0x5d2>
 80010a0:	e72d      	b.n	8000efe <__aeabi_dadd+0x42e>
 80010a2:	4663      	mov	r3, ip
 80010a4:	08d8      	lsrs	r0, r3, #3
 80010a6:	4653      	mov	r3, sl
 80010a8:	075a      	lsls	r2, r3, #29
 80010aa:	000e      	movs	r6, r1
 80010ac:	4302      	orrs	r2, r0
 80010ae:	08dc      	lsrs	r4, r3, #3
 80010b0:	e6cc      	b.n	8000e4c <__aeabi_dadd+0x37c>
 80010b2:	4663      	mov	r3, ip
 80010b4:	1a1d      	subs	r5, r3, r0
 80010b6:	45ac      	cmp	ip, r5
 80010b8:	4192      	sbcs	r2, r2
 80010ba:	4653      	mov	r3, sl
 80010bc:	4252      	negs	r2, r2
 80010be:	1b1c      	subs	r4, r3, r4
 80010c0:	000e      	movs	r6, r1
 80010c2:	4688      	mov	r8, r1
 80010c4:	1aa4      	subs	r4, r4, r2
 80010c6:	3701      	adds	r7, #1
 80010c8:	e555      	b.n	8000b76 <__aeabi_dadd+0xa6>
 80010ca:	4663      	mov	r3, ip
 80010cc:	08d9      	lsrs	r1, r3, #3
 80010ce:	4653      	mov	r3, sl
 80010d0:	075a      	lsls	r2, r3, #29
 80010d2:	430a      	orrs	r2, r1
 80010d4:	08dc      	lsrs	r4, r3, #3
 80010d6:	e6c9      	b.n	8000e6c <__aeabi_dadd+0x39c>
 80010d8:	4660      	mov	r0, ip
 80010da:	4654      	mov	r4, sl
 80010dc:	e6d4      	b.n	8000e88 <__aeabi_dadd+0x3b8>
 80010de:	08c0      	lsrs	r0, r0, #3
 80010e0:	2a00      	cmp	r2, #0
 80010e2:	d100      	bne.n	80010e6 <__aeabi_dadd+0x616>
 80010e4:	e6bf      	b.n	8000e66 <__aeabi_dadd+0x396>
 80010e6:	0762      	lsls	r2, r4, #29
 80010e8:	4310      	orrs	r0, r2
 80010ea:	2280      	movs	r2, #128	@ 0x80
 80010ec:	08e4      	lsrs	r4, r4, #3
 80010ee:	0312      	lsls	r2, r2, #12
 80010f0:	4214      	tst	r4, r2
 80010f2:	d0cd      	beq.n	8001090 <__aeabi_dadd+0x5c0>
 80010f4:	08dd      	lsrs	r5, r3, #3
 80010f6:	4215      	tst	r5, r2
 80010f8:	d1ca      	bne.n	8001090 <__aeabi_dadd+0x5c0>
 80010fa:	4663      	mov	r3, ip
 80010fc:	08d8      	lsrs	r0, r3, #3
 80010fe:	4653      	mov	r3, sl
 8001100:	075b      	lsls	r3, r3, #29
 8001102:	000e      	movs	r6, r1
 8001104:	002c      	movs	r4, r5
 8001106:	4318      	orrs	r0, r3
 8001108:	e7c2      	b.n	8001090 <__aeabi_dadd+0x5c0>
 800110a:	4663      	mov	r3, ip
 800110c:	08d9      	lsrs	r1, r3, #3
 800110e:	4653      	mov	r3, sl
 8001110:	075a      	lsls	r2, r3, #29
 8001112:	430a      	orrs	r2, r1
 8001114:	08dc      	lsrs	r4, r3, #3
 8001116:	e699      	b.n	8000e4c <__aeabi_dadd+0x37c>
 8001118:	4663      	mov	r3, ip
 800111a:	08d8      	lsrs	r0, r3, #3
 800111c:	4653      	mov	r3, sl
 800111e:	075a      	lsls	r2, r3, #29
 8001120:	000e      	movs	r6, r1
 8001122:	4302      	orrs	r2, r0
 8001124:	08dc      	lsrs	r4, r3, #3
 8001126:	e6a1      	b.n	8000e6c <__aeabi_dadd+0x39c>
 8001128:	0011      	movs	r1, r2
 800112a:	0027      	movs	r7, r4
 800112c:	3920      	subs	r1, #32
 800112e:	40cf      	lsrs	r7, r1
 8001130:	2a20      	cmp	r2, #32
 8001132:	d003      	beq.n	800113c <__aeabi_dadd+0x66c>
 8001134:	2140      	movs	r1, #64	@ 0x40
 8001136:	1a8a      	subs	r2, r1, r2
 8001138:	4094      	lsls	r4, r2
 800113a:	4320      	orrs	r0, r4
 800113c:	1e42      	subs	r2, r0, #1
 800113e:	4190      	sbcs	r0, r2
 8001140:	0005      	movs	r5, r0
 8001142:	433d      	orrs	r5, r7
 8001144:	e651      	b.n	8000dea <__aeabi_dadd+0x31a>
 8001146:	000c      	movs	r4, r1
 8001148:	2500      	movs	r5, #0
 800114a:	2200      	movs	r2, #0
 800114c:	e558      	b.n	8000c00 <__aeabi_dadd+0x130>
 800114e:	4460      	add	r0, ip
 8001150:	4560      	cmp	r0, ip
 8001152:	4192      	sbcs	r2, r2
 8001154:	4454      	add	r4, sl
 8001156:	4252      	negs	r2, r2
 8001158:	0005      	movs	r5, r0
 800115a:	18a4      	adds	r4, r4, r2
 800115c:	e73a      	b.n	8000fd4 <__aeabi_dadd+0x504>
 800115e:	4653      	mov	r3, sl
 8001160:	075a      	lsls	r2, r3, #29
 8001162:	4663      	mov	r3, ip
 8001164:	08d9      	lsrs	r1, r3, #3
 8001166:	4653      	mov	r3, sl
 8001168:	430a      	orrs	r2, r1
 800116a:	08dc      	lsrs	r4, r3, #3
 800116c:	e67e      	b.n	8000e6c <__aeabi_dadd+0x39c>
 800116e:	001a      	movs	r2, r3
 8001170:	001c      	movs	r4, r3
 8001172:	432a      	orrs	r2, r5
 8001174:	d000      	beq.n	8001178 <__aeabi_dadd+0x6a8>
 8001176:	e6ab      	b.n	8000ed0 <__aeabi_dadd+0x400>
 8001178:	e6c1      	b.n	8000efe <__aeabi_dadd+0x42e>
 800117a:	2120      	movs	r1, #32
 800117c:	2500      	movs	r5, #0
 800117e:	1a09      	subs	r1, r1, r0
 8001180:	e519      	b.n	8000bb6 <__aeabi_dadd+0xe6>
 8001182:	2200      	movs	r2, #0
 8001184:	2500      	movs	r5, #0
 8001186:	4c01      	ldr	r4, [pc, #4]	@ (800118c <__aeabi_dadd+0x6bc>)
 8001188:	e53a      	b.n	8000c00 <__aeabi_dadd+0x130>
 800118a:	46c0      	nop			@ (mov r8, r8)
 800118c:	000007ff 	.word	0x000007ff
 8001190:	ff7fffff 	.word	0xff7fffff
 8001194:	000007fe 	.word	0x000007fe

08001198 <__eqdf2>:
 8001198:	b5f0      	push	{r4, r5, r6, r7, lr}
 800119a:	4657      	mov	r7, sl
 800119c:	46de      	mov	lr, fp
 800119e:	464e      	mov	r6, r9
 80011a0:	4645      	mov	r5, r8
 80011a2:	b5e0      	push	{r5, r6, r7, lr}
 80011a4:	000d      	movs	r5, r1
 80011a6:	0004      	movs	r4, r0
 80011a8:	0fe8      	lsrs	r0, r5, #31
 80011aa:	4683      	mov	fp, r0
 80011ac:	0309      	lsls	r1, r1, #12
 80011ae:	0fd8      	lsrs	r0, r3, #31
 80011b0:	0b09      	lsrs	r1, r1, #12
 80011b2:	4682      	mov	sl, r0
 80011b4:	4819      	ldr	r0, [pc, #100]	@ (800121c <__eqdf2+0x84>)
 80011b6:	468c      	mov	ip, r1
 80011b8:	031f      	lsls	r7, r3, #12
 80011ba:	0069      	lsls	r1, r5, #1
 80011bc:	005e      	lsls	r6, r3, #1
 80011be:	0d49      	lsrs	r1, r1, #21
 80011c0:	0b3f      	lsrs	r7, r7, #12
 80011c2:	0d76      	lsrs	r6, r6, #21
 80011c4:	4281      	cmp	r1, r0
 80011c6:	d018      	beq.n	80011fa <__eqdf2+0x62>
 80011c8:	4286      	cmp	r6, r0
 80011ca:	d00f      	beq.n	80011ec <__eqdf2+0x54>
 80011cc:	2001      	movs	r0, #1
 80011ce:	42b1      	cmp	r1, r6
 80011d0:	d10d      	bne.n	80011ee <__eqdf2+0x56>
 80011d2:	45bc      	cmp	ip, r7
 80011d4:	d10b      	bne.n	80011ee <__eqdf2+0x56>
 80011d6:	4294      	cmp	r4, r2
 80011d8:	d109      	bne.n	80011ee <__eqdf2+0x56>
 80011da:	45d3      	cmp	fp, sl
 80011dc:	d01c      	beq.n	8001218 <__eqdf2+0x80>
 80011de:	2900      	cmp	r1, #0
 80011e0:	d105      	bne.n	80011ee <__eqdf2+0x56>
 80011e2:	4660      	mov	r0, ip
 80011e4:	4320      	orrs	r0, r4
 80011e6:	1e43      	subs	r3, r0, #1
 80011e8:	4198      	sbcs	r0, r3
 80011ea:	e000      	b.n	80011ee <__eqdf2+0x56>
 80011ec:	2001      	movs	r0, #1
 80011ee:	bcf0      	pop	{r4, r5, r6, r7}
 80011f0:	46bb      	mov	fp, r7
 80011f2:	46b2      	mov	sl, r6
 80011f4:	46a9      	mov	r9, r5
 80011f6:	46a0      	mov	r8, r4
 80011f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80011fa:	2001      	movs	r0, #1
 80011fc:	428e      	cmp	r6, r1
 80011fe:	d1f6      	bne.n	80011ee <__eqdf2+0x56>
 8001200:	4661      	mov	r1, ip
 8001202:	4339      	orrs	r1, r7
 8001204:	000f      	movs	r7, r1
 8001206:	4317      	orrs	r7, r2
 8001208:	4327      	orrs	r7, r4
 800120a:	d1f0      	bne.n	80011ee <__eqdf2+0x56>
 800120c:	465b      	mov	r3, fp
 800120e:	4652      	mov	r2, sl
 8001210:	1a98      	subs	r0, r3, r2
 8001212:	1e43      	subs	r3, r0, #1
 8001214:	4198      	sbcs	r0, r3
 8001216:	e7ea      	b.n	80011ee <__eqdf2+0x56>
 8001218:	2000      	movs	r0, #0
 800121a:	e7e8      	b.n	80011ee <__eqdf2+0x56>
 800121c:	000007ff 	.word	0x000007ff

08001220 <__gedf2>:
 8001220:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001222:	4657      	mov	r7, sl
 8001224:	464e      	mov	r6, r9
 8001226:	4645      	mov	r5, r8
 8001228:	46de      	mov	lr, fp
 800122a:	b5e0      	push	{r5, r6, r7, lr}
 800122c:	000d      	movs	r5, r1
 800122e:	030f      	lsls	r7, r1, #12
 8001230:	0b39      	lsrs	r1, r7, #12
 8001232:	b083      	sub	sp, #12
 8001234:	0004      	movs	r4, r0
 8001236:	4680      	mov	r8, r0
 8001238:	9101      	str	r1, [sp, #4]
 800123a:	0058      	lsls	r0, r3, #1
 800123c:	0fe9      	lsrs	r1, r5, #31
 800123e:	4f31      	ldr	r7, [pc, #196]	@ (8001304 <__gedf2+0xe4>)
 8001240:	0d40      	lsrs	r0, r0, #21
 8001242:	468c      	mov	ip, r1
 8001244:	006e      	lsls	r6, r5, #1
 8001246:	0319      	lsls	r1, r3, #12
 8001248:	4682      	mov	sl, r0
 800124a:	4691      	mov	r9, r2
 800124c:	0d76      	lsrs	r6, r6, #21
 800124e:	0b09      	lsrs	r1, r1, #12
 8001250:	0fd8      	lsrs	r0, r3, #31
 8001252:	42be      	cmp	r6, r7
 8001254:	d01f      	beq.n	8001296 <__gedf2+0x76>
 8001256:	45ba      	cmp	sl, r7
 8001258:	d00f      	beq.n	800127a <__gedf2+0x5a>
 800125a:	2e00      	cmp	r6, #0
 800125c:	d12f      	bne.n	80012be <__gedf2+0x9e>
 800125e:	4655      	mov	r5, sl
 8001260:	9e01      	ldr	r6, [sp, #4]
 8001262:	4334      	orrs	r4, r6
 8001264:	2d00      	cmp	r5, #0
 8001266:	d127      	bne.n	80012b8 <__gedf2+0x98>
 8001268:	430a      	orrs	r2, r1
 800126a:	d03a      	beq.n	80012e2 <__gedf2+0xc2>
 800126c:	2c00      	cmp	r4, #0
 800126e:	d145      	bne.n	80012fc <__gedf2+0xdc>
 8001270:	2800      	cmp	r0, #0
 8001272:	d11a      	bne.n	80012aa <__gedf2+0x8a>
 8001274:	2001      	movs	r0, #1
 8001276:	4240      	negs	r0, r0
 8001278:	e017      	b.n	80012aa <__gedf2+0x8a>
 800127a:	4311      	orrs	r1, r2
 800127c:	d13b      	bne.n	80012f6 <__gedf2+0xd6>
 800127e:	2e00      	cmp	r6, #0
 8001280:	d102      	bne.n	8001288 <__gedf2+0x68>
 8001282:	9f01      	ldr	r7, [sp, #4]
 8001284:	4327      	orrs	r7, r4
 8001286:	d0f3      	beq.n	8001270 <__gedf2+0x50>
 8001288:	4584      	cmp	ip, r0
 800128a:	d109      	bne.n	80012a0 <__gedf2+0x80>
 800128c:	4663      	mov	r3, ip
 800128e:	2b00      	cmp	r3, #0
 8001290:	d0f0      	beq.n	8001274 <__gedf2+0x54>
 8001292:	4660      	mov	r0, ip
 8001294:	e009      	b.n	80012aa <__gedf2+0x8a>
 8001296:	9f01      	ldr	r7, [sp, #4]
 8001298:	4327      	orrs	r7, r4
 800129a:	d12c      	bne.n	80012f6 <__gedf2+0xd6>
 800129c:	45b2      	cmp	sl, r6
 800129e:	d024      	beq.n	80012ea <__gedf2+0xca>
 80012a0:	4663      	mov	r3, ip
 80012a2:	2002      	movs	r0, #2
 80012a4:	3b01      	subs	r3, #1
 80012a6:	4018      	ands	r0, r3
 80012a8:	3801      	subs	r0, #1
 80012aa:	b003      	add	sp, #12
 80012ac:	bcf0      	pop	{r4, r5, r6, r7}
 80012ae:	46bb      	mov	fp, r7
 80012b0:	46b2      	mov	sl, r6
 80012b2:	46a9      	mov	r9, r5
 80012b4:	46a0      	mov	r8, r4
 80012b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012b8:	2c00      	cmp	r4, #0
 80012ba:	d0d9      	beq.n	8001270 <__gedf2+0x50>
 80012bc:	e7e4      	b.n	8001288 <__gedf2+0x68>
 80012be:	4654      	mov	r4, sl
 80012c0:	2c00      	cmp	r4, #0
 80012c2:	d0ed      	beq.n	80012a0 <__gedf2+0x80>
 80012c4:	4584      	cmp	ip, r0
 80012c6:	d1eb      	bne.n	80012a0 <__gedf2+0x80>
 80012c8:	4556      	cmp	r6, sl
 80012ca:	dce9      	bgt.n	80012a0 <__gedf2+0x80>
 80012cc:	dbde      	blt.n	800128c <__gedf2+0x6c>
 80012ce:	9b01      	ldr	r3, [sp, #4]
 80012d0:	428b      	cmp	r3, r1
 80012d2:	d8e5      	bhi.n	80012a0 <__gedf2+0x80>
 80012d4:	d1da      	bne.n	800128c <__gedf2+0x6c>
 80012d6:	45c8      	cmp	r8, r9
 80012d8:	d8e2      	bhi.n	80012a0 <__gedf2+0x80>
 80012da:	2000      	movs	r0, #0
 80012dc:	45c8      	cmp	r8, r9
 80012de:	d2e4      	bcs.n	80012aa <__gedf2+0x8a>
 80012e0:	e7d4      	b.n	800128c <__gedf2+0x6c>
 80012e2:	2000      	movs	r0, #0
 80012e4:	2c00      	cmp	r4, #0
 80012e6:	d0e0      	beq.n	80012aa <__gedf2+0x8a>
 80012e8:	e7da      	b.n	80012a0 <__gedf2+0x80>
 80012ea:	4311      	orrs	r1, r2
 80012ec:	d103      	bne.n	80012f6 <__gedf2+0xd6>
 80012ee:	4584      	cmp	ip, r0
 80012f0:	d1d6      	bne.n	80012a0 <__gedf2+0x80>
 80012f2:	2000      	movs	r0, #0
 80012f4:	e7d9      	b.n	80012aa <__gedf2+0x8a>
 80012f6:	2002      	movs	r0, #2
 80012f8:	4240      	negs	r0, r0
 80012fa:	e7d6      	b.n	80012aa <__gedf2+0x8a>
 80012fc:	4584      	cmp	ip, r0
 80012fe:	d0e6      	beq.n	80012ce <__gedf2+0xae>
 8001300:	e7ce      	b.n	80012a0 <__gedf2+0x80>
 8001302:	46c0      	nop			@ (mov r8, r8)
 8001304:	000007ff 	.word	0x000007ff

08001308 <__ledf2>:
 8001308:	b5f0      	push	{r4, r5, r6, r7, lr}
 800130a:	4657      	mov	r7, sl
 800130c:	464e      	mov	r6, r9
 800130e:	4645      	mov	r5, r8
 8001310:	46de      	mov	lr, fp
 8001312:	b5e0      	push	{r5, r6, r7, lr}
 8001314:	000d      	movs	r5, r1
 8001316:	030f      	lsls	r7, r1, #12
 8001318:	0004      	movs	r4, r0
 800131a:	4680      	mov	r8, r0
 800131c:	0fe8      	lsrs	r0, r5, #31
 800131e:	0b39      	lsrs	r1, r7, #12
 8001320:	4684      	mov	ip, r0
 8001322:	b083      	sub	sp, #12
 8001324:	0058      	lsls	r0, r3, #1
 8001326:	4f30      	ldr	r7, [pc, #192]	@ (80013e8 <__ledf2+0xe0>)
 8001328:	0d40      	lsrs	r0, r0, #21
 800132a:	9101      	str	r1, [sp, #4]
 800132c:	031e      	lsls	r6, r3, #12
 800132e:	0069      	lsls	r1, r5, #1
 8001330:	4682      	mov	sl, r0
 8001332:	4691      	mov	r9, r2
 8001334:	0d49      	lsrs	r1, r1, #21
 8001336:	0b36      	lsrs	r6, r6, #12
 8001338:	0fd8      	lsrs	r0, r3, #31
 800133a:	42b9      	cmp	r1, r7
 800133c:	d020      	beq.n	8001380 <__ledf2+0x78>
 800133e:	45ba      	cmp	sl, r7
 8001340:	d00f      	beq.n	8001362 <__ledf2+0x5a>
 8001342:	2900      	cmp	r1, #0
 8001344:	d12b      	bne.n	800139e <__ledf2+0x96>
 8001346:	9901      	ldr	r1, [sp, #4]
 8001348:	430c      	orrs	r4, r1
 800134a:	4651      	mov	r1, sl
 800134c:	2900      	cmp	r1, #0
 800134e:	d137      	bne.n	80013c0 <__ledf2+0xb8>
 8001350:	4332      	orrs	r2, r6
 8001352:	d038      	beq.n	80013c6 <__ledf2+0xbe>
 8001354:	2c00      	cmp	r4, #0
 8001356:	d144      	bne.n	80013e2 <__ledf2+0xda>
 8001358:	2800      	cmp	r0, #0
 800135a:	d119      	bne.n	8001390 <__ledf2+0x88>
 800135c:	2001      	movs	r0, #1
 800135e:	4240      	negs	r0, r0
 8001360:	e016      	b.n	8001390 <__ledf2+0x88>
 8001362:	4316      	orrs	r6, r2
 8001364:	d113      	bne.n	800138e <__ledf2+0x86>
 8001366:	2900      	cmp	r1, #0
 8001368:	d102      	bne.n	8001370 <__ledf2+0x68>
 800136a:	9f01      	ldr	r7, [sp, #4]
 800136c:	4327      	orrs	r7, r4
 800136e:	d0f3      	beq.n	8001358 <__ledf2+0x50>
 8001370:	4584      	cmp	ip, r0
 8001372:	d020      	beq.n	80013b6 <__ledf2+0xae>
 8001374:	4663      	mov	r3, ip
 8001376:	2002      	movs	r0, #2
 8001378:	3b01      	subs	r3, #1
 800137a:	4018      	ands	r0, r3
 800137c:	3801      	subs	r0, #1
 800137e:	e007      	b.n	8001390 <__ledf2+0x88>
 8001380:	9f01      	ldr	r7, [sp, #4]
 8001382:	4327      	orrs	r7, r4
 8001384:	d103      	bne.n	800138e <__ledf2+0x86>
 8001386:	458a      	cmp	sl, r1
 8001388:	d1f4      	bne.n	8001374 <__ledf2+0x6c>
 800138a:	4316      	orrs	r6, r2
 800138c:	d01f      	beq.n	80013ce <__ledf2+0xc6>
 800138e:	2002      	movs	r0, #2
 8001390:	b003      	add	sp, #12
 8001392:	bcf0      	pop	{r4, r5, r6, r7}
 8001394:	46bb      	mov	fp, r7
 8001396:	46b2      	mov	sl, r6
 8001398:	46a9      	mov	r9, r5
 800139a:	46a0      	mov	r8, r4
 800139c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800139e:	4654      	mov	r4, sl
 80013a0:	2c00      	cmp	r4, #0
 80013a2:	d0e7      	beq.n	8001374 <__ledf2+0x6c>
 80013a4:	4584      	cmp	ip, r0
 80013a6:	d1e5      	bne.n	8001374 <__ledf2+0x6c>
 80013a8:	4551      	cmp	r1, sl
 80013aa:	dce3      	bgt.n	8001374 <__ledf2+0x6c>
 80013ac:	db03      	blt.n	80013b6 <__ledf2+0xae>
 80013ae:	9b01      	ldr	r3, [sp, #4]
 80013b0:	42b3      	cmp	r3, r6
 80013b2:	d8df      	bhi.n	8001374 <__ledf2+0x6c>
 80013b4:	d00f      	beq.n	80013d6 <__ledf2+0xce>
 80013b6:	4663      	mov	r3, ip
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d0cf      	beq.n	800135c <__ledf2+0x54>
 80013bc:	4660      	mov	r0, ip
 80013be:	e7e7      	b.n	8001390 <__ledf2+0x88>
 80013c0:	2c00      	cmp	r4, #0
 80013c2:	d0c9      	beq.n	8001358 <__ledf2+0x50>
 80013c4:	e7d4      	b.n	8001370 <__ledf2+0x68>
 80013c6:	2000      	movs	r0, #0
 80013c8:	2c00      	cmp	r4, #0
 80013ca:	d0e1      	beq.n	8001390 <__ledf2+0x88>
 80013cc:	e7d2      	b.n	8001374 <__ledf2+0x6c>
 80013ce:	4584      	cmp	ip, r0
 80013d0:	d1d0      	bne.n	8001374 <__ledf2+0x6c>
 80013d2:	2000      	movs	r0, #0
 80013d4:	e7dc      	b.n	8001390 <__ledf2+0x88>
 80013d6:	45c8      	cmp	r8, r9
 80013d8:	d8cc      	bhi.n	8001374 <__ledf2+0x6c>
 80013da:	2000      	movs	r0, #0
 80013dc:	45c8      	cmp	r8, r9
 80013de:	d2d7      	bcs.n	8001390 <__ledf2+0x88>
 80013e0:	e7e9      	b.n	80013b6 <__ledf2+0xae>
 80013e2:	4584      	cmp	ip, r0
 80013e4:	d0e3      	beq.n	80013ae <__ledf2+0xa6>
 80013e6:	e7c5      	b.n	8001374 <__ledf2+0x6c>
 80013e8:	000007ff 	.word	0x000007ff

080013ec <__aeabi_d2iz>:
 80013ec:	000b      	movs	r3, r1
 80013ee:	0002      	movs	r2, r0
 80013f0:	b570      	push	{r4, r5, r6, lr}
 80013f2:	4d16      	ldr	r5, [pc, #88]	@ (800144c <__aeabi_d2iz+0x60>)
 80013f4:	030c      	lsls	r4, r1, #12
 80013f6:	b082      	sub	sp, #8
 80013f8:	0049      	lsls	r1, r1, #1
 80013fa:	2000      	movs	r0, #0
 80013fc:	9200      	str	r2, [sp, #0]
 80013fe:	9301      	str	r3, [sp, #4]
 8001400:	0b24      	lsrs	r4, r4, #12
 8001402:	0d49      	lsrs	r1, r1, #21
 8001404:	0fde      	lsrs	r6, r3, #31
 8001406:	42a9      	cmp	r1, r5
 8001408:	dd04      	ble.n	8001414 <__aeabi_d2iz+0x28>
 800140a:	4811      	ldr	r0, [pc, #68]	@ (8001450 <__aeabi_d2iz+0x64>)
 800140c:	4281      	cmp	r1, r0
 800140e:	dd03      	ble.n	8001418 <__aeabi_d2iz+0x2c>
 8001410:	4b10      	ldr	r3, [pc, #64]	@ (8001454 <__aeabi_d2iz+0x68>)
 8001412:	18f0      	adds	r0, r6, r3
 8001414:	b002      	add	sp, #8
 8001416:	bd70      	pop	{r4, r5, r6, pc}
 8001418:	2080      	movs	r0, #128	@ 0x80
 800141a:	0340      	lsls	r0, r0, #13
 800141c:	4320      	orrs	r0, r4
 800141e:	4c0e      	ldr	r4, [pc, #56]	@ (8001458 <__aeabi_d2iz+0x6c>)
 8001420:	1a64      	subs	r4, r4, r1
 8001422:	2c1f      	cmp	r4, #31
 8001424:	dd08      	ble.n	8001438 <__aeabi_d2iz+0x4c>
 8001426:	4b0d      	ldr	r3, [pc, #52]	@ (800145c <__aeabi_d2iz+0x70>)
 8001428:	1a5b      	subs	r3, r3, r1
 800142a:	40d8      	lsrs	r0, r3
 800142c:	0003      	movs	r3, r0
 800142e:	4258      	negs	r0, r3
 8001430:	2e00      	cmp	r6, #0
 8001432:	d1ef      	bne.n	8001414 <__aeabi_d2iz+0x28>
 8001434:	0018      	movs	r0, r3
 8001436:	e7ed      	b.n	8001414 <__aeabi_d2iz+0x28>
 8001438:	4b09      	ldr	r3, [pc, #36]	@ (8001460 <__aeabi_d2iz+0x74>)
 800143a:	9a00      	ldr	r2, [sp, #0]
 800143c:	469c      	mov	ip, r3
 800143e:	0003      	movs	r3, r0
 8001440:	4461      	add	r1, ip
 8001442:	408b      	lsls	r3, r1
 8001444:	40e2      	lsrs	r2, r4
 8001446:	4313      	orrs	r3, r2
 8001448:	e7f1      	b.n	800142e <__aeabi_d2iz+0x42>
 800144a:	46c0      	nop			@ (mov r8, r8)
 800144c:	000003fe 	.word	0x000003fe
 8001450:	0000041d 	.word	0x0000041d
 8001454:	7fffffff 	.word	0x7fffffff
 8001458:	00000433 	.word	0x00000433
 800145c:	00000413 	.word	0x00000413
 8001460:	fffffbed 	.word	0xfffffbed

08001464 <__aeabi_f2d>:
 8001464:	b570      	push	{r4, r5, r6, lr}
 8001466:	0242      	lsls	r2, r0, #9
 8001468:	0043      	lsls	r3, r0, #1
 800146a:	0fc4      	lsrs	r4, r0, #31
 800146c:	20fe      	movs	r0, #254	@ 0xfe
 800146e:	0e1b      	lsrs	r3, r3, #24
 8001470:	1c59      	adds	r1, r3, #1
 8001472:	0a55      	lsrs	r5, r2, #9
 8001474:	4208      	tst	r0, r1
 8001476:	d00c      	beq.n	8001492 <__aeabi_f2d+0x2e>
 8001478:	21e0      	movs	r1, #224	@ 0xe0
 800147a:	0089      	lsls	r1, r1, #2
 800147c:	468c      	mov	ip, r1
 800147e:	076d      	lsls	r5, r5, #29
 8001480:	0b12      	lsrs	r2, r2, #12
 8001482:	4463      	add	r3, ip
 8001484:	051b      	lsls	r3, r3, #20
 8001486:	4313      	orrs	r3, r2
 8001488:	07e4      	lsls	r4, r4, #31
 800148a:	4323      	orrs	r3, r4
 800148c:	0028      	movs	r0, r5
 800148e:	0019      	movs	r1, r3
 8001490:	bd70      	pop	{r4, r5, r6, pc}
 8001492:	2b00      	cmp	r3, #0
 8001494:	d114      	bne.n	80014c0 <__aeabi_f2d+0x5c>
 8001496:	2d00      	cmp	r5, #0
 8001498:	d01b      	beq.n	80014d2 <__aeabi_f2d+0x6e>
 800149a:	0028      	movs	r0, r5
 800149c:	f000 f82a 	bl	80014f4 <__clzsi2>
 80014a0:	280a      	cmp	r0, #10
 80014a2:	dc1c      	bgt.n	80014de <__aeabi_f2d+0x7a>
 80014a4:	230b      	movs	r3, #11
 80014a6:	002a      	movs	r2, r5
 80014a8:	1a1b      	subs	r3, r3, r0
 80014aa:	40da      	lsrs	r2, r3
 80014ac:	0003      	movs	r3, r0
 80014ae:	3315      	adds	r3, #21
 80014b0:	409d      	lsls	r5, r3
 80014b2:	4b0e      	ldr	r3, [pc, #56]	@ (80014ec <__aeabi_f2d+0x88>)
 80014b4:	0312      	lsls	r2, r2, #12
 80014b6:	1a1b      	subs	r3, r3, r0
 80014b8:	055b      	lsls	r3, r3, #21
 80014ba:	0b12      	lsrs	r2, r2, #12
 80014bc:	0d5b      	lsrs	r3, r3, #21
 80014be:	e7e1      	b.n	8001484 <__aeabi_f2d+0x20>
 80014c0:	2d00      	cmp	r5, #0
 80014c2:	d009      	beq.n	80014d8 <__aeabi_f2d+0x74>
 80014c4:	0b13      	lsrs	r3, r2, #12
 80014c6:	2280      	movs	r2, #128	@ 0x80
 80014c8:	0312      	lsls	r2, r2, #12
 80014ca:	431a      	orrs	r2, r3
 80014cc:	076d      	lsls	r5, r5, #29
 80014ce:	4b08      	ldr	r3, [pc, #32]	@ (80014f0 <__aeabi_f2d+0x8c>)
 80014d0:	e7d8      	b.n	8001484 <__aeabi_f2d+0x20>
 80014d2:	2300      	movs	r3, #0
 80014d4:	2200      	movs	r2, #0
 80014d6:	e7d5      	b.n	8001484 <__aeabi_f2d+0x20>
 80014d8:	2200      	movs	r2, #0
 80014da:	4b05      	ldr	r3, [pc, #20]	@ (80014f0 <__aeabi_f2d+0x8c>)
 80014dc:	e7d2      	b.n	8001484 <__aeabi_f2d+0x20>
 80014de:	0003      	movs	r3, r0
 80014e0:	002a      	movs	r2, r5
 80014e2:	3b0b      	subs	r3, #11
 80014e4:	409a      	lsls	r2, r3
 80014e6:	2500      	movs	r5, #0
 80014e8:	e7e3      	b.n	80014b2 <__aeabi_f2d+0x4e>
 80014ea:	46c0      	nop			@ (mov r8, r8)
 80014ec:	00000389 	.word	0x00000389
 80014f0:	000007ff 	.word	0x000007ff

080014f4 <__clzsi2>:
 80014f4:	211c      	movs	r1, #28
 80014f6:	2301      	movs	r3, #1
 80014f8:	041b      	lsls	r3, r3, #16
 80014fa:	4298      	cmp	r0, r3
 80014fc:	d301      	bcc.n	8001502 <__clzsi2+0xe>
 80014fe:	0c00      	lsrs	r0, r0, #16
 8001500:	3910      	subs	r1, #16
 8001502:	0a1b      	lsrs	r3, r3, #8
 8001504:	4298      	cmp	r0, r3
 8001506:	d301      	bcc.n	800150c <__clzsi2+0x18>
 8001508:	0a00      	lsrs	r0, r0, #8
 800150a:	3908      	subs	r1, #8
 800150c:	091b      	lsrs	r3, r3, #4
 800150e:	4298      	cmp	r0, r3
 8001510:	d301      	bcc.n	8001516 <__clzsi2+0x22>
 8001512:	0900      	lsrs	r0, r0, #4
 8001514:	3904      	subs	r1, #4
 8001516:	a202      	add	r2, pc, #8	@ (adr r2, 8001520 <__clzsi2+0x2c>)
 8001518:	5c10      	ldrb	r0, [r2, r0]
 800151a:	1840      	adds	r0, r0, r1
 800151c:	4770      	bx	lr
 800151e:	46c0      	nop			@ (mov r8, r8)
 8001520:	02020304 	.word	0x02020304
 8001524:	01010101 	.word	0x01010101
	...

08001530 <__clzdi2>:
 8001530:	b510      	push	{r4, lr}
 8001532:	2900      	cmp	r1, #0
 8001534:	d103      	bne.n	800153e <__clzdi2+0xe>
 8001536:	f7ff ffdd 	bl	80014f4 <__clzsi2>
 800153a:	3020      	adds	r0, #32
 800153c:	e002      	b.n	8001544 <__clzdi2+0x14>
 800153e:	0008      	movs	r0, r1
 8001540:	f7ff ffd8 	bl	80014f4 <__clzsi2>
 8001544:	bd10      	pop	{r4, pc}
 8001546:	46c0      	nop			@ (mov r8, r8)

08001548 <MX_LoRaWAN_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void MX_LoRaWAN_Init(void)
{
 8001548:	b510      	push	{r4, lr}
  /* USER CODE BEGIN MX_LoRaWAN_Init_1 */

  /* USER CODE END MX_LoRaWAN_Init_1 */
  SystemApp_Init();
 800154a:	f002 f9bf 	bl	80038cc <SystemApp_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_2 */

  /* USER CODE END MX_LoRaWAN_Init_2 */
  LoRaWAN_Init();
 800154e:	f000 f85d 	bl	800160c <LoRaWAN_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_3 */

  /* USER CODE END MX_LoRaWAN_Init_3 */
}
 8001552:	bd10      	pop	{r4, pc}

08001554 <MX_LoRaWAN_Process>:
void MX_LoRaWAN_Process(void)
{
  /* USER CODE BEGIN MX_LoRaWAN_Process_1 */

  /* USER CODE END MX_LoRaWAN_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8001554:	2001      	movs	r0, #1
{
 8001556:	b510      	push	{r4, lr}
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8001558:	4240      	negs	r0, r0
 800155a:	f00d fe3f 	bl	800f1dc <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_LoRaWAN_Process_2 */

  /* USER CODE END MX_LoRaWAN_Process_2 */
}
 800155e:	bd10      	pop	{r4, pc}

08001560 <OnRxData>:
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

static void OnRxData(LmHandlerAppData_t *appData, LmHandlerRxParams_t *params)
{
 8001560:	b570      	push	{r4, r5, r6, lr}
 8001562:	0004      	movs	r4, r0
 8001564:	000d      	movs	r5, r1
  /* USER CODE BEGIN OnRxData_1 */
  if ((appData != NULL) || (params != NULL))
 8001566:	2800      	cmp	r0, #0
 8001568:	d101      	bne.n	800156e <OnRxData+0xe>
 800156a:	2900      	cmp	r1, #0
 800156c:	d009      	beq.n	8001582 <OnRxData+0x22>
  {
    LED_On(LED_BLUE);
 800156e:	2002      	movs	r0, #2
 8001570:	f002 fcde 	bl	8003f30 <BSP_LED_On>

    UTIL_TIMER_Start(&RxLedTimer);
 8001574:	4803      	ldr	r0, [pc, #12]	@ (8001584 <OnRxData+0x24>)
 8001576:	f00e f929 	bl	800f7cc <UTIL_TIMER_Start>

    AT_event_receive(appData, params);
 800157a:	0029      	movs	r1, r5
 800157c:	0020      	movs	r0, r4
 800157e:	f000 f9a3 	bl	80018c8 <AT_event_receive>
  }
  /* USER CODE END OnRxData_1 */
}
 8001582:	bd70      	pop	{r4, r5, r6, pc}
 8001584:	20000150 	.word	0x20000150

08001588 <OnTxData>:
}

/* USER CODE END PrFD_LedEvents */

static void OnTxData(LmHandlerTxParams_t *params)
{
 8001588:	b510      	push	{r4, lr}
 800158a:	1e04      	subs	r4, r0, #0
  /* USER CODE BEGIN OnTxData_1 */
  if ((params != NULL))
 800158c:	d00b      	beq.n	80015a6 <OnTxData+0x1e>
  {
    /* Process Tx event only if its a mcps response to prevent some internal events (mlme) */
    if (params->IsMcpsConfirm != 0)
 800158e:	7803      	ldrb	r3, [r0, #0]
 8001590:	2b00      	cmp	r3, #0
 8001592:	d005      	beq.n	80015a0 <OnTxData+0x18>
    {
      LED_On(LED_RED2) ;
 8001594:	2003      	movs	r0, #3
 8001596:	f002 fccb 	bl	8003f30 <BSP_LED_On>
      UTIL_TIMER_Start(&TxLedTimer);
 800159a:	4803      	ldr	r0, [pc, #12]	@ (80015a8 <OnTxData+0x20>)
 800159c:	f00e f916 	bl	800f7cc <UTIL_TIMER_Start>
    }
    AT_event_confirm(params);
 80015a0:	0020      	movs	r0, r4
 80015a2:	f000 f9fd 	bl	80019a0 <AT_event_confirm>
  }
  /* USER CODE END OnTxData_1 */
}
 80015a6:	bd10      	pop	{r4, pc}
 80015a8:	20000168 	.word	0x20000168

080015ac <OnRxTimerLedEvent>:
{
 80015ac:	b510      	push	{r4, lr}
  LED_Off(LED_BLUE) ;
 80015ae:	2002      	movs	r0, #2
 80015b0:	f002 fcce 	bl	8003f50 <BSP_LED_Off>
}
 80015b4:	bd10      	pop	{r4, pc}

080015b6 <OnTxTimerLedEvent>:
{
 80015b6:	b510      	push	{r4, lr}
  LED_Off(LED_RED2);
 80015b8:	2003      	movs	r0, #3
 80015ba:	f002 fcc9 	bl	8003f50 <BSP_LED_Off>
}
 80015be:	bd10      	pop	{r4, pc}

080015c0 <OnJoinRequest>:

static void OnJoinRequest(LmHandlerJoinParams_t *joinParams)
{
 80015c0:	b510      	push	{r4, lr}
 80015c2:	1e04      	subs	r4, r0, #0
  /* USER CODE BEGIN OnJoinRequest_1 */
  if (joinParams != NULL)
 80015c4:	d00c      	beq.n	80015e0 <OnJoinRequest+0x20>
  {
    if (joinParams->Status == LORAMAC_HANDLER_SUCCESS)
 80015c6:	2301      	movs	r3, #1
 80015c8:	56c3      	ldrsb	r3, [r0, r3]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d105      	bne.n	80015da <OnJoinRequest+0x1a>
    {
      UTIL_TIMER_Stop(&JoinLedTimer);
 80015ce:	4805      	ldr	r0, [pc, #20]	@ (80015e4 <OnJoinRequest+0x24>)
 80015d0:	f00e f8a8 	bl	800f724 <UTIL_TIMER_Stop>

      LED_Off(LED_RED1) ;
 80015d4:	2001      	movs	r0, #1
 80015d6:	f002 fcbb 	bl	8003f50 <BSP_LED_Off>

    }
    AT_event_join(joinParams);
 80015da:	0020      	movs	r0, r4
 80015dc:	f000 f95e 	bl	800189c <AT_event_join>
  }
  /* USER CODE END OnJoinRequest_1 */
}
 80015e0:	bd10      	pop	{r4, pc}
 80015e2:	46c0      	nop			@ (mov r8, r8)
 80015e4:	20000180 	.word	0x20000180

080015e8 <OnMacProcessNotify>:

  /* USER CODE END CmdProcessNotify_2 */
}

static void OnMacProcessNotify(void)
{
 80015e8:	b510      	push	{r4, lr}
  /* USER CODE BEGIN OnMacProcessNotify_1 */

  /* USER CODE END OnMacProcessNotify_1 */
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LmHandlerProcess), CFG_SEQ_Prio_0);
 80015ea:	2100      	movs	r1, #0
 80015ec:	2002      	movs	r0, #2
 80015ee:	f00d fdb3 	bl	800f158 <UTIL_SEQ_SetTask>

  /* USER CODE BEGIN OnMacProcessNotify_2 */

  /* USER CODE END OnMacProcessNotify_2 */
}
 80015f2:	bd10      	pop	{r4, pc}

080015f4 <CmdProcessNotify>:
{
 80015f4:	b510      	push	{r4, lr}
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_Vcom), 0);
 80015f6:	2100      	movs	r1, #0
 80015f8:	2001      	movs	r0, #1
 80015fa:	f00d fdad 	bl	800f158 <UTIL_SEQ_SetTask>
}
 80015fe:	bd10      	pop	{r4, pc}

08001600 <OnJoinTimerLedEvent>:
{
 8001600:	b510      	push	{r4, lr}
  LED_Toggle(LED_RED1) ;
 8001602:	2001      	movs	r0, #1
 8001604:	f002 fcb4 	bl	8003f70 <BSP_LED_Toggle>
}
 8001608:	bd10      	pop	{r4, pc}
	...

0800160c <LoRaWAN_Init>:
{
 800160c:	b5f0      	push	{r4, r5, r6, r7, lr}
  APP_LOG(TS_OFF, VLEVEL_M, "APP_VERSION:        V%X.%X.%X\r\n",
 800160e:	2400      	movs	r4, #0
 8001610:	2501      	movs	r5, #1
{
 8001612:	b087      	sub	sp, #28
  CMD_Init(CmdProcessNotify);
 8001614:	483d      	ldr	r0, [pc, #244]	@ (800170c <LoRaWAN_Init+0x100>)
 8001616:	f001 f931 	bl	800287c <CMD_Init>
  LED_Init(LED_BLUE);
 800161a:	2002      	movs	r0, #2
 800161c:	f002 fc46 	bl	8003eac <BSP_LED_Init>
  LED_Init(LED_RED1);
 8001620:	2001      	movs	r0, #1
 8001622:	f002 fc43 	bl	8003eac <BSP_LED_Init>
  LED_Init(LED_RED2);
 8001626:	2003      	movs	r0, #3
 8001628:	f002 fc40 	bl	8003eac <BSP_LED_Init>
  APP_LOG(TS_OFF, VLEVEL_M, "APP_VERSION:        V%X.%X.%X\r\n",
 800162c:	0022      	movs	r2, r4
 800162e:	0021      	movs	r1, r4
 8001630:	4b37      	ldr	r3, [pc, #220]	@ (8001710 <LoRaWAN_Init+0x104>)
 8001632:	9402      	str	r4, [sp, #8]
 8001634:	2002      	movs	r0, #2
 8001636:	9501      	str	r5, [sp, #4]
 8001638:	9500      	str	r5, [sp, #0]
 800163a:	f00d fc6b 	bl	800ef14 <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_OFF, VLEVEL_M, "MW_LORAWAN_VERSION: V%X.%X.%X\r\n",
 800163e:	2602      	movs	r6, #2
 8001640:	2203      	movs	r2, #3
 8001642:	0021      	movs	r1, r4
 8001644:	4b33      	ldr	r3, [pc, #204]	@ (8001714 <LoRaWAN_Init+0x108>)
 8001646:	9402      	str	r4, [sp, #8]
 8001648:	9201      	str	r2, [sp, #4]
 800164a:	0030      	movs	r0, r6
 800164c:	0022      	movs	r2, r4
 800164e:	9600      	str	r6, [sp, #0]
 8001650:	f00d fc60 	bl	800ef14 <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_OFF, VLEVEL_M, "MW_RADIO_VERSION:   V%X.%X.%X\r\n",
 8001654:	0022      	movs	r2, r4
 8001656:	0021      	movs	r1, r4
 8001658:	4b2f      	ldr	r3, [pc, #188]	@ (8001718 <LoRaWAN_Init+0x10c>)
 800165a:	9402      	str	r4, [sp, #8]
 800165c:	0030      	movs	r0, r6
 800165e:	9501      	str	r5, [sp, #4]
 8001660:	9500      	str	r5, [sp, #0]
 8001662:	f00d fc57 	bl	800ef14 <UTIL_ADV_TRACE_COND_FSend>
  UTIL_TIMER_Create(&TxLedTimer, 0xFFFFFFFFU, UTIL_TIMER_ONESHOT, OnTxTimerLedEvent, NULL);
 8001666:	2101      	movs	r1, #1
 8001668:	482c      	ldr	r0, [pc, #176]	@ (800171c <LoRaWAN_Init+0x110>)
 800166a:	0022      	movs	r2, r4
 800166c:	4b2c      	ldr	r3, [pc, #176]	@ (8001720 <LoRaWAN_Init+0x114>)
 800166e:	9400      	str	r4, [sp, #0]
 8001670:	4249      	negs	r1, r1
 8001672:	4f2c      	ldr	r7, [pc, #176]	@ (8001724 <LoRaWAN_Init+0x118>)
 8001674:	9005      	str	r0, [sp, #20]
 8001676:	f00d fff7 	bl	800f668 <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&RxLedTimer, 0xFFFFFFFFU, UTIL_TIMER_ONESHOT, OnRxTimerLedEvent, NULL);
 800167a:	2101      	movs	r1, #1
 800167c:	0022      	movs	r2, r4
 800167e:	4b2a      	ldr	r3, [pc, #168]	@ (8001728 <LoRaWAN_Init+0x11c>)
 8001680:	9400      	str	r4, [sp, #0]
 8001682:	4249      	negs	r1, r1
 8001684:	0038      	movs	r0, r7
 8001686:	f00d ffef 	bl	800f668 <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&JoinLedTimer, 0xFFFFFFFFU, UTIL_TIMER_PERIODIC, OnJoinTimerLedEvent, NULL);
 800168a:	2101      	movs	r1, #1
 800168c:	4b27      	ldr	r3, [pc, #156]	@ (800172c <LoRaWAN_Init+0x120>)
 800168e:	002a      	movs	r2, r5
 8001690:	9400      	str	r4, [sp, #0]
 8001692:	4249      	negs	r1, r1
 8001694:	4826      	ldr	r0, [pc, #152]	@ (8001730 <LoRaWAN_Init+0x124>)
 8001696:	f00d ffe7 	bl	800f668 <UTIL_TIMER_Create>
  UTIL_TIMER_SetPeriod(&TxLedTimer, 500);
 800169a:	21fa      	movs	r1, #250	@ 0xfa
 800169c:	9805      	ldr	r0, [sp, #20]
 800169e:	0049      	lsls	r1, r1, #1
 80016a0:	f00e f8d2 	bl	800f848 <UTIL_TIMER_SetPeriod>
  UTIL_TIMER_SetPeriod(&RxLedTimer, 500);
 80016a4:	21fa      	movs	r1, #250	@ 0xfa
 80016a6:	0038      	movs	r0, r7
 80016a8:	0049      	lsls	r1, r1, #1
 80016aa:	f00e f8cd 	bl	800f848 <UTIL_TIMER_SetPeriod>
  UTIL_TIMER_SetPeriod(&JoinLedTimer, 500);
 80016ae:	21fa      	movs	r1, #250	@ 0xfa
 80016b0:	481f      	ldr	r0, [pc, #124]	@ (8001730 <LoRaWAN_Init+0x124>)
 80016b2:	0049      	lsls	r1, r1, #1
 80016b4:	f00e f8c8 	bl	800f848 <UTIL_TIMER_SetPeriod>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LmHandlerProcess), UTIL_SEQ_RFU, LmHandlerProcess);
 80016b8:	0021      	movs	r1, r4
 80016ba:	0030      	movs	r0, r6
 80016bc:	4a1d      	ldr	r2, [pc, #116]	@ (8001734 <LoRaWAN_Init+0x128>)
 80016be:	f00d fe13 	bl	800f2e8 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_Vcom), UTIL_SEQ_RFU, CMD_Process);
 80016c2:	0021      	movs	r1, r4
 80016c4:	4a1c      	ldr	r2, [pc, #112]	@ (8001738 <LoRaWAN_Init+0x12c>)
 80016c6:	0028      	movs	r0, r5
 80016c8:	f00d fe0e 	bl	800f2e8 <UTIL_SEQ_RegTask>
  LoraInfo_Init();
 80016cc:	f001 f9fe 	bl	8002acc <LoraInfo_Init>
  LmHandlerInit(&LmHandlerCallbacks);
 80016d0:	4c1a      	ldr	r4, [pc, #104]	@ (800173c <LoRaWAN_Init+0x130>)
 80016d2:	0020      	movs	r0, r4
 80016d4:	f006 fe2e 	bl	8008334 <LmHandlerInit>
  LmHandlerConfigure(&LmHandlerParams);
 80016d8:	0020      	movs	r0, r4
 80016da:	3034      	adds	r0, #52	@ 0x34
 80016dc:	f006 fad2 	bl	8007c84 <LmHandlerConfigure>
  UTIL_TIMER_Start(&JoinLedTimer);
 80016e0:	4813      	ldr	r0, [pc, #76]	@ (8001730 <LoRaWAN_Init+0x124>)
 80016e2:	f00e f873 	bl	800f7cc <UTIL_TIMER_Start>
  APP_PPRINTF("ATtention command interface\r\n");
 80016e6:	2200      	movs	r2, #0
 80016e8:	4b15      	ldr	r3, [pc, #84]	@ (8001740 <LoRaWAN_Init+0x134>)
 80016ea:	0011      	movs	r1, r2
 80016ec:	0010      	movs	r0, r2
 80016ee:	f00d fc11 	bl	800ef14 <UTIL_ADV_TRACE_COND_FSend>
 80016f2:	2800      	cmp	r0, #0
 80016f4:	d1f7      	bne.n	80016e6 <LoRaWAN_Init+0xda>
  APP_PPRINTF("AT? to list all available functions\r\n");
 80016f6:	2200      	movs	r2, #0
 80016f8:	4b12      	ldr	r3, [pc, #72]	@ (8001744 <LoRaWAN_Init+0x138>)
 80016fa:	0011      	movs	r1, r2
 80016fc:	0010      	movs	r0, r2
 80016fe:	f00d fc09 	bl	800ef14 <UTIL_ADV_TRACE_COND_FSend>
 8001702:	2800      	cmp	r0, #0
 8001704:	d1f7      	bne.n	80016f6 <LoRaWAN_Init+0xea>
}
 8001706:	b007      	add	sp, #28
 8001708:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800170a:	46c0      	nop			@ (mov r8, r8)
 800170c:	080015f5 	.word	0x080015f5
 8001710:	08010964 	.word	0x08010964
 8001714:	08010984 	.word	0x08010984
 8001718:	080109a4 	.word	0x080109a4
 800171c:	20000168 	.word	0x20000168
 8001720:	080015b7 	.word	0x080015b7
 8001724:	20000150 	.word	0x20000150
 8001728:	080015ad 	.word	0x080015ad
 800172c:	08001601 	.word	0x08001601
 8001730:	20000180 	.word	0x20000180
 8001734:	08007e11 	.word	0x08007e11
 8001738:	080028a5 	.word	0x080028a5
 800173c:	20000000 	.word	0x20000000
 8001740:	080109c4 	.word	0x080109c4
 8001744:	080109e2 	.word	0x080109e2

08001748 <print_u>:

  /* USER CODE END print_d_2 */
}

static void print_u(uint32_t value)
{
 8001748:	b507      	push	{r0, r1, r2, lr}
  /* USER CODE BEGIN print_u_1 */

  /* USER CODE END print_u_1 */
  AT_PRINTF("%u\r\n", value);
 800174a:	2200      	movs	r2, #0
 800174c:	9000      	str	r0, [sp, #0]
 800174e:	0011      	movs	r1, r2
 8001750:	0010      	movs	r0, r2
 8001752:	4b02      	ldr	r3, [pc, #8]	@ (800175c <print_u+0x14>)
 8001754:	f00d fbde 	bl	800ef14 <UTIL_ADV_TRACE_COND_FSend>
  /* USER CODE BEGIN print_u_2 */

  /* USER CODE END print_u_2 */
}
 8001758:	bd07      	pop	{r0, r1, r2, pc}
 800175a:	46c0      	nop			@ (mov r8, r8)
 800175c:	08010a08 	.word	0x08010a08

08001760 <print_8_02x>:
{
 8001760:	b500      	push	{lr}
  AT_PRINTF("%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 8001762:	79c2      	ldrb	r2, [r0, #7]
{
 8001764:	b089      	sub	sp, #36	@ 0x24
  AT_PRINTF("%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 8001766:	9207      	str	r2, [sp, #28]
 8001768:	7982      	ldrb	r2, [r0, #6]
 800176a:	4b0a      	ldr	r3, [pc, #40]	@ (8001794 <print_8_02x+0x34>)
 800176c:	9206      	str	r2, [sp, #24]
 800176e:	7942      	ldrb	r2, [r0, #5]
 8001770:	9205      	str	r2, [sp, #20]
 8001772:	7902      	ldrb	r2, [r0, #4]
 8001774:	9204      	str	r2, [sp, #16]
 8001776:	78c2      	ldrb	r2, [r0, #3]
 8001778:	9203      	str	r2, [sp, #12]
 800177a:	7882      	ldrb	r2, [r0, #2]
 800177c:	9202      	str	r2, [sp, #8]
 800177e:	7842      	ldrb	r2, [r0, #1]
 8001780:	9201      	str	r2, [sp, #4]
 8001782:	7802      	ldrb	r2, [r0, #0]
 8001784:	9200      	str	r2, [sp, #0]
 8001786:	2200      	movs	r2, #0
 8001788:	0011      	movs	r1, r2
 800178a:	0010      	movs	r0, r2
 800178c:	f00d fbc2 	bl	800ef14 <UTIL_ADV_TRACE_COND_FSend>
}
 8001790:	b009      	add	sp, #36	@ 0x24
 8001792:	bd00      	pop	{pc}
 8001794:	08012121 	.word	0x08012121

08001798 <print_16_02x>:
{
 8001798:	b500      	push	{lr}
  AT_PRINTF("%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800179a:	7bc2      	ldrb	r2, [r0, #15]
{
 800179c:	b091      	sub	sp, #68	@ 0x44
  AT_PRINTF("%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800179e:	920f      	str	r2, [sp, #60]	@ 0x3c
 80017a0:	7b82      	ldrb	r2, [r0, #14]
 80017a2:	4b12      	ldr	r3, [pc, #72]	@ (80017ec <print_16_02x+0x54>)
 80017a4:	920e      	str	r2, [sp, #56]	@ 0x38
 80017a6:	7b42      	ldrb	r2, [r0, #13]
 80017a8:	920d      	str	r2, [sp, #52]	@ 0x34
 80017aa:	7b02      	ldrb	r2, [r0, #12]
 80017ac:	920c      	str	r2, [sp, #48]	@ 0x30
 80017ae:	7ac2      	ldrb	r2, [r0, #11]
 80017b0:	920b      	str	r2, [sp, #44]	@ 0x2c
 80017b2:	7a82      	ldrb	r2, [r0, #10]
 80017b4:	920a      	str	r2, [sp, #40]	@ 0x28
 80017b6:	7a42      	ldrb	r2, [r0, #9]
 80017b8:	9209      	str	r2, [sp, #36]	@ 0x24
 80017ba:	7a02      	ldrb	r2, [r0, #8]
 80017bc:	9208      	str	r2, [sp, #32]
 80017be:	79c2      	ldrb	r2, [r0, #7]
 80017c0:	9207      	str	r2, [sp, #28]
 80017c2:	7982      	ldrb	r2, [r0, #6]
 80017c4:	9206      	str	r2, [sp, #24]
 80017c6:	7942      	ldrb	r2, [r0, #5]
 80017c8:	9205      	str	r2, [sp, #20]
 80017ca:	7902      	ldrb	r2, [r0, #4]
 80017cc:	9204      	str	r2, [sp, #16]
 80017ce:	78c2      	ldrb	r2, [r0, #3]
 80017d0:	9203      	str	r2, [sp, #12]
 80017d2:	7882      	ldrb	r2, [r0, #2]
 80017d4:	9202      	str	r2, [sp, #8]
 80017d6:	7842      	ldrb	r2, [r0, #1]
 80017d8:	9201      	str	r2, [sp, #4]
 80017da:	7802      	ldrb	r2, [r0, #0]
 80017dc:	9200      	str	r2, [sp, #0]
 80017de:	2200      	movs	r2, #0
 80017e0:	0011      	movs	r1, r2
 80017e2:	0010      	movs	r0, r2
 80017e4:	f00d fb96 	bl	800ef14 <UTIL_ADV_TRACE_COND_FSend>
}
 80017e8:	b011      	add	sp, #68	@ 0x44
 80017ea:	bd00      	pop	{pc}
 80017ec:	08010a0d 	.word	0x08010a0d

080017f0 <print_d>:
{
 80017f0:	b507      	push	{r0, r1, r2, lr}
  AT_PRINTF("%d\r\n", value);
 80017f2:	2200      	movs	r2, #0
 80017f4:	9000      	str	r0, [sp, #0]
 80017f6:	0011      	movs	r1, r2
 80017f8:	0010      	movs	r0, r2
 80017fa:	4b02      	ldr	r3, [pc, #8]	@ (8001804 <print_d+0x14>)
 80017fc:	f00d fb8a 	bl	800ef14 <UTIL_ADV_TRACE_COND_FSend>
}
 8001800:	bd07      	pop	{r0, r1, r2, pc}
 8001802:	46c0      	nop			@ (mov r8, r8)
 8001804:	08011fc6 	.word	0x08011fc6

08001808 <sscanf_16_hhx>:
{
 8001808:	000a      	movs	r2, r1
 800180a:	b510      	push	{r4, lr}
  return tiny_sscanf(from, "%hhx:%hhx:%hhx:%hhx:%hhx:%hhx:%hhx:%hhx:%hhx:%hhx:%hhx:%hhx:%hhx:%hhx:%hhx:%hhx",
 800180c:	0014      	movs	r4, r2
{
 800180e:	b08e      	sub	sp, #56	@ 0x38
  return tiny_sscanf(from, "%hhx:%hhx:%hhx:%hhx:%hhx:%hhx:%hhx:%hhx:%hhx:%hhx:%hhx:%hhx:%hhx:%hhx:%hhx:%hhx",
 8001810:	340f      	adds	r4, #15
 8001812:	940d      	str	r4, [sp, #52]	@ 0x34
 8001814:	3c01      	subs	r4, #1
 8001816:	940c      	str	r4, [sp, #48]	@ 0x30
 8001818:	3c01      	subs	r4, #1
 800181a:	940b      	str	r4, [sp, #44]	@ 0x2c
 800181c:	3c01      	subs	r4, #1
 800181e:	940a      	str	r4, [sp, #40]	@ 0x28
 8001820:	3c01      	subs	r4, #1
 8001822:	9409      	str	r4, [sp, #36]	@ 0x24
 8001824:	3c01      	subs	r4, #1
 8001826:	9408      	str	r4, [sp, #32]
 8001828:	3c01      	subs	r4, #1
 800182a:	9407      	str	r4, [sp, #28]
 800182c:	3c01      	subs	r4, #1
 800182e:	9406      	str	r4, [sp, #24]
 8001830:	1dd4      	adds	r4, r2, #7
 8001832:	9405      	str	r4, [sp, #20]
 8001834:	1d94      	adds	r4, r2, #6
 8001836:	9404      	str	r4, [sp, #16]
 8001838:	1d54      	adds	r4, r2, #5
 800183a:	9403      	str	r4, [sp, #12]
 800183c:	1d14      	adds	r4, r2, #4
 800183e:	9402      	str	r4, [sp, #8]
 8001840:	1cd4      	adds	r4, r2, #3
 8001842:	9401      	str	r4, [sp, #4]
 8001844:	1c94      	adds	r4, r2, #2
 8001846:	1c4b      	adds	r3, r1, #1
 8001848:	9400      	str	r4, [sp, #0]
 800184a:	4902      	ldr	r1, [pc, #8]	@ (8001854 <sscanf_16_hhx+0x4c>)
 800184c:	f00e f97c 	bl	800fb48 <tiny_sscanf>
}
 8001850:	b00e      	add	sp, #56	@ 0x38
 8001852:	bd10      	pop	{r4, pc}
 8001854:	08010a5f 	.word	0x08010a5f

08001858 <CertifSend>:
static void CertifSend(void)
{
  /* USER CODE BEGIN CertifSend_1 */

  /* USER CODE END CertifSend_1 */
  AppData.Buffer[0] = 0x43;
 8001858:	2243      	movs	r2, #67	@ 0x43
{
 800185a:	b510      	push	{r4, lr}
  AppData.Buffer[0] = 0x43;
 800185c:	4c09      	ldr	r4, [pc, #36]	@ (8001884 <CertifSend+0x2c>)
 800185e:	6863      	ldr	r3, [r4, #4]
 8001860:	701a      	strb	r2, [r3, #0]
  AppData.BufferSize = 1;
  AppData.Port = 99;
 8001862:	2364      	movs	r3, #100	@ 0x64
 8001864:	33ff      	adds	r3, #255	@ 0xff
 8001866:	8023      	strh	r3, [r4, #0]

  /* Restart Tx to prevent a previous Join Failed */
  if (LmHandlerJoinStatus() != LORAMAC_HANDLER_SET)
 8001868:	f006 faf0 	bl	8007e4c <LmHandlerJoinStatus>
 800186c:	2801      	cmp	r0, #1
 800186e:	d002      	beq.n	8001876 <CertifSend+0x1e>
  {
    UTIL_TIMER_Start(&TxCertifTimer);
 8001870:	4805      	ldr	r0, [pc, #20]	@ (8001888 <CertifSend+0x30>)
 8001872:	f00d ffab 	bl	800f7cc <UTIL_TIMER_Start>
  }
  LmHandlerSend(&AppData, LORAMAC_HANDLER_UNCONFIRMED_MSG, NULL, false);
 8001876:	2300      	movs	r3, #0
 8001878:	0020      	movs	r0, r4
 800187a:	001a      	movs	r2, r3
 800187c:	0019      	movs	r1, r3
 800187e:	f006 fb99 	bl	8007fb4 <LmHandlerSend>
}
 8001882:	bd10      	pop	{r4, pc}
 8001884:	20000044 	.word	0x20000044
 8001888:	20000198 	.word	0x20000198

0800188c <OnCertifTimer>:
{
 800188c:	b510      	push	{r4, lr}
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaCertifTx), CFG_SEQ_Prio_0);
 800188e:	2100      	movs	r1, #0
 8001890:	2004      	movs	r0, #4
 8001892:	f00d fc61 	bl	800f158 <UTIL_SEQ_SetTask>
}
 8001896:	bd10      	pop	{r4, pc}

08001898 <AT_return_error>:
}
 8001898:	2001      	movs	r0, #1
 800189a:	4770      	bx	lr

0800189c <AT_event_join>:
{
 800189c:	b510      	push	{r4, lr}
  if ((params != NULL) && (params->Status == LORAMAC_HANDLER_SUCCESS))
 800189e:	2800      	cmp	r0, #0
 80018a0:	d009      	beq.n	80018b6 <AT_event_join+0x1a>
 80018a2:	7840      	ldrb	r0, [r0, #1]
 80018a4:	b240      	sxtb	r0, r0
 80018a6:	2800      	cmp	r0, #0
 80018a8:	d105      	bne.n	80018b6 <AT_event_join+0x1a>
    AT_PRINTF("+EVT:JOINED\r\n");
 80018aa:	0002      	movs	r2, r0
 80018ac:	0001      	movs	r1, r0
 80018ae:	4b04      	ldr	r3, [pc, #16]	@ (80018c0 <AT_event_join+0x24>)
    AT_PRINTF("+EVT:JOIN FAILED\r\n");
 80018b0:	f00d fb30 	bl	800ef14 <UTIL_ADV_TRACE_COND_FSend>
}
 80018b4:	bd10      	pop	{r4, pc}
    AT_PRINTF("+EVT:JOIN FAILED\r\n");
 80018b6:	2200      	movs	r2, #0
 80018b8:	4b02      	ldr	r3, [pc, #8]	@ (80018c4 <AT_event_join+0x28>)
 80018ba:	0011      	movs	r1, r2
 80018bc:	0010      	movs	r0, r2
 80018be:	e7f7      	b.n	80018b0 <AT_event_join+0x14>
 80018c0:	08010aaf 	.word	0x08010aaf
 80018c4:	08010abd 	.word	0x08010abd

080018c8 <AT_event_receive>:
{
 80018c8:	b5f0      	push	{r4, r5, r6, r7, lr}
  const char *slotStrings[] = { "1", "2", "C", "C Multicast", "B Ping-Slot", "B Multicast Ping-Slot" };
 80018ca:	4b2e      	ldr	r3, [pc, #184]	@ (8001984 <AT_event_receive+0xbc>)
{
 80018cc:	b08d      	sub	sp, #52	@ 0x34
  const char *slotStrings[] = { "1", "2", "C", "C Multicast", "B Ping-Slot", "B Multicast Ping-Slot" };
 80018ce:	aa06      	add	r2, sp, #24
{
 80018d0:	0005      	movs	r5, r0
 80018d2:	000c      	movs	r4, r1
  const char *slotStrings[] = { "1", "2", "C", "C Multicast", "B Ping-Slot", "B Multicast Ping-Slot" };
 80018d4:	cb43      	ldmia	r3!, {r0, r1, r6}
 80018d6:	c243      	stmia	r2!, {r0, r1, r6}
 80018d8:	cb43      	ldmia	r3!, {r0, r1, r6}
 80018da:	c243      	stmia	r2!, {r0, r1, r6}
  if ((appData != NULL) && (appData->BufferSize > 0))
 80018dc:	2d00      	cmp	r5, #0
 80018de:	d025      	beq.n	800192c <AT_event_receive+0x64>
 80018e0:	786b      	ldrb	r3, [r5, #1]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d022      	beq.n	800192c <AT_event_receive+0x64>
    if (LORAWAN_APP_DATA_BUFFER_MAX_SIZE <= appData->BufferSize)
 80018e6:	1c1e      	adds	r6, r3, #0
 80018e8:	2bf2      	cmp	r3, #242	@ 0xf2
 80018ea:	d901      	bls.n	80018f0 <AT_event_receive+0x28>
 80018ec:	4b26      	ldr	r3, [pc, #152]	@ (8001988 <AT_event_receive+0xc0>)
 80018ee:	781e      	ldrb	r6, [r3, #0]
 80018f0:	b2f6      	uxtb	r6, r6
    AT_PRINTF("+EVT:%d:%02X:", appData->Port, ReceivedDataSize);
 80018f2:	9601      	str	r6, [sp, #4]
 80018f4:	782a      	ldrb	r2, [r5, #0]
 80018f6:	4b25      	ldr	r3, [pc, #148]	@ (800198c <AT_event_receive+0xc4>)
 80018f8:	9200      	str	r2, [sp, #0]
 80018fa:	2200      	movs	r2, #0
 80018fc:	0011      	movs	r1, r2
 80018fe:	0010      	movs	r0, r2
 8001900:	f00d fb08 	bl	800ef14 <UTIL_ADV_TRACE_COND_FSend>
 8001904:	2700      	movs	r7, #0
      AT_PRINTF("%02x", appData->Buffer[i]);
 8001906:	686a      	ldr	r2, [r5, #4]
 8001908:	4b21      	ldr	r3, [pc, #132]	@ (8001990 <AT_event_receive+0xc8>)
 800190a:	5dd2      	ldrb	r2, [r2, r7]
    for (uint8_t i = 0; i < ReceivedDataSize; i++)
 800190c:	3701      	adds	r7, #1
      AT_PRINTF("%02x", appData->Buffer[i]);
 800190e:	9200      	str	r2, [sp, #0]
 8001910:	2200      	movs	r2, #0
 8001912:	0011      	movs	r1, r2
 8001914:	0010      	movs	r0, r2
 8001916:	f00d fafd 	bl	800ef14 <UTIL_ADV_TRACE_COND_FSend>
    for (uint8_t i = 0; i < ReceivedDataSize; i++)
 800191a:	b2fb      	uxtb	r3, r7
 800191c:	429e      	cmp	r6, r3
 800191e:	d8f2      	bhi.n	8001906 <AT_event_receive+0x3e>
    AT_PRINTF("\r\n");
 8001920:	2200      	movs	r2, #0
 8001922:	4b1c      	ldr	r3, [pc, #112]	@ (8001994 <AT_event_receive+0xcc>)
 8001924:	0011      	movs	r1, r2
 8001926:	0010      	movs	r0, r2
 8001928:	f00d faf4 	bl	800ef14 <UTIL_ADV_TRACE_COND_FSend>
  if (params != NULL)
 800192c:	2c00      	cmp	r4, #0
 800192e:	d01d      	beq.n	800196c <AT_event_receive+0xa4>
      AT_PRINTF("+EVT:RX_%s, DR %d, RSSI %d, SNR %d, DMODM %d, GWN %d\r\n", slotStrings[params->RxSlot], params->Datarate,
 8001930:	2118      	movs	r1, #24
 8001932:	466a      	mov	r2, sp
 8001934:	230c      	movs	r3, #12
 8001936:	1852      	adds	r2, r2, r1
 8001938:	2503      	movs	r5, #3
 800193a:	2102      	movs	r1, #2
 800193c:	2604      	movs	r6, #4
 800193e:	56e3      	ldrsb	r3, [r4, r3]
    if (params->LinkCheck == true)
 8001940:	7b60      	ldrb	r0, [r4, #13]
      AT_PRINTF("+EVT:RX_%s, DR %d, RSSI %d, SNR %d, DMODM %d, GWN %d\r\n", slotStrings[params->RxSlot], params->Datarate,
 8001942:	009b      	lsls	r3, r3, #2
 8001944:	58d2      	ldr	r2, [r2, r3]
 8001946:	5661      	ldrsb	r1, [r4, r1]
 8001948:	5765      	ldrsb	r5, [r4, r5]
 800194a:	57a6      	ldrsb	r6, [r4, r6]
    if (params->LinkCheck == true)
 800194c:	2800      	cmp	r0, #0
 800194e:	d00f      	beq.n	8001970 <AT_event_receive+0xa8>
      AT_PRINTF("+EVT:RX_%s, DR %d, RSSI %d, SNR %d, DMODM %d, GWN %d\r\n", slotStrings[params->RxSlot], params->Datarate,
 8001950:	7be0      	ldrb	r0, [r4, #15]
 8001952:	4b11      	ldr	r3, [pc, #68]	@ (8001998 <AT_event_receive+0xd0>)
 8001954:	9005      	str	r0, [sp, #20]
 8001956:	7ba0      	ldrb	r0, [r4, #14]
 8001958:	9200      	str	r2, [sp, #0]
 800195a:	2200      	movs	r2, #0
 800195c:	9004      	str	r0, [sp, #16]
 800195e:	9101      	str	r1, [sp, #4]
 8001960:	0010      	movs	r0, r2
 8001962:	0011      	movs	r1, r2
 8001964:	9603      	str	r6, [sp, #12]
 8001966:	9502      	str	r5, [sp, #8]
 8001968:	f00d fad4 	bl	800ef14 <UTIL_ADV_TRACE_COND_FSend>
}
 800196c:	b00d      	add	sp, #52	@ 0x34
 800196e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      AT_PRINTF("+EVT:RX_%s, DR %d, RSSI %d, SNR %d\r\n", slotStrings[params->RxSlot], params->Datarate, params->Rssi,
 8001970:	9101      	str	r1, [sp, #4]
 8001972:	9200      	str	r2, [sp, #0]
 8001974:	0001      	movs	r1, r0
 8001976:	0002      	movs	r2, r0
 8001978:	4b08      	ldr	r3, [pc, #32]	@ (800199c <AT_event_receive+0xd4>)
 800197a:	9603      	str	r6, [sp, #12]
 800197c:	9502      	str	r5, [sp, #8]
 800197e:	f00d fac9 	bl	800ef14 <UTIL_ADV_TRACE_COND_FSend>
}
 8001982:	e7f3      	b.n	800196c <AT_event_receive+0xa4>
 8001984:	0800ff50 	.word	0x0800ff50
 8001988:	08011038 	.word	0x08011038
 800198c:	08010ad0 	.word	0x08010ad0
 8001990:	08010ade 	.word	0x08010ade
 8001994:	08010d47 	.word	0x08010d47
 8001998:	08010ae3 	.word	0x08010ae3
 800199c:	08010b1a 	.word	0x08010b1a

080019a0 <AT_event_confirm>:
{
 80019a0:	b510      	push	{r4, lr}
  if ((params != NULL) && (params->MsgType == LORAMAC_HANDLER_CONFIRMED_MSG) && (params->AckReceived != 0))
 80019a2:	2800      	cmp	r0, #0
 80019a4:	d00b      	beq.n	80019be <AT_event_confirm+0x1e>
 80019a6:	7883      	ldrb	r3, [r0, #2]
 80019a8:	2b01      	cmp	r3, #1
 80019aa:	d108      	bne.n	80019be <AT_event_confirm+0x1e>
 80019ac:	78c3      	ldrb	r3, [r0, #3]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d005      	beq.n	80019be <AT_event_confirm+0x1e>
    AT_PRINTF("+EVT:SEND_CONFIRMED\r\n");
 80019b2:	2200      	movs	r2, #0
 80019b4:	4b02      	ldr	r3, [pc, #8]	@ (80019c0 <AT_event_confirm+0x20>)
 80019b6:	0011      	movs	r1, r2
 80019b8:	0010      	movs	r0, r2
 80019ba:	f00d faab 	bl	800ef14 <UTIL_ADV_TRACE_COND_FSend>
}
 80019be:	bd10      	pop	{r4, pc}
 80019c0:	08010b3f 	.word	0x08010b3f

080019c4 <AT_reset>:
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80019c4:	f3bf 8f4f 	dsb	sy
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019c8:	4b03      	ldr	r3, [pc, #12]	@ (80019d8 <AT_reset+0x14>)
 80019ca:	4a04      	ldr	r2, [pc, #16]	@ (80019dc <AT_reset+0x18>)
 80019cc:	60da      	str	r2, [r3, #12]
 80019ce:	f3bf 8f4f 	dsb	sy
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80019d2:	46c0      	nop			@ (mov r8, r8)
  for(;;)                                                           /* wait until reset */
 80019d4:	e7fd      	b.n	80019d2 <AT_reset+0xe>
 80019d6:	46c0      	nop			@ (mov r8, r8)
 80019d8:	e000ed00 	.word	0xe000ed00
 80019dc:	05fa0004 	.word	0x05fa0004

080019e0 <AT_verbose_get>:
{
 80019e0:	b510      	push	{r4, lr}
  print_u(UTIL_ADV_TRACE_GetVerboseLevel());
 80019e2:	f00d fa4f 	bl	800ee84 <UTIL_ADV_TRACE_GetVerboseLevel>
 80019e6:	f7ff feaf 	bl	8001748 <print_u>
}
 80019ea:	2000      	movs	r0, #0
 80019ec:	bd10      	pop	{r4, pc}
	...

080019f0 <AT_verbose_set>:
{
 80019f0:	b507      	push	{r0, r1, r2, lr}
  if (1 != tiny_sscanf(buf, "%u", &lvl_nb))
 80019f2:	490b      	ldr	r1, [pc, #44]	@ (8001a20 <AT_verbose_set+0x30>)
 80019f4:	aa01      	add	r2, sp, #4
 80019f6:	f00e f8a7 	bl	800fb48 <tiny_sscanf>
    AT_PRINTF("AT+VL: verbose level is not well set\r\n");
 80019fa:	4b0a      	ldr	r3, [pc, #40]	@ (8001a24 <AT_verbose_set+0x34>)
  if (1 != tiny_sscanf(buf, "%u", &lvl_nb))
 80019fc:	2801      	cmp	r0, #1
 80019fe:	d103      	bne.n	8001a08 <AT_verbose_set+0x18>
  if ((lvl_nb > VLEVEL_H) || (lvl_nb < VLEVEL_OFF))
 8001a00:	9801      	ldr	r0, [sp, #4]
 8001a02:	2803      	cmp	r0, #3
 8001a04:	d907      	bls.n	8001a16 <AT_verbose_set+0x26>
    AT_PRINTF("AT+VL: verbose level out of range => 0(VLEVEL_OFF) to 3(VLEVEL_H)\r\n");
 8001a06:	4b08      	ldr	r3, [pc, #32]	@ (8001a28 <AT_verbose_set+0x38>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	0011      	movs	r1, r2
 8001a0c:	0010      	movs	r0, r2
 8001a0e:	f00d fa81 	bl	800ef14 <UTIL_ADV_TRACE_COND_FSend>
    return AT_PARAM_ERROR;
 8001a12:	2002      	movs	r0, #2
}
 8001a14:	bd0e      	pop	{r1, r2, r3, pc}
  UTIL_ADV_TRACE_SetVerboseLevel(lvl_nb);
 8001a16:	b2c0      	uxtb	r0, r0
 8001a18:	f00d fa2e 	bl	800ee78 <UTIL_ADV_TRACE_SetVerboseLevel>
  return AT_OK;
 8001a1c:	2000      	movs	r0, #0
 8001a1e:	e7f9      	b.n	8001a14 <AT_verbose_set+0x24>
 8001a20:	08010f8e 	.word	0x08010f8e
 8001a24:	08010b55 	.word	0x08010b55
 8001a28:	08010b7c 	.word	0x08010b7c

08001a2c <AT_LocalTime_get>:
{
 8001a2c:	b500      	push	{lr}
 8001a2e:	b093      	sub	sp, #76	@ 0x4c
  SysTime_t UnixEpoch = SysTimeGet();
 8001a30:	a807      	add	r0, sp, #28
 8001a32:	f00d fcf1 	bl	800f418 <SysTimeGet>
  UnixEpoch.Seconds += 3600 * 2; /*adding 2 hours*/
 8001a36:	9807      	ldr	r0, [sp, #28]
 8001a38:	4b0e      	ldr	r3, [pc, #56]	@ (8001a74 <AT_LocalTime_get+0x48>)
  SysTimeLocalTime(UnixEpoch.Seconds,  & localtime);
 8001a3a:	a909      	add	r1, sp, #36	@ 0x24
  UnixEpoch.Seconds += 3600 * 2; /*adding 2 hours*/
 8001a3c:	18c0      	adds	r0, r0, r3
  SysTimeLocalTime(UnixEpoch.Seconds,  & localtime);
 8001a3e:	f00d fd6f 	bl	800f520 <SysTimeLocalTime>
  AT_PRINTF("LTIME:%02dh%02dm%02ds on %02d/%02d/%04d\r\n",
 8001a42:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8001a44:	490c      	ldr	r1, [pc, #48]	@ (8001a78 <AT_LocalTime_get+0x4c>)
 8001a46:	4b0d      	ldr	r3, [pc, #52]	@ (8001a7c <AT_LocalTime_get+0x50>)
 8001a48:	1852      	adds	r2, r2, r1
 8001a4a:	9205      	str	r2, [sp, #20]
 8001a4c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8001a4e:	3201      	adds	r2, #1
 8001a50:	9204      	str	r2, [sp, #16]
 8001a52:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8001a54:	9203      	str	r2, [sp, #12]
 8001a56:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8001a58:	9202      	str	r2, [sp, #8]
 8001a5a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8001a5c:	9201      	str	r2, [sp, #4]
 8001a5e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8001a60:	9200      	str	r2, [sp, #0]
 8001a62:	2200      	movs	r2, #0
 8001a64:	0011      	movs	r1, r2
 8001a66:	0010      	movs	r0, r2
 8001a68:	f00d fa54 	bl	800ef14 <UTIL_ADV_TRACE_COND_FSend>
}
 8001a6c:	2000      	movs	r0, #0
 8001a6e:	b013      	add	sp, #76	@ 0x4c
 8001a70:	bd00      	pop	{pc}
 8001a72:	46c0      	nop			@ (mov r8, r8)
 8001a74:	00001c0e 	.word	0x00001c0e
 8001a78:	0000076c 	.word	0x0000076c
 8001a7c:	08010bc0 	.word	0x08010bc0

08001a80 <AT_JoinEUI_get>:
{
 8001a80:	b513      	push	{r0, r1, r4, lr}
  if (LmHandlerGetAppEUI(appEUI) != LORAMAC_HANDLER_SUCCESS)
 8001a82:	4668      	mov	r0, sp
 8001a84:	f006 fcae 	bl	80083e4 <LmHandlerGetAppEUI>
 8001a88:	0004      	movs	r4, r0
    return AT_PARAM_ERROR;
 8001a8a:	2002      	movs	r0, #2
  if (LmHandlerGetAppEUI(appEUI) != LORAMAC_HANDLER_SUCCESS)
 8001a8c:	2c00      	cmp	r4, #0
 8001a8e:	d103      	bne.n	8001a98 <AT_JoinEUI_get+0x18>
  print_8_02x(appEUI);
 8001a90:	4668      	mov	r0, sp
 8001a92:	f7ff fe65 	bl	8001760 <print_8_02x>
  return AT_OK;
 8001a96:	0020      	movs	r0, r4
}
 8001a98:	bd16      	pop	{r1, r2, r4, pc}
	...

08001a9c <AT_JoinEUI_set>:
  if (tiny_sscanf(param, "%hhx:%hhx:%hhx:%hhx:%hhx:%hhx:%hhx:%hhx",
 8001a9c:	231f      	movs	r3, #31
{
 8001a9e:	b500      	push	{lr}
 8001aa0:	b089      	sub	sp, #36	@ 0x24
  if (tiny_sscanf(param, "%hhx:%hhx:%hhx:%hhx:%hhx:%hhx:%hhx:%hhx",
 8001aa2:	446b      	add	r3, sp
 8001aa4:	9305      	str	r3, [sp, #20]
 8001aa6:	231e      	movs	r3, #30
 8001aa8:	446b      	add	r3, sp
 8001aaa:	9304      	str	r3, [sp, #16]
 8001aac:	231d      	movs	r3, #29
 8001aae:	446b      	add	r3, sp
 8001ab0:	9303      	str	r3, [sp, #12]
 8001ab2:	ab07      	add	r3, sp, #28
 8001ab4:	9302      	str	r3, [sp, #8]
 8001ab6:	231b      	movs	r3, #27
 8001ab8:	446b      	add	r3, sp
 8001aba:	9301      	str	r3, [sp, #4]
 8001abc:	231a      	movs	r3, #26
 8001abe:	446b      	add	r3, sp
 8001ac0:	9300      	str	r3, [sp, #0]
 8001ac2:	2319      	movs	r3, #25
 8001ac4:	4908      	ldr	r1, [pc, #32]	@ (8001ae8 <AT_JoinEUI_set+0x4c>)
 8001ac6:	446b      	add	r3, sp
 8001ac8:	aa06      	add	r2, sp, #24
 8001aca:	f00e f83d 	bl	800fb48 <tiny_sscanf>
 8001ace:	0003      	movs	r3, r0
    return AT_PARAM_ERROR;
 8001ad0:	2002      	movs	r0, #2
  if (tiny_sscanf(param, "%hhx:%hhx:%hhx:%hhx:%hhx:%hhx:%hhx:%hhx",
 8001ad2:	2b08      	cmp	r3, #8
 8001ad4:	d105      	bne.n	8001ae2 <AT_JoinEUI_set+0x46>
  if (LORAMAC_HANDLER_SUCCESS != LmHandlerSetAppEUI(JoinEui))
 8001ad6:	a806      	add	r0, sp, #24
 8001ad8:	f006 fc9c 	bl	8008414 <LmHandlerSetAppEUI>
 8001adc:	1e43      	subs	r3, r0, #1
 8001ade:	4198      	sbcs	r0, r3
 8001ae0:	b2c0      	uxtb	r0, r0
}
 8001ae2:	b009      	add	sp, #36	@ 0x24
 8001ae4:	bd00      	pop	{pc}
 8001ae6:	46c0      	nop			@ (mov r8, r8)
 8001ae8:	08010a87 	.word	0x08010a87

08001aec <AT_NwkKey_get>:
{
 8001aec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  if (LORAMAC_HANDLER_SUCCESS != LmHandlerGetNwkKey(nwkKey))
 8001aee:	4668      	mov	r0, sp
 8001af0:	f006 fe30 	bl	8008754 <LmHandlerGetNwkKey>
 8001af4:	0004      	movs	r4, r0
    return AT_ERROR;
 8001af6:	2001      	movs	r0, #1
  if (LORAMAC_HANDLER_SUCCESS != LmHandlerGetNwkKey(nwkKey))
 8001af8:	2c00      	cmp	r4, #0
 8001afa:	d103      	bne.n	8001b04 <AT_NwkKey_get+0x18>
  print_16_02x(nwkKey);
 8001afc:	4668      	mov	r0, sp
 8001afe:	f7ff fe4b 	bl	8001798 <print_16_02x>
  return AT_OK;
 8001b02:	0020      	movs	r0, r4
}
 8001b04:	b004      	add	sp, #16
 8001b06:	bd10      	pop	{r4, pc}

08001b08 <AT_NwkKey_set>:
{
 8001b08:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  if (sscanf_16_hhx(param, nwkKey) != 16)
 8001b0a:	4669      	mov	r1, sp
 8001b0c:	f7ff fe7c 	bl	8001808 <sscanf_16_hhx>
 8001b10:	0003      	movs	r3, r0
    return AT_PARAM_ERROR;
 8001b12:	2002      	movs	r0, #2
  if (sscanf_16_hhx(param, nwkKey) != 16)
 8001b14:	2b10      	cmp	r3, #16
 8001b16:	d105      	bne.n	8001b24 <AT_NwkKey_set+0x1c>
  if (LORAMAC_HANDLER_SUCCESS != LmHandlerSetNwkKey(nwkKey))
 8001b18:	4668      	mov	r0, sp
 8001b1a:	f006 fe2f 	bl	800877c <LmHandlerSetNwkKey>
 8001b1e:	1e43      	subs	r3, r0, #1
 8001b20:	4198      	sbcs	r0, r3
 8001b22:	b2c0      	uxtb	r0, r0
}
 8001b24:	b005      	add	sp, #20
 8001b26:	bd00      	pop	{pc}

08001b28 <AT_AppKey_get>:
{
 8001b28:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  if (LORAMAC_HANDLER_SUCCESS != LmHandlerGetAppKey(appKey))
 8001b2a:	4668      	mov	r0, sp
 8001b2c:	f006 fe3a 	bl	80087a4 <LmHandlerGetAppKey>
 8001b30:	0004      	movs	r4, r0
    return AT_ERROR;
 8001b32:	2001      	movs	r0, #1
  if (LORAMAC_HANDLER_SUCCESS != LmHandlerGetAppKey(appKey))
 8001b34:	2c00      	cmp	r4, #0
 8001b36:	d103      	bne.n	8001b40 <AT_AppKey_get+0x18>
  print_16_02x(appKey);
 8001b38:	4668      	mov	r0, sp
 8001b3a:	f7ff fe2d 	bl	8001798 <print_16_02x>
  return AT_OK;
 8001b3e:	0020      	movs	r0, r4
}
 8001b40:	b004      	add	sp, #16
 8001b42:	bd10      	pop	{r4, pc}

08001b44 <AT_AppKey_set>:
{
 8001b44:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  if (sscanf_16_hhx(param, appKey) != 16)
 8001b46:	4669      	mov	r1, sp
 8001b48:	f7ff fe5e 	bl	8001808 <sscanf_16_hhx>
 8001b4c:	0003      	movs	r3, r0
    return AT_PARAM_ERROR;
 8001b4e:	2002      	movs	r0, #2
  if (sscanf_16_hhx(param, appKey) != 16)
 8001b50:	2b10      	cmp	r3, #16
 8001b52:	d105      	bne.n	8001b60 <AT_AppKey_set+0x1c>
  if (LORAMAC_HANDLER_SUCCESS != LmHandlerSetAppKey(appKey))
 8001b54:	4668      	mov	r0, sp
 8001b56:	f006 fe39 	bl	80087cc <LmHandlerSetAppKey>
 8001b5a:	1e43      	subs	r3, r0, #1
 8001b5c:	4198      	sbcs	r0, r3
 8001b5e:	b2c0      	uxtb	r0, r0
}
 8001b60:	b005      	add	sp, #20
 8001b62:	bd00      	pop	{pc}

08001b64 <AT_NwkSKey_get>:
{
 8001b64:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  if (LORAMAC_HANDLER_SUCCESS != LmHandlerGetNwkSKey(nwkSKey))
 8001b66:	4668      	mov	r0, sp
 8001b68:	f006 fe44 	bl	80087f4 <LmHandlerGetNwkSKey>
 8001b6c:	0004      	movs	r4, r0
    return AT_ERROR;
 8001b6e:	2001      	movs	r0, #1
  if (LORAMAC_HANDLER_SUCCESS != LmHandlerGetNwkSKey(nwkSKey))
 8001b70:	2c00      	cmp	r4, #0
 8001b72:	d103      	bne.n	8001b7c <AT_NwkSKey_get+0x18>
  print_16_02x(nwkSKey);
 8001b74:	4668      	mov	r0, sp
 8001b76:	f7ff fe0f 	bl	8001798 <print_16_02x>
  return AT_OK;
 8001b7a:	0020      	movs	r0, r4
}
 8001b7c:	b004      	add	sp, #16
 8001b7e:	bd10      	pop	{r4, pc}

08001b80 <AT_NwkSKey_set>:
{
 8001b80:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  if (sscanf_16_hhx(param, nwkSKey) != 16)
 8001b82:	4669      	mov	r1, sp
 8001b84:	f7ff fe40 	bl	8001808 <sscanf_16_hhx>
 8001b88:	0003      	movs	r3, r0
    return AT_PARAM_ERROR;
 8001b8a:	2002      	movs	r0, #2
  if (sscanf_16_hhx(param, nwkSKey) != 16)
 8001b8c:	2b10      	cmp	r3, #16
 8001b8e:	d105      	bne.n	8001b9c <AT_NwkSKey_set+0x1c>
  if (LORAMAC_HANDLER_SUCCESS != LmHandlerSetNwkSKey(nwkSKey))
 8001b90:	4668      	mov	r0, sp
 8001b92:	f006 fe43 	bl	800881c <LmHandlerSetNwkSKey>
 8001b96:	1e43      	subs	r3, r0, #1
 8001b98:	4198      	sbcs	r0, r3
 8001b9a:	b2c0      	uxtb	r0, r0
}
 8001b9c:	b005      	add	sp, #20
 8001b9e:	bd00      	pop	{pc}

08001ba0 <AT_AppSKey_get>:
{
 8001ba0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  if (LORAMAC_HANDLER_SUCCESS != LmHandlerGetAppSKey(appSKey))
 8001ba2:	4668      	mov	r0, sp
 8001ba4:	f006 fe4e 	bl	8008844 <LmHandlerGetAppSKey>
 8001ba8:	0004      	movs	r4, r0
    return AT_ERROR;
 8001baa:	2001      	movs	r0, #1
  if (LORAMAC_HANDLER_SUCCESS != LmHandlerGetAppSKey(appSKey))
 8001bac:	2c00      	cmp	r4, #0
 8001bae:	d103      	bne.n	8001bb8 <AT_AppSKey_get+0x18>
  print_16_02x(appSKey);
 8001bb0:	4668      	mov	r0, sp
 8001bb2:	f7ff fdf1 	bl	8001798 <print_16_02x>
  return AT_OK;
 8001bb6:	0020      	movs	r0, r4
}
 8001bb8:	b004      	add	sp, #16
 8001bba:	bd10      	pop	{r4, pc}

08001bbc <AT_AppSKey_set>:
{
 8001bbc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  if (sscanf_16_hhx(param, appSKey) != 16)
 8001bbe:	4669      	mov	r1, sp
 8001bc0:	f7ff fe22 	bl	8001808 <sscanf_16_hhx>
 8001bc4:	0003      	movs	r3, r0
    return AT_PARAM_ERROR;
 8001bc6:	2002      	movs	r0, #2
  if (sscanf_16_hhx(param, appSKey) != 16)
 8001bc8:	2b10      	cmp	r3, #16
 8001bca:	d105      	bne.n	8001bd8 <AT_AppSKey_set+0x1c>
  if (LORAMAC_HANDLER_SUCCESS != LmHandlerSetAppSKey(appSKey))
 8001bcc:	4668      	mov	r0, sp
 8001bce:	f006 fe4d 	bl	800886c <LmHandlerSetAppSKey>
 8001bd2:	1e43      	subs	r3, r0, #1
 8001bd4:	4198      	sbcs	r0, r3
 8001bd6:	b2c0      	uxtb	r0, r0
}
 8001bd8:	b005      	add	sp, #20
 8001bda:	bd00      	pop	{pc}

08001bdc <AT_DevAddr_get>:
{
 8001bdc:	b510      	push	{r4, lr}
 8001bde:	b086      	sub	sp, #24
  if (LmHandlerGetDevAddr(&devAddr) != LORAMAC_HANDLER_SUCCESS)
 8001be0:	a805      	add	r0, sp, #20
 8001be2:	f006 fc53 	bl	800848c <LmHandlerGetDevAddr>
 8001be6:	0004      	movs	r4, r0
    return AT_PARAM_ERROR;
 8001be8:	2002      	movs	r0, #2
  if (LmHandlerGetDevAddr(&devAddr) != LORAMAC_HANDLER_SUCCESS)
 8001bea:	2c00      	cmp	r4, #0
 8001bec:	d111      	bne.n	8001c12 <AT_DevAddr_get+0x36>
  print_uint32_as_02x(devAddr);
 8001bee:	9a05      	ldr	r2, [sp, #20]
  AT_PRINTF("%02X:%02X:%02X:%02X\r\n",
 8001bf0:	0020      	movs	r0, r4
 8001bf2:	b2d1      	uxtb	r1, r2
 8001bf4:	9103      	str	r1, [sp, #12]
 8001bf6:	0411      	lsls	r1, r2, #16
 8001bf8:	0e09      	lsrs	r1, r1, #24
 8001bfa:	9102      	str	r1, [sp, #8]
 8001bfc:	0211      	lsls	r1, r2, #8
 8001bfe:	0e09      	lsrs	r1, r1, #24
 8001c00:	0e12      	lsrs	r2, r2, #24
 8001c02:	9101      	str	r1, [sp, #4]
 8001c04:	9200      	str	r2, [sp, #0]
 8001c06:	0021      	movs	r1, r4
 8001c08:	0022      	movs	r2, r4
 8001c0a:	4b03      	ldr	r3, [pc, #12]	@ (8001c18 <AT_DevAddr_get+0x3c>)
 8001c0c:	f00d f982 	bl	800ef14 <UTIL_ADV_TRACE_COND_FSend>
  return AT_OK;
 8001c10:	0020      	movs	r0, r4
}
 8001c12:	b006      	add	sp, #24
 8001c14:	bd10      	pop	{r4, pc}
 8001c16:	46c0      	nop			@ (mov r8, r8)
 8001c18:	0801215b 	.word	0x0801215b

08001c1c <AT_DevAddr_set>:
{
 8001c1c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return tiny_sscanf(from, "%hhx:%hhx:%hhx:%hhx",
 8001c1e:	ab03      	add	r3, sp, #12
 8001c20:	9301      	str	r3, [sp, #4]
 8001c22:	230d      	movs	r3, #13
 8001c24:	446b      	add	r3, sp
 8001c26:	9300      	str	r3, [sp, #0]
 8001c28:	220f      	movs	r2, #15
 8001c2a:	230e      	movs	r3, #14
 8001c2c:	4908      	ldr	r1, [pc, #32]	@ (8001c50 <AT_DevAddr_set+0x34>)
 8001c2e:	446b      	add	r3, sp
 8001c30:	446a      	add	r2, sp
 8001c32:	f00d ff89 	bl	800fb48 <tiny_sscanf>
 8001c36:	0003      	movs	r3, r0
    return AT_PARAM_ERROR;
 8001c38:	2002      	movs	r0, #2
  if (sscanf_uint32_as_hhx(param, &devAddr) != 4)
 8001c3a:	2b04      	cmp	r3, #4
 8001c3c:	d105      	bne.n	8001c4a <AT_DevAddr_set+0x2e>
  if (LORAMAC_HANDLER_SUCCESS != LmHandlerSetDevAddr(devAddr))
 8001c3e:	9803      	ldr	r0, [sp, #12]
 8001c40:	f006 fc38 	bl	80084b4 <LmHandlerSetDevAddr>
 8001c44:	1e43      	subs	r3, r0, #1
 8001c46:	4198      	sbcs	r0, r3
 8001c48:	b2c0      	uxtb	r0, r0
}
 8001c4a:	b005      	add	sp, #20
 8001c4c:	bd00      	pop	{pc}
 8001c4e:	46c0      	nop			@ (mov r8, r8)
 8001c50:	08010a9b 	.word	0x08010a9b

08001c54 <AT_DevEUI_get>:
{
 8001c54:	b513      	push	{r0, r1, r4, lr}
  if (LmHandlerGetDevEUI(devEUI) != LORAMAC_HANDLER_SUCCESS)
 8001c56:	4668      	mov	r0, sp
 8001c58:	f006 fb98 	bl	800838c <LmHandlerGetDevEUI>
 8001c5c:	0004      	movs	r4, r0
    return AT_PARAM_ERROR;
 8001c5e:	2002      	movs	r0, #2
  if (LmHandlerGetDevEUI(devEUI) != LORAMAC_HANDLER_SUCCESS)
 8001c60:	2c00      	cmp	r4, #0
 8001c62:	d103      	bne.n	8001c6c <AT_DevEUI_get+0x18>
  print_8_02x(devEUI);
 8001c64:	4668      	mov	r0, sp
 8001c66:	f7ff fd7b 	bl	8001760 <print_8_02x>
  return AT_OK;
 8001c6a:	0020      	movs	r0, r4
}
 8001c6c:	bd16      	pop	{r1, r2, r4, pc}
	...

08001c70 <AT_DevEUI_set>:
  if (tiny_sscanf(param, "%hhx:%hhx:%hhx:%hhx:%hhx:%hhx:%hhx:%hhx",
 8001c70:	231f      	movs	r3, #31
{
 8001c72:	b500      	push	{lr}
 8001c74:	b089      	sub	sp, #36	@ 0x24
  if (tiny_sscanf(param, "%hhx:%hhx:%hhx:%hhx:%hhx:%hhx:%hhx:%hhx",
 8001c76:	446b      	add	r3, sp
 8001c78:	9305      	str	r3, [sp, #20]
 8001c7a:	231e      	movs	r3, #30
 8001c7c:	446b      	add	r3, sp
 8001c7e:	9304      	str	r3, [sp, #16]
 8001c80:	231d      	movs	r3, #29
 8001c82:	446b      	add	r3, sp
 8001c84:	9303      	str	r3, [sp, #12]
 8001c86:	ab07      	add	r3, sp, #28
 8001c88:	9302      	str	r3, [sp, #8]
 8001c8a:	231b      	movs	r3, #27
 8001c8c:	446b      	add	r3, sp
 8001c8e:	9301      	str	r3, [sp, #4]
 8001c90:	231a      	movs	r3, #26
 8001c92:	446b      	add	r3, sp
 8001c94:	9300      	str	r3, [sp, #0]
 8001c96:	2319      	movs	r3, #25
 8001c98:	4908      	ldr	r1, [pc, #32]	@ (8001cbc <AT_DevEUI_set+0x4c>)
 8001c9a:	446b      	add	r3, sp
 8001c9c:	aa06      	add	r2, sp, #24
 8001c9e:	f00d ff53 	bl	800fb48 <tiny_sscanf>
 8001ca2:	0003      	movs	r3, r0
    return AT_PARAM_ERROR;
 8001ca4:	2002      	movs	r0, #2
  if (tiny_sscanf(param, "%hhx:%hhx:%hhx:%hhx:%hhx:%hhx:%hhx:%hhx",
 8001ca6:	2b08      	cmp	r3, #8
 8001ca8:	d105      	bne.n	8001cb6 <AT_DevEUI_set+0x46>
  if (LORAMAC_HANDLER_SUCCESS != LmHandlerSetDevEUI(devEui))
 8001caa:	a806      	add	r0, sp, #24
 8001cac:	f006 fb86 	bl	80083bc <LmHandlerSetDevEUI>
 8001cb0:	1e43      	subs	r3, r0, #1
 8001cb2:	4198      	sbcs	r0, r3
 8001cb4:	b2c0      	uxtb	r0, r0
}
 8001cb6:	b009      	add	sp, #36	@ 0x24
 8001cb8:	bd00      	pop	{pc}
 8001cba:	46c0      	nop			@ (mov r8, r8)
 8001cbc:	08010a87 	.word	0x08010a87

08001cc0 <AT_NetworkID_get>:
{
 8001cc0:	b513      	push	{r0, r1, r4, lr}
  if (LmHandlerGetNetworkID(&networkId) != LORAMAC_HANDLER_SUCCESS)
 8001cc2:	a801      	add	r0, sp, #4
 8001cc4:	f006 fbba 	bl	800843c <LmHandlerGetNetworkID>
 8001cc8:	0004      	movs	r4, r0
    return AT_PARAM_ERROR;
 8001cca:	2002      	movs	r0, #2
  if (LmHandlerGetNetworkID(&networkId) != LORAMAC_HANDLER_SUCCESS)
 8001ccc:	2c00      	cmp	r4, #0
 8001cce:	d103      	bne.n	8001cd8 <AT_NetworkID_get+0x18>
  print_d(networkId);
 8001cd0:	9801      	ldr	r0, [sp, #4]
 8001cd2:	f7ff fd8d 	bl	80017f0 <print_d>
  return AT_OK;
 8001cd6:	0020      	movs	r0, r4
}
 8001cd8:	bd16      	pop	{r1, r2, r4, pc}
	...

08001cdc <AT_NetworkID_set>:
{
 8001cdc:	b507      	push	{r0, r1, r2, lr}
  if (tiny_sscanf(param, "%u", &networkId) != 1)
 8001cde:	4907      	ldr	r1, [pc, #28]	@ (8001cfc <AT_NetworkID_set+0x20>)
 8001ce0:	aa01      	add	r2, sp, #4
 8001ce2:	f00d ff31 	bl	800fb48 <tiny_sscanf>
    return AT_PARAM_ERROR;
 8001ce6:	2302      	movs	r3, #2
  if (tiny_sscanf(param, "%u", &networkId) != 1)
 8001ce8:	2801      	cmp	r0, #1
 8001cea:	d105      	bne.n	8001cf8 <AT_NetworkID_set+0x1c>
  if (networkId > 127)
 8001cec:	9801      	ldr	r0, [sp, #4]
 8001cee:	287f      	cmp	r0, #127	@ 0x7f
 8001cf0:	d802      	bhi.n	8001cf8 <AT_NetworkID_set+0x1c>
  LmHandlerSetNetworkID(networkId);
 8001cf2:	f006 fbb7 	bl	8008464 <LmHandlerSetNetworkID>
  return AT_OK;
 8001cf6:	2300      	movs	r3, #0
}
 8001cf8:	0018      	movs	r0, r3
 8001cfa:	bd0e      	pop	{r1, r2, r3, pc}
 8001cfc:	08010f8e 	.word	0x08010f8e

08001d00 <AT_Join>:
{
 8001d00:	b510      	push	{r4, lr}
  switch (param[0])
 8001d02:	7803      	ldrb	r3, [r0, #0]
 8001d04:	2b30      	cmp	r3, #48	@ 0x30
 8001d06:	d003      	beq.n	8001d10 <AT_Join+0x10>
 8001d08:	2002      	movs	r0, #2
 8001d0a:	2b31      	cmp	r3, #49	@ 0x31
 8001d0c:	d001      	beq.n	8001d12 <AT_Join+0x12>
}
 8001d0e:	bd10      	pop	{r4, pc}
      LmHandlerJoin(ACTIVATION_TYPE_ABP);
 8001d10:	2001      	movs	r0, #1
 8001d12:	f006 f90f 	bl	8007f34 <LmHandlerJoin>
  return AT_OK;
 8001d16:	2000      	movs	r0, #0
 8001d18:	e7f9      	b.n	8001d0e <AT_Join+0xe>

08001d1a <AT_Link_Check>:
{
 8001d1a:	b510      	push	{r4, lr}
  if (LmHandlerLinkCheckReq() != LORAMAC_HANDLER_SUCCESS)
 8001d1c:	f006 f8a9 	bl	8007e72 <LmHandlerLinkCheckReq>
 8001d20:	1e43      	subs	r3, r0, #1
 8001d22:	4198      	sbcs	r0, r3
}
 8001d24:	0040      	lsls	r0, r0, #1
 8001d26:	bd10      	pop	{r4, pc}

08001d28 <AT_Send>:
{
 8001d28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d2a:	b085      	sub	sp, #20
 8001d2c:	0005      	movs	r5, r0
  uint16_t bufSize = strlen(param);
 8001d2e:	f7fe f9eb 	bl	8000108 <strlen>
  UTIL_TIMER_Time_t nextTxIn = 0;
 8001d32:	2600      	movs	r6, #0
  char hex[3] = {0, 0, 0};
 8001d34:	2203      	movs	r2, #3
 8001d36:	493e      	ldr	r1, [pc, #248]	@ (8001e30 <AT_Send+0x108>)
  uint16_t bufSize = strlen(param);
 8001d38:	b284      	uxth	r4, r0
  char hex[3] = {0, 0, 0};
 8001d3a:	a801      	add	r0, sp, #4
 8001d3c:	f00e f876 	bl	800fe2c <memcpy>
  if (1 != tiny_sscanf(buf, "%u:", &appPort))
 8001d40:	0028      	movs	r0, r5
 8001d42:	493c      	ldr	r1, [pc, #240]	@ (8001e34 <AT_Send+0x10c>)
 8001d44:	aa02      	add	r2, sp, #8
  UTIL_TIMER_Time_t nextTxIn = 0;
 8001d46:	9603      	str	r6, [sp, #12]
  if (1 != tiny_sscanf(buf, "%u:", &appPort))
 8001d48:	f00d fefe 	bl	800fb48 <tiny_sscanf>
 8001d4c:	2801      	cmp	r0, #1
 8001d4e:	d00d      	beq.n	8001d6c <AT_Send+0x44>
    AT_PRINTF("AT+SEND without the application port\r\n");
 8001d50:	0032      	movs	r2, r6
 8001d52:	0031      	movs	r1, r6
 8001d54:	0030      	movs	r0, r6
 8001d56:	4b38      	ldr	r3, [pc, #224]	@ (8001e38 <AT_Send+0x110>)
    AT_PRINTF("AT+SEND missing : character after app port\r\n");
 8001d58:	f00d f8dc 	bl	800ef14 <UTIL_ADV_TRACE_COND_FSend>
    return AT_PARAM_ERROR;
 8001d5c:	2002      	movs	r0, #2
}
 8001d5e:	b005      	add	sp, #20
 8001d60:	bdf0      	pop	{r4, r5, r6, r7, pc}
  while (('0' <= buf[0]) && (buf[0] <= '9') && bufSize > 1)
 8001d62:	2c01      	cmp	r4, #1
 8001d64:	d909      	bls.n	8001d7a <AT_Send+0x52>
    bufSize --;
 8001d66:	3c01      	subs	r4, #1
    buf ++;
 8001d68:	3501      	adds	r5, #1
    bufSize --;
 8001d6a:	b2a4      	uxth	r4, r4
  while (('0' <= buf[0]) && (buf[0] <= '9') && bufSize > 1)
 8001d6c:	782b      	ldrb	r3, [r5, #0]
 8001d6e:	001a      	movs	r2, r3
 8001d70:	3a30      	subs	r2, #48	@ 0x30
 8001d72:	2a09      	cmp	r2, #9
 8001d74:	d9f5      	bls.n	8001d62 <AT_Send+0x3a>
  if ((bufSize == 0) || (':' != buf[0]))
 8001d76:	2c00      	cmp	r4, #0
 8001d78:	d104      	bne.n	8001d84 <AT_Send+0x5c>
    AT_PRINTF("AT+SEND missing : character after app port\r\n");
 8001d7a:	4b30      	ldr	r3, [pc, #192]	@ (8001e3c <AT_Send+0x114>)
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	0011      	movs	r1, r2
 8001d80:	0010      	movs	r0, r2
 8001d82:	e7e9      	b.n	8001d58 <AT_Send+0x30>
  if ((bufSize == 0) || (':' != buf[0]))
 8001d84:	2b3a      	cmp	r3, #58	@ 0x3a
 8001d86:	d1f8      	bne.n	8001d7a <AT_Send+0x52>
  switch (buf[0])
 8001d88:	786b      	ldrb	r3, [r5, #1]
 8001d8a:	2b30      	cmp	r3, #48	@ 0x30
 8001d8c:	d003      	beq.n	8001d96 <AT_Send+0x6e>
 8001d8e:	2b31      	cmp	r3, #49	@ 0x31
 8001d90:	d00a      	beq.n	8001da8 <AT_Send+0x80>
      AT_PRINTF("AT+SEND without the acknowledge flag\r\n");
 8001d92:	4b2b      	ldr	r3, [pc, #172]	@ (8001e40 <AT_Send+0x118>)
 8001d94:	e7f2      	b.n	8001d7c <AT_Send+0x54>
      isTxConfirmed = LORAMAC_HANDLER_UNCONFIRMED_MSG;
 8001d96:	2600      	movs	r6, #0
  if (bufSize > 0)
 8001d98:	1e63      	subs	r3, r4, #1
 8001d9a:	2b01      	cmp	r3, #1
 8001d9c:	d902      	bls.n	8001da4 <AT_Send+0x7c>
  if ((bufSize == 0) || (':' != buf[0]))
 8001d9e:	78ab      	ldrb	r3, [r5, #2]
 8001da0:	2b3a      	cmp	r3, #58	@ 0x3a
 8001da2:	d003      	beq.n	8001dac <AT_Send+0x84>
    AT_PRINTF("AT+SEND missing : character after ack flag\r\n");
 8001da4:	4b27      	ldr	r3, [pc, #156]	@ (8001e44 <AT_Send+0x11c>)
 8001da6:	e7e9      	b.n	8001d7c <AT_Send+0x54>
  switch (buf[0])
 8001da8:	2601      	movs	r6, #1
 8001daa:	e7f5      	b.n	8001d98 <AT_Send+0x70>
  unsigned size = 0;
 8001dac:	2700      	movs	r7, #0
    bufSize --;
 8001dae:	3c03      	subs	r4, #3
    buf ++;
 8001db0:	3503      	adds	r5, #3
    bufSize --;
 8001db2:	b2a4      	uxth	r4, r4
  while ((size < LORAWAN_APP_DATA_BUFFER_MAX_SIZE) && (bufSize > 1))
 8001db4:	2c01      	cmp	r4, #1
 8001db6:	d914      	bls.n	8001de2 <AT_Send+0xba>
    hex[0] = buf[size * 2];
 8001db8:	466a      	mov	r2, sp
 8001dba:	782b      	ldrb	r3, [r5, #0]
    if (tiny_sscanf(hex, "%hhx", &AppData.Buffer[size]) != 1)
 8001dbc:	4922      	ldr	r1, [pc, #136]	@ (8001e48 <AT_Send+0x120>)
    hex[0] = buf[size * 2];
 8001dbe:	7113      	strb	r3, [r2, #4]
    hex[1] = buf[size * 2 + 1];
 8001dc0:	786b      	ldrb	r3, [r5, #1]
    if (tiny_sscanf(hex, "%hhx", &AppData.Buffer[size]) != 1)
 8001dc2:	a801      	add	r0, sp, #4
    hex[1] = buf[size * 2 + 1];
 8001dc4:	7153      	strb	r3, [r2, #5]
    if (tiny_sscanf(hex, "%hhx", &AppData.Buffer[size]) != 1)
 8001dc6:	4b21      	ldr	r3, [pc, #132]	@ (8001e4c <AT_Send+0x124>)
 8001dc8:	685a      	ldr	r2, [r3, #4]
 8001dca:	19d2      	adds	r2, r2, r7
 8001dcc:	f00d febc 	bl	800fb48 <tiny_sscanf>
 8001dd0:	2801      	cmp	r0, #1
 8001dd2:	d1c3      	bne.n	8001d5c <AT_Send+0x34>
    bufSize -= 2;
 8001dd4:	3c02      	subs	r4, #2
    size++;
 8001dd6:	3701      	adds	r7, #1
    bufSize -= 2;
 8001dd8:	b2a4      	uxth	r4, r4
  while ((size < LORAWAN_APP_DATA_BUFFER_MAX_SIZE) && (bufSize > 1))
 8001dda:	2ff2      	cmp	r7, #242	@ 0xf2
 8001ddc:	d001      	beq.n	8001de2 <AT_Send+0xba>
 8001dde:	3502      	adds	r5, #2
 8001de0:	e7e8      	b.n	8001db4 <AT_Send+0x8c>
  if (bufSize != 0)
 8001de2:	2c00      	cmp	r4, #0
 8001de4:	d1ba      	bne.n	8001d5c <AT_Send+0x34>
  AppData.BufferSize = size;
 8001de6:	4819      	ldr	r0, [pc, #100]	@ (8001e4c <AT_Send+0x124>)
  AppData.Port = appPort;
 8001de8:	9b02      	ldr	r3, [sp, #8]
  lmhStatus = LmHandlerSend(&AppData, isTxConfirmed, &nextTxIn, false);
 8001dea:	0031      	movs	r1, r6
  AppData.Port = appPort;
 8001dec:	7003      	strb	r3, [r0, #0]
  lmhStatus = LmHandlerSend(&AppData, isTxConfirmed, &nextTxIn, false);
 8001dee:	aa03      	add	r2, sp, #12
 8001df0:	0023      	movs	r3, r4
  AppData.BufferSize = size;
 8001df2:	7047      	strb	r7, [r0, #1]
  lmhStatus = LmHandlerSend(&AppData, isTxConfirmed, &nextTxIn, false);
 8001df4:	f006 f8de 	bl	8007fb4 <LmHandlerSend>
  switch (lmhStatus)
 8001df8:	3006      	adds	r0, #6
 8001dfa:	2806      	cmp	r0, #6
 8001dfc:	d814      	bhi.n	8001e28 <AT_Send+0x100>
 8001dfe:	f7fe f995 	bl	800012c <__gnu_thumb1_case_uqi>
 8001e02:	0415      	.short	0x0415
 8001e04:	130d060d 	.word	0x130d060d
 8001e08:	08          	.byte	0x08
 8001e09:	00          	.byte	0x00
      status = AT_CRYPTO_ERROR;
 8001e0a:	2009      	movs	r0, #9
 8001e0c:	e7a7      	b.n	8001d5e <AT_Send+0x36>
      status = AT_NO_NET_JOINED;
 8001e0e:	2005      	movs	r0, #5
 8001e10:	e7a5      	b.n	8001d5e <AT_Send+0x36>
      status = (nextTxIn > 0) ? AT_DUTYCYCLE_RESTRICTED : AT_OK;
 8001e12:	9803      	ldr	r0, [sp, #12]
 8001e14:	1e43      	subs	r3, r0, #1
 8001e16:	4198      	sbcs	r0, r3
 8001e18:	00c0      	lsls	r0, r0, #3
 8001e1a:	e7a0      	b.n	8001d5e <AT_Send+0x36>
      status = (LmHandlerJoinStatus() != LORAMAC_HANDLER_SET) ? AT_NO_NET_JOINED : AT_BUSY_ERROR;
 8001e1c:	f006 f816 	bl	8007e4c <LmHandlerJoinStatus>
 8001e20:	2801      	cmp	r0, #1
 8001e22:	d1f4      	bne.n	8001e0e <AT_Send+0xe6>
 8001e24:	3002      	adds	r0, #2
 8001e26:	e79a      	b.n	8001d5e <AT_Send+0x36>
      status = AT_ERROR;
 8001e28:	2001      	movs	r0, #1
      break;
 8001e2a:	e798      	b.n	8001d5e <AT_Send+0x36>
  switch (lmhStatus)
 8001e2c:	2008      	movs	r0, #8
 8001e2e:	e796      	b.n	8001d5e <AT_Send+0x36>
 8001e30:	0800ff68 	.word	0x0800ff68
 8001e34:	08010bea 	.word	0x08010bea
 8001e38:	08010bee 	.word	0x08010bee
 8001e3c:	08010c15 	.word	0x08010c15
 8001e40:	08010c42 	.word	0x08010c42
 8001e44:	08010c69 	.word	0x08010c69
 8001e48:	08010aaa 	.word	0x08010aaa
 8001e4c:	20000044 	.word	0x20000044

08001e50 <AT_version_get>:
{
 8001e50:	b530      	push	{r4, r5, lr}
  AT_PRINTF("APP_VERSION:        V%X.%X.%X\r\n",
 8001e52:	2400      	movs	r4, #0
 8001e54:	2501      	movs	r5, #1
{
 8001e56:	b085      	sub	sp, #20
  AT_PRINTF("APP_VERSION:        V%X.%X.%X\r\n",
 8001e58:	0022      	movs	r2, r4
 8001e5a:	0021      	movs	r1, r4
 8001e5c:	0020      	movs	r0, r4
 8001e5e:	4b0e      	ldr	r3, [pc, #56]	@ (8001e98 <AT_version_get+0x48>)
 8001e60:	9402      	str	r4, [sp, #8]
 8001e62:	9501      	str	r5, [sp, #4]
 8001e64:	9500      	str	r5, [sp, #0]
 8001e66:	f00d f855 	bl	800ef14 <UTIL_ADV_TRACE_COND_FSend>
  AT_PRINTF("MW_LORAWAN_VERSION: V%X.%X.%X\r\n",
 8001e6a:	2203      	movs	r2, #3
 8001e6c:	9201      	str	r2, [sp, #4]
 8001e6e:	3a01      	subs	r2, #1
 8001e70:	0021      	movs	r1, r4
 8001e72:	9200      	str	r2, [sp, #0]
 8001e74:	0020      	movs	r0, r4
 8001e76:	0022      	movs	r2, r4
 8001e78:	4b08      	ldr	r3, [pc, #32]	@ (8001e9c <AT_version_get+0x4c>)
 8001e7a:	9402      	str	r4, [sp, #8]
 8001e7c:	f00d f84a 	bl	800ef14 <UTIL_ADV_TRACE_COND_FSend>
  AT_PRINTF("MW_RADIO_VERSION:   V%X.%X.%X\r\n",
 8001e80:	0022      	movs	r2, r4
 8001e82:	0021      	movs	r1, r4
 8001e84:	0020      	movs	r0, r4
 8001e86:	4b06      	ldr	r3, [pc, #24]	@ (8001ea0 <AT_version_get+0x50>)
 8001e88:	9402      	str	r4, [sp, #8]
 8001e8a:	9501      	str	r5, [sp, #4]
 8001e8c:	9500      	str	r5, [sp, #0]
 8001e8e:	f00d f841 	bl	800ef14 <UTIL_ADV_TRACE_COND_FSend>
}
 8001e92:	0020      	movs	r0, r4
 8001e94:	b005      	add	sp, #20
 8001e96:	bd30      	pop	{r4, r5, pc}
 8001e98:	08010964 	.word	0x08010964
 8001e9c:	08010984 	.word	0x08010984
 8001ea0:	080109a4 	.word	0x080109a4

08001ea4 <AT_ADR_get>:
{
 8001ea4:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if (LmHandlerGetAdrEnable(&adrEnable) != LORAMAC_HANDLER_SUCCESS)
 8001ea6:	466b      	mov	r3, sp
 8001ea8:	1ddd      	adds	r5, r3, #7
 8001eaa:	0028      	movs	r0, r5
 8001eac:	f006 fb26 	bl	80084fc <LmHandlerGetAdrEnable>
 8001eb0:	0004      	movs	r4, r0
    return AT_PARAM_ERROR;
 8001eb2:	2002      	movs	r0, #2
  if (LmHandlerGetAdrEnable(&adrEnable) != LORAMAC_HANDLER_SUCCESS)
 8001eb4:	2c00      	cmp	r4, #0
 8001eb6:	d103      	bne.n	8001ec0 <AT_ADR_get+0x1c>
  print_d(adrEnable);
 8001eb8:	7828      	ldrb	r0, [r5, #0]
 8001eba:	f7ff fc99 	bl	80017f0 <print_d>
  return AT_OK;
 8001ebe:	0020      	movs	r0, r4
}
 8001ec0:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

08001ec2 <AT_ADR_set>:
{
 8001ec2:	b510      	push	{r4, lr}
  switch (param[0])
 8001ec4:	7803      	ldrb	r3, [r0, #0]
      return AT_PARAM_ERROR;
 8001ec6:	2002      	movs	r0, #2
  switch (param[0])
 8001ec8:	3b30      	subs	r3, #48	@ 0x30
 8001eca:	2b01      	cmp	r3, #1
 8001ecc:	d805      	bhi.n	8001eda <AT_ADR_set+0x18>
      LmHandlerSetAdrEnable(param[0] - '0');
 8001ece:	1e5a      	subs	r2, r3, #1
 8001ed0:	4193      	sbcs	r3, r2
 8001ed2:	b2d8      	uxtb	r0, r3
 8001ed4:	f006 fb1e 	bl	8008514 <LmHandlerSetAdrEnable>
  return AT_OK;
 8001ed8:	2000      	movs	r0, #0
}
 8001eda:	bd10      	pop	{r4, pc}

08001edc <AT_DataRate_get>:
{
 8001edc:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if (LmHandlerGetTxDatarate(&txDatarate) != LORAMAC_HANDLER_SUCCESS)
 8001ede:	466b      	mov	r3, sp
 8001ee0:	1ddd      	adds	r5, r3, #7
 8001ee2:	0028      	movs	r0, r5
 8001ee4:	f006 f984 	bl	80081f0 <LmHandlerGetTxDatarate>
 8001ee8:	0004      	movs	r4, r0
    return AT_PARAM_ERROR;
 8001eea:	2002      	movs	r0, #2
  if (LmHandlerGetTxDatarate(&txDatarate) != LORAMAC_HANDLER_SUCCESS)
 8001eec:	2c00      	cmp	r4, #0
 8001eee:	d104      	bne.n	8001efa <AT_DataRate_get+0x1e>
  print_d(txDatarate);
 8001ef0:	2000      	movs	r0, #0
 8001ef2:	5628      	ldrsb	r0, [r5, r0]
 8001ef4:	f7ff fc7c 	bl	80017f0 <print_d>
  return AT_OK;
 8001ef8:	0020      	movs	r0, r4
}
 8001efa:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

08001efc <AT_DataRate_set>:
{
 8001efc:	b513      	push	{r0, r1, r4, lr}
  if (tiny_sscanf(param, "%hhu", &datarate) != 1)
 8001efe:	466b      	mov	r3, sp
 8001f00:	1ddc      	adds	r4, r3, #7
 8001f02:	0022      	movs	r2, r4
 8001f04:	4908      	ldr	r1, [pc, #32]	@ (8001f28 <AT_DataRate_set+0x2c>)
 8001f06:	f00d fe1f 	bl	800fb48 <tiny_sscanf>
    return AT_PARAM_ERROR;
 8001f0a:	2302      	movs	r3, #2
  if (tiny_sscanf(param, "%hhu", &datarate) != 1)
 8001f0c:	2801      	cmp	r0, #1
 8001f0e:	d109      	bne.n	8001f24 <AT_DataRate_set+0x28>
  if ((datarate < 0) || (datarate > 15))
 8001f10:	2000      	movs	r0, #0
 8001f12:	5620      	ldrsb	r0, [r4, r0]
 8001f14:	b2c2      	uxtb	r2, r0
 8001f16:	2a0f      	cmp	r2, #15
 8001f18:	d804      	bhi.n	8001f24 <AT_DataRate_set+0x28>
  if (LmHandlerSetTxDatarate(datarate) != LORAMAC_HANDLER_SUCCESS)
 8001f1a:	f006 fb11 	bl	8008540 <LmHandlerSetTxDatarate>
 8001f1e:	1e43      	subs	r3, r0, #1
 8001f20:	4198      	sbcs	r0, r3
 8001f22:	b2c3      	uxtb	r3, r0
}
 8001f24:	0018      	movs	r0, r3
 8001f26:	bd16      	pop	{r1, r2, r4, pc}
 8001f28:	08010c96 	.word	0x08010c96

08001f2c <AT_Region_get>:
{
 8001f2c:	b570      	push	{r4, r5, r6, lr}
 8001f2e:	b08e      	sub	sp, #56	@ 0x38
  const char *regionStrings[] = { "AS923", "AU915", "CN470", "CN779", "EU433", "EU868", "KR920", "IN865", "US915", "RU864" };
 8001f30:	ad04      	add	r5, sp, #16
 8001f32:	002a      	movs	r2, r5
  if (LmHandlerGetActiveRegion(&region) != LORAMAC_HANDLER_SUCCESS)
 8001f34:	260f      	movs	r6, #15
  const char *regionStrings[] = { "AS923", "AU915", "CN470", "CN779", "EU433", "EU868", "KR920", "IN865", "US915", "RU864" };
 8001f36:	4b10      	ldr	r3, [pc, #64]	@ (8001f78 <AT_Region_get+0x4c>)
  if (LmHandlerGetActiveRegion(&region) != LORAMAC_HANDLER_SUCCESS)
 8001f38:	446e      	add	r6, sp
  const char *regionStrings[] = { "AS923", "AU915", "CN470", "CN779", "EU433", "EU868", "KR920", "IN865", "US915", "RU864" };
 8001f3a:	cb13      	ldmia	r3!, {r0, r1, r4}
 8001f3c:	c213      	stmia	r2!, {r0, r1, r4}
 8001f3e:	cb13      	ldmia	r3!, {r0, r1, r4}
 8001f40:	c213      	stmia	r2!, {r0, r1, r4}
 8001f42:	cb13      	ldmia	r3!, {r0, r1, r4}
 8001f44:	c213      	stmia	r2!, {r0, r1, r4}
 8001f46:	681b      	ldr	r3, [r3, #0]
  if (LmHandlerGetActiveRegion(&region) != LORAMAC_HANDLER_SUCCESS)
 8001f48:	0030      	movs	r0, r6
  const char *regionStrings[] = { "AS923", "AU915", "CN470", "CN779", "EU433", "EU868", "KR920", "IN865", "US915", "RU864" };
 8001f4a:	6013      	str	r3, [r2, #0]
  if (LmHandlerGetActiveRegion(&region) != LORAMAC_HANDLER_SUCCESS)
 8001f4c:	f006 f9be 	bl	80082cc <LmHandlerGetActiveRegion>
 8001f50:	0004      	movs	r4, r0
    return AT_PARAM_ERROR;
 8001f52:	2002      	movs	r0, #2
  if (LmHandlerGetActiveRegion(&region) != LORAMAC_HANDLER_SUCCESS)
 8001f54:	2c00      	cmp	r4, #0
 8001f56:	d10d      	bne.n	8001f74 <AT_Region_get+0x48>
  if (region > LORAMAC_REGION_RU864)
 8001f58:	7832      	ldrb	r2, [r6, #0]
 8001f5a:	2a09      	cmp	r2, #9
 8001f5c:	d80a      	bhi.n	8001f74 <AT_Region_get+0x48>
  AT_PRINTF("%d:%s\r\n", region, regionStrings[region]);
 8001f5e:	0091      	lsls	r1, r2, #2
 8001f60:	5949      	ldr	r1, [r1, r5]
 8001f62:	0020      	movs	r0, r4
 8001f64:	9101      	str	r1, [sp, #4]
 8001f66:	9200      	str	r2, [sp, #0]
 8001f68:	0021      	movs	r1, r4
 8001f6a:	0022      	movs	r2, r4
 8001f6c:	4b03      	ldr	r3, [pc, #12]	@ (8001f7c <AT_Region_get+0x50>)
 8001f6e:	f00c ffd1 	bl	800ef14 <UTIL_ADV_TRACE_COND_FSend>
  return AT_OK;
 8001f72:	0020      	movs	r0, r4
}
 8001f74:	b00e      	add	sp, #56	@ 0x38
 8001f76:	bd70      	pop	{r4, r5, r6, pc}
 8001f78:	0800ff6c 	.word	0x0800ff6c
 8001f7c:	08010c9b 	.word	0x08010c9b

08001f80 <AT_Region_set>:
{
 8001f80:	b513      	push	{r0, r1, r4, lr}
  if (tiny_sscanf(param, "%hhu", &region) != 1)
 8001f82:	466b      	mov	r3, sp
 8001f84:	1ddc      	adds	r4, r3, #7
 8001f86:	0022      	movs	r2, r4
 8001f88:	4907      	ldr	r1, [pc, #28]	@ (8001fa8 <AT_Region_set+0x28>)
 8001f8a:	f00d fddd 	bl	800fb48 <tiny_sscanf>
    return AT_PARAM_ERROR;
 8001f8e:	2302      	movs	r3, #2
  if (tiny_sscanf(param, "%hhu", &region) != 1)
 8001f90:	2801      	cmp	r0, #1
 8001f92:	d107      	bne.n	8001fa4 <AT_Region_set+0x24>
  if (region > LORAMAC_REGION_RU864)
 8001f94:	7820      	ldrb	r0, [r4, #0]
 8001f96:	2809      	cmp	r0, #9
 8001f98:	d804      	bhi.n	8001fa4 <AT_Region_set+0x24>
  if (LmHandlerSetActiveRegion(region) != LORAMAC_HANDLER_SUCCESS)
 8001f9a:	f006 fa9f 	bl	80084dc <LmHandlerSetActiveRegion>
 8001f9e:	1e43      	subs	r3, r0, #1
 8001fa0:	4198      	sbcs	r0, r3
 8001fa2:	0043      	lsls	r3, r0, #1
}
 8001fa4:	0018      	movs	r0, r3
 8001fa6:	bd16      	pop	{r1, r2, r4, pc}
 8001fa8:	08010c96 	.word	0x08010c96

08001fac <AT_DeviceClass_get>:
{
 8001fac:	b530      	push	{r4, r5, lr}
 8001fae:	b085      	sub	sp, #20
  LoraInfo_t *loraInfo = LoraInfo_GetPtr();
 8001fb0:	f000 fd98 	bl	8002ae4 <LoraInfo_GetPtr>
 8001fb4:	0004      	movs	r4, r0
    return AT_ERROR;
 8001fb6:	2001      	movs	r0, #1
  if (loraInfo == NULL)
 8001fb8:	2c00      	cmp	r4, #0
 8001fba:	d023      	beq.n	8002004 <AT_DeviceClass_get+0x58>
  if (LmHandlerGetCurrentClass(&currentClass) != LORAMAC_HANDLER_SUCCESS)
 8001fbc:	250e      	movs	r5, #14
 8001fbe:	446d      	add	r5, sp
 8001fc0:	0028      	movs	r0, r5
 8001fc2:	f006 f899 	bl	80080f8 <LmHandlerGetCurrentClass>
 8001fc6:	2800      	cmp	r0, #0
 8001fc8:	d130      	bne.n	800202c <AT_DeviceClass_get+0x80>
  if ((loraInfo->ClassB == 1) && (ClassBEnableRequest == true) && (currentClass == CLASS_A))
 8001fca:	68a3      	ldr	r3, [r4, #8]
 8001fcc:	782a      	ldrb	r2, [r5, #0]
 8001fce:	2b01      	cmp	r3, #1
 8001fd0:	d123      	bne.n	800201a <AT_DeviceClass_get+0x6e>
 8001fd2:	4b17      	ldr	r3, [pc, #92]	@ (8002030 <AT_DeviceClass_get+0x84>)
 8001fd4:	7e1b      	ldrb	r3, [r3, #24]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d01f      	beq.n	800201a <AT_DeviceClass_get+0x6e>
 8001fda:	2a00      	cmp	r2, #0
 8001fdc:	d11d      	bne.n	800201a <AT_DeviceClass_get+0x6e>
    if (LmHandlerGetBeaconState(&beaconState) != LORAMAC_HANDLER_SUCCESS)
 8001fde:	240f      	movs	r4, #15
 8001fe0:	446c      	add	r4, sp
 8001fe2:	0020      	movs	r0, r4
 8001fe4:	f006 fbb3 	bl	800874e <LmHandlerGetBeaconState>
 8001fe8:	2800      	cmp	r0, #0
 8001fea:	d11f      	bne.n	800202c <AT_DeviceClass_get+0x80>
    if ((beaconState == BEACON_STATE_ACQUISITION) ||
 8001fec:	7823      	ldrb	r3, [r4, #0]
 8001fee:	2b01      	cmp	r3, #1
 8001ff0:	d901      	bls.n	8001ff6 <AT_DeviceClass_get+0x4a>
        (beaconState == BEACON_STATE_ACQUISITION_BY_TIME) ||
 8001ff2:	2b04      	cmp	r3, #4
 8001ff4:	d108      	bne.n	8002008 <AT_DeviceClass_get+0x5c>
      AT_PRINTF("B,S0\r\n");
 8001ff6:	4b0f      	ldr	r3, [pc, #60]	@ (8002034 <AT_DeviceClass_get+0x88>)
      AT_PRINTF("B,S2\r\n");
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	0011      	movs	r1, r2
 8001ffc:	0010      	movs	r0, r2
 8001ffe:	f00c ff89 	bl	800ef14 <UTIL_ADV_TRACE_COND_FSend>
  return AT_OK;
 8002002:	2000      	movs	r0, #0
}
 8002004:	b005      	add	sp, #20
 8002006:	bd30      	pop	{r4, r5, pc}
    else if ((beaconState == BEACON_STATE_LOCKED) || /*Beacon locked on Gateway*/
 8002008:	2b05      	cmp	r3, #5
 800200a:	d002      	beq.n	8002012 <AT_DeviceClass_get+0x66>
 800200c:	3b07      	subs	r3, #7
 800200e:	2b02      	cmp	r3, #2
 8002010:	d801      	bhi.n	8002016 <AT_DeviceClass_get+0x6a>
      AT_PRINTF("B,S1\r\n");
 8002012:	4b09      	ldr	r3, [pc, #36]	@ (8002038 <AT_DeviceClass_get+0x8c>)
 8002014:	e7f0      	b.n	8001ff8 <AT_DeviceClass_get+0x4c>
      AT_PRINTF("B,S2\r\n");
 8002016:	4b09      	ldr	r3, [pc, #36]	@ (800203c <AT_DeviceClass_get+0x90>)
 8002018:	e7ee      	b.n	8001ff8 <AT_DeviceClass_get+0x4c>
    AT_PRINTF("%c\r\n", 'A' + currentClass);
 800201a:	3241      	adds	r2, #65	@ 0x41
 800201c:	9200      	str	r2, [sp, #0]
 800201e:	2200      	movs	r2, #0
 8002020:	4b07      	ldr	r3, [pc, #28]	@ (8002040 <AT_DeviceClass_get+0x94>)
 8002022:	0011      	movs	r1, r2
 8002024:	0010      	movs	r0, r2
 8002026:	f00c ff75 	bl	800ef14 <UTIL_ADV_TRACE_COND_FSend>
 800202a:	e7ea      	b.n	8002002 <AT_DeviceClass_get+0x56>
    return AT_PARAM_ERROR;
 800202c:	2002      	movs	r0, #2
 800202e:	e7e9      	b.n	8002004 <AT_DeviceClass_get+0x58>
 8002030:	20000198 	.word	0x20000198
 8002034:	08010ca3 	.word	0x08010ca3
 8002038:	08010caa 	.word	0x08010caa
 800203c:	08010cb1 	.word	0x08010cb1
 8002040:	08010cb8 	.word	0x08010cb8

08002044 <AT_DeviceClass_set>:
{
 8002044:	b510      	push	{r4, lr}
 8002046:	0004      	movs	r4, r0
  LoraInfo_t *loraInfo = LoraInfo_GetPtr();
 8002048:	f000 fd4c 	bl	8002ae4 <LoraInfo_GetPtr>
    return AT_ERROR;
 800204c:	2201      	movs	r2, #1
  if (loraInfo == NULL)
 800204e:	2800      	cmp	r0, #0
 8002050:	d017      	beq.n	8002082 <AT_DeviceClass_set+0x3e>
  switch (param[0])
 8002052:	7823      	ldrb	r3, [r4, #0]
 8002054:	2b42      	cmp	r3, #66	@ 0x42
 8002056:	d016      	beq.n	8002086 <AT_DeviceClass_set+0x42>
 8002058:	2b43      	cmp	r3, #67	@ 0x43
 800205a:	d01b      	beq.n	8002094 <AT_DeviceClass_set+0x50>
 800205c:	1892      	adds	r2, r2, r2
 800205e:	2b41      	cmp	r3, #65	@ 0x41
 8002060:	d10f      	bne.n	8002082 <AT_DeviceClass_set+0x3e>
      if (loraInfo->ClassB == 1)
 8002062:	6883      	ldr	r3, [r0, #8]
 8002064:	2b01      	cmp	r3, #1
 8002066:	d102      	bne.n	800206e <AT_DeviceClass_set+0x2a>
        ClassBEnableRequest = false;
 8002068:	2200      	movs	r2, #0
 800206a:	4b0b      	ldr	r3, [pc, #44]	@ (8002098 <AT_DeviceClass_set+0x54>)
 800206c:	761a      	strb	r2, [r3, #24]
      errorStatus = LmHandlerRequestClass(CLASS_A);
 800206e:	2000      	movs	r0, #0
      errorStatus = LmHandlerRequestClass(CLASS_C);
 8002070:	f005 ff0a 	bl	8007e88 <LmHandlerRequestClass>
    return AT_NO_NET_JOINED;
 8002074:	2205      	movs	r2, #5
  if (errorStatus == LORAMAC_HANDLER_NO_NETWORK_JOINED)
 8002076:	1cc1      	adds	r1, r0, #3
 8002078:	d003      	beq.n	8002082 <AT_DeviceClass_set+0x3e>
  else if (errorStatus != LORAMAC_HANDLER_SUCCESS)
 800207a:	0003      	movs	r3, r0
 800207c:	1e5a      	subs	r2, r3, #1
 800207e:	4193      	sbcs	r3, r2
 8002080:	b2da      	uxtb	r2, r3
}
 8002082:	0010      	movs	r0, r2
 8002084:	bd10      	pop	{r4, pc}
      if (loraInfo->ClassB == 1)
 8002086:	6880      	ldr	r0, [r0, #8]
        return AT_NO_CLASS_B_ENABLE;
 8002088:	2207      	movs	r2, #7
      if (loraInfo->ClassB == 1)
 800208a:	2801      	cmp	r0, #1
 800208c:	d1f9      	bne.n	8002082 <AT_DeviceClass_set+0x3e>
        ClassBEnableRequest = true;
 800208e:	4b02      	ldr	r3, [pc, #8]	@ (8002098 <AT_DeviceClass_set+0x54>)
 8002090:	7618      	strb	r0, [r3, #24]
        errorStatus = LmHandlerRequestClass(CLASS_B);  /*Class B AT cmd switch Class B not supported cf.[UM2073]*/
 8002092:	e7ed      	b.n	8002070 <AT_DeviceClass_set+0x2c>
      errorStatus = LmHandlerRequestClass(CLASS_C);
 8002094:	2002      	movs	r0, #2
 8002096:	e7eb      	b.n	8002070 <AT_DeviceClass_set+0x2c>
 8002098:	20000198 	.word	0x20000198

0800209c <AT_DutyCycle_get>:
{
 800209c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if (LmHandlerGetDutyCycleEnable(&dutyCycleEnable) != LORAMAC_HANDLER_SUCCESS)
 800209e:	466b      	mov	r3, sp
 80020a0:	1ddd      	adds	r5, r3, #7
 80020a2:	0028      	movs	r0, r5
 80020a4:	f006 fa64 	bl	8008570 <LmHandlerGetDutyCycleEnable>
 80020a8:	0004      	movs	r4, r0
    return AT_PARAM_ERROR;
 80020aa:	2002      	movs	r0, #2
  if (LmHandlerGetDutyCycleEnable(&dutyCycleEnable) != LORAMAC_HANDLER_SUCCESS)
 80020ac:	2c00      	cmp	r4, #0
 80020ae:	d103      	bne.n	80020b8 <AT_DutyCycle_get+0x1c>
  print_d(dutyCycleEnable);
 80020b0:	7828      	ldrb	r0, [r5, #0]
 80020b2:	f7ff fb9d 	bl	80017f0 <print_d>
  return AT_OK;
 80020b6:	0020      	movs	r0, r4
}
 80020b8:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

080020ba <AT_DutyCycle_set>:
{
 80020ba:	b510      	push	{r4, lr}
  switch (param[0])
 80020bc:	7803      	ldrb	r3, [r0, #0]
      return AT_PARAM_ERROR;
 80020be:	2002      	movs	r0, #2
  switch (param[0])
 80020c0:	3b30      	subs	r3, #48	@ 0x30
 80020c2:	2b01      	cmp	r3, #1
 80020c4:	d805      	bhi.n	80020d2 <AT_DutyCycle_set+0x18>
      LmHandlerSetDutyCycleEnable(param[0] - '0');
 80020c6:	1e5a      	subs	r2, r3, #1
 80020c8:	4193      	sbcs	r3, r2
 80020ca:	b2d8      	uxtb	r0, r3
 80020cc:	f006 fa5c 	bl	8008588 <LmHandlerSetDutyCycleEnable>
  return AT_OK;
 80020d0:	2000      	movs	r0, #0
}
 80020d2:	bd10      	pop	{r4, pc}

080020d4 <AT_JoinAcceptDelay1_get>:
{
 80020d4:	b513      	push	{r0, r1, r4, lr}
  if (LmHandlerGetJoinRx1Delay(&rxDelay) != LORAMAC_HANDLER_SUCCESS)
 80020d6:	a801      	add	r0, sp, #4
 80020d8:	f006 fab4 	bl	8008644 <LmHandlerGetJoinRx1Delay>
 80020dc:	0004      	movs	r4, r0
    return AT_PARAM_ERROR;
 80020de:	2002      	movs	r0, #2
  if (LmHandlerGetJoinRx1Delay(&rxDelay) != LORAMAC_HANDLER_SUCCESS)
 80020e0:	2c00      	cmp	r4, #0
 80020e2:	d103      	bne.n	80020ec <AT_JoinAcceptDelay1_get+0x18>
  print_u(rxDelay);
 80020e4:	9801      	ldr	r0, [sp, #4]
 80020e6:	f7ff fb2f 	bl	8001748 <print_u>
  return AT_OK;
 80020ea:	0020      	movs	r0, r4
}
 80020ec:	bd16      	pop	{r1, r2, r4, pc}
	...

080020f0 <AT_JoinAcceptDelay1_set>:
{
 80020f0:	b507      	push	{r0, r1, r2, lr}
  if (tiny_sscanf(param, "%lu", &rxDelay) != 1)
 80020f2:	4907      	ldr	r1, [pc, #28]	@ (8002110 <AT_JoinAcceptDelay1_set+0x20>)
 80020f4:	aa01      	add	r2, sp, #4
 80020f6:	f00d fd27 	bl	800fb48 <tiny_sscanf>
 80020fa:	0003      	movs	r3, r0
    return AT_PARAM_ERROR;
 80020fc:	2002      	movs	r0, #2
  if (tiny_sscanf(param, "%lu", &rxDelay) != 1)
 80020fe:	2b01      	cmp	r3, #1
 8002100:	d105      	bne.n	800210e <AT_JoinAcceptDelay1_set+0x1e>
  else if (LmHandlerSetJoinRx1Delay(rxDelay) != LORAMAC_HANDLER_SUCCESS)
 8002102:	9801      	ldr	r0, [sp, #4]
 8002104:	f006 fb01 	bl	800870a <LmHandlerSetJoinRx1Delay>
 8002108:	1e43      	subs	r3, r0, #1
 800210a:	4198      	sbcs	r0, r3
 800210c:	0040      	lsls	r0, r0, #1
}
 800210e:	bd0e      	pop	{r1, r2, r3, pc}
 8002110:	08010cbd 	.word	0x08010cbd

08002114 <AT_JoinAcceptDelay2_get>:
{
 8002114:	b513      	push	{r0, r1, r4, lr}
  if (LmHandlerGetJoinRx2Delay(&rxDelay) != LORAMAC_HANDLER_SUCCESS)
 8002116:	a801      	add	r0, sp, #4
 8002118:	f006 faa8 	bl	800866c <LmHandlerGetJoinRx2Delay>
 800211c:	0004      	movs	r4, r0
    return AT_PARAM_ERROR;
 800211e:	2002      	movs	r0, #2
  if (LmHandlerGetJoinRx2Delay(&rxDelay) != LORAMAC_HANDLER_SUCCESS)
 8002120:	2c00      	cmp	r4, #0
 8002122:	d103      	bne.n	800212c <AT_JoinAcceptDelay2_get+0x18>
  print_u(rxDelay);
 8002124:	9801      	ldr	r0, [sp, #4]
 8002126:	f7ff fb0f 	bl	8001748 <print_u>
  return AT_OK;
 800212a:	0020      	movs	r0, r4
}
 800212c:	bd16      	pop	{r1, r2, r4, pc}
	...

08002130 <AT_JoinAcceptDelay2_set>:
{
 8002130:	b507      	push	{r0, r1, r2, lr}
  if (tiny_sscanf(param, "%lu", &rxDelay) != 1)
 8002132:	4907      	ldr	r1, [pc, #28]	@ (8002150 <AT_JoinAcceptDelay2_set+0x20>)
 8002134:	aa01      	add	r2, sp, #4
 8002136:	f00d fd07 	bl	800fb48 <tiny_sscanf>
 800213a:	0003      	movs	r3, r0
    return AT_PARAM_ERROR;
 800213c:	2002      	movs	r0, #2
  if (tiny_sscanf(param, "%lu", &rxDelay) != 1)
 800213e:	2b01      	cmp	r3, #1
 8002140:	d105      	bne.n	800214e <AT_JoinAcceptDelay2_set+0x1e>
  else if (LmHandlerSetJoinRx2Delay(rxDelay) != LORAMAC_HANDLER_SUCCESS)
 8002142:	9801      	ldr	r0, [sp, #4]
 8002144:	f006 faef 	bl	8008726 <LmHandlerSetJoinRx2Delay>
 8002148:	1e43      	subs	r3, r0, #1
 800214a:	4198      	sbcs	r0, r3
 800214c:	0040      	lsls	r0, r0, #1
}
 800214e:	bd0e      	pop	{r1, r2, r3, pc}
 8002150:	08010cbd 	.word	0x08010cbd

08002154 <AT_Rx1Delay_get>:
{
 8002154:	b513      	push	{r0, r1, r4, lr}
  if (LmHandlerGetRx1Delay(&rxDelay) != LORAMAC_HANDLER_SUCCESS)
 8002156:	a801      	add	r0, sp, #4
 8002158:	f006 fa4c 	bl	80085f4 <LmHandlerGetRx1Delay>
 800215c:	0004      	movs	r4, r0
    return AT_PARAM_ERROR;
 800215e:	2002      	movs	r0, #2
  if (LmHandlerGetRx1Delay(&rxDelay) != LORAMAC_HANDLER_SUCCESS)
 8002160:	2c00      	cmp	r4, #0
 8002162:	d103      	bne.n	800216c <AT_Rx1Delay_get+0x18>
  print_u(rxDelay);
 8002164:	9801      	ldr	r0, [sp, #4]
 8002166:	f7ff faef 	bl	8001748 <print_u>
  return AT_OK;
 800216a:	0020      	movs	r0, r4
}
 800216c:	bd16      	pop	{r1, r2, r4, pc}
	...

08002170 <AT_Rx1Delay_set>:
{
 8002170:	b507      	push	{r0, r1, r2, lr}
  if (tiny_sscanf(param, "%lu", &rxDelay) != 1)
 8002172:	4907      	ldr	r1, [pc, #28]	@ (8002190 <AT_Rx1Delay_set+0x20>)
 8002174:	aa01      	add	r2, sp, #4
 8002176:	f00d fce7 	bl	800fb48 <tiny_sscanf>
 800217a:	0003      	movs	r3, r0
    return AT_PARAM_ERROR;
 800217c:	2002      	movs	r0, #2
  if (tiny_sscanf(param, "%lu", &rxDelay) != 1)
 800217e:	2b01      	cmp	r3, #1
 8002180:	d105      	bne.n	800218e <AT_Rx1Delay_set+0x1e>
  else if (LmHandlerSetRx1Delay(rxDelay) != LORAMAC_HANDLER_SUCCESS)
 8002182:	9801      	ldr	r0, [sp, #4]
 8002184:	f006 faa5 	bl	80086d2 <LmHandlerSetRx1Delay>
 8002188:	1e43      	subs	r3, r0, #1
 800218a:	4198      	sbcs	r0, r3
 800218c:	0040      	lsls	r0, r0, #1
}
 800218e:	bd0e      	pop	{r1, r2, r3, pc}
 8002190:	08010cbd 	.word	0x08010cbd

08002194 <AT_Rx2Delay_get>:
{
 8002194:	b513      	push	{r0, r1, r4, lr}
  if (LmHandlerGetRx2Delay(&rxDelay) != LORAMAC_HANDLER_SUCCESS)
 8002196:	a801      	add	r0, sp, #4
 8002198:	f006 fa40 	bl	800861c <LmHandlerGetRx2Delay>
 800219c:	0004      	movs	r4, r0
    return AT_PARAM_ERROR;
 800219e:	2002      	movs	r0, #2
  if (LmHandlerGetRx2Delay(&rxDelay) != LORAMAC_HANDLER_SUCCESS)
 80021a0:	2c00      	cmp	r4, #0
 80021a2:	d103      	bne.n	80021ac <AT_Rx2Delay_get+0x18>
  print_u(rxDelay);
 80021a4:	9801      	ldr	r0, [sp, #4]
 80021a6:	f7ff facf 	bl	8001748 <print_u>
  return AT_OK;
 80021aa:	0020      	movs	r0, r4
}
 80021ac:	bd16      	pop	{r1, r2, r4, pc}
	...

080021b0 <AT_Rx2Delay_set>:
{
 80021b0:	b507      	push	{r0, r1, r2, lr}
  if (tiny_sscanf(param, "%lu", &rxDelay) != 1)
 80021b2:	4907      	ldr	r1, [pc, #28]	@ (80021d0 <AT_Rx2Delay_set+0x20>)
 80021b4:	aa01      	add	r2, sp, #4
 80021b6:	f00d fcc7 	bl	800fb48 <tiny_sscanf>
 80021ba:	0003      	movs	r3, r0
    return AT_PARAM_ERROR;
 80021bc:	2002      	movs	r0, #2
  if (tiny_sscanf(param, "%lu", &rxDelay) != 1)
 80021be:	2b01      	cmp	r3, #1
 80021c0:	d105      	bne.n	80021ce <AT_Rx2Delay_set+0x1e>
  else if (LmHandlerSetRx2Delay(rxDelay) != LORAMAC_HANDLER_SUCCESS)
 80021c2:	9801      	ldr	r0, [sp, #4]
 80021c4:	f006 fa93 	bl	80086ee <LmHandlerSetRx2Delay>
 80021c8:	1e43      	subs	r3, r0, #1
 80021ca:	4198      	sbcs	r0, r3
 80021cc:	0040      	lsls	r0, r0, #1
}
 80021ce:	bd0e      	pop	{r1, r2, r3, pc}
 80021d0:	08010cbd 	.word	0x08010cbd

080021d4 <AT_Rx2DataRate_get>:
{
 80021d4:	b507      	push	{r0, r1, r2, lr}
  LmHandlerGetRX2Params(&rx2Params);
 80021d6:	4668      	mov	r0, sp
 80021d8:	f006 f9e0 	bl	800859c <LmHandlerGetRX2Params>
  print_d(rx2Params.Datarate);
 80021dc:	466b      	mov	r3, sp
 80021de:	7918      	ldrb	r0, [r3, #4]
 80021e0:	f7ff fb06 	bl	80017f0 <print_d>
}
 80021e4:	2000      	movs	r0, #0
 80021e6:	bd0e      	pop	{r1, r2, r3, pc}

080021e8 <AT_Rx2DataRate_set>:
{
 80021e8:	b513      	push	{r0, r1, r4, lr}
 80021ea:	0004      	movs	r4, r0
  LmHandlerGetRX2Params(&rx2Params);
 80021ec:	4668      	mov	r0, sp
 80021ee:	f006 f9d5 	bl	800859c <LmHandlerGetRX2Params>
  if (tiny_sscanf(param, "%hhu", &(rx2Params.Datarate)) != 1)
 80021f2:	0020      	movs	r0, r4
 80021f4:	4909      	ldr	r1, [pc, #36]	@ (800221c <AT_Rx2DataRate_set+0x34>)
 80021f6:	aa01      	add	r2, sp, #4
 80021f8:	f00d fca6 	bl	800fb48 <tiny_sscanf>
 80021fc:	0003      	movs	r3, r0
    return AT_PARAM_ERROR;
 80021fe:	2002      	movs	r0, #2
  if (tiny_sscanf(param, "%hhu", &(rx2Params.Datarate)) != 1)
 8002200:	2b01      	cmp	r3, #1
 8002202:	d109      	bne.n	8002218 <AT_Rx2DataRate_set+0x30>
  else if (rx2Params.Datarate > 15)
 8002204:	466b      	mov	r3, sp
 8002206:	791b      	ldrb	r3, [r3, #4]
 8002208:	2b0f      	cmp	r3, #15
 800220a:	d805      	bhi.n	8002218 <AT_Rx2DataRate_set+0x30>
  else if (LmHandlerSetRX2Params(&rx2Params) != LORAMAC_HANDLER_SUCCESS)
 800220c:	4668      	mov	r0, sp
 800220e:	f006 fa4f 	bl	80086b0 <LmHandlerSetRX2Params>
 8002212:	1e43      	subs	r3, r0, #1
 8002214:	4198      	sbcs	r0, r3
 8002216:	0040      	lsls	r0, r0, #1
}
 8002218:	bd16      	pop	{r1, r2, r4, pc}
 800221a:	46c0      	nop			@ (mov r8, r8)
 800221c:	08010c96 	.word	0x08010c96

08002220 <AT_Rx2Frequency_get>:
{
 8002220:	b507      	push	{r0, r1, r2, lr}
  LmHandlerGetRX2Params(&rx2Params);
 8002222:	4668      	mov	r0, sp
 8002224:	f006 f9ba 	bl	800859c <LmHandlerGetRX2Params>
  print_d(rx2Params.Frequency);
 8002228:	9800      	ldr	r0, [sp, #0]
 800222a:	f7ff fae1 	bl	80017f0 <print_d>
}
 800222e:	2000      	movs	r0, #0
 8002230:	bd0e      	pop	{r1, r2, r3, pc}
	...

08002234 <AT_Rx2Frequency_set>:
{
 8002234:	b513      	push	{r0, r1, r4, lr}
 8002236:	0004      	movs	r4, r0
  LmHandlerGetRX2Params(&rx2Params);
 8002238:	4668      	mov	r0, sp
 800223a:	f006 f9af 	bl	800859c <LmHandlerGetRX2Params>
  if (tiny_sscanf(param, "%lu", &(rx2Params.Frequency)) != 1)
 800223e:	466a      	mov	r2, sp
 8002240:	0020      	movs	r0, r4
 8002242:	4907      	ldr	r1, [pc, #28]	@ (8002260 <AT_Rx2Frequency_set+0x2c>)
 8002244:	f00d fc80 	bl	800fb48 <tiny_sscanf>
 8002248:	0003      	movs	r3, r0
    return AT_PARAM_ERROR;
 800224a:	2002      	movs	r0, #2
  if (tiny_sscanf(param, "%lu", &(rx2Params.Frequency)) != 1)
 800224c:	2b01      	cmp	r3, #1
 800224e:	d105      	bne.n	800225c <AT_Rx2Frequency_set+0x28>
  else if (LmHandlerSetRX2Params(&rx2Params) != LORAMAC_HANDLER_SUCCESS)
 8002250:	4668      	mov	r0, sp
 8002252:	f006 fa2d 	bl	80086b0 <LmHandlerSetRX2Params>
 8002256:	1e43      	subs	r3, r0, #1
 8002258:	4198      	sbcs	r0, r3
 800225a:	0040      	lsls	r0, r0, #1
}
 800225c:	bd16      	pop	{r1, r2, r4, pc}
 800225e:	46c0      	nop			@ (mov r8, r8)
 8002260:	08010cbd 	.word	0x08010cbd

08002264 <AT_TransmitPower_get>:
{
 8002264:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if (LmHandlerGetTxPower(&txPower) != LORAMAC_HANDLER_SUCCESS)
 8002266:	466b      	mov	r3, sp
 8002268:	1ddd      	adds	r5, r3, #7
 800226a:	0028      	movs	r0, r5
 800226c:	f006 f9ad 	bl	80085ca <LmHandlerGetTxPower>
 8002270:	0004      	movs	r4, r0
    return AT_PARAM_ERROR;
 8002272:	2002      	movs	r0, #2
  if (LmHandlerGetTxPower(&txPower) != LORAMAC_HANDLER_SUCCESS)
 8002274:	2c00      	cmp	r4, #0
 8002276:	d104      	bne.n	8002282 <AT_TransmitPower_get+0x1e>
  print_d(txPower);
 8002278:	2000      	movs	r0, #0
 800227a:	5628      	ldrsb	r0, [r5, r0]
 800227c:	f7ff fab8 	bl	80017f0 <print_d>
  return AT_OK;
 8002280:	0020      	movs	r0, r4
}
 8002282:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

08002284 <AT_TransmitPower_set>:
{
 8002284:	b513      	push	{r0, r1, r4, lr}
  if (tiny_sscanf(param, "%hhu", &txPower) != 1)
 8002286:	466b      	mov	r3, sp
 8002288:	1ddc      	adds	r4, r3, #7
 800228a:	0022      	movs	r2, r4
 800228c:	4907      	ldr	r1, [pc, #28]	@ (80022ac <AT_TransmitPower_set+0x28>)
 800228e:	f00d fc5b 	bl	800fb48 <tiny_sscanf>
 8002292:	0003      	movs	r3, r0
    return AT_PARAM_ERROR;
 8002294:	2002      	movs	r0, #2
  if (tiny_sscanf(param, "%hhu", &txPower) != 1)
 8002296:	2b01      	cmp	r3, #1
 8002298:	d106      	bne.n	80022a8 <AT_TransmitPower_set+0x24>
  if (LmHandlerSetTxPower(txPower) != LORAMAC_HANDLER_SUCCESS)
 800229a:	2000      	movs	r0, #0
 800229c:	5620      	ldrsb	r0, [r4, r0]
 800229e:	f006 f9f9 	bl	8008694 <LmHandlerSetTxPower>
 80022a2:	1e43      	subs	r3, r0, #1
 80022a4:	4198      	sbcs	r0, r3
 80022a6:	0040      	lsls	r0, r0, #1
}
 80022a8:	bd16      	pop	{r1, r2, r4, pc}
 80022aa:	46c0      	nop			@ (mov r8, r8)
 80022ac:	08010c96 	.word	0x08010c96

080022b0 <AT_PingSlot_get>:
{
 80022b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if (LmHandlerGetPingPeriodicity(&periodicity) != LORAMAC_HANDLER_SUCCESS)
 80022b2:	466b      	mov	r3, sp
 80022b4:	1ddd      	adds	r5, r3, #7
 80022b6:	0028      	movs	r0, r5
 80022b8:	f006 fa43 	bl	8008742 <LmHandlerGetPingPeriodicity>
 80022bc:	0004      	movs	r4, r0
    return AT_PARAM_ERROR;
 80022be:	2002      	movs	r0, #2
  if (LmHandlerGetPingPeriodicity(&periodicity) != LORAMAC_HANDLER_SUCCESS)
 80022c0:	2c00      	cmp	r4, #0
 80022c2:	d103      	bne.n	80022cc <AT_PingSlot_get+0x1c>
  print_d(periodicity);
 80022c4:	7828      	ldrb	r0, [r5, #0]
 80022c6:	f7ff fa93 	bl	80017f0 <print_d>
  return AT_OK;
 80022ca:	0020      	movs	r0, r4
}
 80022cc:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
	...

080022d0 <AT_PingSlot_set>:
{
 80022d0:	b513      	push	{r0, r1, r4, lr}
  if (tiny_sscanf(param, "%hhu", &periodicity) != 1)
 80022d2:	466b      	mov	r3, sp
 80022d4:	1ddc      	adds	r4, r3, #7
 80022d6:	0022      	movs	r2, r4
 80022d8:	4907      	ldr	r1, [pc, #28]	@ (80022f8 <AT_PingSlot_set+0x28>)
 80022da:	f00d fc35 	bl	800fb48 <tiny_sscanf>
    return AT_PARAM_ERROR;
 80022de:	2302      	movs	r3, #2
  if (tiny_sscanf(param, "%hhu", &periodicity) != 1)
 80022e0:	2801      	cmp	r0, #1
 80022e2:	d107      	bne.n	80022f4 <AT_PingSlot_set+0x24>
  else if (periodicity > 7)
 80022e4:	7820      	ldrb	r0, [r4, #0]
 80022e6:	2807      	cmp	r0, #7
 80022e8:	d804      	bhi.n	80022f4 <AT_PingSlot_set+0x24>
  else if (LmHandlerSetPingPeriodicity(periodicity) != LORAMAC_HANDLER_SUCCESS)
 80022ea:	f006 fa2d 	bl	8008748 <LmHandlerSetPingPeriodicity>
 80022ee:	1e43      	subs	r3, r0, #1
 80022f0:	4198      	sbcs	r0, r3
 80022f2:	0043      	lsls	r3, r0, #1
}
 80022f4:	0018      	movs	r0, r3
 80022f6:	bd16      	pop	{r1, r2, r4, pc}
 80022f8:	08010c96 	.word	0x08010c96

080022fc <AT_test_txTone>:
{
 80022fc:	b510      	push	{r4, lr}
  if (0U == TST_TxTone())
 80022fe:	f000 fc29 	bl	8002b54 <TST_TxTone>
 8002302:	0003      	movs	r3, r0
    return AT_BUSY_ERROR;
 8002304:	2003      	movs	r0, #3
  if (0U == TST_TxTone())
 8002306:	2b00      	cmp	r3, #0
 8002308:	d100      	bne.n	800230c <AT_test_txTone+0x10>
    return AT_OK;
 800230a:	0018      	movs	r0, r3
}
 800230c:	bd10      	pop	{r4, pc}

0800230e <AT_test_rxRssi>:
{
 800230e:	b510      	push	{r4, lr}
  if (0U == TST_RxRssi())
 8002310:	f000 fc46 	bl	8002ba0 <TST_RxRssi>
 8002314:	0003      	movs	r3, r0
    return AT_BUSY_ERROR;
 8002316:	2003      	movs	r0, #3
  if (0U == TST_RxRssi())
 8002318:	2b00      	cmp	r3, #0
 800231a:	d100      	bne.n	800231e <AT_test_rxRssi+0x10>
    return AT_OK;
 800231c:	0018      	movs	r0, r3
}
 800231e:	bd10      	pop	{r4, pc}

08002320 <AT_test_get_config>:
{
 8002320:	b530      	push	{r4, r5, lr}
 8002322:	b0a1      	sub	sp, #132	@ 0x84
  uint32_t loraBW[7] = {7812, 15625, 31250, 62500, 125000, 250000, 500000};
 8002324:	ad0d      	add	r5, sp, #52	@ 0x34
 8002326:	002a      	movs	r2, r5
 8002328:	4b71      	ldr	r3, [pc, #452]	@ (80024f0 <AT_test_get_config+0x1d0>)
 800232a:	cb13      	ldmia	r3!, {r0, r1, r4}
 800232c:	c213      	stmia	r2!, {r0, r1, r4}
 800232e:	cb13      	ldmia	r3!, {r0, r1, r4}
 8002330:	c213      	stmia	r2!, {r0, r1, r4}
 8002332:	681b      	ldr	r3, [r3, #0]
  TST_get_config(&testParam);
 8002334:	a814      	add	r0, sp, #80	@ 0x50
  uint32_t loraBW[7] = {7812, 15625, 31250, 62500, 125000, 250000, 500000};
 8002336:	6013      	str	r3, [r2, #0]
  TST_get_config(&testParam);
 8002338:	f000 fc9c 	bl	8002c74 <TST_get_config>
  AT_PRINTF("1: Freq= %d Hz\r\n", testParam.freq);
 800233c:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800233e:	4b6d      	ldr	r3, [pc, #436]	@ (80024f4 <AT_test_get_config+0x1d4>)
 8002340:	9200      	str	r2, [sp, #0]
 8002342:	2200      	movs	r2, #0
 8002344:	0011      	movs	r1, r2
 8002346:	0010      	movs	r0, r2
 8002348:	f00c fde4 	bl	800ef14 <UTIL_ADV_TRACE_COND_FSend>
  AT_PRINTF("2: Power= %d dBm\r\n", testParam.power);
 800234c:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800234e:	4b6a      	ldr	r3, [pc, #424]	@ (80024f8 <AT_test_get_config+0x1d8>)
 8002350:	9200      	str	r2, [sp, #0]
 8002352:	2200      	movs	r2, #0
 8002354:	0011      	movs	r1, r2
 8002356:	0010      	movs	r0, r2
 8002358:	f00c fddc 	bl	800ef14 <UTIL_ADV_TRACE_COND_FSend>
  if (testParam.modulation == 0)
 800235c:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 800235e:	2c00      	cmp	r4, #0
 8002360:	d14a      	bne.n	80023f8 <AT_test_get_config+0xd8>
    AT_PRINTF("3: Bandwidth= %d Hz\r\n", testParam.bandwidth);
 8002362:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8002364:	0021      	movs	r1, r4
 8002366:	4b65      	ldr	r3, [pc, #404]	@ (80024fc <AT_test_get_config+0x1dc>)
 8002368:	9200      	str	r2, [sp, #0]
 800236a:	0020      	movs	r0, r4
 800236c:	0022      	movs	r2, r4
 800236e:	f00c fdd1 	bl	800ef14 <UTIL_ADV_TRACE_COND_FSend>
    AT_PRINTF("4: FSK datarate= %d bps\r\n", testParam.loraSf_datarate);
 8002372:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8002374:	0021      	movs	r1, r4
 8002376:	4b62      	ldr	r3, [pc, #392]	@ (8002500 <AT_test_get_config+0x1e0>)
 8002378:	9200      	str	r2, [sp, #0]
 800237a:	0020      	movs	r0, r4
 800237c:	0022      	movs	r2, r4
 800237e:	f00c fdc9 	bl	800ef14 <UTIL_ADV_TRACE_COND_FSend>
    AT_PRINTF("5: Coding Rate not applicable\r\n");
 8002382:	0022      	movs	r2, r4
 8002384:	0021      	movs	r1, r4
 8002386:	4b5f      	ldr	r3, [pc, #380]	@ (8002504 <AT_test_get_config+0x1e4>)
 8002388:	0020      	movs	r0, r4
 800238a:	f00c fdc3 	bl	800ef14 <UTIL_ADV_TRACE_COND_FSend>
    AT_PRINTF("6: LNA State= %d  \r\n", testParam.lna);
 800238e:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8002390:	0021      	movs	r1, r4
 8002392:	4b5d      	ldr	r3, [pc, #372]	@ (8002508 <AT_test_get_config+0x1e8>)
 8002394:	9200      	str	r2, [sp, #0]
 8002396:	0020      	movs	r0, r4
 8002398:	0022      	movs	r2, r4
 800239a:	f00c fdbb 	bl	800ef14 <UTIL_ADV_TRACE_COND_FSend>
    AT_PRINTF("7: PA Boost State= %d  \r\n", testParam.paBoost);
 800239e:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80023a0:	0021      	movs	r1, r4
 80023a2:	4b5a      	ldr	r3, [pc, #360]	@ (800250c <AT_test_get_config+0x1ec>)
 80023a4:	9200      	str	r2, [sp, #0]
 80023a6:	0020      	movs	r0, r4
 80023a8:	0022      	movs	r2, r4
 80023aa:	f00c fdb3 	bl	800ef14 <UTIL_ADV_TRACE_COND_FSend>
    AT_PRINTF("8: modulation FSK\r\n");
 80023ae:	0022      	movs	r2, r4
 80023b0:	0021      	movs	r1, r4
 80023b2:	4b57      	ldr	r3, [pc, #348]	@ (8002510 <AT_test_get_config+0x1f0>)
 80023b4:	0020      	movs	r0, r4
 80023b6:	f00c fdad 	bl	800ef14 <UTIL_ADV_TRACE_COND_FSend>
    AT_PRINTF("9: Payload len= %d Bytes\r\n", testParam.payloadLen);
 80023ba:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80023bc:	0021      	movs	r1, r4
 80023be:	4b55      	ldr	r3, [pc, #340]	@ (8002514 <AT_test_get_config+0x1f4>)
 80023c0:	9200      	str	r2, [sp, #0]
 80023c2:	0020      	movs	r0, r4
 80023c4:	0022      	movs	r2, r4
 80023c6:	f00c fda5 	bl	800ef14 <UTIL_ADV_TRACE_COND_FSend>
    AT_PRINTF("10: FSK deviation= %d Hz\r\n", testParam.fskDev);
 80023ca:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 80023cc:	0021      	movs	r1, r4
 80023ce:	4b52      	ldr	r3, [pc, #328]	@ (8002518 <AT_test_get_config+0x1f8>)
 80023d0:	9200      	str	r2, [sp, #0]
 80023d2:	0020      	movs	r0, r4
 80023d4:	0022      	movs	r2, r4
 80023d6:	f00c fd9d 	bl	800ef14 <UTIL_ADV_TRACE_COND_FSend>
    AT_PRINTF("11: LowDRopt not applicable\r\n");
 80023da:	0022      	movs	r2, r4
 80023dc:	0021      	movs	r1, r4
 80023de:	4b4f      	ldr	r3, [pc, #316]	@ (800251c <AT_test_get_config+0x1fc>)
 80023e0:	0020      	movs	r0, r4
 80023e2:	f00c fd97 	bl	800ef14 <UTIL_ADV_TRACE_COND_FSend>
    AT_PRINTF("12: FSK gaussian BT product= %d \r\n", testParam.BTproduct);
 80023e6:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
 80023e8:	0021      	movs	r1, r4
 80023ea:	9200      	str	r2, [sp, #0]
 80023ec:	0020      	movs	r0, r4
 80023ee:	0022      	movs	r2, r4
 80023f0:	4b4b      	ldr	r3, [pc, #300]	@ (8002520 <AT_test_get_config+0x200>)
    AT_PRINTF("4: BPSK datarate= %d bps\r\n", testParam.loraSf_datarate);
 80023f2:	f00c fd8f 	bl	800ef14 <UTIL_ADV_TRACE_COND_FSend>
 80023f6:	e051      	b.n	800249c <AT_test_get_config+0x17c>
  else if (testParam.modulation == 1)
 80023f8:	2c01      	cmp	r4, #1
 80023fa:	d000      	beq.n	80023fe <AT_test_get_config+0xde>
 80023fc:	e070      	b.n	80024e0 <AT_test_get_config+0x1c0>
    AT_PRINTF("3: Bandwidth= %d (=%d Hz)\r\n", testParam.bandwidth, loraBW[testParam.bandwidth]);
 80023fe:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8002400:	4b48      	ldr	r3, [pc, #288]	@ (8002524 <AT_test_get_config+0x204>)
 8002402:	0091      	lsls	r1, r2, #2
 8002404:	5949      	ldr	r1, [r1, r5]
 8002406:	9200      	str	r2, [sp, #0]
 8002408:	2200      	movs	r2, #0
 800240a:	9101      	str	r1, [sp, #4]
 800240c:	0010      	movs	r0, r2
 800240e:	0011      	movs	r1, r2
 8002410:	f00c fd80 	bl	800ef14 <UTIL_ADV_TRACE_COND_FSend>
    AT_PRINTF("4: SF= %d \r\n", testParam.loraSf_datarate);
 8002414:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8002416:	4b44      	ldr	r3, [pc, #272]	@ (8002528 <AT_test_get_config+0x208>)
 8002418:	9200      	str	r2, [sp, #0]
 800241a:	2200      	movs	r2, #0
 800241c:	0011      	movs	r1, r2
 800241e:	0010      	movs	r0, r2
 8002420:	f00c fd78 	bl	800ef14 <UTIL_ADV_TRACE_COND_FSend>
    AT_PRINTF("5: CR= %d (=4/%d) \r\n", testParam.codingRate, testParam.codingRate + 4);
 8002424:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8002426:	4b41      	ldr	r3, [pc, #260]	@ (800252c <AT_test_get_config+0x20c>)
 8002428:	1d11      	adds	r1, r2, #4
 800242a:	9200      	str	r2, [sp, #0]
 800242c:	2200      	movs	r2, #0
 800242e:	9101      	str	r1, [sp, #4]
 8002430:	0010      	movs	r0, r2
 8002432:	0011      	movs	r1, r2
 8002434:	f00c fd6e 	bl	800ef14 <UTIL_ADV_TRACE_COND_FSend>
    AT_PRINTF("6: LNA State= %d  \r\n", testParam.lna);
 8002438:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800243a:	4b33      	ldr	r3, [pc, #204]	@ (8002508 <AT_test_get_config+0x1e8>)
 800243c:	9200      	str	r2, [sp, #0]
 800243e:	2200      	movs	r2, #0
 8002440:	0011      	movs	r1, r2
 8002442:	0010      	movs	r0, r2
 8002444:	f00c fd66 	bl	800ef14 <UTIL_ADV_TRACE_COND_FSend>
    AT_PRINTF("7: PA Boost State= %d  \r\n", testParam.paBoost);
 8002448:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800244a:	4b30      	ldr	r3, [pc, #192]	@ (800250c <AT_test_get_config+0x1ec>)
 800244c:	9200      	str	r2, [sp, #0]
 800244e:	2200      	movs	r2, #0
 8002450:	0011      	movs	r1, r2
 8002452:	0010      	movs	r0, r2
 8002454:	f00c fd5e 	bl	800ef14 <UTIL_ADV_TRACE_COND_FSend>
    AT_PRINTF("8: modulation LORA\r\n");
 8002458:	2200      	movs	r2, #0
 800245a:	4b35      	ldr	r3, [pc, #212]	@ (8002530 <AT_test_get_config+0x210>)
 800245c:	0011      	movs	r1, r2
 800245e:	0010      	movs	r0, r2
 8002460:	f00c fd58 	bl	800ef14 <UTIL_ADV_TRACE_COND_FSend>
    AT_PRINTF("9: Payload len= %d Bytes\r\n", testParam.payloadLen);
 8002464:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8002466:	4b2b      	ldr	r3, [pc, #172]	@ (8002514 <AT_test_get_config+0x1f4>)
 8002468:	9200      	str	r2, [sp, #0]
 800246a:	2200      	movs	r2, #0
 800246c:	0011      	movs	r1, r2
 800246e:	0010      	movs	r0, r2
 8002470:	f00c fd50 	bl	800ef14 <UTIL_ADV_TRACE_COND_FSend>
    AT_PRINTF("10: Frequency deviation not applicable\r\n");
 8002474:	2200      	movs	r2, #0
 8002476:	4b2f      	ldr	r3, [pc, #188]	@ (8002534 <AT_test_get_config+0x214>)
 8002478:	0011      	movs	r1, r2
 800247a:	0010      	movs	r0, r2
 800247c:	f00c fd4a 	bl	800ef14 <UTIL_ADV_TRACE_COND_FSend>
    AT_PRINTF("11: LowDRopt[0 to 2]= %d \r\n", testParam.lowDrOpt);
 8002480:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 8002482:	4b2d      	ldr	r3, [pc, #180]	@ (8002538 <AT_test_get_config+0x218>)
 8002484:	9200      	str	r2, [sp, #0]
 8002486:	2200      	movs	r2, #0
 8002488:	0011      	movs	r1, r2
 800248a:	0010      	movs	r0, r2
 800248c:	f00c fd42 	bl	800ef14 <UTIL_ADV_TRACE_COND_FSend>
    AT_PRINTF("12 BT product not applicable\r\n");
 8002490:	2200      	movs	r2, #0
 8002492:	4b2a      	ldr	r3, [pc, #168]	@ (800253c <AT_test_get_config+0x21c>)
 8002494:	0011      	movs	r1, r2
 8002496:	0010      	movs	r0, r2
 8002498:	f00c fd3c 	bl	800ef14 <UTIL_ADV_TRACE_COND_FSend>
  AT_PRINTF("can be copy/paste in set cmd: AT+TCONF=%d:%d:%d:%d:4/%d:%d:%d:%d:%d:%d:%d:%d\r\n", testParam.freq,
 800249c:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
 800249e:	4b28      	ldr	r3, [pc, #160]	@ (8002540 <AT_test_get_config+0x220>)
 80024a0:	920b      	str	r2, [sp, #44]	@ 0x2c
 80024a2:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 80024a4:	920a      	str	r2, [sp, #40]	@ 0x28
 80024a6:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 80024a8:	9209      	str	r2, [sp, #36]	@ 0x24
 80024aa:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80024ac:	9208      	str	r2, [sp, #32]
 80024ae:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80024b0:	9207      	str	r2, [sp, #28]
 80024b2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80024b4:	9206      	str	r2, [sp, #24]
 80024b6:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80024b8:	9205      	str	r2, [sp, #20]
 80024ba:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80024bc:	3204      	adds	r2, #4
 80024be:	9204      	str	r2, [sp, #16]
 80024c0:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 80024c2:	9203      	str	r2, [sp, #12]
 80024c4:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 80024c6:	9202      	str	r2, [sp, #8]
 80024c8:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80024ca:	9201      	str	r2, [sp, #4]
 80024cc:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80024ce:	9200      	str	r2, [sp, #0]
 80024d0:	2200      	movs	r2, #0
 80024d2:	0011      	movs	r1, r2
 80024d4:	0010      	movs	r0, r2
 80024d6:	f00c fd1d 	bl	800ef14 <UTIL_ADV_TRACE_COND_FSend>
}
 80024da:	2000      	movs	r0, #0
 80024dc:	b021      	add	sp, #132	@ 0x84
 80024de:	bd30      	pop	{r4, r5, pc}
    AT_PRINTF("4: BPSK datarate= %d bps\r\n", testParam.loraSf_datarate);
 80024e0:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 80024e2:	4b18      	ldr	r3, [pc, #96]	@ (8002544 <AT_test_get_config+0x224>)
 80024e4:	9200      	str	r2, [sp, #0]
 80024e6:	2200      	movs	r2, #0
 80024e8:	0011      	movs	r1, r2
 80024ea:	0010      	movs	r0, r2
 80024ec:	e781      	b.n	80023f2 <AT_test_get_config+0xd2>
 80024ee:	46c0      	nop			@ (mov r8, r8)
 80024f0:	0800ff94 	.word	0x0800ff94
 80024f4:	08010cc1 	.word	0x08010cc1
 80024f8:	08010cd2 	.word	0x08010cd2
 80024fc:	08010ce5 	.word	0x08010ce5
 8002500:	08010cfb 	.word	0x08010cfb
 8002504:	08010d15 	.word	0x08010d15
 8002508:	08010d35 	.word	0x08010d35
 800250c:	08010d4a 	.word	0x08010d4a
 8002510:	08010d64 	.word	0x08010d64
 8002514:	08010d78 	.word	0x08010d78
 8002518:	08010d93 	.word	0x08010d93
 800251c:	08010dae 	.word	0x08010dae
 8002520:	08010dcc 	.word	0x08010dcc
 8002524:	08010def 	.word	0x08010def
 8002528:	08010e0b 	.word	0x08010e0b
 800252c:	08010e18 	.word	0x08010e18
 8002530:	08010e2d 	.word	0x08010e2d
 8002534:	08010e42 	.word	0x08010e42
 8002538:	08010e6b 	.word	0x08010e6b
 800253c:	08010e87 	.word	0x08010e87
 8002540:	08010ec1 	.word	0x08010ec1
 8002544:	08010ea6 	.word	0x08010ea6

08002548 <AT_test_set_config>:
{
 8002548:	b510      	push	{r4, lr}
 800254a:	0004      	movs	r4, r0
 800254c:	b0a6      	sub	sp, #152	@ 0x98
  testParameter_t testParam = {0};
 800254e:	2230      	movs	r2, #48	@ 0x30
 8002550:	2100      	movs	r1, #0
 8002552:	a81a      	add	r0, sp, #104	@ 0x68
 8002554:	f00d fc2c 	bl	800fdb0 <memset>
  if (13 == tiny_sscanf(param, "%d:%d:%d:%d:%d/%d:%d:%d:%d:%d:%d:%d:%d",
 8002558:	ab18      	add	r3, sp, #96	@ 0x60
 800255a:	930a      	str	r3, [sp, #40]	@ 0x28
 800255c:	ab17      	add	r3, sp, #92	@ 0x5c
 800255e:	9309      	str	r3, [sp, #36]	@ 0x24
 8002560:	ab16      	add	r3, sp, #88	@ 0x58
 8002562:	9308      	str	r3, [sp, #32]
 8002564:	ab15      	add	r3, sp, #84	@ 0x54
 8002566:	9307      	str	r3, [sp, #28]
 8002568:	ab14      	add	r3, sp, #80	@ 0x50
 800256a:	9306      	str	r3, [sp, #24]
 800256c:	ab13      	add	r3, sp, #76	@ 0x4c
 800256e:	9305      	str	r3, [sp, #20]
 8002570:	ab12      	add	r3, sp, #72	@ 0x48
 8002572:	9304      	str	r3, [sp, #16]
 8002574:	ab11      	add	r3, sp, #68	@ 0x44
 8002576:	9303      	str	r3, [sp, #12]
 8002578:	ab19      	add	r3, sp, #100	@ 0x64
 800257a:	9302      	str	r3, [sp, #8]
 800257c:	ab10      	add	r3, sp, #64	@ 0x40
 800257e:	9301      	str	r3, [sp, #4]
 8002580:	ab0f      	add	r3, sp, #60	@ 0x3c
 8002582:	9300      	str	r3, [sp, #0]
 8002584:	0020      	movs	r0, r4
 8002586:	4939      	ldr	r1, [pc, #228]	@ (800266c <AT_test_set_config+0x124>)
 8002588:	ab0e      	add	r3, sp, #56	@ 0x38
 800258a:	aa0d      	add	r2, sp, #52	@ 0x34
 800258c:	f00d fadc 	bl	800fb48 <tiny_sscanf>
 8002590:	280d      	cmp	r0, #13
 8002592:	d002      	beq.n	800259a <AT_test_set_config+0x52>
    return AT_PARAM_ERROR;
 8002594:	2002      	movs	r0, #2
}
 8002596:	b026      	add	sp, #152	@ 0x98
 8002598:	bd10      	pop	{r4, pc}
  TST_get_config(&testParam);
 800259a:	a81a      	add	r0, sp, #104	@ 0x68
 800259c:	f000 fb6a 	bl	8002c74 <TST_get_config>
  if (modulation == 0)
 80025a0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d003      	beq.n	80025ae <AT_test_set_config+0x66>
  else if (modulation == 1)
 80025a6:	2b01      	cmp	r3, #1
 80025a8:	d001      	beq.n	80025ae <AT_test_set_config+0x66>
  else if (modulation == 2)
 80025aa:	2b02      	cmp	r3, #2
 80025ac:	d1f2      	bne.n	8002594 <AT_test_set_config+0x4c>
  if (freq < 1000)
 80025ae:	21fa      	movs	r1, #250	@ 0xfa
 80025b0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
    testParam.modulation = TEST_FSK;
 80025b2:	931a      	str	r3, [sp, #104]	@ 0x68
  if (freq < 1000)
 80025b4:	0089      	lsls	r1, r1, #2
 80025b6:	428a      	cmp	r2, r1
 80025b8:	d201      	bcs.n	80025be <AT_test_set_config+0x76>
    testParam.freq = freq * 1000000;
 80025ba:	492d      	ldr	r1, [pc, #180]	@ (8002670 <AT_test_set_config+0x128>)
 80025bc:	434a      	muls	r2, r1
 80025be:	921b      	str	r2, [sp, #108]	@ 0x6c
  if ((power >= -9) && (power <= 22))
 80025c0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80025c2:	0011      	movs	r1, r2
 80025c4:	3109      	adds	r1, #9
 80025c6:	291f      	cmp	r1, #31
 80025c8:	d8e4      	bhi.n	8002594 <AT_test_set_config+0x4c>
    testParam.power = power;
 80025ca:	921c      	str	r2, [sp, #112]	@ 0x70
  if ((testParam.modulation == TEST_FSK) && (bandwidth >= 4800) && (bandwidth <= 467000))
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d129      	bne.n	8002624 <AT_test_set_config+0xdc>
 80025d0:	4928      	ldr	r1, [pc, #160]	@ (8002674 <AT_test_set_config+0x12c>)
 80025d2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80025d4:	1850      	adds	r0, r2, r1
 80025d6:	4928      	ldr	r1, [pc, #160]	@ (8002678 <AT_test_set_config+0x130>)
 80025d8:	4288      	cmp	r0, r1
 80025da:	d8db      	bhi.n	8002594 <AT_test_set_config+0x4c>
  if ((testParam.modulation == TEST_FSK) && (loraSf_datarate >= 600) && (loraSf_datarate <= 300000))
 80025dc:	4927      	ldr	r1, [pc, #156]	@ (800267c <AT_test_set_config+0x134>)
    testParam.bandwidth = bandwidth;
 80025de:	921d      	str	r2, [sp, #116]	@ 0x74
  if ((testParam.modulation == TEST_FSK) && (loraSf_datarate >= 600) && (loraSf_datarate <= 300000))
 80025e0:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 80025e2:	1850      	adds	r0, r2, r1
 80025e4:	4926      	ldr	r1, [pc, #152]	@ (8002680 <AT_test_set_config+0x138>)
 80025e6:	4288      	cmp	r0, r1
 80025e8:	d8d4      	bhi.n	8002594 <AT_test_set_config+0x4c>
    testParam.loraSf_datarate = loraSf_datarate;
 80025ea:	921e      	str	r2, [sp, #120]	@ 0x78
  if (lna <= 1)
 80025ec:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80025ee:	2a01      	cmp	r2, #1
 80025f0:	d8d0      	bhi.n	8002594 <AT_test_set_config+0x4c>
    testParam.lna = lna;
 80025f2:	9220      	str	r2, [sp, #128]	@ 0x80
  if (paBoost <= 1)
 80025f4:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80025f6:	2a01      	cmp	r2, #1
 80025f8:	d800      	bhi.n	80025fc <AT_test_set_config+0xb4>
    testParam.paBoost = paBoost;
 80025fa:	9221      	str	r2, [sp, #132]	@ 0x84
  if ((payloadLen != 0) && (payloadLen < 256))
 80025fc:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80025fe:	1e51      	subs	r1, r2, #1
 8002600:	29fe      	cmp	r1, #254	@ 0xfe
 8002602:	d8c7      	bhi.n	8002594 <AT_test_set_config+0x4c>
    testParam.payloadLen = payloadLen;
 8002604:	9222      	str	r2, [sp, #136]	@ 0x88
  if ((testParam.modulation == TEST_LORA) || (testParam.modulation == TEST_BPSK))
 8002606:	1e5a      	subs	r2, r3, #1
 8002608:	2a01      	cmp	r2, #1
 800260a:	d91d      	bls.n	8002648 <AT_test_set_config+0x100>
  else if ((testParam.modulation == TEST_FSK) && ((fskDeviation >= 600) && (fskDeviation <= 200000)))
 800260c:	4a1b      	ldr	r2, [pc, #108]	@ (800267c <AT_test_set_config+0x134>)
 800260e:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8002610:	1899      	adds	r1, r3, r2
 8002612:	4a1c      	ldr	r2, [pc, #112]	@ (8002684 <AT_test_set_config+0x13c>)
 8002614:	4291      	cmp	r1, r2
 8002616:	d8bd      	bhi.n	8002594 <AT_test_set_config+0x4c>
    testParam.fskDev = fskDeviation;
 8002618:	9323      	str	r3, [sp, #140]	@ 0x8c
  else if ((testParam.modulation == TEST_FSK) && (BTproduct <= 4))
 800261a:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 800261c:	2b04      	cmp	r3, #4
 800261e:	d8b9      	bhi.n	8002594 <AT_test_set_config+0x4c>
    testParam.BTproduct = BTproduct;
 8002620:	9325      	str	r3, [sp, #148]	@ 0x94
 8002622:	e017      	b.n	8002654 <AT_test_set_config+0x10c>
  else if ((testParam.modulation == TEST_LORA) && (bandwidth <= BW_500kHz))
 8002624:	2b01      	cmp	r3, #1
 8002626:	d11a      	bne.n	800265e <AT_test_set_config+0x116>
 8002628:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800262a:	2a06      	cmp	r2, #6
 800262c:	d8b2      	bhi.n	8002594 <AT_test_set_config+0x4c>
    testParam.bandwidth = bandwidth;
 800262e:	921d      	str	r2, [sp, #116]	@ 0x74
  else if ((testParam.modulation == TEST_LORA) && (loraSf_datarate >= 5) && (loraSf_datarate <= 12))
 8002630:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8002632:	1f51      	subs	r1, r2, #5
 8002634:	2907      	cmp	r1, #7
 8002636:	d8ad      	bhi.n	8002594 <AT_test_set_config+0x4c>
    testParam.loraSf_datarate = loraSf_datarate;
 8002638:	921e      	str	r2, [sp, #120]	@ 0x78
  else if ((testParam.modulation == TEST_LORA) && ((codingRate >= 5) && (codingRate <= 8)))
 800263a:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800263c:	1f51      	subs	r1, r2, #5
 800263e:	2903      	cmp	r1, #3
 8002640:	d8a8      	bhi.n	8002594 <AT_test_set_config+0x4c>
    testParam.codingRate = codingRate - 4;
 8002642:	3a04      	subs	r2, #4
 8002644:	921f      	str	r2, [sp, #124]	@ 0x7c
 8002646:	e7d1      	b.n	80025ec <AT_test_set_config+0xa4>
  if ((testParam.modulation == TEST_FSK) || (testParam.modulation == TEST_BPSK))
 8002648:	2b02      	cmp	r3, #2
 800264a:	d003      	beq.n	8002654 <AT_test_set_config+0x10c>
  else if ((testParam.modulation == TEST_LORA) && (lowDrOpt <= 2))
 800264c:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800264e:	2b02      	cmp	r3, #2
 8002650:	d8a0      	bhi.n	8002594 <AT_test_set_config+0x4c>
    testParam.lowDrOpt = lowDrOpt;
 8002652:	9324      	str	r3, [sp, #144]	@ 0x90
  TST_set_config(&testParam);
 8002654:	a81a      	add	r0, sp, #104	@ 0x68
 8002656:	f000 fb01 	bl	8002c5c <TST_set_config>
  return AT_OK;
 800265a:	2000      	movs	r0, #0
 800265c:	e79b      	b.n	8002596 <AT_test_set_config+0x4e>
  else if ((testParam.modulation == TEST_BPSK) && (loraSf_datarate <= 1000))
 800265e:	21fa      	movs	r1, #250	@ 0xfa
 8002660:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8002662:	0089      	lsls	r1, r1, #2
 8002664:	428a      	cmp	r2, r1
 8002666:	d9c0      	bls.n	80025ea <AT_test_set_config+0xa2>
 8002668:	e794      	b.n	8002594 <AT_test_set_config+0x4c>
 800266a:	46c0      	nop			@ (mov r8, r8)
 800266c:	08010f10 	.word	0x08010f10
 8002670:	000f4240 	.word	0x000f4240
 8002674:	ffffed40 	.word	0xffffed40
 8002678:	00070d78 	.word	0x00070d78
 800267c:	fffffda8 	.word	0xfffffda8
 8002680:	00049188 	.word	0x00049188
 8002684:	00030ae8 	.word	0x00030ae8

08002688 <AT_test_tx>:
{
 8002688:	b507      	push	{r0, r1, r2, lr}
  if (1 != tiny_sscanf(buf, "%u", &nb_packet))
 800268a:	490b      	ldr	r1, [pc, #44]	@ (80026b8 <AT_test_tx+0x30>)
 800268c:	aa01      	add	r2, sp, #4
 800268e:	f00d fa5b 	bl	800fb48 <tiny_sscanf>
 8002692:	2801      	cmp	r0, #1
 8002694:	d007      	beq.n	80026a6 <AT_test_tx+0x1e>
    AT_PRINTF("AT+TTX: nb packets sent is missing\r\n");
 8002696:	2200      	movs	r2, #0
 8002698:	4b08      	ldr	r3, [pc, #32]	@ (80026bc <AT_test_tx+0x34>)
 800269a:	0011      	movs	r1, r2
 800269c:	0010      	movs	r0, r2
 800269e:	f00c fc39 	bl	800ef14 <UTIL_ADV_TRACE_COND_FSend>
    return AT_PARAM_ERROR;
 80026a2:	2002      	movs	r0, #2
}
 80026a4:	bd0e      	pop	{r1, r2, r3, pc}
  if (0U == TST_TX_Start(nb_packet))
 80026a6:	9801      	ldr	r0, [sp, #4]
 80026a8:	f000 fafc 	bl	8002ca4 <TST_TX_Start>
 80026ac:	0003      	movs	r3, r0
    return AT_BUSY_ERROR;
 80026ae:	2003      	movs	r0, #3
  if (0U == TST_TX_Start(nb_packet))
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d1f7      	bne.n	80026a4 <AT_test_tx+0x1c>
    return AT_OK;
 80026b4:	0018      	movs	r0, r3
 80026b6:	e7f5      	b.n	80026a4 <AT_test_tx+0x1c>
 80026b8:	08010f8e 	.word	0x08010f8e
 80026bc:	08010f37 	.word	0x08010f37

080026c0 <AT_test_rx>:
{
 80026c0:	b507      	push	{r0, r1, r2, lr}
  if (1 != tiny_sscanf(buf, "%u", &nb_packet))
 80026c2:	490b      	ldr	r1, [pc, #44]	@ (80026f0 <AT_test_rx+0x30>)
 80026c4:	aa01      	add	r2, sp, #4
 80026c6:	f00d fa3f 	bl	800fb48 <tiny_sscanf>
 80026ca:	2801      	cmp	r0, #1
 80026cc:	d007      	beq.n	80026de <AT_test_rx+0x1e>
    AT_PRINTF("AT+TRX: nb expected packets is missing\r\n");
 80026ce:	2200      	movs	r2, #0
 80026d0:	4b08      	ldr	r3, [pc, #32]	@ (80026f4 <AT_test_rx+0x34>)
 80026d2:	0011      	movs	r1, r2
 80026d4:	0010      	movs	r0, r2
 80026d6:	f00c fc1d 	bl	800ef14 <UTIL_ADV_TRACE_COND_FSend>
    return AT_PARAM_ERROR;
 80026da:	2002      	movs	r0, #2
}
 80026dc:	bd0e      	pop	{r1, r2, r3, pc}
  if (0U == TST_RX_Start(nb_packet))
 80026de:	9801      	ldr	r0, [sp, #4]
 80026e0:	f000 fbaa 	bl	8002e38 <TST_RX_Start>
 80026e4:	0003      	movs	r3, r0
    return AT_BUSY_ERROR;
 80026e6:	2003      	movs	r0, #3
  if (0U == TST_RX_Start(nb_packet))
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d1f7      	bne.n	80026dc <AT_test_rx+0x1c>
    return AT_OK;
 80026ec:	0018      	movs	r0, r3
 80026ee:	e7f5      	b.n	80026dc <AT_test_rx+0x1c>
 80026f0:	08010f8e 	.word	0x08010f8e
 80026f4:	08010f5c 	.word	0x08010f5c

080026f8 <AT_Certif>:
{
 80026f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
  switch (param[0])
 80026fa:	7803      	ldrb	r3, [r0, #0]
 80026fc:	2b30      	cmp	r3, #48	@ 0x30
 80026fe:	d01e      	beq.n	800273e <AT_Certif+0x46>
 8002700:	2002      	movs	r0, #2
 8002702:	2b31      	cmp	r3, #49	@ 0x31
 8002704:	d11a      	bne.n	800273c <AT_Certif+0x44>
      LmHandlerJoin(ACTIVATION_TYPE_OTAA);
 8002706:	2002      	movs	r0, #2
 8002708:	f005 fc14 	bl	8007f34 <LmHandlerJoin>
  UTIL_TIMER_Create(&TxCertifTimer,  0xFFFFFFFFU, UTIL_TIMER_ONESHOT, OnCertifTimer, NULL);  /* 8s */
 800270c:	2400      	movs	r4, #0
 800270e:	2101      	movs	r1, #1
 8002710:	4d0d      	ldr	r5, [pc, #52]	@ (8002748 <AT_Certif+0x50>)
 8002712:	0022      	movs	r2, r4
 8002714:	4b0d      	ldr	r3, [pc, #52]	@ (800274c <AT_Certif+0x54>)
 8002716:	4249      	negs	r1, r1
 8002718:	0028      	movs	r0, r5
 800271a:	9400      	str	r4, [sp, #0]
 800271c:	f00c ffa4 	bl	800f668 <UTIL_TIMER_Create>
  UTIL_TIMER_SetPeriod(&TxCertifTimer,  8000);  /* 8s */
 8002720:	21fa      	movs	r1, #250	@ 0xfa
 8002722:	0028      	movs	r0, r5
 8002724:	0149      	lsls	r1, r1, #5
 8002726:	f00d f88f 	bl	800f848 <UTIL_TIMER_SetPeriod>
  UTIL_TIMER_Start(&TxCertifTimer);
 800272a:	0028      	movs	r0, r5
 800272c:	f00d f84e 	bl	800f7cc <UTIL_TIMER_Start>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaCertifTx), UTIL_SEQ_RFU, CertifSend);
 8002730:	2004      	movs	r0, #4
 8002732:	0021      	movs	r1, r4
 8002734:	4a06      	ldr	r2, [pc, #24]	@ (8002750 <AT_Certif+0x58>)
 8002736:	f00c fdd7 	bl	800f2e8 <UTIL_SEQ_RegTask>
  return AT_OK;
 800273a:	0020      	movs	r0, r4
}
 800273c:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
      LmHandlerJoin(ACTIVATION_TYPE_ABP);
 800273e:	2001      	movs	r0, #1
 8002740:	f005 fbf8 	bl	8007f34 <LmHandlerJoin>
 8002744:	e7df      	b.n	8002706 <AT_Certif+0xe>
 8002746:	46c0      	nop			@ (mov r8, r8)
 8002748:	20000198 	.word	0x20000198
 800274c:	0800188d 	.word	0x0800188d
 8002750:	08001859 	.word	0x08001859

08002754 <AT_test_tx_hopping>:
{
 8002754:	b530      	push	{r4, r5, lr}
 8002756:	b095      	sub	sp, #84	@ 0x54
  if (4 != tiny_sscanf(buf, "%u,%u,%u,%u", &freq_start, &freq_stop, &delta_f, &nb_tx))
 8002758:	ab07      	add	r3, sp, #28
 800275a:	9301      	str	r3, [sp, #4]
 800275c:	ab06      	add	r3, sp, #24
 800275e:	9300      	str	r3, [sp, #0]
 8002760:	491f      	ldr	r1, [pc, #124]	@ (80027e0 <AT_test_tx_hopping+0x8c>)
 8002762:	ab05      	add	r3, sp, #20
 8002764:	aa04      	add	r2, sp, #16
 8002766:	f00d f9ef 	bl	800fb48 <tiny_sscanf>
    return AT_PARAM_ERROR;
 800276a:	2302      	movs	r3, #2
  if (4 != tiny_sscanf(buf, "%u,%u,%u,%u", &freq_start, &freq_stop, &delta_f, &nb_tx))
 800276c:	2804      	cmp	r0, #4
 800276e:	d113      	bne.n	8002798 <AT_test_tx_hopping+0x44>
  if (freq_start < 1000)
 8002770:	21fa      	movs	r1, #250	@ 0xfa
 8002772:	9a04      	ldr	r2, [sp, #16]
 8002774:	0089      	lsls	r1, r1, #2
 8002776:	428a      	cmp	r2, r1
 8002778:	d202      	bcs.n	8002780 <AT_test_tx_hopping+0x2c>
    freq_start *= 1000000;
 800277a:	4b1a      	ldr	r3, [pc, #104]	@ (80027e4 <AT_test_tx_hopping+0x90>)
 800277c:	4353      	muls	r3, r2
 800277e:	9304      	str	r3, [sp, #16]
  if (freq_stop < 1000)
 8002780:	9a05      	ldr	r2, [sp, #20]
 8002782:	428a      	cmp	r2, r1
 8002784:	d202      	bcs.n	800278c <AT_test_tx_hopping+0x38>
    freq_stop *= 1000000;
 8002786:	4b17      	ldr	r3, [pc, #92]	@ (80027e4 <AT_test_tx_hopping+0x90>)
 8002788:	4353      	muls	r3, r2
 800278a:	9305      	str	r3, [sp, #20]
  for (int i = 0; i < nb_tx; i++)
 800278c:	2500      	movs	r5, #0
  hop_freq = freq_start;
 800278e:	9c04      	ldr	r4, [sp, #16]
  for (int i = 0; i < nb_tx; i++)
 8002790:	9b07      	ldr	r3, [sp, #28]
 8002792:	42ab      	cmp	r3, r5
 8002794:	d803      	bhi.n	800279e <AT_test_tx_hopping+0x4a>
  return AT_OK;
 8002796:	2300      	movs	r3, #0
}
 8002798:	0018      	movs	r0, r3
 800279a:	b015      	add	sp, #84	@ 0x54
 800279c:	bd30      	pop	{r4, r5, pc}
    TST_get_config(&test_param);
 800279e:	a808      	add	r0, sp, #32
 80027a0:	f000 fa68 	bl	8002c74 <TST_get_config>
    TST_set_config(&test_param);
 80027a4:	a808      	add	r0, sp, #32
    test_param.freq = hop_freq;
 80027a6:	9409      	str	r4, [sp, #36]	@ 0x24
    TST_set_config(&test_param);
 80027a8:	f000 fa58 	bl	8002c5c <TST_set_config>
    APP_TPRINTF("Tx Hop at %dHz. %d of %d\r\n", hop_freq, i, nb_tx);
 80027ac:	2100      	movs	r1, #0
 80027ae:	9a07      	ldr	r2, [sp, #28]
 80027b0:	0008      	movs	r0, r1
 80027b2:	9202      	str	r2, [sp, #8]
 80027b4:	4b0c      	ldr	r3, [pc, #48]	@ (80027e8 <AT_test_tx_hopping+0x94>)
 80027b6:	2201      	movs	r2, #1
 80027b8:	9501      	str	r5, [sp, #4]
 80027ba:	9400      	str	r4, [sp, #0]
 80027bc:	f00c fbaa 	bl	800ef14 <UTIL_ADV_TRACE_COND_FSend>
    if (0U != TST_TX_Start(1))
 80027c0:	2001      	movs	r0, #1
 80027c2:	f000 fa6f 	bl	8002ca4 <TST_TX_Start>
 80027c6:	2800      	cmp	r0, #0
 80027c8:	d107      	bne.n	80027da <AT_test_tx_hopping+0x86>
    hop_freq += delta_f;
 80027ca:	9b06      	ldr	r3, [sp, #24]
 80027cc:	18e4      	adds	r4, r4, r3
    if (hop_freq > freq_stop)
 80027ce:	9b05      	ldr	r3, [sp, #20]
 80027d0:	42a3      	cmp	r3, r4
 80027d2:	d200      	bcs.n	80027d6 <AT_test_tx_hopping+0x82>
      hop_freq = freq_start;
 80027d4:	9c04      	ldr	r4, [sp, #16]
  for (int i = 0; i < nb_tx; i++)
 80027d6:	3501      	adds	r5, #1
 80027d8:	e7da      	b.n	8002790 <AT_test_tx_hopping+0x3c>
      return AT_BUSY_ERROR;
 80027da:	2303      	movs	r3, #3
 80027dc:	e7dc      	b.n	8002798 <AT_test_tx_hopping+0x44>
 80027de:	46c0      	nop			@ (mov r8, r8)
 80027e0:	08010f85 	.word	0x08010f85
 80027e4:	000f4240 	.word	0x000f4240
 80027e8:	08010f91 	.word	0x08010f91

080027ec <AT_test_stop>:
{
 80027ec:	b510      	push	{r4, lr}
  TST_stop();
 80027ee:	f000 fa4b 	bl	8002c88 <TST_stop>
  AT_PRINTF("Test Stop\r\n");
 80027f2:	2200      	movs	r2, #0
 80027f4:	4b03      	ldr	r3, [pc, #12]	@ (8002804 <AT_test_stop+0x18>)
 80027f6:	0011      	movs	r1, r2
 80027f8:	0010      	movs	r0, r2
 80027fa:	f00c fb8b 	bl	800ef14 <UTIL_ADV_TRACE_COND_FSend>
}
 80027fe:	2000      	movs	r0, #0
 8002800:	bd10      	pop	{r4, pc}
 8002802:	46c0      	nop			@ (mov r8, r8)
 8002804:	08010fac 	.word	0x08010fac

08002808 <AT_bat_get>:
{
 8002808:	b510      	push	{r4, lr}
  print_d(SYS_GetBatteryLevel());
 800280a:	f000 fc9f 	bl	800314c <SYS_GetBatteryLevel>
 800280e:	f7fe ffef 	bl	80017f0 <print_d>
}
 8002812:	2000      	movs	r0, #0
 8002814:	bd10      	pop	{r4, pc}
	...

08002818 <CMD_GetChar>:
static void CMD_GetChar(uint8_t *rxChar, uint16_t size, uint8_t error)
{
  /* USER CODE BEGIN CMD_GetChar_1 */

  /* USER CODE END CMD_GetChar_1 */
  charCount++;
 8002818:	4b0d      	ldr	r3, [pc, #52]	@ (8002850 <CMD_GetChar+0x38>)
{
 800281a:	b510      	push	{r4, lr}
  charCount++;
 800281c:	681a      	ldr	r2, [r3, #0]
 800281e:	3201      	adds	r2, #1
 8002820:	601a      	str	r2, [r3, #0]
  if (charCount == (CIRC_BUFF_SIZE + 1))
 8002822:	2a09      	cmp	r2, #9
 8002824:	d108      	bne.n	8002838 <CMD_GetChar+0x20>
  {
    circBuffOverflow = 1;
 8002826:	3a08      	subs	r2, #8
 8002828:	605a      	str	r2, [r3, #4]
    charCount--;
 800282a:	3207      	adds	r2, #7
 800282c:	601a      	str	r2, [r3, #0]
    {
      widx = 0;
    }
  }

  if (NotifyCb != NULL)
 800282e:	695b      	ldr	r3, [r3, #20]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d000      	beq.n	8002836 <CMD_GetChar+0x1e>
  {
    NotifyCb();
 8002834:	4798      	blx	r3
  }
  /* USER CODE BEGIN CMD_GetChar_2 */

  /* USER CODE END CMD_GetChar_2 */
}
 8002836:	bd10      	pop	{r4, pc}
    circBuffer[widx++] = *rxChar;
 8002838:	689a      	ldr	r2, [r3, #8]
 800283a:	7800      	ldrb	r0, [r0, #0]
 800283c:	1c51      	adds	r1, r2, #1
 800283e:	189a      	adds	r2, r3, r2
 8002840:	6099      	str	r1, [r3, #8]
 8002842:	7310      	strb	r0, [r2, #12]
    if (widx == CIRC_BUFF_SIZE)
 8002844:	2908      	cmp	r1, #8
 8002846:	d1f2      	bne.n	800282e <CMD_GetChar+0x16>
      widx = 0;
 8002848:	2200      	movs	r2, #0
 800284a:	609a      	str	r2, [r3, #8]
 800284c:	e7ef      	b.n	800282e <CMD_GetChar+0x16>
 800284e:	46c0      	nop			@ (mov r8, r8)
 8002850:	200002a4 	.word	0x200002a4

08002854 <com_error>:

  /* USER CODE END parse_cmd_2 */
}

static void com_error(ATEerror_t error_type)
{
 8002854:	b510      	push	{r4, lr}
  /* USER CODE BEGIN com_error_1 */

  /* USER CODE END com_error_1 */
  if (error_type > AT_MAX)
 8002856:	1c04      	adds	r4, r0, #0
 8002858:	280a      	cmp	r0, #10
 800285a:	d900      	bls.n	800285e <com_error+0xa>
 800285c:	240a      	movs	r4, #10
 800285e:	b2e4      	uxtb	r4, r4
  {
    error_type = AT_MAX;
  }
  AT_PPRINTF(ATError_description[error_type]);
 8002860:	4b05      	ldr	r3, [pc, #20]	@ (8002878 <com_error+0x24>)
 8002862:	00a2      	lsls	r2, r4, #2
 8002864:	58d3      	ldr	r3, [r2, r3]
 8002866:	2200      	movs	r2, #0
 8002868:	0011      	movs	r1, r2
 800286a:	0010      	movs	r0, r2
 800286c:	f00c fb52 	bl	800ef14 <UTIL_ADV_TRACE_COND_FSend>
 8002870:	2800      	cmp	r0, #0
 8002872:	d1f5      	bne.n	8002860 <com_error+0xc>
  /* USER CODE BEGIN com_error_2 */

  /* USER CODE END com_error_2 */
}
 8002874:	bd10      	pop	{r4, pc}
 8002876:	46c0      	nop			@ (mov r8, r8)
 8002878:	0800ffb0 	.word	0x0800ffb0

0800287c <CMD_Init>:
{
 800287c:	b510      	push	{r4, lr}
 800287e:	0004      	movs	r4, r0
  UTIL_ADV_TRACE_StartRxProcess(CMD_GetChar);
 8002880:	4806      	ldr	r0, [pc, #24]	@ (800289c <CMD_Init+0x20>)
 8002882:	f00c faeb 	bl	800ee5c <UTIL_ADV_TRACE_StartRxProcess>
  if (CmdProcessNotify != NULL)
 8002886:	4b06      	ldr	r3, [pc, #24]	@ (80028a0 <CMD_Init+0x24>)
 8002888:	2c00      	cmp	r4, #0
 800288a:	d000      	beq.n	800288e <CMD_Init+0x12>
    NotifyCb = CmdProcessNotify;
 800288c:	615c      	str	r4, [r3, #20]
  widx = 0;
 800288e:	2200      	movs	r2, #0
 8002890:	609a      	str	r2, [r3, #8]
  ridx = 0;
 8002892:	619a      	str	r2, [r3, #24]
  charCount = 0;
 8002894:	601a      	str	r2, [r3, #0]
  i = 0;
 8002896:	61da      	str	r2, [r3, #28]
  circBuffOverflow = 0;
 8002898:	605a      	str	r2, [r3, #4]
}
 800289a:	bd10      	pop	{r4, pc}
 800289c:	08002819 	.word	0x08002819
 80028a0:	200002a4 	.word	0x200002a4

080028a4 <CMD_Process>:
{
 80028a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if (circBuffOverflow == 1)
 80028a6:	4c83      	ldr	r4, [pc, #524]	@ (8002ab4 <CMD_Process+0x210>)
 80028a8:	6863      	ldr	r3, [r4, #4]
 80028aa:	2b01      	cmp	r3, #1
 80028ac:	d10d      	bne.n	80028ca <CMD_Process+0x26>
    com_error(AT_TEST_PARAM_OVERFLOW);
 80028ae:	2004      	movs	r0, #4
 80028b0:	f7ff ffd0 	bl	8002854 <com_error>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80028b4:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80028b8:	b672      	cpsid	i
    ridx = widx;
 80028ba:	68a3      	ldr	r3, [r4, #8]
 80028bc:	61a3      	str	r3, [r4, #24]
    charCount = 0;
 80028be:	2300      	movs	r3, #0
 80028c0:	6023      	str	r3, [r4, #0]
    circBuffOverflow = 0;
 80028c2:	6063      	str	r3, [r4, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80028c4:	f382 8810 	msr	PRIMASK, r2
        i = 0;
 80028c8:	61e3      	str	r3, [r4, #28]
  while (charCount != 0)
 80028ca:	6823      	ldr	r3, [r4, #0]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d100      	bne.n	80028d2 <CMD_Process+0x2e>
}
 80028d0:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    if (circBuffer[ridx] == AT_ERROR_RX_CHAR)
 80028d2:	69a3      	ldr	r3, [r4, #24]
 80028d4:	18e2      	adds	r2, r4, r3
 80028d6:	7b12      	ldrb	r2, [r2, #12]
 80028d8:	2a01      	cmp	r2, #1
 80028da:	d111      	bne.n	8002900 <CMD_Process+0x5c>
      ridx++;
 80028dc:	1c5a      	adds	r2, r3, #1
      if (ridx == CIRC_BUFF_SIZE)
 80028de:	2b07      	cmp	r3, #7
 80028e0:	d100      	bne.n	80028e4 <CMD_Process+0x40>
 80028e2:	2200      	movs	r2, #0
      ridx++;
 80028e4:	61a2      	str	r2, [r4, #24]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80028e6:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80028ea:	b672      	cpsid	i
      charCount--;
 80028ec:	6823      	ldr	r3, [r4, #0]
 80028ee:	3b01      	subs	r3, #1
 80028f0:	6023      	str	r3, [r4, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80028f2:	f382 8810 	msr	PRIMASK, r2
      com_error(AT_RX_ERROR);
 80028f6:	2006      	movs	r0, #6
  com_error(status);
 80028f8:	f7ff ffac 	bl	8002854 <com_error>
        i = 0;
 80028fc:	2300      	movs	r3, #0
 80028fe:	e7e3      	b.n	80028c8 <CMD_Process+0x24>
    else if ((circBuffer[ridx] == '\r') || (circBuffer[ridx] == '\n'))
 8002900:	2a0d      	cmp	r2, #13
 8002902:	d002      	beq.n	800290a <CMD_Process+0x66>
 8002904:	2a0a      	cmp	r2, #10
 8002906:	d000      	beq.n	800290a <CMD_Process+0x66>
 8002908:	e0b7      	b.n	8002a7a <CMD_Process+0x1d6>
      ridx++;
 800290a:	1c5a      	adds	r2, r3, #1
      if (ridx == CIRC_BUFF_SIZE)
 800290c:	2b07      	cmp	r3, #7
 800290e:	d100      	bne.n	8002912 <CMD_Process+0x6e>
 8002910:	2200      	movs	r2, #0
      ridx++;
 8002912:	61a2      	str	r2, [r4, #24]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002914:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8002918:	b672      	cpsid	i
      charCount--;
 800291a:	6823      	ldr	r3, [r4, #0]
 800291c:	3b01      	subs	r3, #1
 800291e:	6023      	str	r3, [r4, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002920:	f382 8810 	msr	PRIMASK, r2
      if (i != 0)
 8002924:	69e2      	ldr	r2, [r4, #28]
 8002926:	2a00      	cmp	r2, #0
 8002928:	d0cf      	beq.n	80028ca <CMD_Process+0x26>
        command[i] = '\0';
 800292a:	2300      	movs	r3, #0
 800292c:	4962      	ldr	r1, [pc, #392]	@ (8002ab8 <CMD_Process+0x214>)
 800292e:	548b      	strb	r3, [r1, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002930:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8002934:	b672      	cpsid	i
  uint32_t bs_cnt = 0;
 8002936:	001d      	movs	r5, r3
  while (cmd[cmd_len] != '\0')
 8002938:	5ccf      	ldrb	r7, [r1, r3]
 800293a:	2f00      	cmp	r7, #0
 800293c:	d131      	bne.n	80029a2 <CMD_Process+0xfe>
  for (i = 0; i < bs_cnt; i++)
 800293e:	0038      	movs	r0, r7
 8002940:	3b02      	subs	r3, #2
    while (cmd[curs] != '\b')
 8002942:	4e5d      	ldr	r6, [pc, #372]	@ (8002ab8 <CMD_Process+0x214>)
 8002944:	9300      	str	r3, [sp, #0]
  for (i = 0; i < bs_cnt; i++)
 8002946:	4285      	cmp	r5, r0
 8002948:	d148      	bne.n	80029dc <CMD_Process+0x138>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800294a:	f38c 8810 	msr	PRIMASK, ip
  if ((cmd[0] != 'A') || (cmd[1] != 'T'))
 800294e:	4b5a      	ldr	r3, [pc, #360]	@ (8002ab8 <CMD_Process+0x214>)
 8002950:	781a      	ldrb	r2, [r3, #0]
 8002952:	2a41      	cmp	r2, #65	@ 0x41
 8002954:	d000      	beq.n	8002958 <CMD_Process+0xb4>
 8002956:	e08e      	b.n	8002a76 <CMD_Process+0x1d2>
 8002958:	785a      	ldrb	r2, [r3, #1]
 800295a:	2a54      	cmp	r2, #84	@ 0x54
 800295c:	d000      	beq.n	8002960 <CMD_Process+0xbc>
 800295e:	e08a      	b.n	8002a76 <CMD_Process+0x1d2>
  else if (cmd[2] == '\0')
 8002960:	789b      	ldrb	r3, [r3, #2]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d01b      	beq.n	800299e <CMD_Process+0xfa>
  else if (cmd[2] == '?')
 8002966:	2b3f      	cmp	r3, #63	@ 0x3f
 8002968:	d13f      	bne.n	80029ea <CMD_Process+0x146>
    AT_PPRINTF("AT+<CMD>?        : Help on <CMD>\r\n"
 800296a:	2200      	movs	r2, #0
 800296c:	4b53      	ldr	r3, [pc, #332]	@ (8002abc <CMD_Process+0x218>)
 800296e:	0011      	movs	r1, r2
 8002970:	0010      	movs	r0, r2
 8002972:	f00c facf 	bl	800ef14 <UTIL_ADV_TRACE_COND_FSend>
 8002976:	2800      	cmp	r0, #0
 8002978:	d1f7      	bne.n	800296a <CMD_Process+0xc6>
 800297a:	2525      	movs	r5, #37	@ 0x25
 800297c:	4e50      	ldr	r6, [pc, #320]	@ (8002ac0 <CMD_Process+0x21c>)
      AT_PPRINTF(ATCommand[i].help_string);
 800297e:	2200      	movs	r2, #0
 8002980:	6973      	ldr	r3, [r6, #20]
 8002982:	0011      	movs	r1, r2
 8002984:	0010      	movs	r0, r2
 8002986:	f00c fac5 	bl	800ef14 <UTIL_ADV_TRACE_COND_FSend>
 800298a:	2800      	cmp	r0, #0
 800298c:	d1f7      	bne.n	800297e <CMD_Process+0xda>
    for (i = 0; i < (sizeof(ATCommand) / sizeof(struct ATCommand_s)); i++)
 800298e:	3d01      	subs	r5, #1
 8002990:	3618      	adds	r6, #24
 8002992:	2d00      	cmp	r5, #0
 8002994:	d1f3      	bne.n	800297e <CMD_Process+0xda>
    while (1 != UTIL_ADV_TRACE_IsBufferEmpty())
 8002996:	f00c fa57 	bl	800ee48 <UTIL_ADV_TRACE_IsBufferEmpty>
 800299a:	2801      	cmp	r0, #1
 800299c:	d1fb      	bne.n	8002996 <CMD_Process+0xf2>
  com_error(status);
 800299e:	0038      	movs	r0, r7
 80029a0:	e7aa      	b.n	80028f8 <CMD_Process+0x54>
      bs_cnt++;
 80029a2:	003a      	movs	r2, r7
 80029a4:	3a08      	subs	r2, #8
 80029a6:	4250      	negs	r0, r2
 80029a8:	4142      	adcs	r2, r0
    cmd_len++;
 80029aa:	3301      	adds	r3, #1
      bs_cnt++;
 80029ac:	18ad      	adds	r5, r5, r2
    cmd_len++;
 80029ae:	e7c3      	b.n	8002938 <CMD_Process+0x94>
      curs++;
 80029b0:	3201      	adds	r2, #1
    while (cmd[curs] != '\b')
 80029b2:	5cb1      	ldrb	r1, [r6, r2]
 80029b4:	2908      	cmp	r1, #8
 80029b6:	d1fb      	bne.n	80029b0 <CMD_Process+0x10c>
    if (curs > 0)
 80029b8:	2a00      	cmp	r2, #0
 80029ba:	d0c6      	beq.n	800294a <CMD_Process+0xa6>
      for (j = curs - 1; j < cmd_len - 2; j++)
 80029bc:	3a01      	subs	r2, #1
 80029be:	1991      	adds	r1, r2, r6
 80029c0:	1c53      	adds	r3, r2, #1
 80029c2:	9301      	str	r3, [sp, #4]
 80029c4:	9b00      	ldr	r3, [sp, #0]
 80029c6:	429a      	cmp	r2, r3
 80029c8:	d30a      	bcc.n	80029e0 <CMD_Process+0x13c>
      cmd[j++] = '\0';
 80029ca:	2200      	movs	r2, #0
      cmd[j++] = '\0';
 80029cc:	9b01      	ldr	r3, [sp, #4]
      cmd[j++] = '\0';
 80029ce:	700a      	strb	r2, [r1, #0]
      cmd[j++] = '\0';
 80029d0:	54f2      	strb	r2, [r6, r3]
  for (i = 0; i < bs_cnt; i++)
 80029d2:	9b00      	ldr	r3, [sp, #0]
 80029d4:	3001      	adds	r0, #1
 80029d6:	3b02      	subs	r3, #2
 80029d8:	9300      	str	r3, [sp, #0]
 80029da:	e7b4      	b.n	8002946 <CMD_Process+0xa2>
    int curs = 0;
 80029dc:	2200      	movs	r2, #0
 80029de:	e7e8      	b.n	80029b2 <CMD_Process+0x10e>
        cmd[j] = cmd[j + 2];
 80029e0:	788a      	ldrb	r2, [r1, #2]
 80029e2:	700a      	strb	r2, [r1, #0]
      for (j = curs - 1; j < cmd_len - 2; j++)
 80029e4:	9a01      	ldr	r2, [sp, #4]
 80029e6:	3101      	adds	r1, #1
 80029e8:	e7ea      	b.n	80029c0 <CMD_Process+0x11c>
    for (i = 0; i < (sizeof(ATCommand) / sizeof(struct ATCommand_s)); i++)
 80029ea:	2500      	movs	r5, #0
      if (strncmp(cmd, ATCommand[i].string, ATCommand[i].size_string) == 0)
 80029ec:	4b35      	ldr	r3, [pc, #212]	@ (8002ac4 <CMD_Process+0x220>)
 80029ee:	4e34      	ldr	r6, [pc, #208]	@ (8002ac0 <CMD_Process+0x21c>)
 80029f0:	9301      	str	r3, [sp, #4]
 80029f2:	6873      	ldr	r3, [r6, #4]
 80029f4:	6831      	ldr	r1, [r6, #0]
 80029f6:	001a      	movs	r2, r3
 80029f8:	9801      	ldr	r0, [sp, #4]
 80029fa:	9300      	str	r3, [sp, #0]
 80029fc:	f00d f9e0 	bl	800fdc0 <strncmp>
 8002a00:	2800      	cmp	r0, #0
 8002a02:	d134      	bne.n	8002a6e <CMD_Process+0x1ca>
        cmd += Current_ATCommand->size_string;
 8002a04:	9b00      	ldr	r3, [sp, #0]
 8002a06:	9a01      	ldr	r2, [sp, #4]
        switch (cmd[0])
 8002a08:	9900      	ldr	r1, [sp, #0]
        cmd += Current_ATCommand->size_string;
 8002a0a:	189a      	adds	r2, r3, r2
        switch (cmd[0])
 8002a0c:	9b01      	ldr	r3, [sp, #4]
 8002a0e:	5c5b      	ldrb	r3, [r3, r1]
 8002a10:	2b3d      	cmp	r3, #61	@ 0x3d
 8002a12:	d01b      	beq.n	8002a4c <CMD_Process+0x1a8>
 8002a14:	2b3f      	cmp	r3, #63	@ 0x3f
 8002a16:	d10d      	bne.n	8002a34 <CMD_Process+0x190>
            AT_PPRINTF(Current_ATCommand->help_string);
 8002a18:	3b27      	subs	r3, #39	@ 0x27
 8002a1a:	436b      	muls	r3, r5
 8002a1c:	4a28      	ldr	r2, [pc, #160]	@ (8002ac0 <CMD_Process+0x21c>)
 8002a1e:	18d3      	adds	r3, r2, r3
 8002a20:	695d      	ldr	r5, [r3, #20]
 8002a22:	2200      	movs	r2, #0
 8002a24:	002b      	movs	r3, r5
 8002a26:	0011      	movs	r1, r2
 8002a28:	0010      	movs	r0, r2
 8002a2a:	f00c fa73 	bl	800ef14 <UTIL_ADV_TRACE_COND_FSend>
 8002a2e:	2800      	cmp	r0, #0
 8002a30:	d1f7      	bne.n	8002a22 <CMD_Process+0x17e>
 8002a32:	e7b4      	b.n	800299e <CMD_Process+0xfa>
        switch (cmd[0])
 8002a34:	2701      	movs	r7, #1
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d1b1      	bne.n	800299e <CMD_Process+0xfa>
            status = Current_ATCommand->run(cmd);
 8002a3a:	0010      	movs	r0, r2
 8002a3c:	3318      	adds	r3, #24
 8002a3e:	436b      	muls	r3, r5
 8002a40:	491f      	ldr	r1, [pc, #124]	@ (8002ac0 <CMD_Process+0x21c>)
 8002a42:	18cb      	adds	r3, r1, r3
 8002a44:	691b      	ldr	r3, [r3, #16]
              status = Current_ATCommand->set(cmd + 1);
 8002a46:	4798      	blx	r3
 8002a48:	0007      	movs	r7, r0
 8002a4a:	e7a8      	b.n	800299e <CMD_Process+0xfa>
            if ((cmd[1] == '?') && (cmd[2] == '\0'))
 8002a4c:	2318      	movs	r3, #24
 8002a4e:	7851      	ldrb	r1, [r2, #1]
              status = Current_ATCommand->get(cmd + 1);
 8002a50:	436b      	muls	r3, r5
 8002a52:	1c50      	adds	r0, r2, #1
            if ((cmd[1] == '?') && (cmd[2] == '\0'))
 8002a54:	293f      	cmp	r1, #63	@ 0x3f
 8002a56:	d106      	bne.n	8002a66 <CMD_Process+0x1c2>
 8002a58:	7892      	ldrb	r2, [r2, #2]
 8002a5a:	2a00      	cmp	r2, #0
 8002a5c:	d103      	bne.n	8002a66 <CMD_Process+0x1c2>
              status = Current_ATCommand->get(cmd + 1);
 8002a5e:	4a18      	ldr	r2, [pc, #96]	@ (8002ac0 <CMD_Process+0x21c>)
 8002a60:	18d3      	adds	r3, r2, r3
 8002a62:	689b      	ldr	r3, [r3, #8]
 8002a64:	e7ef      	b.n	8002a46 <CMD_Process+0x1a2>
              status = Current_ATCommand->set(cmd + 1);
 8002a66:	4a16      	ldr	r2, [pc, #88]	@ (8002ac0 <CMD_Process+0x21c>)
 8002a68:	18d3      	adds	r3, r2, r3
 8002a6a:	68db      	ldr	r3, [r3, #12]
 8002a6c:	e7eb      	b.n	8002a46 <CMD_Process+0x1a2>
    for (i = 0; i < (sizeof(ATCommand) / sizeof(struct ATCommand_s)); i++)
 8002a6e:	3501      	adds	r5, #1
 8002a70:	3618      	adds	r6, #24
 8002a72:	2d25      	cmp	r5, #37	@ 0x25
 8002a74:	d1bd      	bne.n	80029f2 <CMD_Process+0x14e>
 8002a76:	2701      	movs	r7, #1
 8002a78:	e791      	b.n	800299e <CMD_Process+0xfa>
    else if (i == (CMD_SIZE - 1))
 8002a7a:	69e1      	ldr	r1, [r4, #28]
 8002a7c:	4812      	ldr	r0, [pc, #72]	@ (8002ac8 <CMD_Process+0x224>)
 8002a7e:	4281      	cmp	r1, r0
 8002a80:	d105      	bne.n	8002a8e <CMD_Process+0x1ea>
      i = 0;
 8002a82:	2300      	movs	r3, #0
      com_error(AT_TEST_PARAM_OVERFLOW);
 8002a84:	2004      	movs	r0, #4
      i = 0;
 8002a86:	61e3      	str	r3, [r4, #28]
      com_error(AT_TEST_PARAM_OVERFLOW);
 8002a88:	f7ff fee4 	bl	8002854 <com_error>
 8002a8c:	e71d      	b.n	80028ca <CMD_Process+0x26>
      command[i++] = circBuffer[ridx++];
 8002a8e:	1c48      	adds	r0, r1, #1
 8002a90:	61e0      	str	r0, [r4, #28]
 8002a92:	4809      	ldr	r0, [pc, #36]	@ (8002ab8 <CMD_Process+0x214>)
 8002a94:	3301      	adds	r3, #1
 8002a96:	61a3      	str	r3, [r4, #24]
 8002a98:	5442      	strb	r2, [r0, r1]
      if (ridx == CIRC_BUFF_SIZE)
 8002a9a:	2b08      	cmp	r3, #8
 8002a9c:	d101      	bne.n	8002aa2 <CMD_Process+0x1fe>
        ridx = 0;
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	61a3      	str	r3, [r4, #24]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002aa2:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8002aa6:	b672      	cpsid	i
      charCount--;
 8002aa8:	6823      	ldr	r3, [r4, #0]
 8002aaa:	3b01      	subs	r3, #1
 8002aac:	6023      	str	r3, [r4, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002aae:	f382 8810 	msr	PRIMASK, r2
}
 8002ab2:	e70a      	b.n	80028ca <CMD_Process+0x26>
 8002ab4:	200002a4 	.word	0x200002a4
 8002ab8:	200002c4 	.word	0x200002c4
 8002abc:	08011039 	.word	0x08011039
 8002ac0:	0800ffdc 	.word	0x0800ffdc
 8002ac4:	200002c6 	.word	0x200002c6
 8002ac8:	0000021b 	.word	0x0000021b

08002acc <LoraInfo_Init>:
/* Exported functions --------------------------------------------------------*/
void LoraInfo_Init(void)
{
  loraInfo.ActivationMode = 0;
  loraInfo.Region = 0;
  loraInfo.ClassB = 0;
 8002acc:	2200      	movs	r2, #0
 8002ace:	4b04      	ldr	r3, [pc, #16]	@ (8002ae0 <LoraInfo_Init+0x14>)
 8002ad0:	609a      	str	r2, [r3, #8]
  loraInfo.Kms = 0;
 8002ad2:	60da      	str	r2, [r3, #12]
#endif /* REGION_CN779 */
#ifdef  REGION_EU433
  loraInfo.Region |= (1 << LORAMAC_REGION_EU433) ;
#endif /* REGION_EU433 */
#ifdef  REGION_EU868
  loraInfo.Region |= (1 << LORAMAC_REGION_EU868) ;
 8002ad4:	3220      	adds	r2, #32
 8002ad6:	605a      	str	r2, [r3, #4]
#error LORAMAC_CLASSB_ENABLED not defined ( shall be <0 or 1> )
#endif /* LORAMAC_CLASSB_ENABLED */

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
  loraInfo.Kms = 0;
  loraInfo.ActivationMode = 3;
 8002ad8:	3a1d      	subs	r2, #29
 8002ada:	601a      	str	r2, [r3, #0]
  loraInfo.ActivationMode = ACTIVATION_BY_PERSONALIZATION + (OVER_THE_AIR_ACTIVATION << 1);
#endif /* LORAWAN_KMS */
  /* USER CODE BEGIN LoraInfo_Init_2 */

  /* USER CODE END LoraInfo_Init_2 */
}
 8002adc:	4770      	bx	lr
 8002ade:	46c0      	nop			@ (mov r8, r8)
 8002ae0:	200004e0 	.word	0x200004e0

08002ae4 <LoraInfo_GetPtr>:
LoraInfo_t *LoraInfo_GetPtr(void)
{
  /* USER CODE BEGIN LoraInfo_GetPtr */

  /* USER CODE END LoraInfo_GetPtr */
  return &loraInfo;
 8002ae4:	4800      	ldr	r0, [pc, #0]	@ (8002ae8 <LoraInfo_GetPtr+0x4>)
}
 8002ae6:	4770      	bx	lr
 8002ae8:	200004e0 	.word	0x200004e0

08002aec <OnTxDone>:
{
  /* USER CODE BEGIN OnTxDone_1 */

  /* USER CODE END OnTxDone_1 */
  /* Set TxDone flag */
  RadioTxDone_flag = 1;
 8002aec:	2001      	movs	r0, #1
{
 8002aee:	b510      	push	{r4, lr}
  RadioTxDone_flag = 1;
 8002af0:	4b02      	ldr	r3, [pc, #8]	@ (8002afc <OnTxDone+0x10>)
 8002af2:	6018      	str	r0, [r3, #0]
  UTIL_SEQ_SetEvt(1 << CFG_SEQ_Evt_RadioOnTstRF);
 8002af4:	f00c fb42 	bl	800f17c <UTIL_SEQ_SetEvt>
  /* USER CODE BEGIN OnTxDone_2 */

  /* USER CODE END OnTxDone_2 */
}
 8002af8:	bd10      	pop	{r4, pc}
 8002afa:	46c0      	nop			@ (mov r8, r8)
 8002afc:	200004f0 	.word	0x200004f0

08002b00 <OnRxDone>:
  /* USER CODE END OnRxDone_1 */
  last_rx_rssi = rssi;
  last_rx_LoraSnr_FskCfo = LoraSnr_FskCfo;

  /* Set Rxdone flag */
  RadioRxDone_flag = 1;
 8002b00:	2001      	movs	r0, #1
{
 8002b02:	b510      	push	{r4, lr}
  last_rx_rssi = rssi;
 8002b04:	4903      	ldr	r1, [pc, #12]	@ (8002b14 <OnRxDone+0x14>)
 8002b06:	808a      	strh	r2, [r1, #4]
  last_rx_LoraSnr_FskCfo = LoraSnr_FskCfo;
 8002b08:	718b      	strb	r3, [r1, #6]
  RadioRxDone_flag = 1;
 8002b0a:	6088      	str	r0, [r1, #8]
  UTIL_SEQ_SetEvt(1 << CFG_SEQ_Evt_RadioOnTstRF);
 8002b0c:	f00c fb36 	bl	800f17c <UTIL_SEQ_SetEvt>
  /* USER CODE BEGIN OnRxDone_2 */

  /* USER CODE END OnRxDone_2 */
}
 8002b10:	bd10      	pop	{r4, pc}
 8002b12:	46c0      	nop			@ (mov r8, r8)
 8002b14:	200004f0 	.word	0x200004f0

08002b18 <OnTxTimeout>:
{
  /* USER CODE BEGIN OnTxTimeout_1 */

  /* USER CODE END OnTxTimeout_1 */
  /* Set timeout flag */
  RadioTxTimeout_flag = 1;
 8002b18:	2001      	movs	r0, #1
{
 8002b1a:	b510      	push	{r4, lr}
  RadioTxTimeout_flag = 1;
 8002b1c:	4b02      	ldr	r3, [pc, #8]	@ (8002b28 <OnTxTimeout+0x10>)
 8002b1e:	60d8      	str	r0, [r3, #12]
  UTIL_SEQ_SetEvt(1 << CFG_SEQ_Evt_RadioOnTstRF);
 8002b20:	f00c fb2c 	bl	800f17c <UTIL_SEQ_SetEvt>
  /* USER CODE BEGIN OnTxTimeout_2 */

  /* USER CODE END OnTxTimeout_2 */
}
 8002b24:	bd10      	pop	{r4, pc}
 8002b26:	46c0      	nop			@ (mov r8, r8)
 8002b28:	200004f0 	.word	0x200004f0

08002b2c <OnRxTimeout>:
{
  /* USER CODE BEGIN OnRxTimeout_1 */

  /* USER CODE END OnRxTimeout_1 */
  /* Set timeout flag */
  RadioRxTimeout_flag = 1;
 8002b2c:	2001      	movs	r0, #1
{
 8002b2e:	b510      	push	{r4, lr}
  RadioRxTimeout_flag = 1;
 8002b30:	4b02      	ldr	r3, [pc, #8]	@ (8002b3c <OnRxTimeout+0x10>)
 8002b32:	6118      	str	r0, [r3, #16]
  UTIL_SEQ_SetEvt(1 << CFG_SEQ_Evt_RadioOnTstRF);
 8002b34:	f00c fb22 	bl	800f17c <UTIL_SEQ_SetEvt>
  /* USER CODE BEGIN OnRxTimeout_2 */

  /* USER CODE END OnRxTimeout_2 */
}
 8002b38:	bd10      	pop	{r4, pc}
 8002b3a:	46c0      	nop			@ (mov r8, r8)
 8002b3c:	200004f0 	.word	0x200004f0

08002b40 <OnRxError>:
{
  /* USER CODE BEGIN OnRxError_1 */

  /* USER CODE END OnRxError_1 */
  /* Set error flag */
  RadioError_flag = 1;
 8002b40:	2001      	movs	r0, #1
{
 8002b42:	b510      	push	{r4, lr}
  RadioError_flag = 1;
 8002b44:	4b02      	ldr	r3, [pc, #8]	@ (8002b50 <OnRxError+0x10>)
 8002b46:	6158      	str	r0, [r3, #20]
  UTIL_SEQ_SetEvt(1 << CFG_SEQ_Evt_RadioOnTstRF);
 8002b48:	f00c fb18 	bl	800f17c <UTIL_SEQ_SetEvt>
  /* USER CODE BEGIN OnRxError_2 */

  /* USER CODE END OnRxError_2 */
}
 8002b4c:	bd10      	pop	{r4, pc}
 8002b4e:	46c0      	nop			@ (mov r8, r8)
 8002b50:	200004f0 	.word	0x200004f0

08002b54 <TST_TxTone>:
{
 8002b54:	b570      	push	{r4, r5, r6, lr}
  if ((TestState & TX_TEST_TONE) != TX_TEST_TONE)
 8002b56:	490d      	ldr	r1, [pc, #52]	@ (8002b8c <TST_TxTone+0x38>)
 8002b58:	2201      	movs	r2, #1
 8002b5a:	7e0b      	ldrb	r3, [r1, #24]
 8002b5c:	001c      	movs	r4, r3
 8002b5e:	4014      	ands	r4, r2
 8002b60:	4213      	tst	r3, r2
 8002b62:	d110      	bne.n	8002b86 <TST_TxTone+0x32>
    TestState |= TX_TEST_TONE;
 8002b64:	4313      	orrs	r3, r2
 8002b66:	760b      	strb	r3, [r1, #24]
    APP_TPRINTF("Tx FSK Test\r\n");
 8002b68:	0020      	movs	r0, r4
 8002b6a:	0021      	movs	r1, r4
 8002b6c:	4b08      	ldr	r3, [pc, #32]	@ (8002b90 <TST_TxTone+0x3c>)
 8002b6e:	f00c f9d1 	bl	800ef14 <UTIL_ADV_TRACE_COND_FSend>
    Radio.SetTxContinuousWave(testParam.freq, testParam.power, CONTINUOUS_TIMEOUT);
 8002b72:	2108      	movs	r1, #8
 8002b74:	4b07      	ldr	r3, [pc, #28]	@ (8002b94 <TST_TxTone+0x40>)
 8002b76:	4a08      	ldr	r2, [pc, #32]	@ (8002b98 <TST_TxTone+0x44>)
 8002b78:	6858      	ldr	r0, [r3, #4]
 8002b7a:	6bd5      	ldr	r5, [r2, #60]	@ 0x3c
 8002b7c:	5659      	ldrsb	r1, [r3, r1]
 8002b7e:	4a07      	ldr	r2, [pc, #28]	@ (8002b9c <TST_TxTone+0x48>)
 8002b80:	47a8      	blx	r5
    return 0;
 8002b82:	0020      	movs	r0, r4
}
 8002b84:	bd70      	pop	{r4, r5, r6, pc}
    return -1;
 8002b86:	2001      	movs	r0, #1
 8002b88:	4240      	negs	r0, r0
 8002b8a:	e7fb      	b.n	8002b84 <TST_TxTone+0x30>
 8002b8c:	200004f0 	.word	0x200004f0
 8002b90:	08011ebe 	.word	0x08011ebe
 8002b94:	2000004c 	.word	0x2000004c
 8002b98:	080108d8 	.word	0x080108d8
 8002b9c:	0000ffff 	.word	0x0000ffff

08002ba0 <TST_RxRssi>:
{
 8002ba0:	b5f0      	push	{r4, r5, r6, r7, lr}
  if ((TestState & RX_TEST_RSSI) != RX_TEST_RSSI)
 8002ba2:	4f26      	ldr	r7, [pc, #152]	@ (8002c3c <TST_RxRssi+0x9c>)
 8002ba4:	2302      	movs	r3, #2
 8002ba6:	7e3a      	ldrb	r2, [r7, #24]
{
 8002ba8:	b08b      	sub	sp, #44	@ 0x2c
  if ((TestState & RX_TEST_RSSI) != RX_TEST_RSSI)
 8002baa:	0014      	movs	r4, r2
 8002bac:	401c      	ands	r4, r3
 8002bae:	421a      	tst	r2, r3
 8002bb0:	d141      	bne.n	8002c36 <TST_RxRssi+0x96>
    TestState |= RX_TEST_RSSI;
 8002bb2:	4313      	orrs	r3, r2
    APP_TPRINTF("Rx FSK Test\r\n");
 8002bb4:	0021      	movs	r1, r4
 8002bb6:	2201      	movs	r2, #1
 8002bb8:	0020      	movs	r0, r4
    TestState |= RX_TEST_RSSI;
 8002bba:	763b      	strb	r3, [r7, #24]
    APP_TPRINTF("Rx FSK Test\r\n");
 8002bbc:	4b20      	ldr	r3, [pc, #128]	@ (8002c40 <TST_RxRssi+0xa0>)
 8002bbe:	f00c f9a9 	bl	800ef14 <UTIL_ADV_TRACE_COND_FSend>
    Radio.SetChannel(testParam.freq);
 8002bc2:	4e20      	ldr	r6, [pc, #128]	@ (8002c44 <TST_RxRssi+0xa4>)
 8002bc4:	4d20      	ldr	r5, [pc, #128]	@ (8002c48 <TST_RxRssi+0xa8>)
 8002bc6:	6870      	ldr	r0, [r6, #4]
 8002bc8:	68eb      	ldr	r3, [r5, #12]
 8002bca:	4798      	blx	r3
    Radio.SetRxConfig(MODEM_FSK, FSK_BANDWIDTH, FSK_DATARATE,
 8002bcc:	2301      	movs	r3, #1
 8002bce:	9309      	str	r3, [sp, #36]	@ 0x24
 8002bd0:	9305      	str	r3, [sp, #20]
 8002bd2:	331d      	adds	r3, #29
 8002bd4:	9302      	str	r3, [sp, #8]
 8002bd6:	3b16      	subs	r3, #22
 8002bd8:	9301      	str	r3, [sp, #4]
 8002bda:	4b1c      	ldr	r3, [pc, #112]	@ (8002c4c <TST_RxRssi+0xac>)
 8002bdc:	4a1c      	ldr	r2, [pc, #112]	@ (8002c50 <TST_RxRssi+0xb0>)
 8002bde:	9300      	str	r3, [sp, #0]
 8002be0:	69ab      	ldr	r3, [r5, #24]
 8002be2:	0020      	movs	r0, r4
 8002be4:	469c      	mov	ip, r3
 8002be6:	9408      	str	r4, [sp, #32]
 8002be8:	0023      	movs	r3, r4
 8002bea:	9407      	str	r4, [sp, #28]
 8002bec:	9406      	str	r4, [sp, #24]
 8002bee:	9404      	str	r4, [sp, #16]
 8002bf0:	9403      	str	r4, [sp, #12]
 8002bf2:	0011      	movs	r1, r2
 8002bf4:	4664      	mov	r4, ip
 8002bf6:	47a0      	blx	r4
    if (testParam.lna == 0)
 8002bf8:	69b3      	ldr	r3, [r6, #24]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d119      	bne.n	8002c32 <TST_RxRssi+0x92>
      Radio.Rx(timeout);
 8002bfe:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
      Radio.RxBoosted(timeout);
 8002c00:	4814      	ldr	r0, [pc, #80]	@ (8002c54 <TST_RxRssi+0xb4>)
 8002c02:	4798      	blx	r3
    HAL_Delay(Radio.GetWakeupTime());   /* Wait for 50ms */
 8002c04:	6deb      	ldr	r3, [r5, #92]	@ 0x5c
 8002c06:	4798      	blx	r3
 8002c08:	f000 ff3d 	bl	8003a86 <HAL_Delay>
    rssiVal = Radio.Rssi(MODEM_FSK);
 8002c0c:	6c2b      	ldr	r3, [r5, #64]	@ 0x40
 8002c0e:	2000      	movs	r0, #0
 8002c10:	4798      	blx	r3
    APP_TPRINTF(">>> RSSI Value= %d dBm\r\n", rssiVal);
 8002c12:	2100      	movs	r1, #0
 8002c14:	2201      	movs	r2, #1
 8002c16:	4b10      	ldr	r3, [pc, #64]	@ (8002c58 <TST_RxRssi+0xb8>)
 8002c18:	9000      	str	r0, [sp, #0]
 8002c1a:	0008      	movs	r0, r1
 8002c1c:	f00c f97a 	bl	800ef14 <UTIL_ADV_TRACE_COND_FSend>
    Radio.Sleep();
 8002c20:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8002c22:	4798      	blx	r3
    TestState &= ~RX_TEST_RSSI;
 8002c24:	2202      	movs	r2, #2
    return 0;
 8002c26:	2000      	movs	r0, #0
    TestState &= ~RX_TEST_RSSI;
 8002c28:	7e3b      	ldrb	r3, [r7, #24]
 8002c2a:	4393      	bics	r3, r2
 8002c2c:	763b      	strb	r3, [r7, #24]
}
 8002c2e:	b00b      	add	sp, #44	@ 0x2c
 8002c30:	bdf0      	pop	{r4, r5, r6, r7, pc}
      Radio.RxBoosted(timeout);
 8002c32:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8002c34:	e7e4      	b.n	8002c00 <TST_RxRssi+0x60>
    return -1;
 8002c36:	2001      	movs	r0, #1
 8002c38:	4240      	negs	r0, r0
 8002c3a:	e7f8      	b.n	8002c2e <TST_RxRssi+0x8e>
 8002c3c:	200004f0 	.word	0x200004f0
 8002c40:	08011ecc 	.word	0x08011ecc
 8002c44:	2000004c 	.word	0x2000004c
 8002c48:	080108d8 	.word	0x080108d8
 8002c4c:	00014585 	.word	0x00014585
 8002c50:	0000c350 	.word	0x0000c350
 8002c54:	00ffffff 	.word	0x00ffffff
 8002c58:	08011eda 	.word	0x08011eda

08002c5c <TST_set_config>:
{
 8002c5c:	b510      	push	{r4, lr}
  UTIL_MEM_cpy_8(&testParam, Param, sizeof(testParameter_t));
 8002c5e:	4b04      	ldr	r3, [pc, #16]	@ (8002c70 <TST_set_config+0x14>)
{
 8002c60:	0001      	movs	r1, r0
  UTIL_MEM_cpy_8(&testParam, Param, sizeof(testParameter_t));
 8002c62:	0018      	movs	r0, r3
 8002c64:	2230      	movs	r2, #48	@ 0x30
 8002c66:	f00c fa69 	bl	800f13c <UTIL_MEM_cpy_8>
}
 8002c6a:	2000      	movs	r0, #0
 8002c6c:	bd10      	pop	{r4, pc}
 8002c6e:	46c0      	nop			@ (mov r8, r8)
 8002c70:	2000004c 	.word	0x2000004c

08002c74 <TST_get_config>:
{
 8002c74:	b510      	push	{r4, lr}
  UTIL_MEM_cpy_8(Param, &testParam, sizeof(testParameter_t));
 8002c76:	2230      	movs	r2, #48	@ 0x30
 8002c78:	4902      	ldr	r1, [pc, #8]	@ (8002c84 <TST_get_config+0x10>)
 8002c7a:	f00c fa5f 	bl	800f13c <UTIL_MEM_cpy_8>
}
 8002c7e:	2000      	movs	r0, #0
 8002c80:	bd10      	pop	{r4, pc}
 8002c82:	46c0      	nop			@ (mov r8, r8)
 8002c84:	2000004c 	.word	0x2000004c

08002c88 <TST_stop>:
{
 8002c88:	b510      	push	{r4, lr}
  TestState = 0;
 8002c8a:	2400      	movs	r4, #0
 8002c8c:	4b03      	ldr	r3, [pc, #12]	@ (8002c9c <TST_stop+0x14>)
 8002c8e:	761c      	strb	r4, [r3, #24]
  Radio.Sleep();
 8002c90:	4b03      	ldr	r3, [pc, #12]	@ (8002ca0 <TST_stop+0x18>)
 8002c92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c94:	4798      	blx	r3
}
 8002c96:	0020      	movs	r0, r4
 8002c98:	bd10      	pop	{r4, pc}
 8002c9a:	46c0      	nop			@ (mov r8, r8)
 8002c9c:	200004f0 	.word	0x200004f0
 8002ca0:	080108d8 	.word	0x080108d8

08002ca4 <TST_TX_Start>:
{
 8002ca4:	b5f0      	push	{r4, r5, r6, r7, lr}
  if ((TestState & TX_TEST_LORA) != TX_TEST_LORA)
 8002ca6:	4c55      	ldr	r4, [pc, #340]	@ (8002dfc <TST_TX_Start+0x158>)
 8002ca8:	2304      	movs	r3, #4
 8002caa:	7e22      	ldrb	r2, [r4, #24]
{
 8002cac:	b08d      	sub	sp, #52	@ 0x34
  if ((TestState & TX_TEST_LORA) != TX_TEST_LORA)
 8002cae:	0015      	movs	r5, r2
{
 8002cb0:	900b      	str	r0, [sp, #44]	@ 0x2c
  if ((TestState & TX_TEST_LORA) != TX_TEST_LORA)
 8002cb2:	401d      	ands	r5, r3
 8002cb4:	421a      	tst	r2, r3
 8002cb6:	d000      	beq.n	8002cba <TST_TX_Start+0x16>
 8002cb8:	e09d      	b.n	8002df6 <TST_TX_Start+0x152>
    TestState |= TX_TEST_LORA;
 8002cba:	4313      	orrs	r3, r2
    APP_TPRINTF("Tx LoRa Test\r\n");
 8002cbc:	0029      	movs	r1, r5
 8002cbe:	2201      	movs	r2, #1
    TestState |= TX_TEST_LORA;
 8002cc0:	7623      	strb	r3, [r4, #24]
    APP_TPRINTF("Tx LoRa Test\r\n");
 8002cc2:	0028      	movs	r0, r5
 8002cc4:	4b4e      	ldr	r3, [pc, #312]	@ (8002e00 <TST_TX_Start+0x15c>)
 8002cc6:	f00c f925 	bl	800ef14 <UTIL_ADV_TRACE_COND_FSend>
    Radio.Init(&RadioEvents);
 8002cca:	0020      	movs	r0, r4
    RadioEvents.TxDone = OnTxDone;
 8002ccc:	4b4d      	ldr	r3, [pc, #308]	@ (8002e04 <TST_TX_Start+0x160>)
    Radio.Init(&RadioEvents);
 8002cce:	301c      	adds	r0, #28
    RadioEvents.TxDone = OnTxDone;
 8002cd0:	61e3      	str	r3, [r4, #28]
    RadioEvents.RxDone = OnRxDone;
 8002cd2:	4b4d      	ldr	r3, [pc, #308]	@ (8002e08 <TST_TX_Start+0x164>)
  for (int32_t i = 0; i < len * 8; i++)
  {
    /*fill buffer with prbs9 sequence*/
    int32_t newbit = (((prbs9_val >> 8) ^ (prbs9_val >> 4)) & 1);
    prbs9_val = ((prbs9_val << 1) | newbit) & 0x01ff;
    payload[i / 8] |= ((prbs9_val & 0x1) << (i % 8));
 8002cd4:	2707      	movs	r7, #7
    RadioEvents.RxDone = OnRxDone;
 8002cd6:	6263      	str	r3, [r4, #36]	@ 0x24
    RadioEvents.TxTimeout = OnTxTimeout;
 8002cd8:	4b4c      	ldr	r3, [pc, #304]	@ (8002e0c <TST_TX_Start+0x168>)
 8002cda:	6223      	str	r3, [r4, #32]
    RadioEvents.RxTimeout = OnRxTimeout;
 8002cdc:	4b4c      	ldr	r3, [pc, #304]	@ (8002e10 <TST_TX_Start+0x16c>)
 8002cde:	62a3      	str	r3, [r4, #40]	@ 0x28
    RadioEvents.RxError = OnRxError;
 8002ce0:	4b4c      	ldr	r3, [pc, #304]	@ (8002e14 <TST_TX_Start+0x170>)
 8002ce2:	62e3      	str	r3, [r4, #44]	@ 0x2c
    Radio.Init(&RadioEvents);
 8002ce4:	4b4c      	ldr	r3, [pc, #304]	@ (8002e18 <TST_TX_Start+0x174>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4798      	blx	r3
    Prbs9_generator(payload, testParam.payloadLen);
 8002cea:	4b4c      	ldr	r3, [pc, #304]	@ (8002e1c <TST_TX_Start+0x178>)
  UTIL_MEM_set_8(payload, 0, len);
 8002cec:	4c4c      	ldr	r4, [pc, #304]	@ (8002e20 <TST_TX_Start+0x17c>)
    Prbs9_generator(payload, testParam.payloadLen);
 8002cee:	6a1e      	ldr	r6, [r3, #32]
  UTIL_MEM_set_8(payload, 0, len);
 8002cf0:	0029      	movs	r1, r5
 8002cf2:	0020      	movs	r0, r4
 8002cf4:	b2f2      	uxtb	r2, r6
 8002cf6:	f00c fa2a 	bl	800f14e <UTIL_MEM_set_8>
  for (int32_t i = 0; i < len * 8; i++)
 8002cfa:	0029      	movs	r1, r5
  uint16_t prbs9_val = PRBS9_INIT;
 8002cfc:	2202      	movs	r2, #2
 8002cfe:	2501      	movs	r5, #1
  for (int32_t i = 0; i < len * 8; i++)
 8002d00:	b2f0      	uxtb	r0, r6
 8002d02:	00c3      	lsls	r3, r0, #3
 8002d04:	930a      	str	r3, [sp, #40]	@ 0x28
 8002d06:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8002d08:	4299      	cmp	r1, r3
 8002d0a:	d10d      	bne.n	8002d28 <TST_TX_Start+0x84>
    for (i = 1; i <= nb_packet; i++)
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	930a      	str	r3, [sp, #40]	@ 0x28
 8002d10:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8002d12:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8002d14:	429a      	cmp	r2, r3
 8002d16:	dd19      	ble.n	8002d4c <TST_TX_Start+0xa8>
    TestState &= ~TX_TEST_LORA;
 8002d18:	2104      	movs	r1, #4
    return 0;
 8002d1a:	2000      	movs	r0, #0
    TestState &= ~TX_TEST_LORA;
 8002d1c:	4a37      	ldr	r2, [pc, #220]	@ (8002dfc <TST_TX_Start+0x158>)
 8002d1e:	7e13      	ldrb	r3, [r2, #24]
 8002d20:	438b      	bics	r3, r1
 8002d22:	7613      	strb	r3, [r2, #24]
}
 8002d24:	b00d      	add	sp, #52	@ 0x34
 8002d26:	bdf0      	pop	{r4, r5, r6, r7, pc}
    payload[i / 8] |= ((prbs9_val & 0x1) << (i % 8));
 8002d28:	0008      	movs	r0, r1
    int32_t newbit = (((prbs9_val >> 8) ^ (prbs9_val >> 4)) & 1);
 8002d2a:	0916      	lsrs	r6, r2, #4
 8002d2c:	0a13      	lsrs	r3, r2, #8
 8002d2e:	4073      	eors	r3, r6
    prbs9_val = ((prbs9_val << 1) | newbit) & 0x01ff;
 8002d30:	0052      	lsls	r2, r2, #1
 8002d32:	402b      	ands	r3, r5
 8002d34:	4313      	orrs	r3, r2
 8002d36:	05da      	lsls	r2, r3, #23
    payload[i / 8] |= ((prbs9_val & 0x1) << (i % 8));
 8002d38:	4038      	ands	r0, r7
 8002d3a:	402b      	ands	r3, r5
 8002d3c:	4083      	lsls	r3, r0
 8002d3e:	10ce      	asrs	r6, r1, #3
 8002d40:	5da0      	ldrb	r0, [r4, r6]
    prbs9_val = ((prbs9_val << 1) | newbit) & 0x01ff;
 8002d42:	0dd2      	lsrs	r2, r2, #23
    payload[i / 8] |= ((prbs9_val & 0x1) << (i % 8));
 8002d44:	4303      	orrs	r3, r0
 8002d46:	55a3      	strb	r3, [r4, r6]
  for (int32_t i = 0; i < len * 8; i++)
 8002d48:	3101      	adds	r1, #1
 8002d4a:	e7dc      	b.n	8002d06 <TST_TX_Start+0x62>
      APP_TPRINTF("Tx %d of %d\r\n", i, nb_packet);
 8002d4c:	2100      	movs	r1, #0
 8002d4e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8002d50:	0008      	movs	r0, r1
 8002d52:	9201      	str	r2, [sp, #4]
 8002d54:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8002d56:	4b33      	ldr	r3, [pc, #204]	@ (8002e24 <TST_TX_Start+0x180>)
 8002d58:	9200      	str	r2, [sp, #0]
 8002d5a:	2201      	movs	r2, #1
 8002d5c:	f00c f8da 	bl	800ef14 <UTIL_ADV_TRACE_COND_FSend>
      Radio.SetChannel(testParam.freq);
 8002d60:	4d2e      	ldr	r5, [pc, #184]	@ (8002e1c <TST_TX_Start+0x178>)
 8002d62:	4e2d      	ldr	r6, [pc, #180]	@ (8002e18 <TST_TX_Start+0x174>)
 8002d64:	6868      	ldr	r0, [r5, #4]
 8002d66:	68f3      	ldr	r3, [r6, #12]
 8002d68:	4798      	blx	r3
      Radio.SetTxConfig(MODEM_LORA, testParam.power, 0, (testParam.bandwidth - 4),
 8002d6a:	2108      	movs	r1, #8
 8002d6c:	4a2e      	ldr	r2, [pc, #184]	@ (8002e28 <TST_TX_Start+0x184>)
 8002d6e:	68eb      	ldr	r3, [r5, #12]
 8002d70:	5669      	ldrsb	r1, [r5, r1]
 8002d72:	2400      	movs	r4, #0
 8002d74:	9208      	str	r2, [sp, #32]
 8002d76:	2208      	movs	r2, #8
 8002d78:	9407      	str	r4, [sp, #28]
 8002d7a:	9406      	str	r4, [sp, #24]
 8002d7c:	9405      	str	r4, [sp, #20]
 8002d7e:	9404      	str	r4, [sp, #16]
 8002d80:	9403      	str	r4, [sp, #12]
 8002d82:	9202      	str	r2, [sp, #8]
 8002d84:	696a      	ldr	r2, [r5, #20]
 8002d86:	2001      	movs	r0, #1
 8002d88:	b2d2      	uxtb	r2, r2
 8002d8a:	9201      	str	r2, [sp, #4]
 8002d8c:	692a      	ldr	r2, [r5, #16]
 8002d8e:	3b04      	subs	r3, #4
 8002d90:	9200      	str	r2, [sp, #0]
 8002d92:	69f2      	ldr	r2, [r6, #28]
 8002d94:	0017      	movs	r7, r2
 8002d96:	0022      	movs	r2, r4
 8002d98:	47b8      	blx	r7
      Radio.Send(payload, testParam.payloadLen);
 8002d9a:	6a29      	ldr	r1, [r5, #32]
 8002d9c:	6ab3      	ldr	r3, [r6, #40]	@ 0x28
 8002d9e:	b2c9      	uxtb	r1, r1
 8002da0:	481f      	ldr	r0, [pc, #124]	@ (8002e20 <TST_TX_Start+0x17c>)
 8002da2:	4798      	blx	r3
      UTIL_SEQ_WaitEvt(1 << CFG_SEQ_Evt_RadioOnTstRF);
 8002da4:	2001      	movs	r0, #1
 8002da6:	f00c fa85 	bl	800f2b4 <UTIL_SEQ_WaitEvt>
      Radio.Sleep();
 8002daa:	6af3      	ldr	r3, [r6, #44]	@ 0x2c
 8002dac:	4798      	blx	r3
      if (RadioTxDone_flag == 1)
 8002dae:	4d13      	ldr	r5, [pc, #76]	@ (8002dfc <TST_TX_Start+0x158>)
 8002db0:	682a      	ldr	r2, [r5, #0]
 8002db2:	2a01      	cmp	r2, #1
 8002db4:	d104      	bne.n	8002dc0 <TST_TX_Start+0x11c>
        APP_TPRINTF("OnTxDone\r\n");
 8002db6:	0021      	movs	r1, r4
 8002db8:	0020      	movs	r0, r4
 8002dba:	4b1c      	ldr	r3, [pc, #112]	@ (8002e2c <TST_TX_Start+0x188>)
 8002dbc:	f00c f8aa 	bl	800ef14 <UTIL_ADV_TRACE_COND_FSend>
      if (RadioTxTimeout_flag == 1)
 8002dc0:	68ea      	ldr	r2, [r5, #12]
 8002dc2:	2a01      	cmp	r2, #1
 8002dc4:	d104      	bne.n	8002dd0 <TST_TX_Start+0x12c>
        APP_TPRINTF("OnTxTimeout\r\n");
 8002dc6:	2100      	movs	r1, #0
 8002dc8:	4b19      	ldr	r3, [pc, #100]	@ (8002e30 <TST_TX_Start+0x18c>)
 8002dca:	0008      	movs	r0, r1
 8002dcc:	f00c f8a2 	bl	800ef14 <UTIL_ADV_TRACE_COND_FSend>
      if (RadioError_flag == 1)
 8002dd0:	696a      	ldr	r2, [r5, #20]
 8002dd2:	2a01      	cmp	r2, #1
 8002dd4:	d104      	bne.n	8002de0 <TST_TX_Start+0x13c>
        APP_TPRINTF("OnRxError\r\n");
 8002dd6:	2100      	movs	r1, #0
 8002dd8:	4b16      	ldr	r3, [pc, #88]	@ (8002e34 <TST_TX_Start+0x190>)
 8002dda:	0008      	movs	r0, r1
 8002ddc:	f00c f89a 	bl	800ef14 <UTIL_ADV_TRACE_COND_FSend>
      HAL_Delay(500);
 8002de0:	20fa      	movs	r0, #250	@ 0xfa
 8002de2:	0040      	lsls	r0, r0, #1
 8002de4:	f000 fe4f 	bl	8003a86 <HAL_Delay>
      RadioTxDone_flag = 0;
 8002de8:	2300      	movs	r3, #0
 8002dea:	602b      	str	r3, [r5, #0]
      RadioTxTimeout_flag = 0;
 8002dec:	60eb      	str	r3, [r5, #12]
      RadioError_flag = 0;
 8002dee:	616b      	str	r3, [r5, #20]
    for (i = 1; i <= nb_packet; i++)
 8002df0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8002df2:	3301      	adds	r3, #1
 8002df4:	e78b      	b.n	8002d0e <TST_TX_Start+0x6a>
    return -1;
 8002df6:	2001      	movs	r0, #1
 8002df8:	4240      	negs	r0, r0
 8002dfa:	e793      	b.n	8002d24 <TST_TX_Start+0x80>
 8002dfc:	200004f0 	.word	0x200004f0
 8002e00:	08011ef3 	.word	0x08011ef3
 8002e04:	08002aed 	.word	0x08002aed
 8002e08:	08002b01 	.word	0x08002b01
 8002e0c:	08002b19 	.word	0x08002b19
 8002e10:	08002b2d 	.word	0x08002b2d
 8002e14:	08002b41 	.word	0x08002b41
 8002e18:	080108d8 	.word	0x080108d8
 8002e1c:	2000004c 	.word	0x2000004c
 8002e20:	20000528 	.word	0x20000528
 8002e24:	08011f02 	.word	0x08011f02
 8002e28:	00000bb8 	.word	0x00000bb8
 8002e2c:	08011f10 	.word	0x08011f10
 8002e30:	08011f1b 	.word	0x08011f1b
 8002e34:	08011f29 	.word	0x08011f29

08002e38 <TST_RX_Start>:
{
 8002e38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e3a:	b091      	sub	sp, #68	@ 0x44
 8002e3c:	900e      	str	r0, [sp, #56]	@ 0x38
  if (((TestState & RX_TEST_LORA) != RX_TEST_LORA) && (nb_packet > 0))
 8002e3e:	485a      	ldr	r0, [pc, #360]	@ (8002fa8 <TST_RX_Start+0x170>)
 8002e40:	2308      	movs	r3, #8
 8002e42:	7e02      	ldrb	r2, [r0, #24]
 8002e44:	0014      	movs	r4, r2
 8002e46:	401c      	ands	r4, r3
 8002e48:	421a      	tst	r2, r3
 8002e4a:	d000      	beq.n	8002e4e <TST_RX_Start+0x16>
 8002e4c:	e0a8      	b.n	8002fa0 <TST_RX_Start+0x168>
 8002e4e:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8002e50:	2900      	cmp	r1, #0
 8002e52:	dc00      	bgt.n	8002e56 <TST_RX_Start+0x1e>
 8002e54:	e0a4      	b.n	8002fa0 <TST_RX_Start+0x168>
    TestState |= RX_TEST_LORA;
 8002e56:	4313      	orrs	r3, r2
 8002e58:	7603      	strb	r3, [r0, #24]
    RadioEvents.TxDone = OnTxDone;
 8002e5a:	4b54      	ldr	r3, [pc, #336]	@ (8002fac <TST_RX_Start+0x174>)
    Radio.Init(&RadioEvents);
 8002e5c:	301c      	adds	r0, #28
    RadioEvents.TxDone = OnTxDone;
 8002e5e:	6003      	str	r3, [r0, #0]
    RadioEvents.RxDone = OnRxDone;
 8002e60:	4b53      	ldr	r3, [pc, #332]	@ (8002fb0 <TST_RX_Start+0x178>)
 8002e62:	6083      	str	r3, [r0, #8]
    RadioEvents.TxTimeout = OnTxTimeout;
 8002e64:	4b53      	ldr	r3, [pc, #332]	@ (8002fb4 <TST_RX_Start+0x17c>)
 8002e66:	6043      	str	r3, [r0, #4]
    RadioEvents.RxTimeout = OnRxTimeout;
 8002e68:	4b53      	ldr	r3, [pc, #332]	@ (8002fb8 <TST_RX_Start+0x180>)
 8002e6a:	60c3      	str	r3, [r0, #12]
    RadioEvents.RxError = OnRxError;
 8002e6c:	4b53      	ldr	r3, [pc, #332]	@ (8002fbc <TST_RX_Start+0x184>)
 8002e6e:	6103      	str	r3, [r0, #16]
    Radio.Init(&RadioEvents);
 8002e70:	4b53      	ldr	r3, [pc, #332]	@ (8002fc0 <TST_RX_Start+0x188>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4798      	blx	r3
    for (i = 1; i <= nb_packet; i++)
 8002e76:	2301      	movs	r3, #1
  uint32_t count_RxKo = 0;
 8002e78:	940b      	str	r4, [sp, #44]	@ 0x2c
  uint32_t count_RxOk = 0;
 8002e7a:	940d      	str	r4, [sp, #52]	@ 0x34
    for (i = 1; i <= nb_packet; i++)
 8002e7c:	930c      	str	r3, [sp, #48]	@ 0x30
      Radio.SetChannel(testParam.freq);
 8002e7e:	4d51      	ldr	r5, [pc, #324]	@ (8002fc4 <TST_RX_Start+0x18c>)
 8002e80:	4e4f      	ldr	r6, [pc, #316]	@ (8002fc0 <TST_RX_Start+0x188>)
 8002e82:	6868      	ldr	r0, [r5, #4]
 8002e84:	68f3      	ldr	r3, [r6, #12]
 8002e86:	4798      	blx	r3
      Radio.SetRxConfig(MODEM_LORA, (testParam.bandwidth - 4), testParam.loraSf_datarate,
 8002e88:	2201      	movs	r2, #1
 8002e8a:	2400      	movs	r4, #0
 8002e8c:	696b      	ldr	r3, [r5, #20]
 8002e8e:	68e9      	ldr	r1, [r5, #12]
 8002e90:	9209      	str	r2, [sp, #36]	@ 0x24
 8002e92:	321d      	adds	r2, #29
 8002e94:	9202      	str	r2, [sp, #8]
 8002e96:	3a16      	subs	r2, #22
 8002e98:	9201      	str	r2, [sp, #4]
 8002e9a:	69b2      	ldr	r2, [r6, #24]
 8002e9c:	9408      	str	r4, [sp, #32]
 8002e9e:	9407      	str	r4, [sp, #28]
 8002ea0:	9406      	str	r4, [sp, #24]
 8002ea2:	9405      	str	r4, [sp, #20]
 8002ea4:	9404      	str	r4, [sp, #16]
 8002ea6:	9403      	str	r4, [sp, #12]
 8002ea8:	9400      	str	r4, [sp, #0]
 8002eaa:	3904      	subs	r1, #4
 8002eac:	0017      	movs	r7, r2
 8002eae:	2001      	movs	r0, #1
 8002eb0:	692a      	ldr	r2, [r5, #16]
 8002eb2:	b2db      	uxtb	r3, r3
 8002eb4:	47b8      	blx	r7
      Radio.Rx(RX_TIMEOUT_VALUE);
 8002eb6:	6b73      	ldr	r3, [r6, #52]	@ 0x34
 8002eb8:	4843      	ldr	r0, [pc, #268]	@ (8002fc8 <TST_RX_Start+0x190>)
 8002eba:	4798      	blx	r3
      UTIL_SEQ_WaitEvt(1 << CFG_SEQ_Evt_RadioOnTstRF);
 8002ebc:	2001      	movs	r0, #1
 8002ebe:	f00c f9f9 	bl	800f2b4 <UTIL_SEQ_WaitEvt>
      Radio.Sleep();
 8002ec2:	6af3      	ldr	r3, [r6, #44]	@ 0x2c
 8002ec4:	4798      	blx	r3
      if (RadioRxDone_flag == 1)
 8002ec6:	4b38      	ldr	r3, [pc, #224]	@ (8002fa8 <TST_RX_Start+0x170>)
 8002ec8:	689a      	ldr	r2, [r3, #8]
 8002eca:	0017      	movs	r7, r2
 8002ecc:	2a01      	cmp	r2, #1
 8002ece:	d115      	bne.n	8002efc <TST_RX_Start+0xc4>
        int16_t rssi = last_rx_rssi;
 8002ed0:	889a      	ldrh	r2, [r3, #4]
        APP_TPRINTF("OnRxDone\r\n");
 8002ed2:	0021      	movs	r1, r4
        int16_t rssi = last_rx_rssi;
 8002ed4:	b212      	sxth	r2, r2
        int8_t LoraSnr_FskCfo = last_rx_LoraSnr_FskCfo;
 8002ed6:	799e      	ldrb	r6, [r3, #6]
        int16_t rssi = last_rx_rssi;
 8002ed8:	920f      	str	r2, [sp, #60]	@ 0x3c
        APP_TPRINTF("OnRxDone\r\n");
 8002eda:	0020      	movs	r0, r4
 8002edc:	2201      	movs	r2, #1
 8002ede:	4b3b      	ldr	r3, [pc, #236]	@ (8002fcc <TST_RX_Start+0x194>)
 8002ee0:	f00c f818 	bl	800ef14 <UTIL_ADV_TRACE_COND_FSend>
        if (testParam.modulation == TEST_FSK)
 8002ee4:	6828      	ldr	r0, [r5, #0]
        int8_t LoraSnr_FskCfo = last_rx_LoraSnr_FskCfo;
 8002ee6:	b276      	sxtb	r6, r6
        if (testParam.modulation == TEST_FSK)
 8002ee8:	42a0      	cmp	r0, r4
 8002eea:	d151      	bne.n	8002f90 <TST_RX_Start+0x158>
          APP_TPRINTF("RssiValue=%d dBm, cfo=%dkHz\r\n", rssi, LoraSnr_FskCfo);
 8002eec:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8002eee:	0001      	movs	r1, r0
 8002ef0:	9200      	str	r2, [sp, #0]
 8002ef2:	003a      	movs	r2, r7
 8002ef4:	4b36      	ldr	r3, [pc, #216]	@ (8002fd0 <TST_RX_Start+0x198>)
 8002ef6:	9601      	str	r6, [sp, #4]
          APP_TPRINTF("RssiValue=%d dBm, SnrValue=%ddB\r\n", rssi, LoraSnr_FskCfo);
 8002ef8:	f00c f80c 	bl	800ef14 <UTIL_ADV_TRACE_COND_FSend>
      if (RadioRxTimeout_flag == 1)
 8002efc:	4d2a      	ldr	r5, [pc, #168]	@ (8002fa8 <TST_RX_Start+0x170>)
 8002efe:	692b      	ldr	r3, [r5, #16]
 8002f00:	2b01      	cmp	r3, #1
 8002f02:	d105      	bne.n	8002f10 <TST_RX_Start+0xd8>
        APP_TPRINTF("OnRxTimeout\r\n");
 8002f04:	2100      	movs	r1, #0
 8002f06:	2201      	movs	r2, #1
 8002f08:	0008      	movs	r0, r1
 8002f0a:	4b32      	ldr	r3, [pc, #200]	@ (8002fd4 <TST_RX_Start+0x19c>)
 8002f0c:	f00c f802 	bl	800ef14 <UTIL_ADV_TRACE_COND_FSend>
      if (RadioError_flag == 1)
 8002f10:	696b      	ldr	r3, [r5, #20]
 8002f12:	2b01      	cmp	r3, #1
 8002f14:	d105      	bne.n	8002f22 <TST_RX_Start+0xea>
        APP_TPRINTF("OnRxError\r\n");
 8002f16:	2100      	movs	r1, #0
 8002f18:	2201      	movs	r2, #1
 8002f1a:	0008      	movs	r0, r1
 8002f1c:	4b2e      	ldr	r3, [pc, #184]	@ (8002fd8 <TST_RX_Start+0x1a0>)
 8002f1e:	f00b fff9 	bl	800ef14 <UTIL_ADV_TRACE_COND_FSend>
      if ((RadioRxTimeout_flag == 1) || (RadioError_flag == 1))
 8002f22:	692b      	ldr	r3, [r5, #16]
 8002f24:	2b01      	cmp	r3, #1
 8002f26:	d002      	beq.n	8002f2e <TST_RX_Start+0xf6>
 8002f28:	696b      	ldr	r3, [r5, #20]
 8002f2a:	2b01      	cmp	r3, #1
 8002f2c:	d102      	bne.n	8002f34 <TST_RX_Start+0xfc>
        count_RxKo++;
 8002f2e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8002f30:	3301      	adds	r3, #1
 8002f32:	930b      	str	r3, [sp, #44]	@ 0x2c
      if (RadioRxDone_flag == 1)
 8002f34:	68ab      	ldr	r3, [r5, #8]
      PER = (100 * (count_RxKo)) / (count_RxKo + count_RxOk);
 8002f36:	2064      	movs	r0, #100	@ 0x64
        count_RxOk++;
 8002f38:	3b01      	subs	r3, #1
 8002f3a:	425a      	negs	r2, r3
 8002f3c:	4153      	adcs	r3, r2
      RadioRxDone_flag = 0;
 8002f3e:	2400      	movs	r4, #0
        count_RxOk++;
 8002f40:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
      RadioRxDone_flag = 0;
 8002f42:	60ac      	str	r4, [r5, #8]
        count_RxOk++;
 8002f44:	18d3      	adds	r3, r2, r3
 8002f46:	930d      	str	r3, [sp, #52]	@ 0x34
      PER = (100 * (count_RxKo)) / (count_RxKo + count_RxOk);
 8002f48:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8002f4a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8002f4c:	4358      	muls	r0, r3
 8002f4e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
      RadioRxTimeout_flag = 0;
 8002f50:	612c      	str	r4, [r5, #16]
      PER = (100 * (count_RxKo)) / (count_RxKo + count_RxOk);
 8002f52:	1899      	adds	r1, r3, r2
      RadioError_flag = 0;
 8002f54:	616c      	str	r4, [r5, #20]
      PER = (100 * (count_RxKo)) / (count_RxKo + count_RxOk);
 8002f56:	f7fd f907 	bl	8000168 <__udivsi3>
      APP_TPRINTF("Rx %d of %d  >>> PER= %d %%\r\n", i, nb_packet, PER);
 8002f5a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8002f5c:	4e1f      	ldr	r6, [pc, #124]	@ (8002fdc <TST_RX_Start+0x1a4>)
 8002f5e:	9301      	str	r3, [sp, #4]
 8002f60:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8002f62:	2201      	movs	r2, #1
 8002f64:	9002      	str	r0, [sp, #8]
 8002f66:	9300      	str	r3, [sp, #0]
 8002f68:	0021      	movs	r1, r4
 8002f6a:	0033      	movs	r3, r6
 8002f6c:	0020      	movs	r0, r4
 8002f6e:	f00b ffd1 	bl	800ef14 <UTIL_ADV_TRACE_COND_FSend>
    for (i = 1; i <= nb_packet; i++)
 8002f72:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8002f74:	3301      	adds	r3, #1
 8002f76:	930c      	str	r3, [sp, #48]	@ 0x30
 8002f78:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8002f7a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	db00      	blt.n	8002f82 <TST_RX_Start+0x14a>
 8002f80:	e77d      	b.n	8002e7e <TST_RX_Start+0x46>
    TestState &= ~RX_TEST_LORA;
 8002f82:	2208      	movs	r2, #8
    return 0;
 8002f84:	0020      	movs	r0, r4
    TestState &= ~RX_TEST_LORA;
 8002f86:	7e2b      	ldrb	r3, [r5, #24]
 8002f88:	4393      	bics	r3, r2
 8002f8a:	762b      	strb	r3, [r5, #24]
}
 8002f8c:	b011      	add	sp, #68	@ 0x44
 8002f8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
          APP_TPRINTF("RssiValue=%d dBm, SnrValue=%ddB\r\n", rssi, LoraSnr_FskCfo);
 8002f90:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8002f92:	0021      	movs	r1, r4
 8002f94:	9200      	str	r2, [sp, #0]
 8002f96:	0020      	movs	r0, r4
 8002f98:	003a      	movs	r2, r7
 8002f9a:	4b11      	ldr	r3, [pc, #68]	@ (8002fe0 <TST_RX_Start+0x1a8>)
 8002f9c:	9601      	str	r6, [sp, #4]
 8002f9e:	e7ab      	b.n	8002ef8 <TST_RX_Start+0xc0>
    return -1;
 8002fa0:	2001      	movs	r0, #1
 8002fa2:	4240      	negs	r0, r0
 8002fa4:	e7f2      	b.n	8002f8c <TST_RX_Start+0x154>
 8002fa6:	46c0      	nop			@ (mov r8, r8)
 8002fa8:	200004f0 	.word	0x200004f0
 8002fac:	08002aed 	.word	0x08002aed
 8002fb0:	08002b01 	.word	0x08002b01
 8002fb4:	08002b19 	.word	0x08002b19
 8002fb8:	08002b2d 	.word	0x08002b2d
 8002fbc:	08002b41 	.word	0x08002b41
 8002fc0:	080108d8 	.word	0x080108d8
 8002fc4:	2000004c 	.word	0x2000004c
 8002fc8:	00001388 	.word	0x00001388
 8002fcc:	08011f35 	.word	0x08011f35
 8002fd0:	08011f40 	.word	0x08011f40
 8002fd4:	08011f80 	.word	0x08011f80
 8002fd8:	08011f29 	.word	0x08011f29
 8002fdc:	08011f8e 	.word	0x08011f8e
 8002fe0:	08011f5e 	.word	0x08011f5e

08002fe4 <MX_ADC_Init>:
  hadc.Init.ClockPrescaler        = ADC_CLOCK_SYNC_PCLK_DIV4;
  hadc.Init.LowPowerAutoPowerOff  = DISABLE;
  hadc.Init.LowPowerFrequencyMode = ENABLE;
  hadc.Init.LowPowerAutoWait      = DISABLE;
  hadc.Init.Resolution            = ADC_RESOLUTION_12B;
  hadc.Init.SamplingTime          = ADC_SAMPLETIME_160CYCLES_5;
 8002fe4:	2107      	movs	r1, #7
  hadc.Init.LowPowerFrequencyMode = ENABLE;
 8002fe6:	2201      	movs	r2, #1
{
 8002fe8:	b510      	push	{r4, lr}
  hadc.Init.OversamplingMode      = DISABLE;
 8002fea:	4c13      	ldr	r4, [pc, #76]	@ (8003038 <MX_ADC_Init+0x54>)
 8002fec:	2300      	movs	r3, #0
  hadc.Init.SamplingTime          = ADC_SAMPLETIME_160CYCLES_5;
 8002fee:	63a1      	str	r1, [r4, #56]	@ 0x38
  hadc.Instance  = ADC1;
 8002ff0:	4912      	ldr	r1, [pc, #72]	@ (800303c <MX_ADC_Init+0x58>)
  hadc.Init.LowPowerFrequencyMode = ENABLE;
 8002ff2:	6362      	str	r2, [r4, #52]	@ 0x34
  hadc.Init.ScanConvMode          = ADC_SCAN_DIRECTION_FORWARD;
 8002ff4:	6122      	str	r2, [r4, #16]
  hadc.Init.DataAlign             = ADC_DATAALIGN_RIGHT;
  hadc.Init.ContinuousConvMode    = DISABLE;
  hadc.Init.DiscontinuousConvMode = DISABLE;
  hadc.Init.ExternalTrigConvEdge  = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc.Init.EOCSelection          = ADC_EOC_SINGLE_CONV;
 8002ff6:	3203      	adds	r2, #3
  hadc.Instance  = ADC1;
 8002ff8:	6021      	str	r1, [r4, #0]
  hadc.Init.EOCSelection          = ADC_EOC_SINGLE_CONV;
 8002ffa:	6162      	str	r2, [r4, #20]
  hadc.Init.ClockPrescaler        = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002ffc:	2180      	movs	r1, #128	@ 0x80
  hadc.Init.DMAContinuousRequests = DISABLE;
 8002ffe:	0022      	movs	r2, r4
  hadc.Init.ClockPrescaler        = ADC_CLOCK_SYNC_PCLK_DIV4;
 8003000:	0609      	lsls	r1, r1, #24
  hadc.Init.DMAContinuousRequests = DISABLE;
 8003002:	322c      	adds	r2, #44	@ 0x2c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8003004:	0020      	movs	r0, r4
  hadc.Init.OversamplingMode      = DISABLE;
 8003006:	63e3      	str	r3, [r4, #60]	@ 0x3c
  hadc.Init.ExternalTrigConvEdge  = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003008:	62a3      	str	r3, [r4, #40]	@ 0x28
  hadc.Init.ClockPrescaler        = ADC_CLOCK_SYNC_PCLK_DIV4;
 800300a:	6061      	str	r1, [r4, #4]
  hadc.Init.Resolution            = ADC_RESOLUTION_12B;
 800300c:	60a3      	str	r3, [r4, #8]
  hadc.Init.DataAlign             = ADC_DATAALIGN_RIGHT;
 800300e:	60e3      	str	r3, [r4, #12]
  hadc.Init.LowPowerAutoWait      = DISABLE;
 8003010:	61a3      	str	r3, [r4, #24]
  hadc.Init.LowPowerAutoPowerOff  = DISABLE;
 8003012:	61e3      	str	r3, [r4, #28]
  hadc.Init.ContinuousConvMode    = DISABLE;
 8003014:	8423      	strh	r3, [r4, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 8003016:	7013      	strb	r3, [r2, #0]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8003018:	f001 faca 	bl	80045b0 <HAL_ADC_Init>
 800301c:	2800      	cmp	r0, #0
 800301e:	d001      	beq.n	8003024 <MX_ADC_Init+0x40>
  {
    Error_Handler();
 8003020:	f000 f942 	bl	80032a8 <Error_Handler>
  }

  if (HAL_ADCEx_Calibration_Start(&hadc, ADC_SINGLE_ENDED) != HAL_OK)
 8003024:	2100      	movs	r1, #0
 8003026:	0020      	movs	r0, r4
 8003028:	f001 fcee 	bl	8004a08 <HAL_ADCEx_Calibration_Start>
 800302c:	2800      	cmp	r0, #0
 800302e:	d001      	beq.n	8003034 <MX_ADC_Init+0x50>
  {
    Error_Handler();
 8003030:	f000 f93a 	bl	80032a8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8003034:	bd10      	pop	{r4, pc}
 8003036:	46c0      	nop			@ (mov r8, r8)
 8003038:	20000628 	.word	0x20000628
 800303c:	40012400 	.word	0x40012400

08003040 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef *adcHandle)
{

  if (adcHandle->Instance == ADC1)
 8003040:	4b05      	ldr	r3, [pc, #20]	@ (8003058 <HAL_ADC_MspInit+0x18>)
 8003042:	6802      	ldr	r2, [r0, #0]
 8003044:	429a      	cmp	r2, r3
 8003046:	d105      	bne.n	8003054 <HAL_ADC_MspInit+0x14>
  {
    /* USER CODE BEGIN ADC_MspInit 0 */

    /* USER CODE END ADC_MspInit 0 */
    /* ADC clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003048:	2380      	movs	r3, #128	@ 0x80
 800304a:	4a04      	ldr	r2, [pc, #16]	@ (800305c <HAL_ADC_MspInit+0x1c>)
 800304c:	009b      	lsls	r3, r3, #2
 800304e:	6b51      	ldr	r1, [r2, #52]	@ 0x34
 8003050:	430b      	orrs	r3, r1
 8003052:	6353      	str	r3, [r2, #52]	@ 0x34
    /* USER CODE BEGIN ADC_MspInit 1 */

    /* USER CODE END ADC_MspInit 1 */
  }
}
 8003054:	4770      	bx	lr
 8003056:	46c0      	nop			@ (mov r8, r8)
 8003058:	40012400 	.word	0x40012400
 800305c:	40021000 	.word	0x40021000

08003060 <HAL_ADC_MspDeInit>:

void HAL_ADC_MspDeInit(ADC_HandleTypeDef *adcHandle)
{

  if (adcHandle->Instance == ADC1)
 8003060:	4b08      	ldr	r3, [pc, #32]	@ (8003084 <HAL_ADC_MspDeInit+0x24>)
 8003062:	6802      	ldr	r2, [r0, #0]
 8003064:	429a      	cmp	r2, r3
 8003066:	d10c      	bne.n	8003082 <HAL_ADC_MspDeInit+0x22>
  {
    /* USER CODE BEGIN ADC_MspDeInit 0 */

    /* USER CODE END ADC_MspDeInit 0 */

    __HAL_RCC_ADC1_FORCE_RESET();
 8003068:	2280      	movs	r2, #128	@ 0x80
 800306a:	4b07      	ldr	r3, [pc, #28]	@ (8003088 <HAL_ADC_MspDeInit+0x28>)
 800306c:	0092      	lsls	r2, r2, #2
 800306e:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8003070:	430a      	orrs	r2, r1
 8003072:	625a      	str	r2, [r3, #36]	@ 0x24
    __HAL_RCC_ADC1_RELEASE_RESET();
 8003074:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003076:	4905      	ldr	r1, [pc, #20]	@ (800308c <HAL_ADC_MspDeInit+0x2c>)
 8003078:	400a      	ands	r2, r1
 800307a:	625a      	str	r2, [r3, #36]	@ 0x24
    /* Peripheral clock disable */
    __HAL_RCC_ADC1_CLK_DISABLE();
 800307c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800307e:	400a      	ands	r2, r1
 8003080:	635a      	str	r2, [r3, #52]	@ 0x34
    /* USER CODE BEGIN ADC_MspDeInit 1 */

    /* USER CODE END ADC_MspDeInit 1 */
  }
}
 8003082:	4770      	bx	lr
 8003084:	40012400 	.word	0x40012400
 8003088:	40021000 	.word	0x40021000
 800308c:	fffffdff 	.word	0xfffffdff

08003090 <ADC_ReadChannels>:
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

static uint32_t ADC_ReadChannels(uint32_t channel)
{
 8003090:	b573      	push	{r0, r1, r4, r5, r6, lr}
  /* USER CODE BEGIN ADC_ReadChannels_1 */

  /* USER CODE END ADC_ReadChannels_1 */
  uint32_t ADCxConvertedValues = 0;
  ADC_ChannelConfTypeDef sConfig = {0};
 8003092:	2208      	movs	r2, #8
 8003094:	2100      	movs	r1, #0
{
 8003096:	0006      	movs	r6, r0
  ADC_ChannelConfTypeDef sConfig = {0};
 8003098:	4668      	mov	r0, sp
 800309a:	f00c fe89 	bl	800fdb0 <memset>

  MX_ADC_Init();
 800309e:	f7ff ffa1 	bl	8002fe4 <MX_ADC_Init>

  /* wait the the Vrefint used by adc is set */
  while (__HAL_PWR_GET_FLAG(PWR_FLAG_VREFINTRDY) == RESET) {};
 80030a2:	2308      	movs	r3, #8
 80030a4:	491f      	ldr	r1, [pc, #124]	@ (8003124 <ADC_ReadChannels+0x94>)
 80030a6:	684a      	ldr	r2, [r1, #4]
 80030a8:	421a      	tst	r2, r3
 80030aa:	d0fc      	beq.n	80030a6 <ADC_ReadChannels+0x16>

  __HAL_RCC_ADC1_CLK_ENABLE();
 80030ac:	2380      	movs	r3, #128	@ 0x80
 80030ae:	4d1e      	ldr	r5, [pc, #120]	@ (8003128 <ADC_ReadChannels+0x98>)

  /*calibrate ADC if any calibraiton hardware*/
  HAL_ADCEx_Calibration_Start(&hadc, ADC_SINGLE_ENDED);
 80030b0:	4c1e      	ldr	r4, [pc, #120]	@ (800312c <ADC_ReadChannels+0x9c>)
  __HAL_RCC_ADC1_CLK_ENABLE();
 80030b2:	6b6a      	ldr	r2, [r5, #52]	@ 0x34
 80030b4:	009b      	lsls	r3, r3, #2
 80030b6:	4313      	orrs	r3, r2
  HAL_ADCEx_Calibration_Start(&hadc, ADC_SINGLE_ENDED);
 80030b8:	2100      	movs	r1, #0
  __HAL_RCC_ADC1_CLK_ENABLE();
 80030ba:	636b      	str	r3, [r5, #52]	@ 0x34
  HAL_ADCEx_Calibration_Start(&hadc, ADC_SINGLE_ENDED);
 80030bc:	0020      	movs	r0, r4
 80030be:	f001 fca3 	bl	8004a08 <HAL_ADCEx_Calibration_Start>

  /* Deselects all channels*/
  sConfig.Channel = ADC_CHANNEL_MASK;
 80030c2:	4b1b      	ldr	r3, [pc, #108]	@ (8003130 <ADC_ReadChannels+0xa0>)
  sConfig.Rank = ADC_RANK_NONE;
  HAL_ADC_ConfigChannel(&hadc, &sConfig);
 80030c4:	4669      	mov	r1, sp
  sConfig.Channel = ADC_CHANNEL_MASK;
 80030c6:	9300      	str	r3, [sp, #0]
  sConfig.Rank = ADC_RANK_NONE;
 80030c8:	4b1a      	ldr	r3, [pc, #104]	@ (8003134 <ADC_ReadChannels+0xa4>)
  HAL_ADC_ConfigChannel(&hadc, &sConfig);
 80030ca:	0020      	movs	r0, r4
  sConfig.Rank = ADC_RANK_NONE;
 80030cc:	9301      	str	r3, [sp, #4]
  HAL_ADC_ConfigChannel(&hadc, &sConfig);
 80030ce:	f001 fc47 	bl	8004960 <HAL_ADC_ConfigChannel>

  /* Configure Regular Channel */
  sConfig.Channel = channel;
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80030d2:	2380      	movs	r3, #128	@ 0x80
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80030d4:	4669      	mov	r1, sp
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80030d6:	015b      	lsls	r3, r3, #5
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80030d8:	0020      	movs	r0, r4
  sConfig.Channel = channel;
 80030da:	9600      	str	r6, [sp, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80030dc:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80030de:	f001 fc3f 	bl	8004960 <HAL_ADC_ConfigChannel>
 80030e2:	2800      	cmp	r0, #0
 80030e4:	d001      	beq.n	80030ea <ADC_ReadChannels+0x5a>
  {
    Error_Handler();
 80030e6:	f000 f8df 	bl	80032a8 <Error_Handler>
  }

  if (HAL_ADC_Start(&hadc) != HAL_OK)
 80030ea:	0020      	movs	r0, r4
 80030ec:	f001 fb8a 	bl	8004804 <HAL_ADC_Start>
 80030f0:	2800      	cmp	r0, #0
 80030f2:	d001      	beq.n	80030f8 <ADC_ReadChannels+0x68>
  {
    /* Start Error */
    Error_Handler();
 80030f4:	f000 f8d8 	bl	80032a8 <Error_Handler>
  }
  /** Wait for end of conversion */
  HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 80030f8:	2101      	movs	r1, #1
 80030fa:	0020      	movs	r0, r4
 80030fc:	4249      	negs	r1, r1
 80030fe:	f001 fbcb 	bl	8004898 <HAL_ADC_PollForConversion>

  /** Wait for end of conversion */
  HAL_ADC_Stop(&hadc) ;   /* it calls also ADC_Disable() */
 8003102:	0020      	movs	r0, r4
 8003104:	f001 fbaa 	bl	800485c <HAL_ADC_Stop>

  ADCxConvertedValues = HAL_ADC_GetValue(&hadc);
 8003108:	0020      	movs	r0, r4
 800310a:	f001 fc25 	bl	8004958 <HAL_ADC_GetValue>
 800310e:	0006      	movs	r6, r0

  HAL_ADC_DeInit(&hadc);
 8003110:	0020      	movs	r0, r4
 8003112:	f001 fb23 	bl	800475c <HAL_ADC_DeInit>

  __HAL_RCC_ADC1_CLK_DISABLE();
 8003116:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8003118:	4a07      	ldr	r2, [pc, #28]	@ (8003138 <ADC_ReadChannels+0xa8>)

  return ADCxConvertedValues;
  /* USER CODE BEGIN ADC_ReadChannels_2 */

  /* USER CODE END ADC_ReadChannels_2 */
}
 800311a:	0030      	movs	r0, r6
  __HAL_RCC_ADC1_CLK_DISABLE();
 800311c:	4013      	ands	r3, r2
 800311e:	636b      	str	r3, [r5, #52]	@ 0x34
}
 8003120:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 8003122:	46c0      	nop			@ (mov r8, r8)
 8003124:	40007000 	.word	0x40007000
 8003128:	40021000 	.word	0x40021000
 800312c:	20000628 	.word	0x20000628
 8003130:	0007ffff 	.word	0x0007ffff
 8003134:	00001001 	.word	0x00001001
 8003138:	fffffdff 	.word	0xfffffdff

0800313c <SYS_InitMeasurement>:
  hadc.Instance = ADC1;
 800313c:	4b01      	ldr	r3, [pc, #4]	@ (8003144 <SYS_InitMeasurement+0x8>)
 800313e:	4a02      	ldr	r2, [pc, #8]	@ (8003148 <SYS_InitMeasurement+0xc>)
 8003140:	601a      	str	r2, [r3, #0]
}
 8003142:	4770      	bx	lr
 8003144:	20000628 	.word	0x20000628
 8003148:	40012400 	.word	0x40012400

0800314c <SYS_GetBatteryLevel>:
{
 800314c:	b510      	push	{r4, lr}
  measuredLevel = ADC_ReadChannels(ADC_CHANNEL_VREFINT);
 800314e:	4807      	ldr	r0, [pc, #28]	@ (800316c <SYS_GetBatteryLevel+0x20>)
 8003150:	f7ff ff9e 	bl	8003090 <ADC_ReadChannels>
 8003154:	0001      	movs	r1, r0
    batteryLevelmV = 0;
 8003156:	2000      	movs	r0, #0
  if (measuredLevel == 0)
 8003158:	4281      	cmp	r1, r0
 800315a:	d006      	beq.n	800316a <SYS_GetBatteryLevel+0x1e>
    batteryLevelmV = (((uint32_t) VDDA_VREFINT_CAL * (*VREFINT_CAL)) / measuredLevel);
 800315c:	4b04      	ldr	r3, [pc, #16]	@ (8003170 <SYS_GetBatteryLevel+0x24>)
 800315e:	4805      	ldr	r0, [pc, #20]	@ (8003174 <SYS_GetBatteryLevel+0x28>)
 8003160:	881b      	ldrh	r3, [r3, #0]
 8003162:	4358      	muls	r0, r3
 8003164:	f7fd f800 	bl	8000168 <__udivsi3>
 8003168:	b280      	uxth	r0, r0
}
 800316a:	bd10      	pop	{r4, pc}
 800316c:	44020000 	.word	0x44020000
 8003170:	1ff80078 	.word	0x1ff80078
 8003174:	00000bb8 	.word	0x00000bb8

08003178 <SYS_GetTemperatureLevel>:
{
 8003178:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint16_t batteryLevelmV = SYS_GetBatteryLevel();
 800317a:	f7ff ffe7 	bl	800314c <SYS_GetBatteryLevel>
 800317e:	0005      	movs	r5, r0
  measuredLevel = ADC_ReadChannels(ADC_CHANNEL_TEMPSENSOR);
 8003180:	480f      	ldr	r0, [pc, #60]	@ (80031c0 <SYS_GetTemperatureLevel+0x48>)
 8003182:	f7ff ff85 	bl	8003090 <ADC_ReadChannels>
  temperatureDegreeC = COMPUTE_TEMPERATURE(measuredLevel, batteryLevelmV);
 8003186:	4b0f      	ldr	r3, [pc, #60]	@ (80031c4 <SYS_GetTemperatureLevel+0x4c>)
 8003188:	4368      	muls	r0, r5
 800318a:	490f      	ldr	r1, [pc, #60]	@ (80031c8 <SYS_GetTemperatureLevel+0x50>)
 800318c:	881c      	ldrh	r4, [r3, #0]
 800318e:	f7fc ffeb 	bl	8000168 <__udivsi3>
 8003192:	1b03      	subs	r3, r0, r4
 8003194:	2050      	movs	r0, #80	@ 0x50
 8003196:	4358      	muls	r0, r3
 8003198:	4b0c      	ldr	r3, [pc, #48]	@ (80031cc <SYS_GetTemperatureLevel+0x54>)
 800319a:	0200      	lsls	r0, r0, #8
 800319c:	8819      	ldrh	r1, [r3, #0]
 800319e:	1b09      	subs	r1, r1, r4
 80031a0:	f7fd f86c 	bl	800027c <__divsi3>
 80031a4:	23f0      	movs	r3, #240	@ 0xf0
 80031a6:	015b      	lsls	r3, r3, #5
 80031a8:	18c4      	adds	r4, r0, r3
 80031aa:	b224      	sxth	r4, r4
  APP_LOG(TS_ON, VLEVEL_L, "temp= %d\n\r", temperatureDegreeC >> 8);
 80031ac:	1222      	asrs	r2, r4, #8
 80031ae:	9200      	str	r2, [sp, #0]
 80031b0:	2201      	movs	r2, #1
 80031b2:	2100      	movs	r1, #0
 80031b4:	0010      	movs	r0, r2
 80031b6:	4b06      	ldr	r3, [pc, #24]	@ (80031d0 <SYS_GetTemperatureLevel+0x58>)
 80031b8:	f00b feac 	bl	800ef14 <UTIL_ADV_TRACE_COND_FSend>
}
 80031bc:	0020      	movs	r0, r4
 80031be:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
 80031c0:	48040000 	.word	0x48040000
 80031c4:	1ff8007a 	.word	0x1ff8007a
 80031c8:	00000bb8 	.word	0x00000bb8
 80031cc:	1ff8007e 	.word	0x1ff8007e
 80031d0:	08011fac 	.word	0x08011fac

080031d4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80031d4:	b507      	push	{r0, r1, r2, lr}

  /* DMA controller clock enable */

  __HAL_RCC_DMA1_CLK_ENABLE();
 80031d6:	2101      	movs	r1, #1
 80031d8:	4b08      	ldr	r3, [pc, #32]	@ (80031fc <MX_DMA_Init+0x28>)

  /* DMA interrupt init */
  /* DMA1_Channel4_5_6_7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 0, 0);
 80031da:	200b      	movs	r0, #11
  __HAL_RCC_DMA1_CLK_ENABLE();
 80031dc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80031de:	430a      	orrs	r2, r1
 80031e0:	631a      	str	r2, [r3, #48]	@ 0x30
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 0, 0);
 80031e2:	2200      	movs	r2, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 80031e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031e6:	400b      	ands	r3, r1
 80031e8:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 0, 0);
 80031ea:	0011      	movs	r1, r2
  __HAL_RCC_DMA1_CLK_ENABLE();
 80031ec:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 0, 0);
 80031ee:	f001 fc5b 	bl	8004aa8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_6_7_IRQn);
 80031f2:	200b      	movs	r0, #11
 80031f4:	f001 fc82 	bl	8004afc <HAL_NVIC_EnableIRQ>

}
 80031f8:	bd07      	pop	{r0, r1, r2, pc}
 80031fa:	46c0      	nop			@ (mov r8, r8)
 80031fc:	40021000 	.word	0x40021000

08003200 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003200:	b510      	push	{r4, lr}
 8003202:	b094      	sub	sp, #80	@ 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003204:	222c      	movs	r2, #44	@ 0x2c
 8003206:	2100      	movs	r1, #0
 8003208:	a807      	add	r0, sp, #28
 800320a:	f00c fdd1 	bl	800fdb0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800320e:	2214      	movs	r2, #20
 8003210:	2100      	movs	r1, #0
 8003212:	a801      	add	r0, sp, #4
 8003214:	f00c fdcc 	bl	800fdb0 <memset>

  /* Enable HSE Oscillator and Activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType      = RCC_OSCILLATORTYPE_HSI;
 8003218:	2302      	movs	r3, #2
 800321a:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.HSEState            = RCC_HSE_OFF;
  RCC_OscInitStruct.HSIState            = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState        = RCC_PLL_ON;
 800321c:	9310      	str	r3, [sp, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLSource       = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLMUL          = RCC_PLLMUL_6;
 800321e:	2380      	movs	r3, #128	@ 0x80
 8003220:	031b      	lsls	r3, r3, #12
 8003222:	9312      	str	r3, [sp, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLDIV          = RCC_PLLDIV_3;
 8003224:	2380      	movs	r3, #128	@ 0x80
  RCC_OscInitStruct.HSIState            = RCC_HSI_ON;
 8003226:	2201      	movs	r2, #1
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003228:	2410      	movs	r4, #16
  RCC_OscInitStruct.PLL.PLLDIV          = RCC_PLLDIV_3;
 800322a:	041b      	lsls	r3, r3, #16

  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800322c:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.HSIState            = RCC_HSI_ON;
 800322e:	9209      	str	r2, [sp, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003230:	940a      	str	r4, [sp, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLDIV          = RCC_PLLDIV_3;
 8003232:	9313      	str	r3, [sp, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003234:	f002 f804 	bl	8005240 <HAL_RCC_OscConfig>
 8003238:	2800      	cmp	r0, #0
 800323a:	d001      	beq.n	8003240 <SystemClock_Config+0x40>
  __ASM volatile ("cpsid i" : : : "memory");
 800323c:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800323e:	e7fe      	b.n	800323e <SystemClock_Config+0x3e>
  __HAL_RCC_PWR_CLK_ENABLE();
 8003240:	2380      	movs	r3, #128	@ 0x80
 8003242:	4a11      	ldr	r2, [pc, #68]	@ (8003288 <SystemClock_Config+0x88>)
 8003244:	055b      	lsls	r3, r3, #21
 8003246:	6b91      	ldr	r1, [r2, #56]	@ 0x38
 8003248:	430b      	orrs	r3, r1
 800324a:	6393      	str	r3, [r2, #56]	@ 0x38
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800324c:	4a0f      	ldr	r2, [pc, #60]	@ (800328c <SystemClock_Config+0x8c>)
 800324e:	4b10      	ldr	r3, [pc, #64]	@ (8003290 <SystemClock_Config+0x90>)
 8003250:	6811      	ldr	r1, [r2, #0]
 8003252:	4019      	ands	r1, r3
 8003254:	2380      	movs	r3, #128	@ 0x80
 8003256:	011b      	lsls	r3, r3, #4
 8003258:	430b      	orrs	r3, r1
 800325a:	6013      	str	r3, [r2, #0]
  while (__HAL_PWR_GET_FLAG(PWR_FLAG_VOS) != RESET) {};
 800325c:	6851      	ldr	r1, [r2, #4]
 800325e:	000b      	movs	r3, r1
 8003260:	4023      	ands	r3, r4
 8003262:	4221      	tst	r1, r4
 8003264:	d1fa      	bne.n	800325c <SystemClock_Config+0x5c>
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8003266:	220f      	movs	r2, #15
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8003268:	2101      	movs	r1, #1
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 800326a:	9201      	str	r2, [sp, #4]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800326c:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800326e:	3a0c      	subs	r2, #12
 8003270:	9202      	str	r2, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003272:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003274:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003276:	9305      	str	r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8003278:	f002 fa6c 	bl	8005754 <HAL_RCC_ClockConfig>
 800327c:	2800      	cmp	r0, #0
 800327e:	d001      	beq.n	8003284 <SystemClock_Config+0x84>
 8003280:	b672      	cpsid	i
  while (1)
 8003282:	e7fe      	b.n	8003282 <SystemClock_Config+0x82>
}
 8003284:	b014      	add	sp, #80	@ 0x50
 8003286:	bd10      	pop	{r4, pc}
 8003288:	40021000 	.word	0x40021000
 800328c:	40007000 	.word	0x40007000
 8003290:	ffffe7ff 	.word	0xffffe7ff

08003294 <main>:
{
 8003294:	b510      	push	{r4, lr}
  HAL_Init();
 8003296:	f001 f897 	bl	80043c8 <HAL_Init>
  SystemClock_Config();
 800329a:	f7ff ffb1 	bl	8003200 <SystemClock_Config>
  MX_LoRaWAN_Init();
 800329e:	f7fe f953 	bl	8001548 <MX_LoRaWAN_Init>
    MX_LoRaWAN_Process();
 80032a2:	f7fe f957 	bl	8001554 <MX_LoRaWAN_Process>
  while (1)
 80032a6:	e7fc      	b.n	80032a2 <main+0xe>

080032a8 <Error_Handler>:
 80032a8:	b672      	cpsid	i
  while (1)
 80032aa:	e7fe      	b.n	80032aa <Error_Handler+0x2>

080032ac <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80032ac:	b530      	push	{r4, r5, lr}
  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
  RTC_DateTypeDef sDate = {0};
 80032ae:	2500      	movs	r5, #0
{
 80032b0:	b091      	sub	sp, #68	@ 0x44
  RTC_TimeTypeDef sTime = {0};
 80032b2:	2214      	movs	r2, #20
 80032b4:	2100      	movs	r1, #0
 80032b6:	a801      	add	r0, sp, #4
 80032b8:	f00c fd7a 	bl	800fdb0 <memset>
  RTC_AlarmTypeDef sAlarm = {0};
 80032bc:	2228      	movs	r2, #40	@ 0x28
 80032be:	0029      	movs	r1, r5
 80032c0:	a806      	add	r0, sp, #24
  RTC_DateTypeDef sDate = {0};
 80032c2:	9500      	str	r5, [sp, #0]
  RTC_AlarmTypeDef sAlarm = {0};
 80032c4:	f00c fd74 	bl	800fdb0 <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80032c8:	4c24      	ldr	r4, [pc, #144]	@ (800335c <MX_RTC_Init+0xb0>)
 80032ca:	4b25      	ldr	r3, [pc, #148]	@ (8003360 <MX_RTC_Init+0xb4>)
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;

  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80032cc:	0020      	movs	r0, r4
  hrtc.Instance = RTC;
 80032ce:	6023      	str	r3, [r4, #0]
  hrtc.Init.AsynchPrediv = RTC_PREDIV_A;
 80032d0:	231f      	movs	r3, #31
 80032d2:	60a3      	str	r3, [r4, #8]
  hrtc.Init.SynchPrediv = RTC_PREDIV_S;
 80032d4:	4b23      	ldr	r3, [pc, #140]	@ (8003364 <MX_RTC_Init+0xb8>)
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80032d6:	6065      	str	r5, [r4, #4]
  hrtc.Init.SynchPrediv = RTC_PREDIV_S;
 80032d8:	60e3      	str	r3, [r4, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80032da:	6125      	str	r5, [r4, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80032dc:	6165      	str	r5, [r4, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80032de:	61a5      	str	r5, [r4, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80032e0:	61e5      	str	r5, [r4, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80032e2:	f002 fcc5 	bl	8005c70 <HAL_RTC_Init>
 80032e6:	42a8      	cmp	r0, r5
 80032e8:	d001      	beq.n	80032ee <MX_RTC_Init+0x42>
  {
    Error_Handler();
 80032ea:	f7ff ffdd 	bl	80032a8 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 80032ee:	466b      	mov	r3, sp
  sTime.Minutes = 0;
  sTime.Seconds = 0;
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 80032f0:	2200      	movs	r2, #0
 80032f2:	0020      	movs	r0, r4
 80032f4:	a901      	add	r1, sp, #4
  sTime.Hours = 0;
 80032f6:	809d      	strh	r5, [r3, #4]
  sTime.Seconds = 0;
 80032f8:	719d      	strb	r5, [r3, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80032fa:	9504      	str	r5, [sp, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80032fc:	9505      	str	r5, [sp, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 80032fe:	f002 fd1f 	bl	8005d40 <HAL_RTC_SetTime>
 8003302:	2800      	cmp	r0, #0
 8003304:	d001      	beq.n	800330a <MX_RTC_Init+0x5e>
  {
    Error_Handler();
 8003306:	f7ff ffcf 	bl	80032a8 <Error_Handler>
  }

  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800330a:	4b17      	ldr	r3, [pc, #92]	@ (8003368 <MX_RTC_Init+0xbc>)
  sDate.Month = RTC_MONTH_JANUARY;
  sDate.Date = 1;
  sDate.Year = 0;

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 800330c:	2200      	movs	r2, #0
 800330e:	4669      	mov	r1, sp
 8003310:	0020      	movs	r0, r4
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8003312:	9300      	str	r3, [sp, #0]
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8003314:	f002 fd90 	bl	8005e38 <HAL_RTC_SetDate>
 8003318:	2800      	cmp	r0, #0
 800331a:	d001      	beq.n	8003320 <MX_RTC_Init+0x74>
  {
    Error_Handler();
 800331c:	f7ff ffc4 	bl	80032a8 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0;
 8003320:	2200      	movs	r2, #0
 8003322:	466b      	mov	r3, sp
 8003324:	831a      	strh	r2, [r3, #24]
  sAlarm.AlarmTime.Minutes = 0;
  sAlarm.AlarmTime.Seconds = 0;
 8003326:	769a      	strb	r2, [r3, #26]
  sAlarm.AlarmTime.SubSeconds = 0;
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_SS14_10;
 8003328:	23a0      	movs	r3, #160	@ 0xa0
 800332a:	051b      	lsls	r3, r3, #20
 800332c:	930c      	str	r3, [sp, #48]	@ 0x30
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
  sAlarm.AlarmDateWeekDay = 30;
 800332e:	2319      	movs	r3, #25
 8003330:	211e      	movs	r1, #30
 8003332:	446b      	add	r3, sp
 8003334:	77d9      	strb	r1, [r3, #31]
  sAlarm.Alarm = RTC_ALARM_A;
 8003336:	2380      	movs	r3, #128	@ 0x80
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 8003338:	0020      	movs	r0, r4
  sAlarm.Alarm = RTC_ALARM_A;
 800333a:	005b      	lsls	r3, r3, #1
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 800333c:	a906      	add	r1, sp, #24
  sAlarm.AlarmTime.SubSeconds = 0;
 800333e:	9207      	str	r2, [sp, #28]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8003340:	9209      	str	r2, [sp, #36]	@ 0x24
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8003342:	920a      	str	r2, [sp, #40]	@ 0x28
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8003344:	920b      	str	r2, [sp, #44]	@ 0x2c
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8003346:	920d      	str	r2, [sp, #52]	@ 0x34
  sAlarm.Alarm = RTC_ALARM_A;
 8003348:	930f      	str	r3, [sp, #60]	@ 0x3c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 800334a:	f002 fddb 	bl	8005f04 <HAL_RTC_SetAlarm_IT>
 800334e:	2800      	cmp	r0, #0
 8003350:	d001      	beq.n	8003356 <MX_RTC_Init+0xaa>
  {
    Error_Handler();
 8003352:	f7ff ffa9 	bl	80032a8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8003356:	b011      	add	sp, #68	@ 0x44
 8003358:	bd30      	pop	{r4, r5, pc}
 800335a:	46c0      	nop			@ (mov r8, r8)
 800335c:	20000684 	.word	0x20000684
 8003360:	40002800 	.word	0x40002800
 8003364:	000003ff 	.word	0x000003ff
 8003368:	00010101 	.word	0x00010101

0800336c <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef *rtcHandle)
{
 800336c:	b510      	push	{r4, lr}
 800336e:	0004      	movs	r4, r0
 8003370:	b08e      	sub	sp, #56	@ 0x38

  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003372:	2238      	movs	r2, #56	@ 0x38
 8003374:	2100      	movs	r1, #0
 8003376:	4668      	mov	r0, sp
 8003378:	f00c fd1a 	bl	800fdb0 <memset>
  if (rtcHandle->Instance == RTC)
 800337c:	4b0f      	ldr	r3, [pc, #60]	@ (80033bc <HAL_RTC_MspInit+0x50>)
 800337e:	6822      	ldr	r2, [r4, #0]
 8003380:	429a      	cmp	r2, r3
 8003382:	d118      	bne.n	80033b6 <HAL_RTC_MspInit+0x4a>
    /* USER CODE BEGIN RTC_MspInit 0 */

    /* USER CODE END RTC_MspInit 0 */
    /** Initializes the peripherals clocks
      */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE;
 8003384:	2304      	movs	r3, #4
    RCC_OscInitStruct.LSEState = RCC_LSE_ON;
    RCC_OscInitStruct.LSIState = RCC_LSI_OFF;
    RCC_OscInitStruct.HSEState = RCC_HSE_OFF;
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003386:	4668      	mov	r0, sp
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE;
 8003388:	9300      	str	r3, [sp, #0]
    RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800338a:	33fc      	adds	r3, #252	@ 0xfc
 800338c:	9302      	str	r3, [sp, #8]
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800338e:	f001 ff57 	bl	8005240 <HAL_RCC_OscConfig>
 8003392:	2800      	cmp	r0, #0
 8003394:	d001      	beq.n	800339a <HAL_RTC_MspInit+0x2e>
    {
      Error_Handler();
 8003396:	f7ff ff87 	bl	80032a8 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800339a:	2380      	movs	r3, #128	@ 0x80
 800339c:	4a08      	ldr	r2, [pc, #32]	@ (80033c0 <HAL_RTC_MspInit+0x54>)
 800339e:	02db      	lsls	r3, r3, #11
 80033a0:	6d11      	ldr	r1, [r2, #80]	@ 0x50

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 80033a2:	2002      	movs	r0, #2
    __HAL_RCC_RTC_ENABLE();
 80033a4:	430b      	orrs	r3, r1
 80033a6:	6513      	str	r3, [r2, #80]	@ 0x50
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 80033a8:	2200      	movs	r2, #0
 80033aa:	0011      	movs	r1, r2
 80033ac:	f001 fb7c 	bl	8004aa8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 80033b0:	2002      	movs	r0, #2
 80033b2:	f001 fba3 	bl	8004afc <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN RTC_MspInit 1 */

    /* USER CODE END RTC_MspInit 1 */
  }
}
 80033b6:	b00e      	add	sp, #56	@ 0x38
 80033b8:	bd10      	pop	{r4, pc}
 80033ba:	46c0      	nop			@ (mov r8, r8)
 80033bc:	40002800 	.word	0x40002800
 80033c0:	40021000 	.word	0x40021000

080033c4 <RTC_IF_GetTimerContext>:

uint32_t RTC_IF_GetTimerContext(void)
{
  RTC_IF_DBG_PRINTF("RTC_IF_GetTimerContext=%d\n\r", RtcTimerContext.Rtc_Time);
  /*return time context*/
  return (uint32_t) RtcTimerContext.Rtc_Time;
 80033c4:	4b01      	ldr	r3, [pc, #4]	@ (80033cc <RTC_IF_GetTimerContext+0x8>)
 80033c6:	6818      	ldr	r0, [r3, #0]
}
 80033c8:	4770      	bx	lr
 80033ca:	46c0      	nop			@ (mov r8, r8)
 80033cc:	200006a8 	.word	0x200006a8

080033d0 <RTC_IF_GetMinimumTimeout>:
}

uint32_t RTC_IF_GetMinimumTimeout(void)
{
  return (MIN_ALARM_DELAY);
}
 80033d0:	2003      	movs	r0, #3
 80033d2:	4770      	bx	lr

080033d4 <RTC_IF_Convert_ms2Tick>:

uint32_t RTC_IF_Convert_ms2Tick(uint32_t timeMilliSec)
{
 80033d4:	b510      	push	{r4, lr}
  return (uint32_t)((((uint64_t)timeMilliSec) * CONV_DENOM) / CONV_NUMER);
 80033d6:	0e41      	lsrs	r1, r0, #25
 80033d8:	227d      	movs	r2, #125	@ 0x7d
 80033da:	2300      	movs	r3, #0
 80033dc:	01c0      	lsls	r0, r0, #7
 80033de:	f7fd f877 	bl	80004d0 <__aeabi_uldivmod>
}
 80033e2:	bd10      	pop	{r4, pc}

080033e4 <RTC_IF_Convert_Tick2ms>:

uint32_t RTC_IF_Convert_Tick2ms(uint32_t tick)
{
 80033e4:	b510      	push	{r4, lr}
  return (((uint64_t)(tick) * CONV_NUMER) / CONV_DENOM);
 80033e6:	227d      	movs	r2, #125	@ 0x7d
 80033e8:	2300      	movs	r3, #0
 80033ea:	2100      	movs	r1, #0
 80033ec:	f7fd f890 	bl	8000510 <__aeabi_lmul>
 80033f0:	0649      	lsls	r1, r1, #25
 80033f2:	09c0      	lsrs	r0, r0, #7
 80033f4:	4308      	orrs	r0, r1
}
 80033f6:	bd10      	pop	{r4, pc}

080033f8 <RTC_IF_StopTimer>:
  __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 80033f8:	4806      	ldr	r0, [pc, #24]	@ (8003414 <RTC_IF_StopTimer+0x1c>)
 80033fa:	4b07      	ldr	r3, [pc, #28]	@ (8003418 <RTC_IF_StopTimer+0x20>)
 80033fc:	6801      	ldr	r1, [r0, #0]
{
 80033fe:	b510      	push	{r4, lr}
  __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 8003400:	68ca      	ldr	r2, [r1, #12]
 8003402:	b2d2      	uxtb	r2, r2
 8003404:	4313      	orrs	r3, r2
 8003406:	60cb      	str	r3, [r1, #12]
  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8003408:	2180      	movs	r1, #128	@ 0x80
 800340a:	0049      	lsls	r1, r1, #1
 800340c:	f002 fb6c 	bl	8005ae8 <HAL_RTC_DeactivateAlarm>
}
 8003410:	2000      	movs	r0, #0
 8003412:	bd10      	pop	{r4, pc}
 8003414:	20000684 	.word	0x20000684
 8003418:	fffffe7f 	.word	0xfffffe7f

0800341c <RTC_GetCalendarValue>:
  * @param pointer to RTC_DateStruct
  * @param pointer to RTC_TimeStruct
  * @retval time in ticks
  */
static uint32_t RTC_GetCalendarValue(RTC_DateTypeDef *RTC_DateStruct, RTC_TimeTypeDef *RTC_TimeStruct)
{
 800341c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t calendarValue = 0;
  uint32_t first_read;
  uint32_t correction;

  /* Get Time and Date*/
  HAL_RTC_GetTime(&hrtc, RTC_TimeStruct, RTC_FORMAT_BIN);
 800341e:	4e25      	ldr	r6, [pc, #148]	@ (80034b4 <RTC_GetCalendarValue+0x98>)
{
 8003420:	0005      	movs	r5, r0
  HAL_RTC_GetTime(&hrtc, RTC_TimeStruct, RTC_FORMAT_BIN);
 8003422:	2200      	movs	r2, #0
 8003424:	0030      	movs	r0, r6
{
 8003426:	000c      	movs	r4, r1
  HAL_RTC_GetTime(&hrtc, RTC_TimeStruct, RTC_FORMAT_BIN);
 8003428:	f002 fe4a 	bl	80060c0 <HAL_RTC_GetTime>
  * @param  RTCx RTC Instance
  * @retval Sub second value (number between 0 and 65535)
  */
__STATIC_INLINE uint32_t LL_RTC_TIME_GetSubSecond(RTC_TypeDef *RTCx)
{
  return (uint32_t)(READ_BIT(RTCx->SSR, RTC_SSR_SS));
 800342c:	4f22      	ldr	r7, [pc, #136]	@ (80034b8 <RTC_GetCalendarValue+0x9c>)

  /* make sure it is correct due to asynchronus nature of RTC*/
  do
  {
    first_read = LL_RTC_TIME_GetSubSecond(RTC);
    HAL_RTC_GetDate(&hrtc, RTC_DateStruct, RTC_FORMAT_BIN);
 800342e:	2200      	movs	r2, #0
 8003430:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003432:	0029      	movs	r1, r5
 8003434:	0030      	movs	r0, r6
 8003436:	9301      	str	r3, [sp, #4]
 8003438:	f002 fe6c 	bl	8006114 <HAL_RTC_GetDate>
    HAL_RTC_GetTime(&hrtc, RTC_TimeStruct, RTC_FORMAT_BIN);
 800343c:	2200      	movs	r2, #0
 800343e:	0021      	movs	r1, r4
 8003440:	0030      	movs	r0, r6
 8003442:	f002 fe3d 	bl	80060c0 <HAL_RTC_GetTime>
 8003446:	6abb      	ldr	r3, [r7, #40]	@ 0x28

  } while (first_read != LL_RTC_TIME_GetSubSecond(RTC));
 8003448:	9a01      	ldr	r2, [sp, #4]
 800344a:	4053      	eors	r3, r2
 800344c:	b29b      	uxth	r3, r3
 800344e:	2b00      	cmp	r3, #0
 8003450:	d1ec      	bne.n	800342c <RTC_GetCalendarValue+0x10>

  /* calculte amount of elapsed days since 01/01/2000 */
  calendarValue = DIVC((DAYS_IN_YEAR * 3 + DAYS_IN_LEAP_YEAR) * RTC_DateStruct->Year, 4);

  correction = ((RTC_DateStruct->Year % 4) == 0) ? DAYS_IN_MONTH_CORRECTION_LEAP : DAYS_IN_MONTH_CORRECTION_NORM ;
 8003452:	2103      	movs	r1, #3
  calendarValue = DIVC((DAYS_IN_YEAR * 3 + DAYS_IN_LEAP_YEAR) * RTC_DateStruct->Year, 4);
 8003454:	78ea      	ldrb	r2, [r5, #3]
 8003456:	4819      	ldr	r0, [pc, #100]	@ (80034bc <RTC_GetCalendarValue+0xa0>)

  calendarValue += (DIVC((RTC_DateStruct->Month - 1) * (30 + 31),
 8003458:	786e      	ldrb	r6, [r5, #1]
  calendarValue = DIVC((DAYS_IN_YEAR * 3 + DAYS_IN_LEAP_YEAR) * RTC_DateStruct->Year, 4);
 800345a:	4350      	muls	r0, r2
  correction = ((RTC_DateStruct->Year % 4) == 0) ? DAYS_IN_MONTH_CORRECTION_LEAP : DAYS_IN_MONTH_CORRECTION_NORM ;
 800345c:	400a      	ands	r2, r1
 800345e:	1e53      	subs	r3, r2, #1
 8003460:	419a      	sbcs	r2, r3
 8003462:	4253      	negs	r3, r2
 8003464:	4a16      	ldr	r2, [pc, #88]	@ (80034c0 <RTC_GetCalendarValue+0xa4>)
  calendarValue += (DIVC((RTC_DateStruct->Month - 1) * (30 + 31),
 8003466:	3e01      	subs	r6, #1
  correction = ((RTC_DateStruct->Year % 4) == 0) ? DAYS_IN_MONTH_CORRECTION_LEAP : DAYS_IN_MONTH_CORRECTION_NORM ;
 8003468:	4013      	ands	r3, r2
 800346a:	4a16      	ldr	r2, [pc, #88]	@ (80034c4 <RTC_GetCalendarValue+0xa8>)
                         2) - (((correction >> ((RTC_DateStruct->Month - 1) * 2)) & 0x3)));

  calendarValue += (RTC_DateStruct->Date - 1);
 800346c:	78ad      	ldrb	r5, [r5, #2]
  correction = ((RTC_DateStruct->Year % 4) == 0) ? DAYS_IN_MONTH_CORRECTION_LEAP : DAYS_IN_MONTH_CORRECTION_NORM ;
 800346e:	189b      	adds	r3, r3, r2
  calendarValue += (DIVC((RTC_DateStruct->Month - 1) * (30 + 31),
 8003470:	223d      	movs	r2, #61	@ 0x3d
 8003472:	4372      	muls	r2, r6
                         2) - (((correction >> ((RTC_DateStruct->Month - 1) * 2)) & 0x3)));
 8003474:	0076      	lsls	r6, r6, #1
 8003476:	40f3      	lsrs	r3, r6
  calendarValue += (DIVC((RTC_DateStruct->Month - 1) * (30 + 31),
 8003478:	3201      	adds	r2, #1
 800347a:	0fd7      	lsrs	r7, r2, #31
  calendarValue = DIVC((DAYS_IN_YEAR * 3 + DAYS_IN_LEAP_YEAR) * RTC_DateStruct->Year, 4);
 800347c:	3003      	adds	r0, #3
  calendarValue += (DIVC((RTC_DateStruct->Month - 1) * (30 + 31),
 800347e:	18ba      	adds	r2, r7, r2
 8003480:	3d01      	subs	r5, #1
  calendarValue = DIVC((DAYS_IN_YEAR * 3 + DAYS_IN_LEAP_YEAR) * RTC_DateStruct->Year, 4);
 8003482:	0880      	lsrs	r0, r0, #2
  calendarValue += (RTC_DateStruct->Date - 1);
 8003484:	1828      	adds	r0, r5, r0
  calendarValue += (DIVC((RTC_DateStruct->Month - 1) * (30 + 31),
 8003486:	1052      	asrs	r2, r2, #1
 8003488:	1812      	adds	r2, r2, r0
  /* convert from days to seconds */
  calendarValue *= SECONDS_IN_1DAY;

  calendarValue += ((uint32_t)RTC_TimeStruct->Seconds +
                    ((uint32_t)RTC_TimeStruct->Minutes * SECONDS_IN_1MINUTE) +
                    ((uint32_t)RTC_TimeStruct->Hours * SECONDS_IN_1HOUR)) ;
 800348a:	20e1      	movs	r0, #225	@ 0xe1
                         2) - (((correction >> ((RTC_DateStruct->Month - 1) * 2)) & 0x3)));
 800348c:	400b      	ands	r3, r1
  calendarValue += (RTC_DateStruct->Date - 1);
 800348e:	1ad3      	subs	r3, r2, r3
  calendarValue *= SECONDS_IN_1DAY;
 8003490:	4a0d      	ldr	r2, [pc, #52]	@ (80034c8 <RTC_GetCalendarValue+0xac>)
                    ((uint32_t)RTC_TimeStruct->Hours * SECONDS_IN_1HOUR)) ;
 8003492:	0100      	lsls	r0, r0, #4
  calendarValue *= SECONDS_IN_1DAY;
 8003494:	4353      	muls	r3, r2
                    ((uint32_t)RTC_TimeStruct->Hours * SECONDS_IN_1HOUR)) ;
 8003496:	7822      	ldrb	r2, [r4, #0]
                    ((uint32_t)RTC_TimeStruct->Minutes * SECONDS_IN_1MINUTE) +
 8003498:	7861      	ldrb	r1, [r4, #1]
                    ((uint32_t)RTC_TimeStruct->Hours * SECONDS_IN_1HOUR)) ;
 800349a:	4350      	muls	r0, r2
                    ((uint32_t)RTC_TimeStruct->Minutes * SECONDS_IN_1MINUTE) +
 800349c:	223c      	movs	r2, #60	@ 0x3c
 800349e:	434a      	muls	r2, r1
 80034a0:	1880      	adds	r0, r0, r2
  calendarValue += ((uint32_t)RTC_TimeStruct->Seconds +
 80034a2:	78a2      	ldrb	r2, [r4, #2]
                    ((uint32_t)RTC_TimeStruct->Minutes * SECONDS_IN_1MINUTE) +
 80034a4:	1880      	adds	r0, r0, r2
  calendarValue += ((uint32_t)RTC_TimeStruct->Seconds +
 80034a6:	18c0      	adds	r0, r0, r3

  calendarValue = (calendarValue << RTC_N_PREDIV_S) + (RTC_PREDIV_S - RTC_TimeStruct->SubSeconds);
 80034a8:	6863      	ldr	r3, [r4, #4]
 80034aa:	0280      	lsls	r0, r0, #10
 80034ac:	1ac0      	subs	r0, r0, r3
 80034ae:	4b07      	ldr	r3, [pc, #28]	@ (80034cc <RTC_GetCalendarValue+0xb0>)
 80034b0:	18c0      	adds	r0, r0, r3

  return (calendarValue);
}
 80034b2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80034b4:	20000684 	.word	0x20000684
 80034b8:	40002800 	.word	0x40002800
 80034bc:	000005b5 	.word	0x000005b5
 80034c0:	00555550 	.word	0x00555550
 80034c4:	00445550 	.word	0x00445550
 80034c8:	00015180 	.word	0x00015180
 80034cc:	000003ff 	.word	0x000003ff

080034d0 <RTC_IF_SetTimerContext>:
{
 80034d0:	b510      	push	{r4, lr}
  RtcTimerContext.Rtc_Time = RTC_GetCalendarValue(&RtcTimerContext.RTC_Calndr_Date, &RtcTimerContext.RTC_Calndr_Time);
 80034d2:	4c04      	ldr	r4, [pc, #16]	@ (80034e4 <RTC_IF_SetTimerContext+0x14>)
 80034d4:	4904      	ldr	r1, [pc, #16]	@ (80034e8 <RTC_IF_SetTimerContext+0x18>)
 80034d6:	0020      	movs	r0, r4
 80034d8:	3018      	adds	r0, #24
 80034da:	f7ff ff9f 	bl	800341c <RTC_GetCalendarValue>
 80034de:	6020      	str	r0, [r4, #0]
}
 80034e0:	bd10      	pop	{r4, pc}
 80034e2:	46c0      	nop			@ (mov r8, r8)
 80034e4:	200006a8 	.word	0x200006a8
 80034e8:	200006ac 	.word	0x200006ac

080034ec <RTC_IF_GetTimerElapsedTime>:
{
 80034ec:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  uint32_t CalendarValue = RTC_GetCalendarValue(&RTC_DateStruct, &RTC_TimeStruct);
 80034ee:	4668      	mov	r0, sp
 80034f0:	a901      	add	r1, sp, #4
 80034f2:	f7ff ff93 	bl	800341c <RTC_GetCalendarValue>
  return ((uint32_t)(CalendarValue - RtcTimerContext.Rtc_Time));
 80034f6:	4b02      	ldr	r3, [pc, #8]	@ (8003500 <RTC_IF_GetTimerElapsedTime+0x14>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	1ac0      	subs	r0, r0, r3
}
 80034fc:	b007      	add	sp, #28
 80034fe:	bd00      	pop	{pc}
 8003500:	200006a8 	.word	0x200006a8

08003504 <RTC_IF_StartTimer>:
{
 8003504:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003506:	b087      	sub	sp, #28
 8003508:	0006      	movs	r6, r0
  if ((MIN_ALARM_DELAY + McuWakeUpTimeCal) < ((timeout - RTC_IF_GetTimerElapsedTime())))
 800350a:	f7ff ffef 	bl	80034ec <RTC_IF_GetTimerElapsedTime>
    UTIL_LPM_SetStopMode((1 << CFG_LPM_RTC_Id), UTIL_LPM_ENABLE);
 800350e:	2100      	movs	r1, #0
  if ((MIN_ALARM_DELAY + McuWakeUpTimeCal) < ((timeout - RTC_IF_GetTimerElapsedTime())))
 8003510:	1a30      	subs	r0, r6, r0
 8003512:	2803      	cmp	r0, #3
 8003514:	d800      	bhi.n	8003518 <RTC_IF_StartTimer+0x14>
    UTIL_LPM_SetStopMode((1 << CFG_LPM_RTC_Id), UTIL_LPM_DISABLE);
 8003516:	2101      	movs	r1, #1
 8003518:	2002      	movs	r0, #2
 800351a:	f00b fdb1 	bl	800f080 <UTIL_LPM_SetStopMode>
  if (UTIL_LPM_GetMode() == UTIL_LPM_STOPMODE)
 800351e:	f00b fddb 	bl	800f0d8 <UTIL_LPM_GetMode>
  RTC_TimeTypeDef RTC_TimeStruct = RtcTimerContext.RTC_Calndr_Time;
 8003522:	4c3f      	ldr	r4, [pc, #252]	@ (8003620 <RTC_IF_StartTimer+0x11c>)
 8003524:	7923      	ldrb	r3, [r4, #4]
 8003526:	9300      	str	r3, [sp, #0]
 8003528:	79a3      	ldrb	r3, [r4, #6]
 800352a:	7967      	ldrb	r7, [r4, #5]
 800352c:	9301      	str	r3, [sp, #4]
 800352e:	79e3      	ldrb	r3, [r4, #7]
 8003530:	9302      	str	r3, [sp, #8]
 8003532:	68a3      	ldr	r3, [r4, #8]
 8003534:	9303      	str	r3, [sp, #12]
  RTC_DateTypeDef RTC_DateStruct = RtcTimerContext.RTC_Calndr_Date;
 8003536:	7e63      	ldrb	r3, [r4, #25]
 8003538:	9304      	str	r3, [sp, #16]
 800353a:	7ea5      	ldrb	r5, [r4, #26]
 800353c:	7ee3      	ldrb	r3, [r4, #27]
 800353e:	9305      	str	r3, [sp, #20]
  RTC_IF_StopTimer();
 8003540:	f7ff ff5a 	bl	80033f8 <RTC_IF_StopTimer>
  rtcAlarmDays =  RTC_DateStruct.Date;
 8003544:	0028      	movs	r0, r5
  rtcAlarmSubSeconds =  RTC_PREDIV_S - RTC_TimeStruct.SubSeconds;
 8003546:	4b37      	ldr	r3, [pc, #220]	@ (8003624 <RTC_IF_StartTimer+0x120>)
 8003548:	9a03      	ldr	r2, [sp, #12]
  while (timeoutValue >= SECONDS_IN_1DAY)
 800354a:	4937      	ldr	r1, [pc, #220]	@ (8003628 <RTC_IF_StartTimer+0x124>)
  rtcAlarmSubSeconds =  RTC_PREDIV_S - RTC_TimeStruct.SubSeconds;
 800354c:	1a9a      	subs	r2, r3, r2
  rtcAlarmSubSeconds += (timeoutValue & RTC_PREDIV_S);
 800354e:	05b3      	lsls	r3, r6, #22
 8003550:	0d9b      	lsrs	r3, r3, #22
 8003552:	18d2      	adds	r2, r2, r3
 8003554:	b292      	uxth	r2, r2
  timeoutValue >>= RTC_N_PREDIV_S;  /* convert timeout  in seconds */
 8003556:	0ab3      	lsrs	r3, r6, #10
  while (timeoutValue >= SECONDS_IN_1DAY)
 8003558:	428b      	cmp	r3, r1
 800355a:	d841      	bhi.n	80035e0 <RTC_IF_StartTimer+0xdc>
  while (timeoutValue >= SECONDS_IN_1HOUR)
 800355c:	21e1      	movs	r1, #225	@ 0xe1
  rtcAlarmHours = RTC_TimeStruct.Hours;
 800355e:	9e00      	ldr	r6, [sp, #0]
  while (timeoutValue >= SECONDS_IN_1HOUR)
 8003560:	0109      	lsls	r1, r1, #4
 8003562:	428b      	cmp	r3, r1
 8003564:	d241      	bcs.n	80035ea <RTC_IF_StartTimer+0xe6>
  while (timeoutValue >= SECONDS_IN_1MINUTE)
 8003566:	2b3b      	cmp	r3, #59	@ 0x3b
 8003568:	d844      	bhi.n	80035f4 <RTC_IF_StartTimer+0xf0>
  while (rtcAlarmSubSeconds >= (RTC_PREDIV_S + 1))
 800356a:	0a91      	lsrs	r1, r2, #10
 800356c:	028d      	lsls	r5, r1, #10
 800356e:	1b52      	subs	r2, r2, r5
 8003570:	b292      	uxth	r2, r2
 8003572:	9200      	str	r2, [sp, #0]
 8003574:	9a01      	ldr	r2, [sp, #4]
 8003576:	1855      	adds	r5, r2, r1
 8003578:	18ed      	adds	r5, r5, r3
 800357a:	b2ad      	uxth	r5, r5
  while (rtcAlarmSeconds >= SECONDS_IN_1MINUTE)
 800357c:	2d3b      	cmp	r5, #59	@ 0x3b
 800357e:	d83d      	bhi.n	80035fc <RTC_IF_StartTimer+0xf8>
  while (rtcAlarmMinutes >= MINUTES_IN_1HOUR)
 8003580:	2f3b      	cmp	r7, #59	@ 0x3b
 8003582:	d840      	bhi.n	8003606 <RTC_IF_StartTimer+0x102>
  while (rtcAlarmHours >= HOURS_IN_1DAY)
 8003584:	2e17      	cmp	r6, #23
 8003586:	d843      	bhi.n	8003610 <RTC_IF_StartTimer+0x10c>
    if (rtcAlarmDays > DaysInMonthLeapYear[ RTC_DateStruct.Month - 1 ])
 8003588:	9a04      	ldr	r2, [sp, #16]
  if (RTC_DateStruct.Year % 4 == 0)
 800358a:	9905      	ldr	r1, [sp, #20]
 800358c:	4b27      	ldr	r3, [pc, #156]	@ (800362c <RTC_IF_StartTimer+0x128>)
    if (rtcAlarmDays > DaysInMonthLeapYear[ RTC_DateStruct.Month - 1 ])
 800358e:	3a01      	subs	r2, #1
  if (RTC_DateStruct.Year % 4 == 0)
 8003590:	0789      	lsls	r1, r1, #30
 8003592:	d142      	bne.n	800361a <RTC_IF_StartTimer+0x116>
    if (rtcAlarmDays > DaysInMonthLeapYear[ RTC_DateStruct.Month - 1 ])
 8003594:	5c99      	ldrb	r1, [r3, r2]
    if (rtcAlarmDays > DaysInMonth[ RTC_DateStruct.Month - 1 ])
 8003596:	4288      	cmp	r0, r1
 8003598:	d902      	bls.n	80035a0 <RTC_IF_StartTimer+0x9c>
      rtcAlarmDays = rtcAlarmDays % DaysInMonth[ RTC_DateStruct.Month - 1 ];
 800359a:	f7fc ff55 	bl	8000448 <__aeabi_idivmod>
 800359e:	b288      	uxth	r0, r1
  RTC_AlarmStructure.AlarmTime.SubSeconds = RTC_PREDIV_S - rtcAlarmSubSeconds;
 80035a0:	9a00      	ldr	r2, [sp, #0]
 80035a2:	4b20      	ldr	r3, [pc, #128]	@ (8003624 <RTC_IF_StartTimer+0x120>)
  RTC_AlarmStructure.AlarmTime.Seconds = rtcAlarmSeconds;
 80035a4:	77a5      	strb	r5, [r4, #30]
  RTC_AlarmStructure.AlarmTime.SubSeconds = RTC_PREDIV_S - rtcAlarmSubSeconds;
 80035a6:	1a9b      	subs	r3, r3, r2
 80035a8:	6223      	str	r3, [r4, #32]
  RTC_AlarmStructure.AlarmSubSecondMask  = RTC_ALARMSUBSECONDMASK;
 80035aa:	23a0      	movs	r3, #160	@ 0xa0
 80035ac:	051b      	lsls	r3, r3, #20
 80035ae:	6363      	str	r3, [r4, #52]	@ 0x34
  RTC_AlarmStructure.AlarmDateWeekDay    = (uint8_t)rtcAlarmDays;
 80035b0:	0023      	movs	r3, r4
 80035b2:	333c      	adds	r3, #60	@ 0x3c
 80035b4:	7018      	strb	r0, [r3, #0]
  RTC_AlarmStructure.AlarmTime.TimeFormat   = RTC_TimeStruct.TimeFormat;
 80035b6:	9b02      	ldr	r3, [sp, #8]
  RTC_AlarmStructure.AlarmDateWeekDaySel   = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80035b8:	2500      	movs	r5, #0
  RTC_AlarmStructure.AlarmTime.TimeFormat   = RTC_TimeStruct.TimeFormat;
 80035ba:	77e3      	strb	r3, [r4, #31]
  RTC_AlarmStructure.AlarmDateWeekDay    = (uint8_t)rtcAlarmDays;
 80035bc:	0021      	movs	r1, r4
  RTC_AlarmStructure.Alarm = RTC_ALARM_A;
 80035be:	2380      	movs	r3, #128	@ 0x80
  HAL_RTC_SetAlarm_IT(&hrtc, &RTC_AlarmStructure, RTC_FORMAT_BIN);
 80035c0:	002a      	movs	r2, r5
  RTC_AlarmStructure.Alarm = RTC_ALARM_A;
 80035c2:	005b      	lsls	r3, r3, #1
  RTC_AlarmStructure.AlarmDateWeekDay    = (uint8_t)rtcAlarmDays;
 80035c4:	311c      	adds	r1, #28
  HAL_RTC_SetAlarm_IT(&hrtc, &RTC_AlarmStructure, RTC_FORMAT_BIN);
 80035c6:	481a      	ldr	r0, [pc, #104]	@ (8003630 <RTC_IF_StartTimer+0x12c>)
  RTC_AlarmStructure.AlarmTime.Minutes = rtcAlarmMinutes;
 80035c8:	7767      	strb	r7, [r4, #29]
  RTC_AlarmStructure.AlarmTime.Hours   = rtcAlarmHours;
 80035ca:	7726      	strb	r6, [r4, #28]
  RTC_AlarmStructure.AlarmDateWeekDaySel   = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80035cc:	63a5      	str	r5, [r4, #56]	@ 0x38
  RTC_AlarmStructure.AlarmMask       = RTC_ALARMMASK_NONE;
 80035ce:	6325      	str	r5, [r4, #48]	@ 0x30
  RTC_AlarmStructure.Alarm = RTC_ALARM_A;
 80035d0:	6423      	str	r3, [r4, #64]	@ 0x40
  RTC_AlarmStructure.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80035d2:	62a5      	str	r5, [r4, #40]	@ 0x28
  RTC_AlarmStructure.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80035d4:	62e5      	str	r5, [r4, #44]	@ 0x2c
  HAL_RTC_SetAlarm_IT(&hrtc, &RTC_AlarmStructure, RTC_FORMAT_BIN);
 80035d6:	f002 fc95 	bl	8005f04 <HAL_RTC_SetAlarm_IT>
}
 80035da:	0028      	movs	r0, r5
 80035dc:	b007      	add	sp, #28
 80035de:	bdf0      	pop	{r4, r5, r6, r7, pc}
    timeoutValue -= SECONDS_IN_1DAY;
 80035e0:	4d14      	ldr	r5, [pc, #80]	@ (8003634 <RTC_IF_StartTimer+0x130>)
    rtcAlarmDays++;
 80035e2:	3001      	adds	r0, #1
    timeoutValue -= SECONDS_IN_1DAY;
 80035e4:	195b      	adds	r3, r3, r5
    rtcAlarmDays++;
 80035e6:	b280      	uxth	r0, r0
 80035e8:	e7b6      	b.n	8003558 <RTC_IF_StartTimer+0x54>
    timeoutValue -= SECONDS_IN_1HOUR;
 80035ea:	4d13      	ldr	r5, [pc, #76]	@ (8003638 <RTC_IF_StartTimer+0x134>)
    rtcAlarmHours++;
 80035ec:	3601      	adds	r6, #1
    timeoutValue -= SECONDS_IN_1HOUR;
 80035ee:	195b      	adds	r3, r3, r5
    rtcAlarmHours++;
 80035f0:	b2b6      	uxth	r6, r6
 80035f2:	e7b6      	b.n	8003562 <RTC_IF_StartTimer+0x5e>
    rtcAlarmMinutes++;
 80035f4:	3701      	adds	r7, #1
    timeoutValue -= SECONDS_IN_1MINUTE;
 80035f6:	3b3c      	subs	r3, #60	@ 0x3c
    rtcAlarmMinutes++;
 80035f8:	b2bf      	uxth	r7, r7
 80035fa:	e7b4      	b.n	8003566 <RTC_IF_StartTimer+0x62>
    rtcAlarmSeconds -= SECONDS_IN_1MINUTE;
 80035fc:	3d3c      	subs	r5, #60	@ 0x3c
    rtcAlarmMinutes++;
 80035fe:	3701      	adds	r7, #1
    rtcAlarmSeconds -= SECONDS_IN_1MINUTE;
 8003600:	b2ad      	uxth	r5, r5
    rtcAlarmMinutes++;
 8003602:	b2bf      	uxth	r7, r7
 8003604:	e7ba      	b.n	800357c <RTC_IF_StartTimer+0x78>
    rtcAlarmMinutes -= MINUTES_IN_1HOUR;
 8003606:	3f3c      	subs	r7, #60	@ 0x3c
    rtcAlarmHours++;
 8003608:	3601      	adds	r6, #1
    rtcAlarmMinutes -= MINUTES_IN_1HOUR;
 800360a:	b2bf      	uxth	r7, r7
    rtcAlarmHours++;
 800360c:	b2b6      	uxth	r6, r6
 800360e:	e7b7      	b.n	8003580 <RTC_IF_StartTimer+0x7c>
    rtcAlarmHours -= HOURS_IN_1DAY;
 8003610:	3e18      	subs	r6, #24
    rtcAlarmDays++;
 8003612:	3001      	adds	r0, #1
    rtcAlarmHours -= HOURS_IN_1DAY;
 8003614:	b2b6      	uxth	r6, r6
    rtcAlarmDays++;
 8003616:	b280      	uxth	r0, r0
 8003618:	e7b4      	b.n	8003584 <RTC_IF_StartTimer+0x80>
    if (rtcAlarmDays > DaysInMonth[ RTC_DateStruct.Month - 1 ])
 800361a:	189b      	adds	r3, r3, r2
 800361c:	7b19      	ldrb	r1, [r3, #12]
 800361e:	e7ba      	b.n	8003596 <RTC_IF_StartTimer+0x92>
 8003620:	200006a8 	.word	0x200006a8
 8003624:	000003ff 	.word	0x000003ff
 8003628:	0001517f 	.word	0x0001517f
 800362c:	08010354 	.word	0x08010354
 8003630:	20000684 	.word	0x20000684
 8003634:	fffeae80 	.word	0xfffeae80
 8003638:	fffff1f0 	.word	0xfffff1f0

0800363c <RTC_IF_GetTime>:
{
 800363c:	b530      	push	{r4, r5, lr}
 800363e:	b087      	sub	sp, #28
 8003640:	0005      	movs	r5, r0
  uint64_t calendarValue = RTC_GetCalendarValue(&RTC_DateStruct, &RTC_TimeStruct);
 8003642:	a901      	add	r1, sp, #4
 8003644:	4668      	mov	r0, sp
 8003646:	f7ff fee9 	bl	800341c <RTC_GetCalendarValue>
 800364a:	0004      	movs	r4, r0
  ticks = (uint32_t) calendarValue & RTC_PREDIV_S;
 800364c:	0580      	lsls	r0, r0, #22
  return (((uint64_t)(tick) * CONV_NUMER) / CONV_DENOM);
 800364e:	227d      	movs	r2, #125	@ 0x7d
 8003650:	2300      	movs	r3, #0
 8003652:	2100      	movs	r1, #0
  ticks = (uint32_t) calendarValue & RTC_PREDIV_S;
 8003654:	0d80      	lsrs	r0, r0, #22
  return (((uint64_t)(tick) * CONV_NUMER) / CONV_DENOM);
 8003656:	f7fc ff5b 	bl	8000510 <__aeabi_lmul>
 800365a:	09c0      	lsrs	r0, r0, #7
  *mSeconds = RTC_IF_Convert_Tick2ms(ticks);
 800365c:	8028      	strh	r0, [r5, #0]
  uint32_t seconds = (uint32_t)(calendarValue >> RTC_N_PREDIV_S);
 800365e:	0aa0      	lsrs	r0, r4, #10
}
 8003660:	b007      	add	sp, #28
 8003662:	bd30      	pop	{r4, r5, pc}

08003664 <RTC_IF_BkUp_Write_Seconds>:
{
 8003664:	b510      	push	{r4, lr}
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SECONDS, Seconds);
 8003666:	4b03      	ldr	r3, [pc, #12]	@ (8003674 <RTC_IF_BkUp_Write_Seconds+0x10>)
{
 8003668:	0002      	movs	r2, r0
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SECONDS, Seconds);
 800366a:	2100      	movs	r1, #0
 800366c:	0018      	movs	r0, r3
 800366e:	f002 fd73 	bl	8006158 <HAL_RTCEx_BKUPWrite>
}
 8003672:	bd10      	pop	{r4, pc}
 8003674:	20000684 	.word	0x20000684

08003678 <RTC_IF_BkUp_Write_SubSeconds>:
{
 8003678:	b510      	push	{r4, lr}
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SUBSECONDS, SubSeconds);
 800367a:	4b03      	ldr	r3, [pc, #12]	@ (8003688 <RTC_IF_BkUp_Write_SubSeconds+0x10>)
{
 800367c:	0002      	movs	r2, r0
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SUBSECONDS, SubSeconds);
 800367e:	2101      	movs	r1, #1
 8003680:	0018      	movs	r0, r3
 8003682:	f002 fd69 	bl	8006158 <HAL_RTCEx_BKUPWrite>
}
 8003686:	bd10      	pop	{r4, pc}
 8003688:	20000684 	.word	0x20000684

0800368c <RTC_IF_BkUp_Read_Seconds>:
{
 800368c:	b510      	push	{r4, lr}
  return HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SECONDS);
 800368e:	2100      	movs	r1, #0
 8003690:	4801      	ldr	r0, [pc, #4]	@ (8003698 <RTC_IF_BkUp_Read_Seconds+0xc>)
 8003692:	f002 fd67 	bl	8006164 <HAL_RTCEx_BKUPRead>
}
 8003696:	bd10      	pop	{r4, pc}
 8003698:	20000684 	.word	0x20000684

0800369c <RTC_IF_BkUp_Read_SubSeconds>:
{
 800369c:	b510      	push	{r4, lr}
  return HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SUBSECONDS);
 800369e:	2101      	movs	r1, #1
 80036a0:	4801      	ldr	r0, [pc, #4]	@ (80036a8 <RTC_IF_BkUp_Read_SubSeconds+0xc>)
 80036a2:	f002 fd5f 	bl	8006164 <HAL_RTCEx_BKUPRead>
}
 80036a6:	bd10      	pop	{r4, pc}
 80036a8:	20000684 	.word	0x20000684

080036ac <RTC_IF_Init>:
{
 80036ac:	b530      	push	{r4, r5, lr}
  if (RTC_Initalized == false)
 80036ae:	4d11      	ldr	r5, [pc, #68]	@ (80036f4 <RTC_IF_Init+0x48>)
{
 80036b0:	b08b      	sub	sp, #44	@ 0x2c
  if (RTC_Initalized == false)
 80036b2:	782b      	ldrb	r3, [r5, #0]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d119      	bne.n	80036ec <RTC_IF_Init+0x40>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80036b8:	3320      	adds	r3, #32
 80036ba:	9301      	str	r3, [sp, #4]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80036bc:	2380      	movs	r3, #128	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80036be:	a801      	add	r0, sp, #4
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80036c0:	025b      	lsls	r3, r3, #9
 80036c2:	9302      	str	r3, [sp, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80036c4:	f002 f934 	bl	8005930 <HAL_RCCEx_PeriphCLKConfig>
 80036c8:	2800      	cmp	r0, #0
 80036ca:	d000      	beq.n	80036ce <RTC_IF_Init+0x22>
      while (1);
 80036cc:	e7fe      	b.n	80036cc <RTC_IF_Init+0x20>
    MX_RTC_Init();
 80036ce:	f7ff fded 	bl	80032ac <MX_RTC_Init>
    HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 80036d2:	2180      	movs	r1, #128	@ 0x80
 80036d4:	4c08      	ldr	r4, [pc, #32]	@ (80036f8 <RTC_IF_Init+0x4c>)
 80036d6:	0049      	lsls	r1, r1, #1
 80036d8:	0020      	movs	r0, r4
 80036da:	f002 fa05 	bl	8005ae8 <HAL_RTC_DeactivateAlarm>
    HAL_RTCEx_EnableBypassShadow(&hrtc);
 80036de:	0020      	movs	r0, r4
 80036e0:	f002 fd46 	bl	8006170 <HAL_RTCEx_EnableBypassShadow>
    RTC_IF_SetTimerContext();
 80036e4:	f7ff fef4 	bl	80034d0 <RTC_IF_SetTimerContext>
    RTC_Initalized = true;
 80036e8:	2301      	movs	r3, #1
 80036ea:	702b      	strb	r3, [r5, #0]
}
 80036ec:	2000      	movs	r0, #0
 80036ee:	b00b      	add	sp, #44	@ 0x2c
 80036f0:	bd30      	pop	{r4, r5, pc}
 80036f2:	46c0      	nop			@ (mov r8, r8)
 80036f4:	200006ec 	.word	0x200006ec
 80036f8:	20000684 	.word	0x20000684

080036fc <RTC_IF_GetTimerValue>:
{
 80036fc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  uint32_t CalendarValue = 0;
 80036fe:	2000      	movs	r0, #0
  if (RTC_Initalized == true)
 8003700:	4b04      	ldr	r3, [pc, #16]	@ (8003714 <RTC_IF_GetTimerValue+0x18>)
 8003702:	781b      	ldrb	r3, [r3, #0]
 8003704:	4283      	cmp	r3, r0
 8003706:	d003      	beq.n	8003710 <RTC_IF_GetTimerValue+0x14>
    CalendarValue = (uint32_t) RTC_GetCalendarValue(&RTC_DateStruct, &RTC_TimeStruct);
 8003708:	4668      	mov	r0, sp
 800370a:	a901      	add	r1, sp, #4
 800370c:	f7ff fe86 	bl	800341c <RTC_GetCalendarValue>
}
 8003710:	b007      	add	sp, #28
 8003712:	bd00      	pop	{pc}
 8003714:	200006ec 	.word	0x200006ec

08003718 <RTC_IF_DelayMs>:
{
 8003718:	b570      	push	{r4, r5, r6, lr}
  return (uint32_t)((((uint64_t)timeMilliSec) * CONV_DENOM) / CONV_NUMER);
 800371a:	227d      	movs	r2, #125	@ 0x7d
 800371c:	2300      	movs	r3, #0
 800371e:	0e41      	lsrs	r1, r0, #25
 8003720:	01c0      	lsls	r0, r0, #7
 8003722:	f7fc fed5 	bl	80004d0 <__aeabi_uldivmod>
 8003726:	0004      	movs	r4, r0
  timeout = RTC_IF_GetTimerValue();
 8003728:	f7ff ffe8 	bl	80036fc <RTC_IF_GetTimerValue>
 800372c:	0005      	movs	r5, r0
  while (((RTC_IF_GetTimerValue() - timeout)) < delayValue)
 800372e:	f7ff ffe5 	bl	80036fc <RTC_IF_GetTimerValue>
 8003732:	1b40      	subs	r0, r0, r5
 8003734:	42a0      	cmp	r0, r4
 8003736:	d300      	bcc.n	800373a <RTC_IF_DelayMs+0x22>
}
 8003738:	bd70      	pop	{r4, r5, r6, pc}
    __NOP();
 800373a:	46c0      	nop			@ (mov r8, r8)
 800373c:	e7f7      	b.n	800372e <RTC_IF_DelayMs+0x16>

0800373e <HAL_RTC_AlarmAEventCallback>:
{
 800373e:	b510      	push	{r4, lr}
  UTIL_TIMER_IRQ_Handler();
 8003740:	f00c f89e 	bl	800f880 <UTIL_TIMER_IRQ_Handler>
}
 8003744:	bd10      	pop	{r4, pc}

08003746 <PWR_EnterOffMode>:
void PWR_EnterOffMode(void)
{
  /* USER CODE BEGIN EnterOffMode_1 */

  /* USER CODE END EnterOffMode_1 */
}
 8003746:	4770      	bx	lr

08003748 <PWR_EnterStopMode>:

  /* USER CODE END ExitOffMode_1 */
}

void PWR_EnterStopMode(void)
{
 8003748:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800374a:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800374e:	b672      	cpsid	i
  /* USER CODE BEGIN EnterStopMode_1 */

  /* USER CODE END EnterStopMode_1 */
  UTILS_ENTER_CRITICAL_SECTION();

  Sx_Board_IoDeInit();
 8003750:	f000 fd0e 	bl	8004170 <CMWX1ZZABZ0XX_RADIO_IoDeInit>

  HAL_ADC_MspDeInit(&hadc);
 8003754:	4807      	ldr	r0, [pc, #28]	@ (8003774 <PWR_EnterStopMode+0x2c>)
 8003756:	f7ff fc83 	bl	8003060 <HAL_ADC_MspDeInit>

  /*clear wake up flag*/
  SET_BIT(PWR->CR, PWR_CR_CWUF);
 800375a:	2304      	movs	r3, #4
 800375c:	4a06      	ldr	r2, [pc, #24]	@ (8003778 <PWR_EnterStopMode+0x30>)
 800375e:	6811      	ldr	r1, [r2, #0]
 8003760:	430b      	orrs	r3, r1
 8003762:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003764:	f384 8810 	msr	PRIMASK, r4
  UTILS_EXIT_CRITICAL_SECTION();
  /* USER CODE BEGIN EnterStopMode_2 */

  /* USER CODE END EnterStopMode_2 */
  /* Enter Stop Mode */
  HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 8003768:	2101      	movs	r1, #1
 800376a:	0008      	movs	r0, r1
 800376c:	f001 fcce 	bl	800510c <HAL_PWR_EnterSTOPMode>
  /* USER CODE BEGIN EnterStopMode_3 */

  /* USER CODE END EnterStopMode_3 */
}
 8003770:	bd10      	pop	{r4, pc}
 8003772:	46c0      	nop			@ (mov r8, r8)
 8003774:	20000628 	.word	0x20000628
 8003778:	40007000 	.word	0x40007000

0800377c <PWR_ExitStopMode>:

void PWR_ExitStopMode(void)
{
 800377c:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800377e:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8003782:	b672      	cpsid	i

  UTILS_ENTER_CRITICAL_SECTION();

  /* After wake-up from STOP reconfigure the system clock */
  /* Enable HSI */
  __HAL_RCC_HSI_ENABLE();
 8003784:	2201      	movs	r2, #1
 8003786:	4b10      	ldr	r3, [pc, #64]	@ (80037c8 <PWR_ExitStopMode+0x4c>)
 8003788:	6819      	ldr	r1, [r3, #0]
 800378a:	430a      	orrs	r2, r1
 800378c:	601a      	str	r2, [r3, #0]

  /* Wait till HSI is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET) {}
 800378e:	2204      	movs	r2, #4
 8003790:	6819      	ldr	r1, [r3, #0]
 8003792:	4211      	tst	r1, r2
 8003794:	d0fc      	beq.n	8003790 <PWR_ExitStopMode+0x14>

  /* Enable PLL */
  __HAL_RCC_PLL_ENABLE();
 8003796:	2280      	movs	r2, #128	@ 0x80
 8003798:	6819      	ldr	r1, [r3, #0]
 800379a:	0452      	lsls	r2, r2, #17
 800379c:	430a      	orrs	r2, r1
 800379e:	601a      	str	r2, [r3, #0]
  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET) {}
 80037a0:	2280      	movs	r2, #128	@ 0x80
 80037a2:	0492      	lsls	r2, r2, #18
 80037a4:	6819      	ldr	r1, [r3, #0]
 80037a6:	4211      	tst	r1, r2
 80037a8:	d0fc      	beq.n	80037a4 <PWR_ExitStopMode+0x28>

  /* Select PLL as system clock source */
  __HAL_RCC_SYSCLK_CONFIG(RCC_SYSCLKSOURCE_PLLCLK);
 80037aa:	2203      	movs	r2, #3
 80037ac:	68d9      	ldr	r1, [r3, #12]
 80037ae:	430a      	orrs	r2, r1

  /* Wait till PLL is used as system clock source */
  while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK) {}
 80037b0:	210c      	movs	r1, #12
  __HAL_RCC_SYSCLK_CONFIG(RCC_SYSCLKSOURCE_PLLCLK);
 80037b2:	60da      	str	r2, [r3, #12]
  while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK) {}
 80037b4:	68da      	ldr	r2, [r3, #12]
 80037b6:	400a      	ands	r2, r1
 80037b8:	2a0c      	cmp	r2, #12
 80037ba:	d1fb      	bne.n	80037b4 <PWR_ExitStopMode+0x38>

  /* initializes the peripherals */
  Sx_Board_IoInit();
 80037bc:	f000 fbfe 	bl	8003fbc <CMWX1ZZABZ0XX_RADIO_IoInit>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037c0:	f384 8810 	msr	PRIMASK, r4

  UTILS_EXIT_CRITICAL_SECTION();
  /* USER CODE BEGIN ExitStopMode_2 */

  /* USER CODE END ExitStopMode_2 */
}
 80037c4:	bd10      	pop	{r4, pc}
 80037c6:	46c0      	nop			@ (mov r8, r8)
 80037c8:	40021000 	.word	0x40021000

080037cc <PWR_EnterSleepMode>:

void PWR_EnterSleepMode(void)
{
 80037cc:	b510      	push	{r4, lr}

  /* USER CODE END EnterSleepMode_1 */
  /* USER CODE BEGIN EnterSleepMode_2 */

  /* USER CODE END EnterSleepMode_2 */
  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 80037ce:	2101      	movs	r1, #1
 80037d0:	2000      	movs	r0, #0
 80037d2:	f001 fc63 	bl	800509c <HAL_PWR_EnterSLEEPMode>
  /* USER CODE BEGIN EnterSleepMode_3 */

  /* USER CODE END EnterSleepMode_3 */
}
 80037d6:	bd10      	pop	{r4, pc}

080037d8 <PWR_ExitSleepMode>:

void PWR_ExitSleepMode(void)
 80037d8:	4770      	bx	lr

080037da <PWR_ExitOffMode>:
void PWR_ExitOffMode(void)
 80037da:	4770      	bx	lr

080037dc <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80037dc:	2380      	movs	r3, #128	@ 0x80
 80037de:	4a09      	ldr	r2, [pc, #36]	@ (8003804 <HAL_MspInit+0x28>)
 80037e0:	055b      	lsls	r3, r3, #21
 80037e2:	6b91      	ldr	r1, [r2, #56]	@ 0x38
{
 80037e4:	b510      	push	{r4, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 80037e6:	430b      	orrs	r3, r1
 80037e8:	6393      	str	r3, [r2, #56]	@ 0x38

  /* Disable the Power Voltage Detector */
  HAL_PWR_DisablePVD();
 80037ea:	f001 fc4f 	bl	800508c <HAL_PWR_DisablePVD>

  /* Enables the Ultra Low Power mode */
  HAL_PWREx_EnableUltraLowPower();
 80037ee:	f001 fcd3 	bl	8005198 <HAL_PWREx_EnableUltraLowPower>

  __HAL_FLASH_SLEEP_POWERDOWN_ENABLE();
 80037f2:	2308      	movs	r3, #8
 80037f4:	4a04      	ldr	r2, [pc, #16]	@ (8003808 <HAL_MspInit+0x2c>)
 80037f6:	6811      	ldr	r1, [r2, #0]
 80037f8:	430b      	orrs	r3, r1
 80037fa:	6013      	str	r3, [r2, #0]
   */
  DBG(__HAL_FLASH_SLEEP_POWERDOWN_DISABLE(););

#ifdef ENABLE_FAST_WAKEUP
  /*Enable fast wakeUp*/
  HAL_PWREx_EnableFastWakeUp();
 80037fc:	f001 fcc2 	bl	8005184 <HAL_PWREx_EnableFastWakeUp>
#endif

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003800:	bd10      	pop	{r4, pc}
 8003802:	46c0      	nop			@ (mov r8, r8)
 8003804:	40021000 	.word	0x40021000
 8003808:	40022000 	.word	0x40022000

0800380c <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800380c:	e7fe      	b.n	800380c <NMI_Handler>

0800380e <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800380e:	e7fe      	b.n	800380e <HardFault_Handler>

08003810 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003810:	4770      	bx	lr

08003812 <PendSV_Handler>:
}

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
 8003812:	4770      	bx	lr

08003814 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003814:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003816:	f000 fdeb 	bl	80043f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800381a:	bd10      	pop	{r4, pc}

0800381c <EXTI0_1_IRQHandler>:
/*void PPP_IRQHandler(void)
{
}*/

void EXTI0_1_IRQHandler(void)
{
 800381c:	b510      	push	{r4, lr}
#if (defined(CMWX1ZZABZ0XX))
  HAL_EXTI_IRQHandler(&H_EXTI_0);
 800381e:	4803      	ldr	r0, [pc, #12]	@ (800382c <EXTI0_1_IRQHandler+0x10>)
 8003820:	f001 fad6 	bl	8004dd0 <HAL_EXTI_IRQHandler>
  HAL_EXTI_IRQHandler(&H_EXTI_1);
 8003824:	4802      	ldr	r0, [pc, #8]	@ (8003830 <EXTI0_1_IRQHandler+0x14>)
 8003826:	f001 fad3 	bl	8004dd0 <HAL_EXTI_IRQHandler>
#endif
}
 800382a:	bd10      	pop	{r4, pc}
 800382c:	20000830 	.word	0x20000830
 8003830:	20000828 	.word	0x20000828

08003834 <EXTI2_3_IRQHandler>:

void EXTI2_3_IRQHandler(void)
 8003834:	4770      	bx	lr
	...

08003838 <EXTI4_15_IRQHandler>:
  HAL_EXTI_IRQHandler(&H_EXTI_3);
#endif
}

void EXTI4_15_IRQHandler(void)
{
 8003838:	b510      	push	{r4, lr}
  HAL_EXTI_IRQHandler(&H_EXTI_4);
 800383a:	4803      	ldr	r0, [pc, #12]	@ (8003848 <EXTI4_15_IRQHandler+0x10>)
 800383c:	f001 fac8 	bl	8004dd0 <HAL_EXTI_IRQHandler>
#if (defined(SX1276MB1MAS) | defined(SX1276MB1LAS) | defined(SX1272MB2DAS))
  HAL_EXTI_IRQHandler(&H_EXTI_10);
#endif

#if (defined(CMWX1ZZABZ0XX))
  HAL_EXTI_IRQHandler(&H_EXTI_13);
 8003840:	4802      	ldr	r0, [pc, #8]	@ (800384c <EXTI4_15_IRQHandler+0x14>)
 8003842:	f001 fac5 	bl	8004dd0 <HAL_EXTI_IRQHandler>
#endif
}
 8003846:	bd10      	pop	{r4, pc}
 8003848:	20000820 	.word	0x20000820
 800384c:	20000838 	.word	0x20000838

08003850 <DMA1_Channel4_5_6_7_IRQHandler>:

void DMA1_Channel4_5_6_7_IRQHandler(void)
{
 8003850:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 8003852:	4802      	ldr	r0, [pc, #8]	@ (800385c <DMA1_Channel4_5_6_7_IRQHandler+0xc>)
 8003854:	f001 fa63 	bl	8004d1e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 1 */
}
 8003858:	bd10      	pop	{r4, pc}
 800385a:	46c0      	nop			@ (mov r8, r8)
 800385c:	200006f0 	.word	0x200006f0

08003860 <RNG_LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 Interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8003860:	b510      	push	{r4, lr}
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8003862:	4802      	ldr	r0, [pc, #8]	@ (800386c <RNG_LPUART1_IRQHandler+0xc>)
 8003864:	f002 ffac 	bl	80067c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8003868:	bd10      	pop	{r4, pc}
 800386a:	46c0      	nop			@ (mov r8, r8)
 800386c:	20000738 	.word	0x20000738

08003870 <RTC_IRQHandler>:

void RTC_IRQHandler(void)
{
 8003870:	b510      	push	{r4, lr}
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8003872:	4802      	ldr	r0, [pc, #8]	@ (800387c <RTC_IRQHandler+0xc>)
 8003874:	f002 f996 	bl	8005ba4 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8003878:	bd10      	pop	{r4, pc}
 800387a:	46c0      	nop			@ (mov r8, r8)
 800387c:	20000684 	.word	0x20000684

08003880 <tiny_snprintf_like.constprop.0>:
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_2 */

  /* USER CODE END UTIL_LPM_SetStopMode_2 */
}

static void tiny_snprintf_like(char *buf, uint32_t maxsize, const char *strFormat, ...)
 8003880:	b40c      	push	{r2, r3}
 8003882:	b507      	push	{r0, r1, r2, lr}
  /* USER CODE BEGIN tiny_snprintf_like_1 */

  /* USER CODE END tiny_snprintf_like_1 */
  va_list vaArgs;
  va_start(vaArgs, strFormat);
  UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 8003884:	2110      	movs	r1, #16
  va_start(vaArgs, strFormat);
 8003886:	ab05      	add	r3, sp, #20
  UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 8003888:	4a03      	ldr	r2, [pc, #12]	@ (8003898 <tiny_snprintf_like.constprop.0+0x18>)
  va_start(vaArgs, strFormat);
 800388a:	9301      	str	r3, [sp, #4]
  UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 800388c:	f00c f968 	bl	800fb60 <tiny_vsnprintf_like>
  va_end(vaArgs);
  /* USER CODE BEGIN tiny_snprintf_like_2 */

  /* USER CODE END tiny_snprintf_like_2 */
}
 8003890:	b003      	add	sp, #12
 8003892:	bc08      	pop	{r3}
 8003894:	b002      	add	sp, #8
 8003896:	4718      	bx	r3
 8003898:	08011fb7 	.word	0x08011fb7

0800389c <TimestampNow>:
{
 800389c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800389e:	0004      	movs	r4, r0
  SysTime_t curtime = SysTimeGet();
 80038a0:	ae02      	add	r6, sp, #8
 80038a2:	0030      	movs	r0, r6
{
 80038a4:	000d      	movs	r5, r1
  SysTime_t curtime = SysTimeGet();
 80038a6:	f00b fdb7 	bl	800f418 <SysTimeGet>
  tiny_snprintf_like((char *)buff, MAX_TS_SIZE, "%ds%03d:", curtime.Seconds, curtime.SubSeconds);
 80038aa:	2104      	movs	r1, #4
 80038ac:	5e73      	ldrsh	r3, [r6, r1]
 80038ae:	0020      	movs	r0, r4
 80038b0:	2110      	movs	r1, #16
 80038b2:	4a05      	ldr	r2, [pc, #20]	@ (80038c8 <TimestampNow+0x2c>)
 80038b4:	9300      	str	r3, [sp, #0]
 80038b6:	9b02      	ldr	r3, [sp, #8]
 80038b8:	f7ff ffe2 	bl	8003880 <tiny_snprintf_like.constprop.0>
  *size = strlen((char *)buff);
 80038bc:	0020      	movs	r0, r4
 80038be:	f7fc fc23 	bl	8000108 <strlen>
 80038c2:	8028      	strh	r0, [r5, #0]
}
 80038c4:	bd7f      	pop	{r0, r1, r2, r3, r4, r5, r6, pc}
 80038c6:	46c0      	nop			@ (mov r8, r8)
 80038c8:	08011fb7 	.word	0x08011fb7

080038cc <SystemApp_Init>:
{
 80038cc:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80038ce:	2501      	movs	r5, #1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80038d0:	2602      	movs	r6, #2
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80038d2:	2704      	movs	r7, #4
{
 80038d4:	b08b      	sub	sp, #44	@ 0x2c
  UTIL_TIMER_Init();
 80038d6:	f00b febb 	bl	800f650 <UTIL_TIMER_Init>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038da:	220c      	movs	r2, #12
 80038dc:	2100      	movs	r1, #0
 80038de:	a807      	add	r0, sp, #28
 80038e0:	f00c fa66 	bl	800fdb0 <memset>
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80038e4:	2280      	movs	r2, #128	@ 0x80
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80038e6:	4c2d      	ldr	r4, [pc, #180]	@ (800399c <SystemApp_Init+0xd0>)
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038e8:	20a0      	movs	r0, #160	@ 0xa0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80038ea:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038ec:	a905      	add	r1, sp, #20
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80038ee:	432b      	orrs	r3, r5
 80038f0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80038f2:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038f4:	05c0      	lsls	r0, r0, #23
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80038f6:	402b      	ands	r3, r5
 80038f8:	9301      	str	r3, [sp, #4]
 80038fa:	9b01      	ldr	r3, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80038fc:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80038fe:	4333      	orrs	r3, r6
 8003900:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003902:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8003904:	4033      	ands	r3, r6
 8003906:	9302      	str	r3, [sp, #8]
 8003908:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800390a:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800390c:	433b      	orrs	r3, r7
 800390e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003910:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8003912:	403b      	ands	r3, r7
 8003914:	9303      	str	r3, [sp, #12]
 8003916:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003918:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800391a:	4313      	orrs	r3, r2
 800391c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800391e:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8003920:	4013      	ands	r3, r2
 8003922:	9304      	str	r3, [sp, #16]
 8003924:	9b04      	ldr	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003926:	2303      	movs	r3, #3
 8003928:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pin = GPIO_PIN_All & (~(GPIO_PIN_13 | GPIO_PIN_14));
 800392a:	4b1d      	ldr	r3, [pc, #116]	@ (80039a0 <SystemApp_Init+0xd4>)
 800392c:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800392e:	f001 fa61 	bl	8004df4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_All;
 8003932:	4b1c      	ldr	r3, [pc, #112]	@ (80039a4 <SystemApp_Init+0xd8>)
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003934:	a905      	add	r1, sp, #20
 8003936:	481c      	ldr	r0, [pc, #112]	@ (80039a8 <SystemApp_Init+0xdc>)
  GPIO_InitStruct.Pin = GPIO_PIN_All;
 8003938:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800393a:	f001 fa5b 	bl	8004df4 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800393e:	a905      	add	r1, sp, #20
 8003940:	481a      	ldr	r0, [pc, #104]	@ (80039ac <SystemApp_Init+0xe0>)
 8003942:	f001 fa57 	bl	8004df4 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8003946:	a905      	add	r1, sp, #20
 8003948:	4819      	ldr	r0, [pc, #100]	@ (80039b0 <SystemApp_Init+0xe4>)
 800394a:	f001 fa53 	bl	8004df4 <HAL_GPIO_Init>
  __HAL_RCC_GPIOH_CLK_DISABLE();
 800394e:	2280      	movs	r2, #128	@ 0x80
  __HAL_RCC_GPIOA_CLK_DISABLE();
 8003950:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8003952:	43ab      	bics	r3, r5
 8003954:	62e3      	str	r3, [r4, #44]	@ 0x2c
  __HAL_RCC_GPIOB_CLK_DISABLE();
 8003956:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8003958:	43b3      	bics	r3, r6
 800395a:	62e3      	str	r3, [r4, #44]	@ 0x2c
  __HAL_RCC_GPIOC_CLK_DISABLE();
 800395c:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800395e:	43bb      	bics	r3, r7
 8003960:	62e3      	str	r3, [r4, #44]	@ 0x2c
  __HAL_RCC_GPIOH_CLK_DISABLE();
 8003962:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8003964:	4393      	bics	r3, r2
 8003966:	62e3      	str	r3, [r4, #44]	@ 0x2c
  DBG_Disable();
 8003968:	f000 f8aa 	bl	8003ac0 <DBG_Disable>
  DBG_ProbesInit();
 800396c:	f000 f8ca 	bl	8003b04 <DBG_ProbesInit>
  UTIL_ADV_TRACE_Init();
 8003970:	f00b fa50 	bl	800ee14 <UTIL_ADV_TRACE_Init>
  UTIL_ADV_TRACE_RegisterTimeStampFunction(TimestampNow);
 8003974:	480f      	ldr	r0, [pc, #60]	@ (80039b4 <SystemApp_Init+0xe8>)
 8003976:	f00b fa79 	bl	800ee6c <UTIL_ADV_TRACE_RegisterTimeStampFunction>
  UTIL_ADV_TRACE_SetVerboseLevel(VERBOSE_LEVEL);
 800397a:	0030      	movs	r0, r6
 800397c:	f00b fa7c 	bl	800ee78 <UTIL_ADV_TRACE_SetVerboseLevel>
  SYS_InitMeasurement();
 8003980:	f7ff fbdc 	bl	800313c <SYS_InitMeasurement>
  Sx_Board_Bus_Init();
 8003984:	f000 fcca 	bl	800431c <CMWX1ZZABZ0XX_RADIO_Bus_Init>
  Sx_Board_IoInit();
 8003988:	f000 fb18 	bl	8003fbc <CMWX1ZZABZ0XX_RADIO_IoInit>
  UTIL_LPM_Init();
 800398c:	f00b fb70 	bl	800f070 <UTIL_LPM_Init>
  UTIL_LPM_SetOffMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 8003990:	0029      	movs	r1, r5
 8003992:	0028      	movs	r0, r5
 8003994:	f00b fb8a 	bl	800f0ac <UTIL_LPM_SetOffMode>
}
 8003998:	b00b      	add	sp, #44	@ 0x2c
 800399a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800399c:	40021000 	.word	0x40021000
 80039a0:	00009fff 	.word	0x00009fff
 80039a4:	0000ffff 	.word	0x0000ffff
 80039a8:	50000400 	.word	0x50000400
 80039ac:	50000800 	.word	0x50000800
 80039b0:	50001c00 	.word	0x50001c00
 80039b4:	0800389d 	.word	0x0800389d

080039b8 <UTIL_SEQ_Idle>:
{
 80039b8:	b510      	push	{r4, lr}
  UTIL_LPM_EnterLowPower();
 80039ba:	f00b fb9f 	bl	800f0fc <UTIL_LPM_EnterLowPower>
}
 80039be:	bd10      	pop	{r4, pc}

080039c0 <GetBatteryLevel>:
{
 80039c0:	b513      	push	{r0, r1, r4, lr}
  batteryLevelmV = (uint16_t) SYS_GetBatteryLevel();
 80039c2:	f7ff fbc3 	bl	800314c <SYS_GetBatteryLevel>
  if (batteryLevelmV > VDD_BAT)
 80039c6:	4b0d      	ldr	r3, [pc, #52]	@ (80039fc <GetBatteryLevel+0x3c>)
    batteryLevel = LORAWAN_MAX_BAT;
 80039c8:	24fe      	movs	r4, #254	@ 0xfe
  if (batteryLevelmV > VDD_BAT)
 80039ca:	4298      	cmp	r0, r3
 80039cc:	d80d      	bhi.n	80039ea <GetBatteryLevel+0x2a>
  else if (batteryLevelmV < VDD_MIN)
 80039ce:	23e1      	movs	r3, #225	@ 0xe1
    batteryLevel = 0;
 80039d0:	2400      	movs	r4, #0
  else if (batteryLevelmV < VDD_MIN)
 80039d2:	00db      	lsls	r3, r3, #3
 80039d4:	4298      	cmp	r0, r3
 80039d6:	d308      	bcc.n	80039ea <GetBatteryLevel+0x2a>
    batteryLevel = (((uint32_t)(batteryLevelmV - VDD_MIN) * LORAWAN_MAX_BAT) / (VDD_BAT - VDD_MIN));
 80039d8:	4b09      	ldr	r3, [pc, #36]	@ (8003a00 <GetBatteryLevel+0x40>)
 80039da:	2196      	movs	r1, #150	@ 0x96
 80039dc:	18c3      	adds	r3, r0, r3
 80039de:	20fe      	movs	r0, #254	@ 0xfe
 80039e0:	00c9      	lsls	r1, r1, #3
 80039e2:	4358      	muls	r0, r3
 80039e4:	f7fc fbc0 	bl	8000168 <__udivsi3>
 80039e8:	b2c4      	uxtb	r4, r0
  APP_LOG(TS_ON, VLEVEL_M, "VDDA= %d\r\n", batteryLevel);
 80039ea:	2201      	movs	r2, #1
 80039ec:	2100      	movs	r1, #0
 80039ee:	4b05      	ldr	r3, [pc, #20]	@ (8003a04 <GetBatteryLevel+0x44>)
 80039f0:	9400      	str	r4, [sp, #0]
 80039f2:	2002      	movs	r0, #2
 80039f4:	f00b fa8e 	bl	800ef14 <UTIL_ADV_TRACE_COND_FSend>
}
 80039f8:	0020      	movs	r0, r4
 80039fa:	bd16      	pop	{r1, r2, r4, pc}
 80039fc:	00000bb8 	.word	0x00000bb8
 8003a00:	fffff8f8 	.word	0xfffff8f8
 8003a04:	08011fc0 	.word	0x08011fc0

08003a08 <GetTemperatureLevel>:
{
 8003a08:	b510      	push	{r4, lr}
  temperatureLevel = (uint16_t)(SYS_GetTemperatureLevel() / 256);
 8003a0a:	f7ff fbb5 	bl	8003178 <SYS_GetTemperatureLevel>
 8003a0e:	17c3      	asrs	r3, r0, #31
 8003a10:	b2db      	uxtb	r3, r3
 8003a12:	1818      	adds	r0, r3, r0
 8003a14:	1200      	asrs	r0, r0, #8
  return temperatureLevel;
 8003a16:	b280      	uxth	r0, r0
}
 8003a18:	bd10      	pop	{r4, pc}

08003a1a <GetUniqueId>:
{
 8003a1a:	b570      	push	{r4, r5, r6, lr}
 8003a1c:	0004      	movs	r4, r0
  uint32_t ID_1_3_val = HAL_GetUIDw0() + HAL_GetUIDw2();
 8003a1e:	f000 fcf3 	bl	8004408 <HAL_GetUIDw0>
 8003a22:	0005      	movs	r5, r0
 8003a24:	f000 fcfc 	bl	8004420 <HAL_GetUIDw2>
 8003a28:	182d      	adds	r5, r5, r0
  uint32_t ID_2_val = HAL_GetUIDw1();
 8003a2a:	f000 fcf3 	bl	8004414 <HAL_GetUIDw1>
  id[7] = (ID_1_3_val) >> 24;
 8003a2e:	0e2b      	lsrs	r3, r5, #24
 8003a30:	71e3      	strb	r3, [r4, #7]
  id[6] = (ID_1_3_val) >> 16;
 8003a32:	0c2b      	lsrs	r3, r5, #16
 8003a34:	71a3      	strb	r3, [r4, #6]
  id[5] = (ID_1_3_val) >> 8;
 8003a36:	0a2b      	lsrs	r3, r5, #8
 8003a38:	7163      	strb	r3, [r4, #5]
  id[3] = (ID_2_val) >> 24;
 8003a3a:	0e03      	lsrs	r3, r0, #24
 8003a3c:	70e3      	strb	r3, [r4, #3]
  id[2] = (ID_2_val) >> 16;
 8003a3e:	0c03      	lsrs	r3, r0, #16
 8003a40:	70a3      	strb	r3, [r4, #2]
  id[1] = (ID_2_val) >> 8;
 8003a42:	0a03      	lsrs	r3, r0, #8
  id[4] = (ID_1_3_val);
 8003a44:	7125      	strb	r5, [r4, #4]
  id[1] = (ID_2_val) >> 8;
 8003a46:	7063      	strb	r3, [r4, #1]
  id[0] = (ID_2_val);
 8003a48:	7020      	strb	r0, [r4, #0]
}
 8003a4a:	bd70      	pop	{r4, r5, r6, pc}

08003a4c <GetDevAddr>:
{
 8003a4c:	b510      	push	{r4, lr}
  return ((HAL_GetUIDw0()) ^ (HAL_GetUIDw1()) ^ (HAL_GetUIDw2()));
 8003a4e:	f000 fcdb 	bl	8004408 <HAL_GetUIDw0>
 8003a52:	0004      	movs	r4, r0
 8003a54:	f000 fcde 	bl	8004414 <HAL_GetUIDw1>
 8003a58:	4044      	eors	r4, r0
 8003a5a:	f000 fce1 	bl	8004420 <HAL_GetUIDw2>
 8003a5e:	4060      	eors	r0, r4
}
 8003a60:	bd10      	pop	{r4, pc}

08003a62 <UTIL_ADV_TRACE_PreSendHook>:
{
 8003a62:	b510      	push	{r4, lr}
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_DISABLE);
 8003a64:	2101      	movs	r1, #1
 8003a66:	2004      	movs	r0, #4
 8003a68:	f00b fb0a 	bl	800f080 <UTIL_LPM_SetStopMode>
}
 8003a6c:	bd10      	pop	{r4, pc}

08003a6e <UTIL_ADV_TRACE_PostSendHook>:
{
 8003a6e:	b510      	push	{r4, lr}
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_ENABLE);
 8003a70:	2100      	movs	r1, #0
 8003a72:	2004      	movs	r0, #4
 8003a74:	f00b fb04 	bl	800f080 <UTIL_LPM_SetStopMode>
}
 8003a78:	bd10      	pop	{r4, pc}

08003a7a <HAL_InitTick>:
  /* USER CODE END HAL_InitTick_1 */
  return HAL_OK;
  /* USER CODE BEGIN HAL_InitTick_2 */

  /* USER CODE END HAL_InitTick_2 */
}
 8003a7a:	2000      	movs	r0, #0
 8003a7c:	4770      	bx	lr

08003a7e <HAL_GetTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
uint32_t HAL_GetTick(void)
{
 8003a7e:	b510      	push	{r4, lr}
  /* USER CODE BEGIN HAL_GetTick_1 */

  /* USER CODE END HAL_GetTick_1 */
  return RTC_IF_GetTimerValue();
 8003a80:	f7ff fe3c 	bl	80036fc <RTC_IF_GetTimerValue>
  /* USER CODE BEGIN HAL_GetTick_2 */

  /* USER CODE END HAL_GetTick_2 */
}
 8003a84:	bd10      	pop	{r4, pc}

08003a86 <HAL_Delay>:

/**
  * @note This function overwrites the __weak one from HAL
  */
void HAL_Delay(__IO uint32_t Delay)
{
 8003a86:	b507      	push	{r0, r1, r2, lr}
 8003a88:	9001      	str	r0, [sp, #4]
  /* USER CODE BEGIN HAL_Delay_1 */

  /* USER CODE END HAL_Delay_1 */
  RTC_IF_DelayMs(Delay);   /* based on RTC */
 8003a8a:	9801      	ldr	r0, [sp, #4]
 8003a8c:	f7ff fe44 	bl	8003718 <RTC_IF_DelayMs>
  /* USER CODE BEGIN HAL_Delay_2 */

  /* USER CODE END HAL_Delay_2 */
}
 8003a90:	bd07      	pop	{r0, r1, r2, pc}
	...

08003a94 <DBG_ConfigForLpm>:
    HAL_DBGMCU_EnableDBGStopMode();
    HAL_DBGMCU_EnableDBGStandbyMode();
  }
  else
  {
    __HAL_RCC_DBGMCU_CLK_ENABLE();
 8003a94:	2380      	movs	r3, #128	@ 0x80
{
 8003a96:	b510      	push	{r4, lr}
    __HAL_RCC_DBGMCU_CLK_ENABLE();
 8003a98:	4c07      	ldr	r4, [pc, #28]	@ (8003ab8 <DBG_ConfigForLpm+0x24>)
 8003a9a:	03db      	lsls	r3, r3, #15
 8003a9c:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8003a9e:	4313      	orrs	r3, r2
 8003aa0:	6363      	str	r3, [r4, #52]	@ 0x34
    HAL_DBGMCU_DisableDBGSleepMode();
 8003aa2:	f000 fcc3 	bl	800442c <HAL_DBGMCU_DisableDBGSleepMode>
    HAL_DBGMCU_DisableDBGStopMode();
 8003aa6:	f000 fcc9 	bl	800443c <HAL_DBGMCU_DisableDBGStopMode>
    HAL_DBGMCU_DisableDBGStandbyMode();
 8003aaa:	f000 fccf 	bl	800444c <HAL_DBGMCU_DisableDBGStandbyMode>
    __HAL_RCC_DBGMCU_CLK_DISABLE();
 8003aae:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8003ab0:	4a02      	ldr	r2, [pc, #8]	@ (8003abc <DBG_ConfigForLpm+0x28>)
 8003ab2:	4013      	ands	r3, r2
 8003ab4:	6363      	str	r3, [r4, #52]	@ 0x34
  }

  /* USER CODE BEGIN DBG_ConfigForLpm_Last */

  /* USER CODE END DBG_ConfigForLpm_Last */
}
 8003ab6:	bd10      	pop	{r4, pc}
 8003ab8:	40021000 	.word	0x40021000
 8003abc:	ffbfffff 	.word	0xffbfffff

08003ac0 <DBG_Disable>:
{
 8003ac0:	b510      	push	{r4, lr}
 8003ac2:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ac4:	220c      	movs	r2, #12
 8003ac6:	2100      	movs	r1, #0
 8003ac8:	a803      	add	r0, sp, #12
 8003aca:	f00c f971 	bl	800fdb0 <memset>
  GPIO_InitStruct.Mode   = GPIO_MODE_ANALOG;
 8003ace:	2303      	movs	r3, #3
 8003ad0:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Pin    = (GPIO_PIN_13 | GPIO_PIN_14);
 8003ad2:	23c0      	movs	r3, #192	@ 0xc0
  __HAL_RCC_GPIOA_CLK_ENABLE() ;
 8003ad4:	2401      	movs	r4, #1
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ad6:	20a0      	movs	r0, #160	@ 0xa0
  GPIO_InitStruct.Pin    = (GPIO_PIN_13 | GPIO_PIN_14);
 8003ad8:	01db      	lsls	r3, r3, #7
 8003ada:	9301      	str	r3, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE() ;
 8003adc:	4b08      	ldr	r3, [pc, #32]	@ (8003b00 <DBG_Disable+0x40>)
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ade:	a901      	add	r1, sp, #4
  __HAL_RCC_GPIOA_CLK_ENABLE() ;
 8003ae0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ae2:	05c0      	lsls	r0, r0, #23
  __HAL_RCC_GPIOA_CLK_ENABLE() ;
 8003ae4:	4322      	orrs	r2, r4
 8003ae6:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003ae8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003aea:	4023      	ands	r3, r4
 8003aec:	9300      	str	r3, [sp, #0]
 8003aee:	9b00      	ldr	r3, [sp, #0]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003af0:	f001 f980 	bl	8004df4 <HAL_GPIO_Init>
  DBG_ConfigForLpm(1);
 8003af4:	0020      	movs	r0, r4
 8003af6:	f7ff ffcd 	bl	8003a94 <DBG_ConfigForLpm>
}
 8003afa:	b006      	add	sp, #24
 8003afc:	bd10      	pop	{r4, pc}
 8003afe:	46c0      	nop			@ (mov r8, r8)
 8003b00:	40021000 	.word	0x40021000

08003b04 <DBG_ProbesInit>:
#endif /* PROBE_PINS_ENABLED */

  /* USER CODE BEGIN DBG_ProbesInit_Last */

  /* USER CODE END DBG_ProbesInit_Last */
}
 8003b04:	4770      	bx	lr
	...

08003b08 <MX_LPUART1_UART_Init>:
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8003b08:	480a      	ldr	r0, [pc, #40]	@ (8003b34 <MX_LPUART1_UART_Init+0x2c>)
 8003b0a:	4b0b      	ldr	r3, [pc, #44]	@ (8003b38 <MX_LPUART1_UART_Init+0x30>)
{
 8003b0c:	b510      	push	{r4, lr}
  hlpuart1.Instance = LPUART1;
 8003b0e:	6003      	str	r3, [r0, #0]
  hlpuart1.Init.BaudRate = LPUART_BAUDRATE;
 8003b10:	2396      	movs	r3, #150	@ 0x96
 8003b12:	019b      	lsls	r3, r3, #6
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
  hlpuart1.Init.Parity = UART_PARITY_NONE;
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8003b14:	220c      	movs	r2, #12
  hlpuart1.Init.BaudRate = LPUART_BAUDRATE;
 8003b16:	6043      	str	r3, [r0, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003b18:	2300      	movs	r3, #0
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8003b1a:	6142      	str	r2, [r0, #20]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003b1c:	6083      	str	r3, [r0, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8003b1e:	60c3      	str	r3, [r0, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8003b20:	6103      	str	r3, [r0, #16]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003b22:	6183      	str	r3, [r0, #24]

  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8003b24:	f003 f9d4 	bl	8006ed0 <HAL_UART_Init>
 8003b28:	2800      	cmp	r0, #0
 8003b2a:	d001      	beq.n	8003b30 <MX_LPUART1_UART_Init+0x28>
  {
    Error_Handler();
 8003b2c:	f7ff fbbc 	bl	80032a8 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8003b30:	bd10      	pop	{r4, pc}
 8003b32:	46c0      	nop			@ (mov r8, r8)
 8003b34:	20000738 	.word	0x20000738
 8003b38:	40004800 	.word	0x40004800

08003b3c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef *uartHandle)
{
 8003b3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b3e:	0005      	movs	r5, r0
 8003b40:	b091      	sub	sp, #68	@ 0x44

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b42:	2214      	movs	r2, #20
 8003b44:	2100      	movs	r1, #0
 8003b46:	a802      	add	r0, sp, #8
 8003b48:	f00c f932 	bl	800fdb0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003b4c:	2224      	movs	r2, #36	@ 0x24
 8003b4e:	2100      	movs	r1, #0
 8003b50:	a807      	add	r0, sp, #28
 8003b52:	f00c f92d 	bl	800fdb0 <memset>
  if (uartHandle->Instance == LPUART1)
 8003b56:	4b2d      	ldr	r3, [pc, #180]	@ (8003c0c <HAL_UART_MspInit+0xd0>)
 8003b58:	682a      	ldr	r2, [r5, #0]
 8003b5a:	429a      	cmp	r2, r3
 8003b5c:	d153      	bne.n	8003c06 <HAL_UART_MspInit+0xca>
    /* USER CODE BEGIN LPUART1_MspInit 0 */

    /* USER CODE END LPUART1_MspInit 0 */
    /** Initializes the peripherals clocks
      */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8003b5e:	2304      	movs	r3, #4
 8003b60:	9307      	str	r3, [sp, #28]
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_HSI;
 8003b62:	2380      	movs	r3, #128	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003b64:	a807      	add	r0, sp, #28
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_HSI;
 8003b66:	011b      	lsls	r3, r3, #4
 8003b68:	930b      	str	r3, [sp, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003b6a:	f001 fee1 	bl	8005930 <HAL_RCCEx_PeriphCLKConfig>
 8003b6e:	2800      	cmp	r0, #0
 8003b70:	d001      	beq.n	8003b76 <HAL_UART_MspInit+0x3a>
    {
      Error_Handler();
 8003b72:	f7ff fb99 	bl	80032a8 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8003b76:	2280      	movs	r2, #128	@ 0x80
 8003b78:	4b25      	ldr	r3, [pc, #148]	@ (8003c10 <HAL_UART_MspInit+0xd4>)
 8003b7a:	02d2      	lsls	r2, r2, #11
 8003b7c:	6b99      	ldr	r1, [r3, #56]	@ 0x38
    GPIO_InitStruct.Pin = USARTx_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF6_LPUART1;
    HAL_GPIO_Init(USARTx_RX_GPIO_Port, &GPIO_InitStruct);
 8003b7e:	20a0      	movs	r0, #160	@ 0xa0
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8003b80:	430a      	orrs	r2, r1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b82:	2101      	movs	r1, #1
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8003b84:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b86:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b88:	2400      	movs	r4, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b8a:	430a      	orrs	r2, r1
 8003b8c:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003b8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b90:	2702      	movs	r7, #2
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b92:	400b      	ands	r3, r1
 8003b94:	9301      	str	r3, [sp, #4]
 8003b96:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = USARTx_RX_Pin;
 8003b98:	2308      	movs	r3, #8
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8003b9a:	2603      	movs	r6, #3
    GPIO_InitStruct.Pin = USARTx_RX_Pin;
 8003b9c:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(USARTx_RX_GPIO_Port, &GPIO_InitStruct);
 8003b9e:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Alternate = GPIO_AF6_LPUART1;
 8003ba0:	3b02      	subs	r3, #2
    HAL_GPIO_Init(USARTx_RX_GPIO_Port, &GPIO_InitStruct);
 8003ba2:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8003ba4:	9605      	str	r6, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF6_LPUART1;
 8003ba6:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ba8:	9703      	str	r7, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003baa:	9404      	str	r4, [sp, #16]
    HAL_GPIO_Init(USARTx_RX_GPIO_Port, &GPIO_InitStruct);
 8003bac:	f001 f922 	bl	8004df4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USARTx_TX_Pin;
 8003bb0:	2304      	movs	r3, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF6_LPUART1;
    HAL_GPIO_Init(USARTx_TX_GPIO_Port, &GPIO_InitStruct);
 8003bb2:	20a0      	movs	r0, #160	@ 0xa0
    GPIO_InitStruct.Pin = USARTx_TX_Pin;
 8003bb4:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(USARTx_TX_GPIO_Port, &GPIO_InitStruct);
 8003bb6:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Alternate = GPIO_AF6_LPUART1;
 8003bb8:	19db      	adds	r3, r3, r7
    HAL_GPIO_Init(USARTx_TX_GPIO_Port, &GPIO_InitStruct);
 8003bba:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8003bbc:	9605      	str	r6, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF6_LPUART1;
 8003bbe:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bc0:	9703      	str	r7, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bc2:	9404      	str	r4, [sp, #16]
    HAL_GPIO_Init(USARTx_TX_GPIO_Port, &GPIO_InitStruct);
 8003bc4:	f001 f916 	bl	8004df4 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance                 = USARTx_TX_DMA_CHANNEL;
 8003bc8:	4e12      	ldr	r6, [pc, #72]	@ (8003c14 <HAL_UART_MspInit+0xd8>)
 8003bca:	4b13      	ldr	r3, [pc, #76]	@ (8003c18 <HAL_UART_MspInit+0xdc>)
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 8003bcc:	0030      	movs	r0, r6
    hdma_lpuart1_tx.Instance                 = USARTx_TX_DMA_CHANNEL;
 8003bce:	6033      	str	r3, [r6, #0]
    hdma_lpuart1_tx.Init.Request             = USARTx_TX_DMA_REQUEST;
 8003bd0:	2305      	movs	r3, #5
 8003bd2:	6073      	str	r3, [r6, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003bd4:	330b      	adds	r3, #11
 8003bd6:	60b3      	str	r3, [r6, #8]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003bd8:	3370      	adds	r3, #112	@ 0x70
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003bda:	60f4      	str	r4, [r6, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003bdc:	6133      	str	r3, [r6, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003bde:	6174      	str	r4, [r6, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003be0:	61b4      	str	r4, [r6, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 8003be2:	61f4      	str	r4, [r6, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003be4:	6234      	str	r4, [r6, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 8003be6:	f000 ffa5 	bl	8004b34 <HAL_DMA_Init>
 8003bea:	42a0      	cmp	r0, r4
 8003bec:	d001      	beq.n	8003bf2 <HAL_UART_MspInit+0xb6>
    {
      Error_Handler();
 8003bee:	f7ff fb5b 	bl	80032a8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle, hdmatx, hdma_lpuart1_tx);

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, USARTx_DMA_Priority, 0);
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	201d      	movs	r0, #29
 8003bf6:	0011      	movs	r1, r2
    __HAL_LINKDMA(uartHandle, hdmatx, hdma_lpuart1_tx);
 8003bf8:	66ee      	str	r6, [r5, #108]	@ 0x6c
 8003bfa:	62b5      	str	r5, [r6, #40]	@ 0x28
    HAL_NVIC_SetPriority(LPUART1_IRQn, USARTx_DMA_Priority, 0);
 8003bfc:	f000 ff54 	bl	8004aa8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8003c00:	201d      	movs	r0, #29
 8003c02:	f000 ff7b 	bl	8004afc <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN LPUART1_MspInit 1 */

    /* USER CODE END LPUART1_MspInit 1 */
  }
}
 8003c06:	b011      	add	sp, #68	@ 0x44
 8003c08:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003c0a:	46c0      	nop			@ (mov r8, r8)
 8003c0c:	40004800 	.word	0x40004800
 8003c10:	40021000 	.word	0x40021000
 8003c14:	200006f0 	.word	0x200006f0
 8003c18:	40020080 	.word	0x40020080

08003c1c <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef *uartHandle)
{

  if (uartHandle->Instance == LPUART1)
 8003c1c:	4b0b      	ldr	r3, [pc, #44]	@ (8003c4c <HAL_UART_MspDeInit+0x30>)
 8003c1e:	6802      	ldr	r2, [r0, #0]
{
 8003c20:	b510      	push	{r4, lr}
 8003c22:	0004      	movs	r4, r0
  if (uartHandle->Instance == LPUART1)
 8003c24:	429a      	cmp	r2, r3
 8003c26:	d10f      	bne.n	8003c48 <HAL_UART_MspDeInit+0x2c>

    /**LPUART1 GPIO Configuration
    PA3     ------> LPUART1_RX
    PA2     ------> LPUART1_TX
      */
    HAL_GPIO_DeInit(GPIOA, USARTx_RX_Pin | USARTx_TX_Pin);
 8003c28:	20a0      	movs	r0, #160	@ 0xa0
    __HAL_RCC_LPUART1_CLK_DISABLE();
 8003c2a:	4a09      	ldr	r2, [pc, #36]	@ (8003c50 <HAL_UART_MspDeInit+0x34>)
 8003c2c:	4909      	ldr	r1, [pc, #36]	@ (8003c54 <HAL_UART_MspDeInit+0x38>)
 8003c2e:	6b93      	ldr	r3, [r2, #56]	@ 0x38
    HAL_GPIO_DeInit(GPIOA, USARTx_RX_Pin | USARTx_TX_Pin);
 8003c30:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_LPUART1_CLK_DISABLE();
 8003c32:	400b      	ands	r3, r1
 8003c34:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_GPIO_DeInit(GPIOA, USARTx_RX_Pin | USARTx_TX_Pin);
 8003c36:	210c      	movs	r1, #12
 8003c38:	f001 f998 	bl	8004f6c <HAL_GPIO_DeInit>

    /* LPUART1 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmatx);
 8003c3c:	6ee0      	ldr	r0, [r4, #108]	@ 0x6c
 8003c3e:	f000 ffbd 	bl	8004bbc <HAL_DMA_DeInit>

    /* LPUART1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(LPUART1_IRQn);
 8003c42:	201d      	movs	r0, #29
 8003c44:	f000 ff66 	bl	8004b14 <HAL_NVIC_DisableIRQ>
    /* USER CODE BEGIN LPUART1_MspDeInit 1 */

    /* USER CODE END LPUART1_MspDeInit 1 */
  }
}
 8003c48:	bd10      	pop	{r4, pc}
 8003c4a:	46c0      	nop			@ (mov r8, r8)
 8003c4c:	40004800 	.word	0x40004800
 8003c50:	40021000 	.word	0x40021000
 8003c54:	fffbffff 	.word	0xfffbffff

08003c58 <vcom_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

UTIL_ADV_TRACE_Status_t vcom_Init(void (*cb)(void *))
{
 8003c58:	b510      	push	{r4, lr}
  /* USER CODE BEGIN vcom_Init_1 */

  /* USER CODE END vcom_Init_1 */
  TxCpltCallback = cb;
 8003c5a:	4b04      	ldr	r3, [pc, #16]	@ (8003c6c <vcom_Init+0x14>)
 8003c5c:	6018      	str	r0, [r3, #0]
  MX_DMA_Init();
 8003c5e:	f7ff fab9 	bl	80031d4 <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 8003c62:	f7ff ff51 	bl	8003b08 <MX_LPUART1_UART_Init>
  return UTIL_ADV_TRACE_OK;
  /* USER CODE BEGIN vcom_Init_2 */

  /* USER CODE END vcom_Init_2 */
}
 8003c66:	2000      	movs	r0, #0
 8003c68:	bd10      	pop	{r4, pc}
 8003c6a:	46c0      	nop			@ (mov r8, r8)
 8003c6c:	200007bc 	.word	0x200007bc

08003c70 <vcom_DeInit>:
{
  /* USER CODE BEGIN vcom_DeInit_1 */

  /* USER CODE END vcom_DeInit_1 */
  /* ##-1- Reset peripherals ################################################## */
  __HAL_RCC_LPUART1_FORCE_RESET();
 8003c70:	2280      	movs	r2, #128	@ 0x80
 8003c72:	4b09      	ldr	r3, [pc, #36]	@ (8003c98 <vcom_DeInit+0x28>)
 8003c74:	02d2      	lsls	r2, r2, #11
 8003c76:	6a99      	ldr	r1, [r3, #40]	@ 0x28
{
 8003c78:	b510      	push	{r4, lr}
  __HAL_RCC_LPUART1_FORCE_RESET();
 8003c7a:	430a      	orrs	r2, r1
 8003c7c:	629a      	str	r2, [r3, #40]	@ 0x28
  __HAL_RCC_LPUART1_RELEASE_RESET();
 8003c7e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003c80:	4906      	ldr	r1, [pc, #24]	@ (8003c9c <vcom_DeInit+0x2c>)

  /* ##-2- MspDeInit ################################################## */
  HAL_UART_MspDeInit(&hlpuart1);
 8003c82:	4807      	ldr	r0, [pc, #28]	@ (8003ca0 <vcom_DeInit+0x30>)
  __HAL_RCC_LPUART1_RELEASE_RESET();
 8003c84:	400a      	ands	r2, r1
 8003c86:	629a      	str	r2, [r3, #40]	@ 0x28
  HAL_UART_MspDeInit(&hlpuart1);
 8003c88:	f7ff ffc8 	bl	8003c1c <HAL_UART_MspDeInit>

  /* ##-3- Disable the NVIC for DMA ########################################### */
  /* USER CODE BEGIN 1 */
  HAL_NVIC_DisableIRQ(DMA1_Channel4_5_6_7_IRQn);
 8003c8c:	200b      	movs	r0, #11
 8003c8e:	f000 ff41 	bl	8004b14 <HAL_NVIC_DisableIRQ>
  return UTIL_ADV_TRACE_OK;
  /* USER CODE END 1 */
  /* USER CODE BEGIN vcom_DeInit_2 */

  /* USER CODE END vcom_DeInit_2 */
}
 8003c92:	2000      	movs	r0, #0
 8003c94:	bd10      	pop	{r4, pc}
 8003c96:	46c0      	nop			@ (mov r8, r8)
 8003c98:	40021000 	.word	0x40021000
 8003c9c:	fffbffff 	.word	0xfffbffff
 8003ca0:	20000738 	.word	0x20000738

08003ca4 <vcom_Trace_DMA>:

  /* USER CODE END vcom_Trace_2 */
}

UTIL_ADV_TRACE_Status_t vcom_Trace_DMA(uint8_t *p_data, uint16_t size)
{
 8003ca4:	b510      	push	{r4, lr}
  /* USER CODE BEGIN vcom_Trace_DMA_1 */

  /* USER CODE END vcom_Trace_DMA_1 */
  HAL_UART_Transmit_DMA(&hlpuart1, p_data, size);
 8003ca6:	4b04      	ldr	r3, [pc, #16]	@ (8003cb8 <vcom_Trace_DMA+0x14>)
{
 8003ca8:	000a      	movs	r2, r1
  HAL_UART_Transmit_DMA(&hlpuart1, p_data, size);
 8003caa:	0001      	movs	r1, r0
 8003cac:	0018      	movs	r0, r3
 8003cae:	f002 fcdf 	bl	8006670 <HAL_UART_Transmit_DMA>
  return UTIL_ADV_TRACE_OK;
  /* USER CODE BEGIN vcom_Trace_DMA_2 */

  /* USER CODE END vcom_Trace_DMA_2 */
}
 8003cb2:	2000      	movs	r0, #0
 8003cb4:	bd10      	pop	{r4, pc}
 8003cb6:	46c0      	nop			@ (mov r8, r8)
 8003cb8:	20000738 	.word	0x20000738

08003cbc <vcom_ReceiveInit>:

UTIL_ADV_TRACE_Status_t vcom_ReceiveInit(void (*RxCb)(uint8_t *rxChar, uint16_t size, uint8_t error))
{
 8003cbc:	b537      	push	{r0, r1, r2, r4, r5, lr}

  /*record call back*/
  RxCpltCallback = RxCb;

  /*Set wakeUp event on start bit*/
  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_STARTBIT;
 8003cbe:	2180      	movs	r1, #128	@ 0x80

  HAL_UARTEx_StopModeWakeUpSourceConfig(&hlpuart1, WakeUpSelection);
 8003cc0:	4c10      	ldr	r4, [pc, #64]	@ (8003d04 <vcom_ReceiveInit+0x48>)
  RxCpltCallback = RxCb;
 8003cc2:	4d11      	ldr	r5, [pc, #68]	@ (8003d08 <vcom_ReceiveInit+0x4c>)
  HAL_UARTEx_StopModeWakeUpSourceConfig(&hlpuart1, WakeUpSelection);
 8003cc4:	9a01      	ldr	r2, [sp, #4]
  RxCpltCallback = RxCb;
 8003cc6:	6068      	str	r0, [r5, #4]
  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_STARTBIT;
 8003cc8:	0389      	lsls	r1, r1, #14
  HAL_UARTEx_StopModeWakeUpSourceConfig(&hlpuart1, WakeUpSelection);
 8003cca:	0020      	movs	r0, r4
  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_STARTBIT;
 8003ccc:	9100      	str	r1, [sp, #0]
  HAL_UARTEx_StopModeWakeUpSourceConfig(&hlpuart1, WakeUpSelection);
 8003cce:	f003 f9b5 	bl	800703c <HAL_UARTEx_StopModeWakeUpSourceConfig>

  /* Make sure that no UART transfer is on-going */
  while (__HAL_UART_GET_FLAG(&hlpuart1, USART_ISR_BUSY) == SET);
 8003cd2:	2280      	movs	r2, #128	@ 0x80
 8003cd4:	6823      	ldr	r3, [r4, #0]
 8003cd6:	0252      	lsls	r2, r2, #9
 8003cd8:	69d9      	ldr	r1, [r3, #28]
 8003cda:	4211      	tst	r1, r2
 8003cdc:	d1fc      	bne.n	8003cd8 <vcom_ReceiveInit+0x1c>

  /* Make sure that UART is ready to receive)   */
  while (__HAL_UART_GET_FLAG(&hlpuart1, USART_ISR_REACK) == RESET);
 8003cde:	2280      	movs	r2, #128	@ 0x80
 8003ce0:	03d2      	lsls	r2, r2, #15
 8003ce2:	69d9      	ldr	r1, [r3, #28]
 8003ce4:	4211      	tst	r1, r2
 8003ce6:	d0fc      	beq.n	8003ce2 <vcom_ReceiveInit+0x26>

  /* Enable USART interrupt */
  __HAL_UART_ENABLE_IT(&hlpuart1, UART_IT_WUF);
 8003ce8:	6899      	ldr	r1, [r3, #8]

  /*Enable wakeup from stop mode*/
  HAL_UARTEx_EnableStopMode(&hlpuart1);
 8003cea:	0020      	movs	r0, r4
  __HAL_UART_ENABLE_IT(&hlpuart1, UART_IT_WUF);
 8003cec:	430a      	orrs	r2, r1
 8003cee:	609a      	str	r2, [r3, #8]
  HAL_UARTEx_EnableStopMode(&hlpuart1);
 8003cf0:	f003 f9ea 	bl	80070c8 <HAL_UARTEx_EnableStopMode>

  /*Start LPUART receive on IT*/
  HAL_UART_Receive_IT(&hlpuart1, &charRx, 1);
 8003cf4:	0029      	movs	r1, r5
 8003cf6:	2201      	movs	r2, #1
 8003cf8:	0020      	movs	r0, r4
 8003cfa:	3108      	adds	r1, #8
 8003cfc:	f003 f968 	bl	8006fd0 <HAL_UART_Receive_IT>

  return UTIL_ADV_TRACE_OK;
  /* USER CODE BEGIN vcom_ReceiveInit_2 */

  /* USER CODE END vcom_ReceiveInit_2 */
}
 8003d00:	2000      	movs	r0, #0
 8003d02:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
 8003d04:	20000738 	.word	0x20000738
 8003d08:	200007bc 	.word	0x200007bc

08003d0c <HAL_UART_TxCpltCallback>:

  /* USER CODE END vcom_Resume_2 */
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *hlpuart1)
{
 8003d0c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_1 */

  /* USER CODE END HAL_UART_TxCpltCallback_1 */
  /* buffer transmission complete*/
  TxCpltCallback(NULL);
 8003d0e:	4b02      	ldr	r3, [pc, #8]	@ (8003d18 <HAL_UART_TxCpltCallback+0xc>)
 8003d10:	2000      	movs	r0, #0
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4798      	blx	r3
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_2 */

  /* USER CODE END HAL_UART_TxCpltCallback_2 */
}
 8003d16:	bd10      	pop	{r4, pc}
 8003d18:	200007bc 	.word	0x200007bc

08003d1c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *hlpuart1)
{
 8003d1c:	b570      	push	{r4, r5, r6, lr}
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_1 */

  /* USER CODE END HAL_UART_RxCpltCallback_1 */
  if ((NULL != RxCpltCallback) && (HAL_UART_ERROR_NONE == hlpuart1->ErrorCode))
 8003d1e:	4c0a      	ldr	r4, [pc, #40]	@ (8003d48 <HAL_UART_RxCpltCallback+0x2c>)
{
 8003d20:	0005      	movs	r5, r0
  if ((NULL != RxCpltCallback) && (HAL_UART_ERROR_NONE == hlpuart1->ErrorCode))
 8003d22:	6863      	ldr	r3, [r4, #4]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d007      	beq.n	8003d38 <HAL_UART_RxCpltCallback+0x1c>
 8003d28:	1d02      	adds	r2, r0, #4
 8003d2a:	6fd2      	ldr	r2, [r2, #124]	@ 0x7c
 8003d2c:	2a00      	cmp	r2, #0
 8003d2e:	d103      	bne.n	8003d38 <HAL_UART_RxCpltCallback+0x1c>
  {
    RxCpltCallback(&charRx, 1, 0);
 8003d30:	0020      	movs	r0, r4
 8003d32:	2101      	movs	r1, #1
 8003d34:	3008      	adds	r0, #8
 8003d36:	4798      	blx	r3
  }
  HAL_UART_Receive_IT(hlpuart1, &charRx, 1);
 8003d38:	0021      	movs	r1, r4
 8003d3a:	0028      	movs	r0, r5
 8003d3c:	2201      	movs	r2, #1
 8003d3e:	3108      	adds	r1, #8
 8003d40:	f003 f946 	bl	8006fd0 <HAL_UART_Receive_IT>
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_2 */

  /* USER CODE END HAL_UART_RxCpltCallback_2 */
}
 8003d44:	bd70      	pop	{r4, r5, r6, pc}
 8003d46:	46c0      	nop			@ (mov r8, r8)
 8003d48:	200007bc 	.word	0x200007bc

08003d4c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8003d4c:	480d      	ldr	r0, [pc, #52]	@ (8003d84 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8003d4e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003d50:	480d      	ldr	r0, [pc, #52]	@ (8003d88 <LoopForever+0x6>)
  ldr r1, =_edata
 8003d52:	490e      	ldr	r1, [pc, #56]	@ (8003d8c <LoopForever+0xa>)
  ldr r2, =_sidata
 8003d54:	4a0e      	ldr	r2, [pc, #56]	@ (8003d90 <LoopForever+0xe>)
  movs r3, #0
 8003d56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003d58:	e002      	b.n	8003d60 <LoopCopyDataInit>

08003d5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003d5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003d5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003d5e:	3304      	adds	r3, #4

08003d60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003d60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003d62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003d64:	d3f9      	bcc.n	8003d5a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003d66:	4a0b      	ldr	r2, [pc, #44]	@ (8003d94 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003d68:	4c0b      	ldr	r4, [pc, #44]	@ (8003d98 <LoopForever+0x16>)
  movs r3, #0
 8003d6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003d6c:	e001      	b.n	8003d72 <LoopFillZerobss>

08003d6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003d6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003d70:	3204      	adds	r2, #4

08003d72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003d72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003d74:	d3fb      	bcc.n	8003d6e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8003d76:	f000 faf9 	bl	800436c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003d7a:	f00c f833 	bl	800fde4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003d7e:	f7ff fa89 	bl	8003294 <main>

08003d82 <LoopForever>:

LoopForever:
    b LoopForever
 8003d82:	e7fe      	b.n	8003d82 <LoopForever>
   ldr   r0, =_estack
 8003d84:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8003d88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003d8c:	20000134 	.word	0x20000134
  ldr r2, =_sidata
 8003d90:	080122b0 	.word	0x080122b0
  ldr r2, =_sbss
 8003d94:	20000134 	.word	0x20000134
  ldr r4, =_ebss
 8003d98:	20001be0 	.word	0x20001be0

08003d9c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003d9c:	e7fe      	b.n	8003d9c <ADC1_COMP_IRQHandler>
	...

08003da0 <BSP_SPI1_SendRecv>:
  */
int32_t BSP_SPI1_SendRecv(uint8_t *pTxData, uint8_t *pRxData, uint16_t len)
{
  int32_t ret = BSP_ERROR_UNKNOWN_FAILURE;

  if (HAL_SPI_TransmitReceive(&hspi1, pTxData, pRxData, len, TIMEOUT_DURATION) == HAL_OK)
 8003da0:	23fa      	movs	r3, #250	@ 0xfa
{
 8003da2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003da4:	0005      	movs	r5, r0
  if (HAL_SPI_TransmitReceive(&hspi1, pTxData, pRxData, len, TIMEOUT_DURATION) == HAL_OK)
 8003da6:	009b      	lsls	r3, r3, #2
{
 8003da8:	0014      	movs	r4, r2
  if (HAL_SPI_TransmitReceive(&hspi1, pTxData, pRxData, len, TIMEOUT_DURATION) == HAL_OK)
 8003daa:	9300      	str	r3, [sp, #0]
 8003dac:	4806      	ldr	r0, [pc, #24]	@ (8003dc8 <BSP_SPI1_SendRecv+0x28>)
 8003dae:	0013      	movs	r3, r2
 8003db0:	000a      	movs	r2, r1
 8003db2:	0029      	movs	r1, r5
 8003db4:	f002 faf8 	bl	80063a8 <HAL_SPI_TransmitReceive>
 8003db8:	2800      	cmp	r0, #0
 8003dba:	d101      	bne.n	8003dc0 <BSP_SPI1_SendRecv+0x20>
  {
    ret = len;
 8003dbc:	0020      	movs	r0, r4
  }
  return ret;
}
 8003dbe:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
  int32_t ret = BSP_ERROR_UNKNOWN_FAILURE;
 8003dc0:	2006      	movs	r0, #6
 8003dc2:	4240      	negs	r0, r0
  return ret;
 8003dc4:	e7fb      	b.n	8003dbe <BSP_SPI1_SendRecv+0x1e>
 8003dc6:	46c0      	nop			@ (mov r8, r8)
 8003dc8:	200007c8 	.word	0x200007c8

08003dcc <MX_SPI1_Init>:
/* SPI1 init function */

__weak HAL_StatusTypeDef MX_SPI1_Init(SPI_HandleTypeDef *hspi)
{
  HAL_StatusTypeDef ret = HAL_OK;
  hspi->Instance = SPI1;
 8003dcc:	4b14      	ldr	r3, [pc, #80]	@ (8003e20 <MX_SPI1_Init+0x54>)
{
 8003dce:	b570      	push	{r4, r5, r6, lr}
  hspi->Instance = SPI1;
 8003dd0:	6003      	str	r3, [r0, #0]
  hspi->Init.Mode = SPI_MODE_MASTER;
 8003dd2:	2382      	movs	r3, #130	@ 0x82
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
 8003dd4:	2500      	movs	r5, #0
  hspi->Init.Mode = SPI_MODE_MASTER;
 8003dd6:	005b      	lsls	r3, r3, #1
 8003dd8:	6043      	str	r3, [r0, #4]
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
  hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi->Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi->Init.NSS = SPI_NSS_SOFT;
 8003dda:	33fc      	adds	r3, #252	@ 0xfc
 8003ddc:	6183      	str	r3, [r0, #24]
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
 8003dde:	6085      	str	r5, [r0, #8]
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
 8003de0:	60c5      	str	r5, [r0, #12]
  hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003de2:	6105      	str	r5, [r0, #16]
  hspi->Init.CLKPhase = SPI_PHASE_1EDGE;
 8003de4:	6145      	str	r5, [r0, #20]
{
 8003de6:	0004      	movs	r4, r0
  /* SPI1 is on APB2 for L0x3 -> HAL_RCC_GetPCLK2Freq */
  hspi->Init.BaudRatePrescaler = SPI_GetPrescaler(HAL_RCC_GetPCLK2Freq(), RADIO_SPI_BAUDRATE);
 8003de8:	f001 fd92 	bl	8005910 <HAL_RCC_GetPCLK2Freq>
  /* USER CODE END SPI1_MspDeInit 1 */
}

static uint32_t SPI_GetPrescaler(uint32_t clock_src_hz, uint32_t baudrate_mbps)
{
  uint32_t divisor = 0;
 8003dec:	002b      	movs	r3, r5
    SPI_BAUDRATEPRESCALER_64,
    SPI_BAUDRATEPRESCALER_128,
    SPI_BAUDRATEPRESCALER_256,
  };

  while (spi_clk > baudrate_mbps)
 8003dee:	4a0d      	ldr	r2, [pc, #52]	@ (8003e24 <MX_SPI1_Init+0x58>)
  {
    presc = baudrate[divisor];
 8003df0:	490d      	ldr	r1, [pc, #52]	@ (8003e28 <MX_SPI1_Init+0x5c>)
  while (spi_clk > baudrate_mbps)
 8003df2:	4290      	cmp	r0, r2
 8003df4:	d80d      	bhi.n	8003e12 <MX_SPI1_Init+0x46>
  hspi->Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003df6:	2300      	movs	r3, #0
 8003df8:	6223      	str	r3, [r4, #32]
  hspi->Init.TIMode = SPI_TIMODE_DISABLE;
 8003dfa:	6263      	str	r3, [r4, #36]	@ 0x24
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003dfc:	62a3      	str	r3, [r4, #40]	@ 0x28
  hspi->Init.CRCPolynomial = 7;
 8003dfe:	3307      	adds	r3, #7
  hspi->Init.BaudRatePrescaler = SPI_GetPrescaler(HAL_RCC_GetPCLK2Freq(), RADIO_SPI_BAUDRATE);
 8003e00:	61e5      	str	r5, [r4, #28]
  hspi->Init.CRCPolynomial = 7;
 8003e02:	62e3      	str	r3, [r4, #44]	@ 0x2c
  if (HAL_SPI_Init(hspi) != HAL_OK)
 8003e04:	0020      	movs	r0, r4
 8003e06:	f002 fa67 	bl	80062d8 <HAL_SPI_Init>
 8003e0a:	1e43      	subs	r3, r0, #1
 8003e0c:	4198      	sbcs	r0, r3
  return ret;
 8003e0e:	b2c0      	uxtb	r0, r0
}
 8003e10:	bd70      	pop	{r4, r5, r6, pc}
    presc = baudrate[divisor];
 8003e12:	009d      	lsls	r5, r3, #2
    if (++divisor > 7)
 8003e14:	3301      	adds	r3, #1
    presc = baudrate[divisor];
 8003e16:	586d      	ldr	r5, [r5, r1]
    if (++divisor > 7)
 8003e18:	2b08      	cmp	r3, #8
 8003e1a:	d0ec      	beq.n	8003df6 <MX_SPI1_Init+0x2a>
    {
      break;
    }

    spi_clk = (spi_clk >> 1);
 8003e1c:	0840      	lsrs	r0, r0, #1
 8003e1e:	e7e8      	b.n	8003df2 <MX_SPI1_Init+0x26>
 8003e20:	40013000 	.word	0x40013000
 8003e24:	00989680 	.word	0x00989680
 8003e28:	080103d4 	.word	0x080103d4

08003e2c <BSP_SPI1_Init>:
{
 8003e2c:	b530      	push	{r4, r5, lr}
  hspi1.Instance  = SPI1;
 8003e2e:	4d1b      	ldr	r5, [pc, #108]	@ (8003e9c <BSP_SPI1_Init+0x70>)
 8003e30:	4b1b      	ldr	r3, [pc, #108]	@ (8003ea0 <BSP_SPI1_Init+0x74>)
  if (HAL_SPI_GetState(&hspi1) == HAL_SPI_STATE_RESET)
 8003e32:	0028      	movs	r0, r5
{
 8003e34:	b087      	sub	sp, #28
  hspi1.Instance  = SPI1;
 8003e36:	602b      	str	r3, [r5, #0]
  if (HAL_SPI_GetState(&hspi1) == HAL_SPI_STATE_RESET)
 8003e38:	f002 fbfc 	bl	8006634 <HAL_SPI_GetState>
 8003e3c:	1e04      	subs	r4, r0, #0
 8003e3e:	d002      	beq.n	8003e46 <BSP_SPI1_Init+0x1a>
  int32_t ret = BSP_ERROR_NONE;
 8003e40:	2000      	movs	r0, #0
}
 8003e42:	b007      	add	sp, #28
 8003e44:	bd30      	pop	{r4, r5, pc}
  __HAL_RCC_SPI1_CLK_ENABLE();
 8003e46:	2380      	movs	r3, #128	@ 0x80
 8003e48:	4a16      	ldr	r2, [pc, #88]	@ (8003ea4 <BSP_SPI1_Init+0x78>)
 8003e4a:	015b      	lsls	r3, r3, #5
 8003e4c:	6b51      	ldr	r1, [r2, #52]	@ 0x34
 8003e4e:	430b      	orrs	r3, r1
 8003e50:	6353      	str	r3, [r2, #52]	@ 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e52:	2302      	movs	r3, #2
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e54:	9003      	str	r0, [sp, #12]
  GPIO_InitStruct.Alternate = BUS_SPI1_MOSI_GPIO_AF;
 8003e56:	9005      	str	r0, [sp, #20]
  HAL_GPIO_Init(BUS_SPI1_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8003e58:	20a0      	movs	r0, #160	@ 0xa0
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e5a:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e5c:	3301      	adds	r3, #1
 8003e5e:	9304      	str	r3, [sp, #16]
  HAL_GPIO_Init(BUS_SPI1_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8003e60:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Pin = BUS_SPI1_MOSI_GPIO_PIN;
 8003e62:	337d      	adds	r3, #125	@ 0x7d
  HAL_GPIO_Init(BUS_SPI1_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8003e64:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Pin = BUS_SPI1_MOSI_GPIO_PIN;
 8003e66:	9301      	str	r3, [sp, #4]
  HAL_GPIO_Init(BUS_SPI1_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8003e68:	f000 ffc4 	bl	8004df4 <HAL_GPIO_Init>
  HAL_GPIO_Init(BUS_SPI1_MISO_GPIO_PORT, &GPIO_InitStruct);
 8003e6c:	20a0      	movs	r0, #160	@ 0xa0
  GPIO_InitStruct.Pin = BUS_SPI1_MISO_GPIO_PIN;
 8003e6e:	2340      	movs	r3, #64	@ 0x40
  HAL_GPIO_Init(BUS_SPI1_MISO_GPIO_PORT, &GPIO_InitStruct);
 8003e70:	a901      	add	r1, sp, #4
 8003e72:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Pin = BUS_SPI1_MISO_GPIO_PIN;
 8003e74:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Alternate = BUS_SPI1_MISO_GPIO_AF;
 8003e76:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(BUS_SPI1_MISO_GPIO_PORT, &GPIO_InitStruct);
 8003e78:	f000 ffbc 	bl	8004df4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = BUS_SPI1_SCK_GPIO_PIN;
 8003e7c:	2308      	movs	r3, #8
  HAL_GPIO_Init(BUS_SPI1_SCK_GPIO_PORT, &GPIO_InitStruct);
 8003e7e:	480a      	ldr	r0, [pc, #40]	@ (8003ea8 <BSP_SPI1_Init+0x7c>)
 8003e80:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Alternate = BUS_SPI1_SCK_GPIO_AF;
 8003e82:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pin = BUS_SPI1_SCK_GPIO_PIN;
 8003e84:	9301      	str	r3, [sp, #4]
  HAL_GPIO_Init(BUS_SPI1_SCK_GPIO_PORT, &GPIO_InitStruct);
 8003e86:	f000 ffb5 	bl	8004df4 <HAL_GPIO_Init>
    if (MX_SPI1_Init(&hspi1) != HAL_OK)
 8003e8a:	0028      	movs	r0, r5
 8003e8c:	f7ff ff9e 	bl	8003dcc <MX_SPI1_Init>
 8003e90:	2800      	cmp	r0, #0
 8003e92:	d0d5      	beq.n	8003e40 <BSP_SPI1_Init+0x14>
      ret = BSP_ERROR_BUS_FAILURE;
 8003e94:	2008      	movs	r0, #8
 8003e96:	4240      	negs	r0, r0
  return ret;
 8003e98:	e7d3      	b.n	8003e42 <BSP_SPI1_Init+0x16>
 8003e9a:	46c0      	nop			@ (mov r8, r8)
 8003e9c:	200007c8 	.word	0x200007c8
 8003ea0:	40013000 	.word	0x40013000
 8003ea4:	40021000 	.word	0x40021000
 8003ea8:	50000400 	.word	0x50000400

08003eac <BSP_LED_Init>:
  *   This parameter can be one of following parameters:
  *            @arg  LED2
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8003eac:	b500      	push	{lr}
 8003eae:	b08b      	sub	sp, #44	@ 0x2c
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8003eb0:	2803      	cmp	r0, #3
 8003eb2:	d80c      	bhi.n	8003ece <BSP_LED_Init+0x22>
 8003eb4:	4b1b      	ldr	r3, [pc, #108]	@ (8003f24 <BSP_LED_Init+0x78>)
 8003eb6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003eb8:	f7fc f938 	bl	800012c <__gnu_thumb1_case_uqi>
 8003ebc:	2b231b02 	.word	0x2b231b02
 8003ec0:	2102      	movs	r1, #2
 8003ec2:	430a      	orrs	r2, r1
 8003ec4:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003ec6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ec8:	400b      	ands	r3, r1
 8003eca:	9301      	str	r3, [sp, #4]
 8003ecc:	9b01      	ldr	r3, [sp, #4]

  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = LED_PIN[Led];
 8003ece:	4b16      	ldr	r3, [pc, #88]	@ (8003f28 <BSP_LED_Init+0x7c>)
 8003ed0:	0042      	lsls	r2, r0, #1
 8003ed2:	5ad3      	ldrh	r3, [r2, r3]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;

  HAL_GPIO_Init(LED_PORT[Led], &GPIO_InitStruct);
 8003ed4:	0080      	lsls	r0, r0, #2
  GPIO_InitStruct.Pin = LED_PIN[Led];
 8003ed6:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003ed8:	2301      	movs	r3, #1
 8003eda:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003edc:	2300      	movs	r3, #0
 8003ede:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ee0:	3303      	adds	r3, #3
 8003ee2:	9308      	str	r3, [sp, #32]
  HAL_GPIO_Init(LED_PORT[Led], &GPIO_InitStruct);
 8003ee4:	4b11      	ldr	r3, [pc, #68]	@ (8003f2c <BSP_LED_Init+0x80>)
 8003ee6:	a905      	add	r1, sp, #20
 8003ee8:	58c0      	ldr	r0, [r0, r3]
 8003eea:	f000 ff83 	bl	8004df4 <HAL_GPIO_Init>
}
 8003eee:	b00b      	add	sp, #44	@ 0x2c
 8003ef0:	bd00      	pop	{pc}
  LEDx_GPIO_CLK_ENABLE(Led);
 8003ef2:	2101      	movs	r1, #1
 8003ef4:	430a      	orrs	r2, r1
 8003ef6:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003ef8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003efa:	400b      	ands	r3, r1
 8003efc:	9302      	str	r3, [sp, #8]
 8003efe:	9b02      	ldr	r3, [sp, #8]
 8003f00:	e7e5      	b.n	8003ece <BSP_LED_Init+0x22>
 8003f02:	2102      	movs	r1, #2
 8003f04:	430a      	orrs	r2, r1
 8003f06:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003f08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f0a:	400b      	ands	r3, r1
 8003f0c:	9303      	str	r3, [sp, #12]
 8003f0e:	9b03      	ldr	r3, [sp, #12]
 8003f10:	e7dd      	b.n	8003ece <BSP_LED_Init+0x22>
 8003f12:	2102      	movs	r1, #2
 8003f14:	430a      	orrs	r2, r1
 8003f16:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003f18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f1a:	400b      	ands	r3, r1
 8003f1c:	9304      	str	r3, [sp, #16]
 8003f1e:	9b04      	ldr	r3, [sp, #16]
 8003f20:	e7d5      	b.n	8003ece <BSP_LED_Init+0x22>
 8003f22:	46c0      	nop			@ (mov r8, r8)
 8003f24:	40021000 	.word	0x40021000
 8003f28:	080103f4 	.word	0x080103f4
 8003f2c:	2000007c 	.word	0x2000007c

08003f30 <BSP_LED_On>:
  *            @arg  LED2
  * @retval None
  */
void BSP_LED_On(Led_TypeDef Led)
{
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
 8003f30:	4b05      	ldr	r3, [pc, #20]	@ (8003f48 <BSP_LED_On+0x18>)
{
 8003f32:	b510      	push	{r4, lr}
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
 8003f34:	0042      	lsls	r2, r0, #1
 8003f36:	5ad1      	ldrh	r1, [r2, r3]
 8003f38:	4b04      	ldr	r3, [pc, #16]	@ (8003f4c <BSP_LED_On+0x1c>)
 8003f3a:	0080      	lsls	r0, r0, #2
 8003f3c:	2201      	movs	r2, #1
 8003f3e:	58c0      	ldr	r0, [r0, r3]
 8003f40:	f001 f896 	bl	8005070 <HAL_GPIO_WritePin>
}
 8003f44:	bd10      	pop	{r4, pc}
 8003f46:	46c0      	nop			@ (mov r8, r8)
 8003f48:	080103f4 	.word	0x080103f4
 8003f4c:	2000007c 	.word	0x2000007c

08003f50 <BSP_LED_Off>:
  *            @arg  LED2
  * @retval None
  */
void BSP_LED_Off(Led_TypeDef Led)
{
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8003f50:	4b05      	ldr	r3, [pc, #20]	@ (8003f68 <BSP_LED_Off+0x18>)
{
 8003f52:	b510      	push	{r4, lr}
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8003f54:	0042      	lsls	r2, r0, #1
 8003f56:	5ad1      	ldrh	r1, [r2, r3]
 8003f58:	4b04      	ldr	r3, [pc, #16]	@ (8003f6c <BSP_LED_Off+0x1c>)
 8003f5a:	0080      	lsls	r0, r0, #2
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	58c0      	ldr	r0, [r0, r3]
 8003f60:	f001 f886 	bl	8005070 <HAL_GPIO_WritePin>
}
 8003f64:	bd10      	pop	{r4, pc}
 8003f66:	46c0      	nop			@ (mov r8, r8)
 8003f68:	080103f4 	.word	0x080103f4
 8003f6c:	2000007c 	.word	0x2000007c

08003f70 <BSP_LED_Toggle>:
  *            @arg  LED2
  * @retval None
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
  HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 8003f70:	4b04      	ldr	r3, [pc, #16]	@ (8003f84 <BSP_LED_Toggle+0x14>)
{
 8003f72:	b510      	push	{r4, lr}
  HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 8003f74:	0042      	lsls	r2, r0, #1
 8003f76:	5ad1      	ldrh	r1, [r2, r3]
 8003f78:	4b03      	ldr	r3, [pc, #12]	@ (8003f88 <BSP_LED_Toggle+0x18>)
 8003f7a:	0080      	lsls	r0, r0, #2
 8003f7c:	58c0      	ldr	r0, [r0, r3]
 8003f7e:	f001 f87d 	bl	800507c <HAL_GPIO_TogglePin>
}
 8003f82:	bd10      	pop	{r4, pc}
 8003f84:	080103f4 	.word	0x080103f4
 8003f88:	2000007c 	.word	0x2000007c

08003f8c <CMWX1ZZABZ0XX_RADIO_GetWakeUpTime>:

/* Exported functions ---------------------------------------------------------*/
uint32_t CMWX1ZZABZ0XX_RADIO_GetWakeUpTime(void)
{
  return  BOARD_WAKEUP_TIME;
}
 8003f8c:	2005      	movs	r0, #5
 8003f8e:	4770      	bx	lr

08003f90 <CMWX1ZZABZ0XX_RADIO_SetXO>:

void CMWX1ZZABZ0XX_RADIO_SetXO(uint8_t state)
{
 8003f90:	0002      	movs	r2, r0
 8003f92:	b510      	push	{r4, lr}

  if (state == SET)
 8003f94:	2801      	cmp	r0, #1
 8003f96:	d109      	bne.n	8003fac <CMWX1ZZABZ0XX_RADIO_SetXO+0x1c>
  {
    HAL_GPIO_WritePin(RADIO_TCXO_VCC_PORT, RADIO_TCXO_VCC_PIN, GPIO_PIN_SET);
 8003f98:	2180      	movs	r1, #128	@ 0x80
 8003f9a:	20a0      	movs	r0, #160	@ 0xa0
 8003f9c:	0149      	lsls	r1, r1, #5
 8003f9e:	05c0      	lsls	r0, r0, #23
 8003fa0:	f001 f866 	bl	8005070 <HAL_GPIO_WritePin>

    HAL_Delay(BOARD_WAKEUP_TIME);   //start up time of TCXO
 8003fa4:	2005      	movs	r0, #5
 8003fa6:	f7ff fd6e 	bl	8003a86 <HAL_Delay>
  }
  else
  {
    HAL_GPIO_WritePin(RADIO_TCXO_VCC_PORT, RADIO_TCXO_VCC_PIN, GPIO_PIN_RESET);
  }
}
 8003faa:	bd10      	pop	{r4, pc}
    HAL_GPIO_WritePin(RADIO_TCXO_VCC_PORT, RADIO_TCXO_VCC_PIN, GPIO_PIN_RESET);
 8003fac:	2180      	movs	r1, #128	@ 0x80
 8003fae:	20a0      	movs	r0, #160	@ 0xa0
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	0149      	lsls	r1, r1, #5
 8003fb4:	05c0      	lsls	r0, r0, #23
 8003fb6:	f001 f85b 	bl	8005070 <HAL_GPIO_WritePin>
}
 8003fba:	e7f6      	b.n	8003faa <CMWX1ZZABZ0XX_RADIO_SetXO+0x1a>

08003fbc <CMWX1ZZABZ0XX_RADIO_IoInit>:
void CMWX1ZZABZ0XX_RADIO_IoInit(void)
{
  GPIO_InitTypeDef initStruct = {0};
 8003fbc:	2300      	movs	r3, #0
{
 8003fbe:	b5f0      	push	{r4, r5, r6, r7, lr}
  SPI_HandleTypeDef dummy_hspi;

  /* Enable DIO GPIO clock */
  RADIO_DIO_0_GPIO_CLK_ENABLE();
 8003fc0:	2602      	movs	r6, #2
  RADIO_DIO_1_GPIO_CLK_ENABLE();
  RADIO_DIO_2_GPIO_CLK_ENABLE();
  RADIO_DIO_3_GPIO_CLK_ENABLE();
 8003fc2:	2204      	movs	r2, #4
{
 8003fc4:	b097      	sub	sp, #92	@ 0x5c
  RADIO_DIO_0_GPIO_CLK_ENABLE();
 8003fc6:	4c65      	ldr	r4, [pc, #404]	@ (800415c <CMWX1ZZABZ0XX_RADIO_IoInit+0x1a0>)
  GPIO_InitTypeDef initStruct = {0};
 8003fc8:	9310      	str	r3, [sp, #64]	@ 0x40
  RADIO_DIO_0_GPIO_CLK_ENABLE();
 8003fca:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
  RADIO_DIO_5_GPIO_CLK_ENABLE();
#endif

  /* DIO IO Init */
  initStruct.Pull = GPIO_PULLDOWN;
  initStruct.Speed = GPIO_SPEED_HIGH;
 8003fcc:	2103      	movs	r1, #3
  RADIO_DIO_0_GPIO_CLK_ENABLE();
 8003fce:	4333      	orrs	r3, r6
 8003fd0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003fd2:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c

  for (uint32_t i = 0; i < RADIO_DIOn ; i++)
  {
    initStruct.Mode = RADIO_DIO_MODE[i];
    initStruct.Pin = RADIO_DIO_PIN[i];
 8003fd4:	2501      	movs	r5, #1
  RADIO_DIO_0_GPIO_CLK_ENABLE();
 8003fd6:	4033      	ands	r3, r6
 8003fd8:	9301      	str	r3, [sp, #4]
 8003fda:	9b01      	ldr	r3, [sp, #4]
  RADIO_DIO_1_GPIO_CLK_ENABLE();
 8003fdc:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
    initStruct.Mode = RADIO_DIO_MODE[i];
 8003fde:	4f60      	ldr	r7, [pc, #384]	@ (8004160 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1a4>)
  RADIO_DIO_1_GPIO_CLK_ENABLE();
 8003fe0:	4333      	orrs	r3, r6
 8003fe2:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003fe4:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 8003fe6:	a80c      	add	r0, sp, #48	@ 0x30
  RADIO_DIO_1_GPIO_CLK_ENABLE();
 8003fe8:	4033      	ands	r3, r6
 8003fea:	9302      	str	r3, [sp, #8]
 8003fec:	9b02      	ldr	r3, [sp, #8]
  RADIO_DIO_2_GPIO_CLK_ENABLE();
 8003fee:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8003ff0:	4333      	orrs	r3, r6
 8003ff2:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003ff4:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8003ff6:	4033      	ands	r3, r6
 8003ff8:	9303      	str	r3, [sp, #12]
 8003ffa:	9b03      	ldr	r3, [sp, #12]
  RADIO_DIO_3_GPIO_CLK_ENABLE();
 8003ffc:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8003ffe:	4313      	orrs	r3, r2
 8004000:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004002:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
  initStruct.Speed = GPIO_SPEED_HIGH;
 8004004:	910f      	str	r1, [sp, #60]	@ 0x3c
  RADIO_DIO_3_GPIO_CLK_ENABLE();
 8004006:	4013      	ands	r3, r2
 8004008:	9304      	str	r3, [sp, #16]
 800400a:	9b04      	ldr	r3, [sp, #16]
    initStruct.Pin = RADIO_DIO_PIN[i];
 800400c:	2310      	movs	r3, #16
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 800400e:	0001      	movs	r1, r0
 8004010:	4854      	ldr	r0, [pc, #336]	@ (8004164 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1a8>)
    initStruct.Mode = RADIO_DIO_MODE[i];
 8004012:	970d      	str	r7, [sp, #52]	@ 0x34
    initStruct.Pin = RADIO_DIO_PIN[i];
 8004014:	930c      	str	r3, [sp, #48]	@ 0x30
  initStruct.Pull = GPIO_PULLDOWN;
 8004016:	960e      	str	r6, [sp, #56]	@ 0x38
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 8004018:	f000 feec 	bl	8004df4 <HAL_GPIO_Init>
    initStruct.Mode = RADIO_DIO_MODE[i];
 800401c:	4b52      	ldr	r3, [pc, #328]	@ (8004168 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1ac>)
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 800401e:	a80c      	add	r0, sp, #48	@ 0x30
 8004020:	0001      	movs	r1, r0
 8004022:	4850      	ldr	r0, [pc, #320]	@ (8004164 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1a8>)
    initStruct.Mode = RADIO_DIO_MODE[i];
 8004024:	930d      	str	r3, [sp, #52]	@ 0x34
    initStruct.Pin = RADIO_DIO_PIN[i];
 8004026:	960c      	str	r6, [sp, #48]	@ 0x30
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 8004028:	f000 fee4 	bl	8004df4 <HAL_GPIO_Init>
 800402c:	a80c      	add	r0, sp, #48	@ 0x30
 800402e:	0001      	movs	r1, r0
 8004030:	484c      	ldr	r0, [pc, #304]	@ (8004164 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1a8>)
    initStruct.Mode = RADIO_DIO_MODE[i];
 8004032:	970d      	str	r7, [sp, #52]	@ 0x34
    initStruct.Pin = RADIO_DIO_PIN[i];
 8004034:	950c      	str	r5, [sp, #48]	@ 0x30
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 8004036:	f000 fedd 	bl	8004df4 <HAL_GPIO_Init>
    initStruct.Pin = RADIO_DIO_PIN[i];
 800403a:	2380      	movs	r3, #128	@ 0x80
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 800403c:	a80c      	add	r0, sp, #48	@ 0x30
 800403e:	0001      	movs	r1, r0
    initStruct.Pin = RADIO_DIO_PIN[i];
 8004040:	019b      	lsls	r3, r3, #6
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 8004042:	484a      	ldr	r0, [pc, #296]	@ (800416c <CMWX1ZZABZ0XX_RADIO_IoInit+0x1b0>)
    initStruct.Mode = RADIO_DIO_MODE[i];
 8004044:	970d      	str	r7, [sp, #52]	@ 0x34
    initStruct.Pin = RADIO_DIO_PIN[i];
 8004046:	930c      	str	r3, [sp, #48]	@ 0x30
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 8004048:	f000 fed4 	bl	8004df4 <HAL_GPIO_Init>
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
  /* Enable Peripheral clock */
  RADIO_SPI_SCK_GPIO_CLK_ENABLE();
 800404c:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;

  GPIO_InitStruct.Alternate = RADIO_SPI_MOSI_GPIO_AF;
  GPIO_InitStruct.Pin = RADIO_SPI_MOSI_GPIO_PIN;
  HAL_GPIO_Init(RADIO_SPI_MOSI_GPIO_PORT, &GPIO_InitStruct);
 800404e:	27a0      	movs	r7, #160	@ 0xa0
  RADIO_SPI_SCK_GPIO_CLK_ENABLE();
 8004050:	4333      	orrs	r3, r6
 8004052:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004054:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004056:	2103      	movs	r1, #3
  RADIO_SPI_SCK_GPIO_CLK_ENABLE();
 8004058:	4033      	ands	r3, r6
 800405a:	9309      	str	r3, [sp, #36]	@ 0x24
 800405c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
  RADIO_SPI_MOSI_GPIO_CLK_ENABLE();
 800405e:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
  HAL_GPIO_Init(RADIO_SPI_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8004060:	05ff      	lsls	r7, r7, #23
  RADIO_SPI_MOSI_GPIO_CLK_ENABLE();
 8004062:	432b      	orrs	r3, r5
 8004064:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004066:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
  HAL_GPIO_Init(RADIO_SPI_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8004068:	a811      	add	r0, sp, #68	@ 0x44
  RADIO_SPI_MOSI_GPIO_CLK_ENABLE();
 800406a:	402b      	ands	r3, r5
 800406c:	930a      	str	r3, [sp, #40]	@ 0x28
 800406e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
  RADIO_SPI_MISO_GPIO_CLK_ENABLE();
 8004070:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8004072:	432b      	orrs	r3, r5
 8004074:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004076:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004078:	9114      	str	r1, [sp, #80]	@ 0x50
  RADIO_SPI_MISO_GPIO_CLK_ENABLE();
 800407a:	402b      	ands	r3, r5
 800407c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800407e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
  GPIO_InitStruct.Alternate = RADIO_SPI_MOSI_GPIO_AF;
 8004080:	2300      	movs	r3, #0
  HAL_GPIO_Init(RADIO_SPI_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8004082:	0001      	movs	r1, r0
  GPIO_InitStruct.Alternate = RADIO_SPI_MOSI_GPIO_AF;
 8004084:	9315      	str	r3, [sp, #84]	@ 0x54
  HAL_GPIO_Init(RADIO_SPI_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8004086:	0038      	movs	r0, r7
  GPIO_InitStruct.Pin = RADIO_SPI_MOSI_GPIO_PIN;
 8004088:	3380      	adds	r3, #128	@ 0x80
 800408a:	9311      	str	r3, [sp, #68]	@ 0x44
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800408c:	9612      	str	r6, [sp, #72]	@ 0x48
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800408e:	9613      	str	r6, [sp, #76]	@ 0x4c
  HAL_GPIO_Init(RADIO_SPI_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8004090:	f000 feb0 	bl	8004df4 <HAL_GPIO_Init>
  GPIO_InitStruct.Alternate = RADIO_SPI_MISO_GPIO_AF;
 8004094:	2300      	movs	r3, #0
  GPIO_InitStruct.Pin = RADIO_SPI_MISO_GPIO_PIN;
  HAL_GPIO_Init(RADIO_SPI_MISO_GPIO_PORT, &GPIO_InitStruct);
 8004096:	a811      	add	r0, sp, #68	@ 0x44
 8004098:	0001      	movs	r1, r0
  GPIO_InitStruct.Alternate = RADIO_SPI_MISO_GPIO_AF;
 800409a:	9315      	str	r3, [sp, #84]	@ 0x54
  HAL_GPIO_Init(RADIO_SPI_MISO_GPIO_PORT, &GPIO_InitStruct);
 800409c:	0038      	movs	r0, r7
  GPIO_InitStruct.Pin = RADIO_SPI_MISO_GPIO_PIN;
 800409e:	3340      	adds	r3, #64	@ 0x40
 80040a0:	9311      	str	r3, [sp, #68]	@ 0x44
  HAL_GPIO_Init(RADIO_SPI_MISO_GPIO_PORT, &GPIO_InitStruct);
 80040a2:	f000 fea7 	bl	8004df4 <HAL_GPIO_Init>
  GPIO_InitStruct.Alternate = RADIO_SPI_SCK_GPIO_AF;
 80040a6:	2300      	movs	r3, #0
  GPIO_InitStruct.Pin = RADIO_SPI_SCK_GPIO_PIN;
  HAL_GPIO_Init(RADIO_SPI_SCK_GPIO_PORT, &GPIO_InitStruct);
 80040a8:	a811      	add	r0, sp, #68	@ 0x44
 80040aa:	0001      	movs	r1, r0
  GPIO_InitStruct.Alternate = RADIO_SPI_SCK_GPIO_AF;
 80040ac:	9315      	str	r3, [sp, #84]	@ 0x54
  HAL_GPIO_Init(RADIO_SPI_SCK_GPIO_PORT, &GPIO_InitStruct);
 80040ae:	482d      	ldr	r0, [pc, #180]	@ (8004164 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1a8>)
  GPIO_InitStruct.Pin = RADIO_SPI_SCK_GPIO_PIN;
 80040b0:	3308      	adds	r3, #8
 80040b2:	9311      	str	r3, [sp, #68]	@ 0x44
  HAL_GPIO_Init(RADIO_SPI_SCK_GPIO_PORT, &GPIO_InitStruct);
 80040b4:	f000 fe9e 	bl	8004df4 <HAL_GPIO_Init>
  initStruct.Pin = RADIO_NSS_PIN;
 80040b8:	2080      	movs	r0, #128	@ 0x80
 80040ba:	0200      	lsls	r0, r0, #8
 80040bc:	900c      	str	r0, [sp, #48]	@ 0x30
  initStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80040be:	950d      	str	r5, [sp, #52]	@ 0x34
  initStruct.Pull = GPIO_PULLUP;
 80040c0:	950e      	str	r5, [sp, #56]	@ 0x38
  RADIO_NSS_CLK_ENABLE();
 80040c2:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
  HAL_GPIO_Init(RADIO_NSS_PORT, &initStruct);
 80040c4:	a80c      	add	r0, sp, #48	@ 0x30
  RADIO_NSS_CLK_ENABLE();
 80040c6:	432b      	orrs	r3, r5
 80040c8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80040ca:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
  HAL_GPIO_Init(RADIO_NSS_PORT, &initStruct);
 80040cc:	0001      	movs	r1, r0
  RADIO_NSS_CLK_ENABLE();
 80040ce:	402b      	ands	r3, r5
  HAL_GPIO_Init(RADIO_NSS_PORT, &initStruct);
 80040d0:	0038      	movs	r0, r7
  RADIO_NSS_CLK_ENABLE();
 80040d2:	9305      	str	r3, [sp, #20]
 80040d4:	9b05      	ldr	r3, [sp, #20]
  HAL_GPIO_Init(RADIO_NSS_PORT, &initStruct);
 80040d6:	f000 fe8d 	bl	8004df4 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(RADIO_NSS_PORT, RADIO_NSS_PIN, GPIO_PIN_SET);
 80040da:	2180      	movs	r1, #128	@ 0x80
 80040dc:	002a      	movs	r2, r5
 80040de:	0038      	movs	r0, r7
 80040e0:	0209      	lsls	r1, r1, #8
 80040e2:	f000 ffc5 	bl	8005070 <HAL_GPIO_WritePin>
  RADIO_ANT_SWITCH_CLK_ENABLE_TX_BOOST();
 80040e6:	2204      	movs	r2, #4
  RADIO_TCXO_VCC_CLK_ENABLE();
 80040e8:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
  initStruct.Speed = GPIO_SPEED_HIGH;
 80040ea:	2103      	movs	r1, #3
  RADIO_TCXO_VCC_CLK_ENABLE();
 80040ec:	432b      	orrs	r3, r5
 80040ee:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80040f0:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
  HAL_GPIO_Init(RADIO_TCXO_VCC_PORT, &initStruct);
 80040f2:	0038      	movs	r0, r7
  RADIO_TCXO_VCC_CLK_ENABLE();
 80040f4:	402b      	ands	r3, r5
 80040f6:	9306      	str	r3, [sp, #24]
 80040f8:	9b06      	ldr	r3, [sp, #24]
  RADIO_ANT_SWITCH_CLK_ENABLE_RX();
 80040fa:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80040fc:	432b      	orrs	r3, r5
 80040fe:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004100:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8004102:	402b      	ands	r3, r5
 8004104:	9307      	str	r3, [sp, #28]
 8004106:	9b07      	ldr	r3, [sp, #28]
  RADIO_ANT_SWITCH_CLK_ENABLE_TX_BOOST();
 8004108:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800410a:	4313      	orrs	r3, r2
 800410c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800410e:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8004110:	4013      	ands	r3, r2
 8004112:	9308      	str	r3, [sp, #32]
 8004114:	9b08      	ldr	r3, [sp, #32]
  RADIO_ANT_SWITCH_CLK_ENABLE_TX_RFO();
 8004116:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8004118:	4313      	orrs	r3, r2
 800411a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800411c:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800411e:	0014      	movs	r4, r2
 8004120:	4013      	ands	r3, r2
 8004122:	9311      	str	r3, [sp, #68]	@ 0x44
 8004124:	9b11      	ldr	r3, [sp, #68]	@ 0x44
  initStruct.Pull = GPIO_NOPULL;
 8004126:	2300      	movs	r3, #0
 8004128:	930e      	str	r3, [sp, #56]	@ 0x38
  initStruct.Pin = RADIO_TCXO_VCC_PIN;
 800412a:	2380      	movs	r3, #128	@ 0x80
  initStruct.Speed = GPIO_SPEED_HIGH;
 800412c:	910f      	str	r1, [sp, #60]	@ 0x3c
  initStruct.Pin = RADIO_TCXO_VCC_PIN;
 800412e:	015b      	lsls	r3, r3, #5
  HAL_GPIO_Init(RADIO_TCXO_VCC_PORT, &initStruct);
 8004130:	a90c      	add	r1, sp, #48	@ 0x30
  initStruct.Pin = RADIO_TCXO_VCC_PIN;
 8004132:	930c      	str	r3, [sp, #48]	@ 0x30
  initStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004134:	950d      	str	r5, [sp, #52]	@ 0x34
  HAL_GPIO_Init(RADIO_TCXO_VCC_PORT, &initStruct);
 8004136:	f000 fe5d 	bl	8004df4 <HAL_GPIO_Init>
  HAL_GPIO_Init(RADIO_ANT_SWITCH_PORT_RX, &initStruct);
 800413a:	0038      	movs	r0, r7
 800413c:	a90c      	add	r1, sp, #48	@ 0x30
  initStruct.Pin = RADIO_ANT_SWITCH_PIN_RX;
 800413e:	960c      	str	r6, [sp, #48]	@ 0x30
  HAL_GPIO_Init(RADIO_ANT_SWITCH_PORT_RX, &initStruct);
 8004140:	f000 fe58 	bl	8004df4 <HAL_GPIO_Init>
  HAL_GPIO_Init(RADIO_ANT_SWITCH_PORT_TX_BOOST, &initStruct);
 8004144:	a90c      	add	r1, sp, #48	@ 0x30
 8004146:	4809      	ldr	r0, [pc, #36]	@ (800416c <CMWX1ZZABZ0XX_RADIO_IoInit+0x1b0>)
  initStruct.Pin = RADIO_ANT_SWITCH_PIN_TX_BOOST;
 8004148:	960c      	str	r6, [sp, #48]	@ 0x30
  HAL_GPIO_Init(RADIO_ANT_SWITCH_PORT_TX_BOOST, &initStruct);
 800414a:	f000 fe53 	bl	8004df4 <HAL_GPIO_Init>
  HAL_GPIO_Init(RADIO_ANT_SWITCH_PORT_TX_RFO, &initStruct);
 800414e:	4807      	ldr	r0, [pc, #28]	@ (800416c <CMWX1ZZABZ0XX_RADIO_IoInit+0x1b0>)
 8004150:	a90c      	add	r1, sp, #48	@ 0x30
  initStruct.Pin = RADIO_ANT_SWITCH_PIN_TX_RFO;
 8004152:	940c      	str	r4, [sp, #48]	@ 0x30
  HAL_GPIO_Init(RADIO_ANT_SWITCH_PORT_TX_RFO, &initStruct);
 8004154:	f000 fe4e 	bl	8004df4 <HAL_GPIO_Init>
}
 8004158:	b017      	add	sp, #92	@ 0x5c
 800415a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800415c:	40021000 	.word	0x40021000
 8004160:	10110000 	.word	0x10110000
 8004164:	50000400 	.word	0x50000400
 8004168:	10310000 	.word	0x10310000
 800416c:	50000800 	.word	0x50000800

08004170 <CMWX1ZZABZ0XX_RADIO_IoDeInit>:
{
 8004170:	b5f0      	push	{r4, r5, r6, r7, lr}
  GPIO_InitTypeDef initStruct = {0};
 8004172:	2608      	movs	r6, #8
{
 8004174:	b08b      	sub	sp, #44	@ 0x2c
  GPIO_InitTypeDef initStruct = {0};
 8004176:	0032      	movs	r2, r6
 8004178:	2100      	movs	r1, #0
 800417a:	a803      	add	r0, sp, #12
 800417c:	f00b fe18 	bl	800fdb0 <memset>
  initStruct.Pull = GPIO_PULLDOWN;
 8004180:	2502      	movs	r5, #2
    initStruct.Pin = RADIO_DIO_PIN[i];
 8004182:	2310      	movs	r3, #16
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 8004184:	4c22      	ldr	r4, [pc, #136]	@ (8004210 <CMWX1ZZABZ0XX_RADIO_IoDeInit+0xa0>)
    initStruct.Mode = RADIO_DIO_MODE[i];
 8004186:	4f23      	ldr	r7, [pc, #140]	@ (8004214 <CMWX1ZZABZ0XX_RADIO_IoDeInit+0xa4>)
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 8004188:	4669      	mov	r1, sp
 800418a:	0020      	movs	r0, r4
  initStruct.Pull = GPIO_PULLDOWN;
 800418c:	9502      	str	r5, [sp, #8]
    initStruct.Mode = RADIO_DIO_MODE[i];
 800418e:	9701      	str	r7, [sp, #4]
    initStruct.Pin = RADIO_DIO_PIN[i];
 8004190:	9300      	str	r3, [sp, #0]
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 8004192:	f000 fe2f 	bl	8004df4 <HAL_GPIO_Init>
    initStruct.Mode = RADIO_DIO_MODE[i];
 8004196:	4b20      	ldr	r3, [pc, #128]	@ (8004218 <CMWX1ZZABZ0XX_RADIO_IoDeInit+0xa8>)
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 8004198:	4669      	mov	r1, sp
 800419a:	0020      	movs	r0, r4
    initStruct.Mode = RADIO_DIO_MODE[i];
 800419c:	9301      	str	r3, [sp, #4]
    initStruct.Pin = RADIO_DIO_PIN[i];
 800419e:	9500      	str	r5, [sp, #0]
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 80041a0:	f000 fe28 	bl	8004df4 <HAL_GPIO_Init>
    initStruct.Pin = RADIO_DIO_PIN[i];
 80041a4:	2301      	movs	r3, #1
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 80041a6:	4669      	mov	r1, sp
 80041a8:	0020      	movs	r0, r4
    initStruct.Mode = RADIO_DIO_MODE[i];
 80041aa:	9701      	str	r7, [sp, #4]
    initStruct.Pin = RADIO_DIO_PIN[i];
 80041ac:	9300      	str	r3, [sp, #0]
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 80041ae:	f000 fe21 	bl	8004df4 <HAL_GPIO_Init>
    initStruct.Pin = RADIO_DIO_PIN[i];
 80041b2:	2380      	movs	r3, #128	@ 0x80
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 80041b4:	4669      	mov	r1, sp
    initStruct.Pin = RADIO_DIO_PIN[i];
 80041b6:	019b      	lsls	r3, r3, #6
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 80041b8:	4818      	ldr	r0, [pc, #96]	@ (800421c <CMWX1ZZABZ0XX_RADIO_IoDeInit+0xac>)
    initStruct.Mode = RADIO_DIO_MODE[i];
 80041ba:	9701      	str	r7, [sp, #4]
    initStruct.Pin = RADIO_DIO_PIN[i];
 80041bc:	9300      	str	r3, [sp, #0]
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 80041be:	f000 fe19 	bl	8004df4 <HAL_GPIO_Init>
  /* DeInitialize Peripheral GPIOs */
  /* Instead of using HAL_GPIO_DeInit() which set ANALOG mode
     it's preferred to set in OUTPUT_PP mode, with the pins set to 0 */

  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80041c2:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Pin = RADIO_SPI_MOSI_GPIO_PIN;
  HAL_GPIO_Init(RADIO_SPI_MOSI_GPIO_PORT, &GPIO_InitStruct);
 80041c4:	25a0      	movs	r5, #160	@ 0xa0
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80041c6:	2301      	movs	r3, #1
  GPIO_InitStruct.Pin = RADIO_SPI_MOSI_GPIO_PIN;
 80041c8:	2780      	movs	r7, #128	@ 0x80
  HAL_GPIO_Init(RADIO_SPI_MOSI_GPIO_PORT, &GPIO_InitStruct);
 80041ca:	05ed      	lsls	r5, r5, #23
 80041cc:	0028      	movs	r0, r5
 80041ce:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80041d0:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pin = RADIO_SPI_MOSI_GPIO_PIN;
 80041d2:	9705      	str	r7, [sp, #20]
  HAL_GPIO_Init(RADIO_SPI_MOSI_GPIO_PORT, &GPIO_InitStruct);
 80041d4:	f000 fe0e 	bl	8004df4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = RADIO_SPI_MISO_GPIO_PIN;
 80041d8:	2340      	movs	r3, #64	@ 0x40
  HAL_GPIO_Init(RADIO_SPI_MISO_GPIO_PORT, &GPIO_InitStruct);
 80041da:	0028      	movs	r0, r5
 80041dc:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin = RADIO_SPI_MISO_GPIO_PIN;
 80041de:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(RADIO_SPI_MISO_GPIO_PORT, &GPIO_InitStruct);
 80041e0:	f000 fe08 	bl	8004df4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = RADIO_SPI_SCK_GPIO_PIN;
  HAL_GPIO_Init(RADIO_SPI_SCK_GPIO_PORT, &GPIO_InitStruct);
 80041e4:	0020      	movs	r0, r4
 80041e6:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin = RADIO_SPI_SCK_GPIO_PIN;
 80041e8:	9605      	str	r6, [sp, #20]
  HAL_GPIO_Init(RADIO_SPI_SCK_GPIO_PORT, &GPIO_InitStruct);
 80041ea:	f000 fe03 	bl	8004df4 <HAL_GPIO_Init>


  HAL_GPIO_WritePin(RADIO_SPI_MOSI_GPIO_PORT, RADIO_SPI_MOSI_GPIO_PIN, GPIO_PIN_RESET);
 80041ee:	0039      	movs	r1, r7
 80041f0:	0028      	movs	r0, r5
 80041f2:	2200      	movs	r2, #0
 80041f4:	f000 ff3c 	bl	8005070 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RADIO_SPI_MISO_GPIO_PORT, RADIO_SPI_MISO_GPIO_PIN, GPIO_PIN_RESET);
 80041f8:	0028      	movs	r0, r5
 80041fa:	2200      	movs	r2, #0
 80041fc:	2140      	movs	r1, #64	@ 0x40
 80041fe:	f000 ff37 	bl	8005070 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RADIO_SPI_SCK_GPIO_PORT, RADIO_SPI_SCK_GPIO_PIN, GPIO_PIN_RESET);
 8004202:	2200      	movs	r2, #0
 8004204:	0031      	movs	r1, r6
 8004206:	0020      	movs	r0, r4
 8004208:	f000 ff32 	bl	8005070 <HAL_GPIO_WritePin>
}
 800420c:	b00b      	add	sp, #44	@ 0x2c
 800420e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004210:	50000400 	.word	0x50000400
 8004214:	10110000 	.word	0x10110000
 8004218:	10310000 	.word	0x10310000
 800421c:	50000800 	.word	0x50000800

08004220 <CMWX1ZZABZ0XX_RADIO_IoIrqInit>:
{
 8004220:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004222:	9000      	str	r0, [sp, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004224:	f3ef 8310 	mrs	r3, PRIMASK
 8004228:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 800422a:	b672      	cpsid	i
  for (uint32_t i = 0; i < RADIO_DIOn ; i++)
 800422c:	2400      	movs	r4, #0
    HAL_EXTI_GetHandle(&hRADIO_DIO_exti[i], RADIO_DIO_EXTI_LINE[i]);
 800422e:	4e11      	ldr	r6, [pc, #68]	@ (8004274 <CMWX1ZZABZ0XX_RADIO_IoIrqInit+0x54>)
 8004230:	4d11      	ldr	r5, [pc, #68]	@ (8004278 <CMWX1ZZABZ0XX_RADIO_IoIrqInit+0x58>)
 8004232:	00e3      	lsls	r3, r4, #3
 8004234:	18f6      	adds	r6, r6, r3
 8004236:	00a7      	lsls	r7, r4, #2
 8004238:	5979      	ldr	r1, [r7, r5]
 800423a:	0030      	movs	r0, r6
 800423c:	f000 fdc1 	bl	8004dc2 <HAL_EXTI_GetHandle>
    HAL_EXTI_RegisterCallback(&hRADIO_DIO_exti[i], HAL_EXTI_COMMON_CB_ID, irqHandlers[i]);
 8004240:	9b00      	ldr	r3, [sp, #0]
 8004242:	2100      	movs	r1, #0
 8004244:	59da      	ldr	r2, [r3, r7]
 8004246:	0030      	movs	r0, r6
 8004248:	f000 fdb4 	bl	8004db4 <HAL_EXTI_RegisterCallback>
    HAL_NVIC_SetPriority(RADIO_DIO_IRQn[i], RADIO_DIO_IT_PRIO[i], 0x00);
 800424c:	002b      	movs	r3, r5
 800424e:	3310      	adds	r3, #16
 8004250:	56e6      	ldrsb	r6, [r4, r3]
 8004252:	3514      	adds	r5, #20
 8004254:	2200      	movs	r2, #0
 8004256:	0030      	movs	r0, r6
 8004258:	5979      	ldr	r1, [r7, r5]
 800425a:	f000 fc25 	bl	8004aa8 <HAL_NVIC_SetPriority>
  for (uint32_t i = 0; i < RADIO_DIOn ; i++)
 800425e:	3401      	adds	r4, #1
    HAL_NVIC_EnableIRQ(RADIO_DIO_IRQn[i]);
 8004260:	0030      	movs	r0, r6
 8004262:	f000 fc4b 	bl	8004afc <HAL_NVIC_EnableIRQ>
  for (uint32_t i = 0; i < RADIO_DIOn ; i++)
 8004266:	2c04      	cmp	r4, #4
 8004268:	d1e1      	bne.n	800422e <CMWX1ZZABZ0XX_RADIO_IoIrqInit+0xe>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800426a:	9b01      	ldr	r3, [sp, #4]
 800426c:	f383 8810 	msr	PRIMASK, r3
}
 8004270:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8004272:	46c0      	nop			@ (mov r8, r8)
 8004274:	20000820 	.word	0x20000820
 8004278:	08010400 	.word	0x08010400

0800427c <CMWX1ZZABZ0XX_RADIO_GetPaSelect>:
}
 800427c:	2000      	movs	r0, #0
 800427e:	4770      	bx	lr

08004280 <CMWX1ZZABZ0XX_RADIO_SetAntSw>:
  switch (state)
 8004280:	3801      	subs	r0, #1
{
 8004282:	b510      	push	{r4, lr}
  switch (state)
 8004284:	2803      	cmp	r0, #3
 8004286:	d811      	bhi.n	80042ac <CMWX1ZZABZ0XX_RADIO_SetAntSw+0x2c>
 8004288:	f7fb ff50 	bl	800012c <__gnu_thumb1_case_uqi>
 800428c:	080d0902 	.word	0x080d0902
      HAL_GPIO_WritePin(RADIO_ANT_SWITCH_PORT_RX, RADIO_ANT_SWITCH_PIN_RX, GPIO_PIN_SET);
 8004290:	20a0      	movs	r0, #160	@ 0xa0
 8004292:	2201      	movs	r2, #1
 8004294:	2102      	movs	r1, #2
 8004296:	05c0      	lsls	r0, r0, #23
      HAL_GPIO_WritePin(RADIO_ANT_SWITCH_PORT_TX_BOOST, RADIO_ANT_SWITCH_PIN_TX_BOOST, GPIO_PIN_RESET);
 8004298:	f000 feea 	bl	8005070 <HAL_GPIO_WritePin>
}
 800429c:	bd10      	pop	{r4, pc}
      HAL_GPIO_WritePin(RADIO_ANT_SWITCH_PORT_TX_RFO, RADIO_ANT_SWITCH_PIN_TX_RFO, GPIO_PIN_SET);
 800429e:	2201      	movs	r2, #1
 80042a0:	2104      	movs	r1, #4
      HAL_GPIO_WritePin(RADIO_ANT_SWITCH_PORT_TX_BOOST, RADIO_ANT_SWITCH_PIN_TX_BOOST, GPIO_PIN_RESET);
 80042a2:	4809      	ldr	r0, [pc, #36]	@ (80042c8 <CMWX1ZZABZ0XX_RADIO_SetAntSw+0x48>)
 80042a4:	e7f8      	b.n	8004298 <CMWX1ZZABZ0XX_RADIO_SetAntSw+0x18>
      HAL_GPIO_WritePin(RADIO_ANT_SWITCH_PORT_TX_BOOST, RADIO_ANT_SWITCH_PIN_TX_BOOST, GPIO_PIN_SET);
 80042a6:	2201      	movs	r2, #1
      HAL_GPIO_WritePin(RADIO_ANT_SWITCH_PORT_TX_BOOST, RADIO_ANT_SWITCH_PIN_TX_BOOST, GPIO_PIN_RESET);
 80042a8:	2102      	movs	r1, #2
 80042aa:	e7fa      	b.n	80042a2 <CMWX1ZZABZ0XX_RADIO_SetAntSw+0x22>
      HAL_GPIO_WritePin(RADIO_ANT_SWITCH_PORT_RX, RADIO_ANT_SWITCH_PIN_RX, GPIO_PIN_RESET);
 80042ac:	20a0      	movs	r0, #160	@ 0xa0
 80042ae:	2200      	movs	r2, #0
 80042b0:	2102      	movs	r1, #2
 80042b2:	05c0      	lsls	r0, r0, #23
 80042b4:	f000 fedc 	bl	8005070 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RADIO_ANT_SWITCH_PORT_TX_RFO, RADIO_ANT_SWITCH_PIN_TX_RFO, GPIO_PIN_RESET);
 80042b8:	2200      	movs	r2, #0
 80042ba:	2104      	movs	r1, #4
 80042bc:	4802      	ldr	r0, [pc, #8]	@ (80042c8 <CMWX1ZZABZ0XX_RADIO_SetAntSw+0x48>)
 80042be:	f000 fed7 	bl	8005070 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RADIO_ANT_SWITCH_PORT_TX_BOOST, RADIO_ANT_SWITCH_PIN_TX_BOOST, GPIO_PIN_RESET);
 80042c2:	2200      	movs	r2, #0
 80042c4:	e7f0      	b.n	80042a8 <CMWX1ZZABZ0XX_RADIO_SetAntSw+0x28>
 80042c6:	46c0      	nop			@ (mov r8, r8)
 80042c8:	50000800 	.word	0x50000800

080042cc <CMWX1ZZABZ0XX_RADIO_CheckRfFrequency>:
}
 80042cc:	2001      	movs	r0, #1
 80042ce:	4770      	bx	lr

080042d0 <CMWX1ZZABZ0XX_RADIO_Reset>:
{
 80042d0:	b530      	push	{r4, r5, lr}
 80042d2:	b087      	sub	sp, #28
  GPIO_InitTypeDef initStruct = { 0 };
 80042d4:	220c      	movs	r2, #12
 80042d6:	2100      	movs	r1, #0
 80042d8:	a803      	add	r0, sp, #12
 80042da:	f00b fd69 	bl	800fdb0 <memset>
  initStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80042de:	2401      	movs	r4, #1
  initStruct.Speed = GPIO_SPEED_HIGH;
 80042e0:	2303      	movs	r3, #3
  HAL_GPIO_Init(RADIO_RESET_PORT, &initStruct);
 80042e2:	4d0d      	ldr	r5, [pc, #52]	@ (8004318 <CMWX1ZZABZ0XX_RADIO_Reset+0x48>)
 80042e4:	a901      	add	r1, sp, #4
 80042e6:	0028      	movs	r0, r5
  initStruct.Speed = GPIO_SPEED_HIGH;
 80042e8:	9304      	str	r3, [sp, #16]
  initStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80042ea:	9402      	str	r4, [sp, #8]
  initStruct.Pin = RADIO_RESET_PIN;
 80042ec:	9401      	str	r4, [sp, #4]
  HAL_GPIO_Init(RADIO_RESET_PORT, &initStruct);
 80042ee:	f000 fd81 	bl	8004df4 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(RADIO_RESET_PORT, RADIO_RESET_PIN, GPIO_PIN_RESET);
 80042f2:	2200      	movs	r2, #0
 80042f4:	0021      	movs	r1, r4
 80042f6:	0028      	movs	r0, r5
 80042f8:	f000 feba 	bl	8005070 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 80042fc:	0020      	movs	r0, r4
 80042fe:	f7ff fbc2 	bl	8003a86 <HAL_Delay>
  initStruct.Mode = GPIO_NOPULL;
 8004302:	2300      	movs	r3, #0
  HAL_GPIO_Init(RADIO_RESET_PORT, &initStruct);
 8004304:	0028      	movs	r0, r5
 8004306:	a901      	add	r1, sp, #4
  initStruct.Mode = GPIO_NOPULL;
 8004308:	9302      	str	r3, [sp, #8]
  HAL_GPIO_Init(RADIO_RESET_PORT, &initStruct);
 800430a:	f000 fd73 	bl	8004df4 <HAL_GPIO_Init>
  HAL_Delay(6);
 800430e:	2006      	movs	r0, #6
 8004310:	f7ff fbb9 	bl	8003a86 <HAL_Delay>
}
 8004314:	b007      	add	sp, #28
 8004316:	bd30      	pop	{r4, r5, pc}
 8004318:	50000800 	.word	0x50000800

0800431c <CMWX1ZZABZ0XX_RADIO_Bus_Init>:
{
 800431c:	b510      	push	{r4, lr}
  RADIO_SPI_Init();
 800431e:	f7ff fd85 	bl	8003e2c <BSP_SPI1_Init>
}
 8004322:	bd10      	pop	{r4, pc}

08004324 <CMWX1ZZABZ0XX_RADIO_SendRecv>:
{
 8004324:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  RADIO_SPI_SendRecv((uint8_t *) &txData, (uint8_t *) &rxData, 1);
 8004326:	240e      	movs	r4, #14
{
 8004328:	466b      	mov	r3, sp
  RADIO_SPI_SendRecv((uint8_t *) &txData, (uint8_t *) &rxData, 1);
 800432a:	446c      	add	r4, sp
{
 800432c:	80d8      	strh	r0, [r3, #6]
 800432e:	3306      	adds	r3, #6
  RADIO_SPI_SendRecv((uint8_t *) &txData, (uint8_t *) &rxData, 1);
 8004330:	2201      	movs	r2, #1
 8004332:	0021      	movs	r1, r4
 8004334:	0018      	movs	r0, r3
 8004336:	f7ff fd33 	bl	8003da0 <BSP_SPI1_SendRecv>
  return rxData;
 800433a:	8820      	ldrh	r0, [r4, #0]
}
 800433c:	b004      	add	sp, #16
 800433e:	bd10      	pop	{r4, pc}

08004340 <CMWX1ZZABZ0XX_RADIO_ChipSelect>:
{
 8004340:	0002      	movs	r2, r0
 8004342:	b510      	push	{r4, lr}
  if (state == 0)
 8004344:	2800      	cmp	r0, #0
 8004346:	d106      	bne.n	8004356 <CMWX1ZZABZ0XX_RADIO_ChipSelect+0x16>
    HAL_GPIO_WritePin(RADIO_NSS_PORT, RADIO_NSS_PIN, GPIO_PIN_SET);
 8004348:	2180      	movs	r1, #128	@ 0x80
 800434a:	20a0      	movs	r0, #160	@ 0xa0
 800434c:	0209      	lsls	r1, r1, #8
 800434e:	05c0      	lsls	r0, r0, #23
 8004350:	f000 fe8e 	bl	8005070 <HAL_GPIO_WritePin>
}
 8004354:	bd10      	pop	{r4, pc}
    HAL_GPIO_WritePin(RADIO_NSS_PORT, RADIO_NSS_PIN, GPIO_PIN_SET);
 8004356:	2201      	movs	r2, #1
 8004358:	e7f6      	b.n	8004348 <CMWX1ZZABZ0XX_RADIO_ChipSelect+0x8>
	...

0800435c <CMWX1ZZABZ0XX_RADIO_GetDio1PinState>:
{
 800435c:	b510      	push	{r4, lr}
  return HAL_GPIO_ReadPin(RADIO_DIO_1_PORT, RADIO_DIO_1_PIN);
 800435e:	2102      	movs	r1, #2
 8004360:	4801      	ldr	r0, [pc, #4]	@ (8004368 <CMWX1ZZABZ0XX_RADIO_GetDio1PinState+0xc>)
 8004362:	f000 fe7f 	bl	8005064 <HAL_GPIO_ReadPin>
}
 8004366:	bd10      	pop	{r4, pc}
 8004368:	50000400 	.word	0x50000400

0800436c <SystemInit>:
  * @retval None
  */
void SystemInit(void)
{
  /*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 800436c:	2280      	movs	r2, #128	@ 0x80
 800436e:	4b10      	ldr	r3, [pc, #64]	@ (80043b0 <SystemInit+0x44>)
 8004370:	0052      	lsls	r2, r2, #1
 8004372:	6819      	ldr	r1, [r3, #0]
 8004374:	430a      	orrs	r2, r1
 8004376:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 8004378:	68da      	ldr	r2, [r3, #12]
 800437a:	490e      	ldr	r1, [pc, #56]	@ (80043b4 <SystemInit+0x48>)
 800437c:	400a      	ands	r2, r1
 800437e:	60da      	str	r2, [r3, #12]

  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 8004380:	681a      	ldr	r2, [r3, #0]
 8004382:	490d      	ldr	r1, [pc, #52]	@ (80043b8 <SystemInit+0x4c>)
 8004384:	400a      	ands	r2, r1

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8004386:	2101      	movs	r1, #1
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 8004388:	601a      	str	r2, [r3, #0]
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 800438a:	689a      	ldr	r2, [r3, #8]
 800438c:	438a      	bics	r2, r1
 800438e:	609a      	str	r2, [r3, #8]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8004390:	681a      	ldr	r2, [r3, #0]
 8004392:	490a      	ldr	r1, [pc, #40]	@ (80043bc <SystemInit+0x50>)
 8004394:	400a      	ands	r2, r1
 8004396:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 8004398:	68da      	ldr	r2, [r3, #12]
 800439a:	4909      	ldr	r1, [pc, #36]	@ (80043c0 <SystemInit+0x54>)
 800439c:	400a      	ands	r2, r1
 800439e:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80043a0:	2200      	movs	r2, #0
 80043a2:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80043a4:	2280      	movs	r2, #128	@ 0x80
 80043a6:	4b07      	ldr	r3, [pc, #28]	@ (80043c4 <SystemInit+0x58>)
 80043a8:	0512      	lsls	r2, r2, #20
 80043aa:	609a      	str	r2, [r3, #8]
#endif
}
 80043ac:	4770      	bx	lr
 80043ae:	46c0      	nop			@ (mov r8, r8)
 80043b0:	40021000 	.word	0x40021000
 80043b4:	88ff400c 	.word	0x88ff400c
 80043b8:	fef6fff6 	.word	0xfef6fff6
 80043bc:	fffbffff 	.word	0xfffbffff
 80043c0:	ff02ffff 	.word	0xff02ffff
 80043c4:	e000ed00 	.word	0xe000ed00

080043c8 <HAL_Init>:
#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
#endif /* PREREAD_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80043c8:	2302      	movs	r3, #2
 80043ca:	4a08      	ldr	r2, [pc, #32]	@ (80043ec <HAL_Init+0x24>)
{
 80043cc:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80043ce:	6811      	ldr	r1, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80043d0:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80043d2:	430b      	orrs	r3, r1
 80043d4:	6013      	str	r3, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80043d6:	f7ff fb50 	bl	8003a7a <HAL_InitTick>
 80043da:	1e04      	subs	r4, r0, #0
 80043dc:	d103      	bne.n	80043e6 <HAL_Init+0x1e>
    status = HAL_ERROR;
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80043de:	f7ff f9fd 	bl	80037dc <HAL_MspInit>
  }

  /* Return function status */
  return status;
}
 80043e2:	0020      	movs	r0, r4
 80043e4:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 80043e6:	2401      	movs	r4, #1
 80043e8:	e7fb      	b.n	80043e2 <HAL_Init+0x1a>
 80043ea:	46c0      	nop			@ (mov r8, r8)
 80043ec:	40022000 	.word	0x40022000

080043f0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80043f0:	4a03      	ldr	r2, [pc, #12]	@ (8004400 <HAL_IncTick+0x10>)
 80043f2:	4b04      	ldr	r3, [pc, #16]	@ (8004404 <HAL_IncTick+0x14>)
 80043f4:	6811      	ldr	r1, [r2, #0]
 80043f6:	781b      	ldrb	r3, [r3, #0]
 80043f8:	185b      	adds	r3, r3, r1
 80043fa:	6013      	str	r3, [r2, #0]
}
 80043fc:	4770      	bx	lr
 80043fe:	46c0      	nop			@ (mov r8, r8)
 8004400:	20000840 	.word	0x20000840
 8004404:	20000094 	.word	0x20000094

08004408 <HAL_GetUIDw0>:
  * @brief  Returns the first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
  return(READ_REG(*((uint32_t *)UID_BASE)));
 8004408:	4b01      	ldr	r3, [pc, #4]	@ (8004410 <HAL_GetUIDw0+0x8>)
 800440a:	6818      	ldr	r0, [r3, #0]
}
 800440c:	4770      	bx	lr
 800440e:	46c0      	nop			@ (mov r8, r8)
 8004410:	1ff80050 	.word	0x1ff80050

08004414 <HAL_GetUIDw1>:
  * @brief  Returns the second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
  return(READ_REG(*((uint32_t *)(UID_BASE + 0x04U))));
 8004414:	4b01      	ldr	r3, [pc, #4]	@ (800441c <HAL_GetUIDw1+0x8>)
 8004416:	6818      	ldr	r0, [r3, #0]
}
 8004418:	4770      	bx	lr
 800441a:	46c0      	nop			@ (mov r8, r8)
 800441c:	1ff80054 	.word	0x1ff80054

08004420 <HAL_GetUIDw2>:
  * @brief  Returns the third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
  return(READ_REG(*((uint32_t *)(UID_BASE + 0x14U))));
 8004420:	4b01      	ldr	r3, [pc, #4]	@ (8004428 <HAL_GetUIDw2+0x8>)
 8004422:	6818      	ldr	r0, [r3, #0]
}
 8004424:	4770      	bx	lr
 8004426:	46c0      	nop			@ (mov r8, r8)
 8004428:	1ff80064 	.word	0x1ff80064

0800442c <HAL_DBGMCU_DisableDBGSleepMode>:
  * @brief  Disables the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGSleepMode(void)
{
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 800442c:	2101      	movs	r1, #1
 800442e:	4a02      	ldr	r2, [pc, #8]	@ (8004438 <HAL_DBGMCU_DisableDBGSleepMode+0xc>)
 8004430:	6853      	ldr	r3, [r2, #4]
 8004432:	438b      	bics	r3, r1
 8004434:	6053      	str	r3, [r2, #4]
}
 8004436:	4770      	bx	lr
 8004438:	40015800 	.word	0x40015800

0800443c <HAL_DBGMCU_DisableDBGStopMode>:
  * @brief  Disables the Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStopMode(void)
{
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 800443c:	2102      	movs	r1, #2
 800443e:	4a02      	ldr	r2, [pc, #8]	@ (8004448 <HAL_DBGMCU_DisableDBGStopMode+0xc>)
 8004440:	6853      	ldr	r3, [r2, #4]
 8004442:	438b      	bics	r3, r1
 8004444:	6053      	str	r3, [r2, #4]
}
 8004446:	4770      	bx	lr
 8004448:	40015800 	.word	0x40015800

0800444c <HAL_DBGMCU_DisableDBGStandbyMode>:
  * @brief  Disables the Debug Module during STANDBY mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStandbyMode(void)
{
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 800444c:	2104      	movs	r1, #4
 800444e:	4a02      	ldr	r2, [pc, #8]	@ (8004458 <HAL_DBGMCU_DisableDBGStandbyMode+0xc>)
 8004450:	6853      	ldr	r3, [r2, #4]
 8004452:	438b      	bics	r3, r1
 8004454:	6053      	str	r3, [r2, #4]
}
 8004456:	4770      	bx	lr
 8004458:	40015800 	.word	0x40015800

0800445c <ADC_DelayMicroSecond>:
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 800445c:	4b08      	ldr	r3, [pc, #32]	@ (8004480 <ADC_DelayMicroSecond+0x24>)
{
 800445e:	b513      	push	{r0, r1, r4, lr}
 8004460:	0004      	movs	r4, r0
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8004462:	4908      	ldr	r1, [pc, #32]	@ (8004484 <ADC_DelayMicroSecond+0x28>)
 8004464:	6818      	ldr	r0, [r3, #0]
 8004466:	f7fb fe7f 	bl	8000168 <__udivsi3>
 800446a:	4344      	muls	r4, r0
 800446c:	9401      	str	r4, [sp, #4]

  while(waitLoopIndex != 0U)
 800446e:	9b01      	ldr	r3, [sp, #4]
 8004470:	2b00      	cmp	r3, #0
 8004472:	d100      	bne.n	8004476 <ADC_DelayMicroSecond+0x1a>
  {
    waitLoopIndex--;
  } 
}
 8004474:	bd13      	pop	{r0, r1, r4, pc}
    waitLoopIndex--;
 8004476:	9b01      	ldr	r3, [sp, #4]
 8004478:	3b01      	subs	r3, #1
 800447a:	9301      	str	r3, [sp, #4]
 800447c:	e7f7      	b.n	800446e <ADC_DelayMicroSecond+0x12>
 800447e:	46c0      	nop			@ (mov r8, r8)
 8004480:	20000090 	.word	0x20000090
 8004484:	000f4240 	.word	0x000f4240

08004488 <ADC_ConversionStop>:
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 8004488:	2204      	movs	r2, #4
 800448a:	6803      	ldr	r3, [r0, #0]
{
 800448c:	b570      	push	{r4, r5, r6, lr}
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 800448e:	6899      	ldr	r1, [r3, #8]
{
 8004490:	0004      	movs	r4, r0
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 8004492:	4211      	tst	r1, r2
 8004494:	d101      	bne.n	800449a <ADC_ConversionStop+0x12>
  return HAL_OK;
 8004496:	2000      	movs	r0, #0
}
 8004498:	bd70      	pop	{r4, r5, r6, pc}
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 800449a:	6899      	ldr	r1, [r3, #8]
 800449c:	4211      	tst	r1, r2
 800449e:	d006      	beq.n	80044ae <ADC_ConversionStop+0x26>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 80044a0:	689a      	ldr	r2, [r3, #8]
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 80044a2:	0792      	lsls	r2, r2, #30
 80044a4:	d403      	bmi.n	80044ae <ADC_ConversionStop+0x26>
      hadc->Instance->CR |= ADC_CR_ADSTP;
 80044a6:	2210      	movs	r2, #16
 80044a8:	6899      	ldr	r1, [r3, #8]
 80044aa:	430a      	orrs	r2, r1
 80044ac:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 80044ae:	f7ff fae6 	bl	8003a7e <HAL_GetTick>
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 80044b2:	2604      	movs	r6, #4
    tickstart = HAL_GetTick();
 80044b4:	0005      	movs	r5, r0
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 80044b6:	6823      	ldr	r3, [r4, #0]
 80044b8:	689b      	ldr	r3, [r3, #8]
 80044ba:	4233      	tst	r3, r6
 80044bc:	d0eb      	beq.n	8004496 <ADC_ConversionStop+0xe>
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80044be:	f7ff fade 	bl	8003a7e <HAL_GetTick>
 80044c2:	1b40      	subs	r0, r0, r5
 80044c4:	280a      	cmp	r0, #10
 80044c6:	d9f6      	bls.n	80044b6 <ADC_ConversionStop+0x2e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80044c8:	2310      	movs	r3, #16
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80044ca:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80044cc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80044ce:	4313      	orrs	r3, r2
 80044d0:	6563      	str	r3, [r4, #84]	@ 0x54
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80044d2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80044d4:	4303      	orrs	r3, r0
 80044d6:	65a3      	str	r3, [r4, #88]	@ 0x58
        return HAL_ERROR;
 80044d8:	e7de      	b.n	8004498 <ADC_ConversionStop+0x10>

080044da <ADC_Disable>:
  if (ADC_IS_ENABLE(hadc) != RESET)
 80044da:	2103      	movs	r1, #3
 80044dc:	6802      	ldr	r2, [r0, #0]
{
 80044de:	b570      	push	{r4, r5, r6, lr}
  if (ADC_IS_ENABLE(hadc) != RESET)
 80044e0:	6893      	ldr	r3, [r2, #8]
{
 80044e2:	0004      	movs	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 80044e4:	400b      	ands	r3, r1
 80044e6:	2b01      	cmp	r3, #1
 80044e8:	d001      	beq.n	80044ee <ADC_Disable+0x14>
  return HAL_OK;
 80044ea:	2000      	movs	r0, #0
}
 80044ec:	bd70      	pop	{r4, r5, r6, pc}
  if (ADC_IS_ENABLE(hadc) != RESET)
 80044ee:	6810      	ldr	r0, [r2, #0]
 80044f0:	4218      	tst	r0, r3
 80044f2:	d0fa      	beq.n	80044ea <ADC_Disable+0x10>
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80044f4:	2005      	movs	r0, #5
 80044f6:	6895      	ldr	r5, [r2, #8]
 80044f8:	4005      	ands	r5, r0
 80044fa:	2d01      	cmp	r5, #1
 80044fc:	d117      	bne.n	800452e <ADC_Disable+0x54>
      __HAL_ADC_DISABLE(hadc);
 80044fe:	2302      	movs	r3, #2
 8004500:	6890      	ldr	r0, [r2, #8]
 8004502:	4303      	orrs	r3, r0
 8004504:	6093      	str	r3, [r2, #8]
 8004506:	6011      	str	r1, [r2, #0]
    tickstart = HAL_GetTick();
 8004508:	f7ff fab9 	bl	8003a7e <HAL_GetTick>
 800450c:	0006      	movs	r6, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800450e:	6823      	ldr	r3, [r4, #0]
 8004510:	689b      	ldr	r3, [r3, #8]
 8004512:	422b      	tst	r3, r5
 8004514:	d0e9      	beq.n	80044ea <ADC_Disable+0x10>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004516:	f7ff fab2 	bl	8003a7e <HAL_GetTick>
 800451a:	1b80      	subs	r0, r0, r6
 800451c:	280a      	cmp	r0, #10
 800451e:	d9f6      	bls.n	800450e <ADC_Disable+0x34>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004520:	2310      	movs	r3, #16
 8004522:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004524:	4313      	orrs	r3, r2
 8004526:	6563      	str	r3, [r4, #84]	@ 0x54
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004528:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800452a:	432b      	orrs	r3, r5
 800452c:	e005      	b.n	800453a <ADC_Disable+0x60>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800452e:	2210      	movs	r2, #16
 8004530:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 8004532:	430a      	orrs	r2, r1
 8004534:	6562      	str	r2, [r4, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004536:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 8004538:	4313      	orrs	r3, r2
      return HAL_ERROR;
 800453a:	2001      	movs	r0, #1
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800453c:	65a3      	str	r3, [r4, #88]	@ 0x58
        return HAL_ERROR;
 800453e:	e7d5      	b.n	80044ec <ADC_Disable+0x12>

08004540 <ADC_Enable>:
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004540:	2103      	movs	r1, #3
 8004542:	6803      	ldr	r3, [r0, #0]
{
 8004544:	b570      	push	{r4, r5, r6, lr}
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004546:	689a      	ldr	r2, [r3, #8]
{
 8004548:	0004      	movs	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 800454a:	400a      	ands	r2, r1
 800454c:	2a01      	cmp	r2, #1
 800454e:	d104      	bne.n	800455a <ADC_Enable+0x1a>
 8004550:	6819      	ldr	r1, [r3, #0]
 8004552:	4211      	tst	r1, r2
 8004554:	d001      	beq.n	800455a <ADC_Enable+0x1a>
  return HAL_OK;
 8004556:	2000      	movs	r0, #0
}
 8004558:	bd70      	pop	{r4, r5, r6, pc}
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800455a:	6899      	ldr	r1, [r3, #8]
 800455c:	4a13      	ldr	r2, [pc, #76]	@ (80045ac <ADC_Enable+0x6c>)
 800455e:	4211      	tst	r1, r2
 8004560:	d009      	beq.n	8004576 <ADC_Enable+0x36>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004562:	2310      	movs	r3, #16
 8004564:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004566:	4313      	orrs	r3, r2
 8004568:	6563      	str	r3, [r4, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800456a:	2301      	movs	r3, #1
 800456c:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 800456e:	4313      	orrs	r3, r2
      return HAL_ERROR;
 8004570:	2001      	movs	r0, #1
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004572:	65a3      	str	r3, [r4, #88]	@ 0x58
        return HAL_ERROR;
 8004574:	e7f0      	b.n	8004558 <ADC_Enable+0x18>
    __HAL_ADC_ENABLE(hadc);
 8004576:	2501      	movs	r5, #1
 8004578:	689a      	ldr	r2, [r3, #8]
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 800457a:	0028      	movs	r0, r5
    __HAL_ADC_ENABLE(hadc);
 800457c:	432a      	orrs	r2, r5
 800457e:	609a      	str	r2, [r3, #8]
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 8004580:	f7ff ff6c 	bl	800445c <ADC_DelayMicroSecond>
    tickstart = HAL_GetTick();
 8004584:	f7ff fa7b 	bl	8003a7e <HAL_GetTick>
 8004588:	0006      	movs	r6, r0
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800458a:	6823      	ldr	r3, [r4, #0]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	422b      	tst	r3, r5
 8004590:	d1e1      	bne.n	8004556 <ADC_Enable+0x16>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004592:	f7ff fa74 	bl	8003a7e <HAL_GetTick>
 8004596:	1b80      	subs	r0, r0, r6
 8004598:	280a      	cmp	r0, #10
 800459a:	d9f6      	bls.n	800458a <ADC_Enable+0x4a>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800459c:	2310      	movs	r3, #16
 800459e:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80045a0:	4313      	orrs	r3, r2
 80045a2:	6563      	str	r3, [r4, #84]	@ 0x54
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80045a4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80045a6:	432b      	orrs	r3, r5
 80045a8:	e7e2      	b.n	8004570 <ADC_Enable+0x30>
 80045aa:	46c0      	nop			@ (mov r8, r8)
 80045ac:	80000017 	.word	0x80000017

080045b0 <HAL_ADC_Init>:
{
 80045b0:	b570      	push	{r4, r5, r6, lr}
 80045b2:	1e04      	subs	r4, r0, #0
  if(hadc == NULL)
 80045b4:	d016      	beq.n	80045e4 <HAL_ADC_Init+0x34>
  if(hadc->State == HAL_ADC_STATE_RESET)
 80045b6:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d105      	bne.n	80045c8 <HAL_ADC_Init+0x18>
    hadc->Lock = HAL_UNLOCKED;
 80045bc:	0002      	movs	r2, r0
 80045be:	3250      	adds	r2, #80	@ 0x50
    ADC_CLEAR_ERRORCODE(hadc);
 80045c0:	6583      	str	r3, [r0, #88]	@ 0x58
    hadc->Lock = HAL_UNLOCKED;
 80045c2:	7013      	strb	r3, [r2, #0]
    HAL_ADC_MspInit(hadc);
 80045c4:	f7fe fd3c 	bl	8003040 <HAL_ADC_MspInit>
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 80045c8:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80045ca:	06db      	lsls	r3, r3, #27
 80045cc:	d403      	bmi.n	80045d6 <HAL_ADC_Init+0x26>
     (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)  )
 80045ce:	6823      	ldr	r3, [r4, #0]
 80045d0:	689a      	ldr	r2, [r3, #8]
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 80045d2:	0752      	lsls	r2, r2, #29
 80045d4:	d508      	bpl.n	80045e8 <HAL_ADC_Init+0x38>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80045d6:	2310      	movs	r3, #16
 80045d8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
    __HAL_UNLOCK(hadc);
 80045da:	3450      	adds	r4, #80	@ 0x50
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80045dc:	4313      	orrs	r3, r2
 80045de:	6063      	str	r3, [r4, #4]
    __HAL_UNLOCK(hadc);
 80045e0:	2300      	movs	r3, #0
 80045e2:	7023      	strb	r3, [r4, #0]
    return HAL_ERROR;
 80045e4:	2001      	movs	r0, #1
}
 80045e6:	bd70      	pop	{r4, r5, r6, pc}
  ADC_STATE_CLR_SET(hadc->State,
 80045e8:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 80045ea:	4a56      	ldr	r2, [pc, #344]	@ (8004744 <HAL_ADC_Init+0x194>)
 80045ec:	4011      	ands	r1, r2
 80045ee:	3206      	adds	r2, #6
 80045f0:	32ff      	adds	r2, #255	@ 0xff
 80045f2:	430a      	orrs	r2, r1
 80045f4:	6562      	str	r2, [r4, #84]	@ 0x54
  if (ADC_IS_ENABLE(hadc) == RESET)
 80045f6:	2203      	movs	r2, #3
 80045f8:	6899      	ldr	r1, [r3, #8]
 80045fa:	4011      	ands	r1, r2
 80045fc:	4a52      	ldr	r2, [pc, #328]	@ (8004748 <HAL_ADC_Init+0x198>)
 80045fe:	2901      	cmp	r1, #1
 8004600:	d102      	bne.n	8004608 <HAL_ADC_Init+0x58>
 8004602:	6818      	ldr	r0, [r3, #0]
 8004604:	4208      	tst	r0, r1
 8004606:	d119      	bne.n	800463c <HAL_ADC_Init+0x8c>
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8004608:	2580      	movs	r5, #128	@ 0x80
 800460a:	6861      	ldr	r1, [r4, #4]
 800460c:	05ed      	lsls	r5, r5, #23
 800460e:	0048      	lsls	r0, r1, #1
 8004610:	0840      	lsrs	r0, r0, #1
 8004612:	42a8      	cmp	r0, r5
 8004614:	d003      	beq.n	800461e <HAL_ADC_Init+0x6e>
 8004616:	2080      	movs	r0, #128	@ 0x80
 8004618:	0600      	lsls	r0, r0, #24
 800461a:	4281      	cmp	r1, r0
 800461c:	d176      	bne.n	800470c <HAL_ADC_Init+0x15c>
 800461e:	6918      	ldr	r0, [r3, #16]
 8004620:	0080      	lsls	r0, r0, #2
 8004622:	0880      	lsrs	r0, r0, #2
 8004624:	6118      	str	r0, [r3, #16]
 8004626:	6918      	ldr	r0, [r3, #16]
 8004628:	4301      	orrs	r1, r0
 800462a:	6119      	str	r1, [r3, #16]
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_RES);
 800462c:	2018      	movs	r0, #24
 800462e:	68d9      	ldr	r1, [r3, #12]
 8004630:	4381      	bics	r1, r0
 8004632:	60d9      	str	r1, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 8004634:	68d9      	ldr	r1, [r3, #12]
 8004636:	68a0      	ldr	r0, [r4, #8]
 8004638:	4301      	orrs	r1, r0
 800463a:	60d9      	str	r1, [r3, #12]
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 800463c:	6811      	ldr	r1, [r2, #0]
 800463e:	4843      	ldr	r0, [pc, #268]	@ (800474c <HAL_ADC_Init+0x19c>)
 8004640:	4001      	ands	r1, r0
 8004642:	6011      	str	r1, [r2, #0]
  ADC->CCR |=__HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);  
 8004644:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004646:	6810      	ldr	r0, [r2, #0]
 8004648:	0649      	lsls	r1, r1, #25
 800464a:	4301      	orrs	r1, r0
 800464c:	6011      	str	r1, [r2, #0]
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 800464e:	2280      	movs	r2, #128	@ 0x80
 8004650:	6899      	ldr	r1, [r3, #8]
 8004652:	0552      	lsls	r2, r2, #21
 8004654:	4211      	tst	r1, r2
 8004656:	d102      	bne.n	800465e <HAL_ADC_Init+0xae>
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8004658:	6899      	ldr	r1, [r3, #8]
 800465a:	430a      	orrs	r2, r1
 800465c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 800465e:	68da      	ldr	r2, [r3, #12]
 8004660:	493b      	ldr	r1, [pc, #236]	@ (8004750 <HAL_ADC_Init+0x1a0>)
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8004662:	6b25      	ldr	r5, [r4, #48]	@ 0x30
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8004664:	400a      	ands	r2, r1
 8004666:	60da      	str	r2, [r3, #12]
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8004668:	1c62      	adds	r2, r4, #1
 800466a:	7fd1      	ldrb	r1, [r2, #31]
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800466c:	68e2      	ldr	r2, [r4, #12]
 800466e:	68d8      	ldr	r0, [r3, #12]
 8004670:	432a      	orrs	r2, r5
 8004672:	4302      	orrs	r2, r0
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8004674:	69a0      	ldr	r0, [r4, #24]
 8004676:	0380      	lsls	r0, r0, #14
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8004678:	4302      	orrs	r2, r0
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 800467a:	69e0      	ldr	r0, [r4, #28]
 800467c:	03c0      	lsls	r0, r0, #15
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800467e:	4302      	orrs	r2, r0
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8004680:	0348      	lsls	r0, r1, #13
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8004682:	4302      	orrs	r2, r0
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8004684:	0020      	movs	r0, r4
 8004686:	302c      	adds	r0, #44	@ 0x2c
 8004688:	7800      	ldrb	r0, [r0, #0]
 800468a:	0040      	lsls	r0, r0, #1
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800468c:	4302      	orrs	r2, r0
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 800468e:	6920      	ldr	r0, [r4, #16]
 8004690:	3802      	subs	r0, #2
 8004692:	4245      	negs	r5, r0
 8004694:	4168      	adcs	r0, r5
 8004696:	0080      	lsls	r0, r0, #2
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8004698:	4302      	orrs	r2, r0
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800469a:	20c2      	movs	r0, #194	@ 0xc2
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800469c:	60da      	str	r2, [r3, #12]
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800469e:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80046a0:	30ff      	adds	r0, #255	@ 0xff
 80046a2:	4282      	cmp	r2, r0
 80046a4:	d004      	beq.n	80046b0 <HAL_ADC_Init+0x100>
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 80046a6:	6aa5      	ldr	r5, [r4, #40]	@ 0x28
 80046a8:	68d8      	ldr	r0, [r3, #12]
 80046aa:	432a      	orrs	r2, r5
 80046ac:	4302      	orrs	r2, r0
 80046ae:	60da      	str	r2, [r3, #12]
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80046b0:	1ca2      	adds	r2, r4, #2
 80046b2:	7fd2      	ldrb	r2, [r2, #31]
 80046b4:	2a01      	cmp	r2, #1
 80046b6:	d106      	bne.n	80046c6 <HAL_ADC_Init+0x116>
    if (hadc->Init.ContinuousConvMode == DISABLE)
 80046b8:	2900      	cmp	r1, #0
 80046ba:	d133      	bne.n	8004724 <HAL_ADC_Init+0x174>
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 80046bc:	2280      	movs	r2, #128	@ 0x80
 80046be:	68d9      	ldr	r1, [r3, #12]
 80046c0:	0252      	lsls	r2, r2, #9
 80046c2:	430a      	orrs	r2, r1
 80046c4:	60da      	str	r2, [r3, #12]
  if (hadc->Init.OversamplingMode == ENABLE)
 80046c6:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 80046c8:	691a      	ldr	r2, [r3, #16]
  if (hadc->Init.OversamplingMode == ENABLE)
 80046ca:	2901      	cmp	r1, #1
 80046cc:	d132      	bne.n	8004734 <HAL_ADC_Init+0x184>
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 80046ce:	4821      	ldr	r0, [pc, #132]	@ (8004754 <HAL_ADC_Init+0x1a4>)
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 80046d0:	6c65      	ldr	r5, [r4, #68]	@ 0x44
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 80046d2:	4002      	ands	r2, r0
 80046d4:	611a      	str	r2, [r3, #16]
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 80046d6:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 80046d8:	6918      	ldr	r0, [r3, #16]
 80046da:	432a      	orrs	r2, r5
                               hadc->Init.Oversample.RightBitShift             |
 80046dc:	6ca5      	ldr	r5, [r4, #72]	@ 0x48
 80046de:	432a      	orrs	r2, r5
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 80046e0:	4302      	orrs	r2, r0
 80046e2:	611a      	str	r2, [r3, #16]
     hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 80046e4:	691a      	ldr	r2, [r3, #16]
 80046e6:	4311      	orrs	r1, r2
 80046e8:	6119      	str	r1, [r3, #16]
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 80046ea:	2107      	movs	r1, #7
 80046ec:	695a      	ldr	r2, [r3, #20]
  ADC_CLEAR_ERRORCODE(hadc);
 80046ee:	2000      	movs	r0, #0
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 80046f0:	438a      	bics	r2, r1
 80046f2:	615a      	str	r2, [r3, #20]
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 80046f4:	695a      	ldr	r2, [r3, #20]
 80046f6:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80046f8:	430a      	orrs	r2, r1
 80046fa:	615a      	str	r2, [r3, #20]
  ADC_STATE_CLR_SET(hadc->State,
 80046fc:	2303      	movs	r3, #3
  ADC_CLEAR_ERRORCODE(hadc);
 80046fe:	65a0      	str	r0, [r4, #88]	@ 0x58
  ADC_STATE_CLR_SET(hadc->State,
 8004700:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004702:	439a      	bics	r2, r3
 8004704:	3b02      	subs	r3, #2
 8004706:	4313      	orrs	r3, r2
 8004708:	6563      	str	r3, [r4, #84]	@ 0x54
  return HAL_OK;
 800470a:	e76c      	b.n	80045e6 <HAL_ADC_Init+0x36>
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 800470c:	6918      	ldr	r0, [r3, #16]
 800470e:	4d12      	ldr	r5, [pc, #72]	@ (8004758 <HAL_ADC_Init+0x1a8>)
 8004710:	0080      	lsls	r0, r0, #2
 8004712:	0880      	lsrs	r0, r0, #2
 8004714:	6118      	str	r0, [r3, #16]
 8004716:	6810      	ldr	r0, [r2, #0]
 8004718:	4028      	ands	r0, r5
 800471a:	6010      	str	r0, [r2, #0]
 800471c:	6810      	ldr	r0, [r2, #0]
 800471e:	4301      	orrs	r1, r0
 8004720:	6011      	str	r1, [r2, #0]
 8004722:	e783      	b.n	800462c <HAL_ADC_Init+0x7c>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004724:	2120      	movs	r1, #32
 8004726:	6d60      	ldr	r0, [r4, #84]	@ 0x54
 8004728:	4301      	orrs	r1, r0
 800472a:	6561      	str	r1, [r4, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800472c:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 800472e:	430a      	orrs	r2, r1
 8004730:	65a2      	str	r2, [r4, #88]	@ 0x58
 8004732:	e7c8      	b.n	80046c6 <HAL_ADC_Init+0x116>
    if(HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 8004734:	2101      	movs	r1, #1
 8004736:	420a      	tst	r2, r1
 8004738:	d0d7      	beq.n	80046ea <HAL_ADC_Init+0x13a>
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 800473a:	691a      	ldr	r2, [r3, #16]
 800473c:	438a      	bics	r2, r1
 800473e:	611a      	str	r2, [r3, #16]
 8004740:	e7d3      	b.n	80046ea <HAL_ADC_Init+0x13a>
 8004742:	46c0      	nop			@ (mov r8, r8)
 8004744:	fffffefd 	.word	0xfffffefd
 8004748:	40012708 	.word	0x40012708
 800474c:	fdffffff 	.word	0xfdffffff
 8004750:	fffe0219 	.word	0xfffe0219
 8004754:	fffffc03 	.word	0xfffffc03
 8004758:	ffc3ffff 	.word	0xffc3ffff

0800475c <HAL_ADC_DeInit>:
{
 800475c:	b570      	push	{r4, r5, r6, lr}
 800475e:	0004      	movs	r4, r0
    return HAL_ERROR;
 8004760:	2501      	movs	r5, #1
  if(hadc == NULL)
 8004762:	2800      	cmp	r0, #0
 8004764:	d011      	beq.n	800478a <HAL_ADC_DeInit+0x2e>
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 8004766:	2302      	movs	r3, #2
 8004768:	6d42      	ldr	r2, [r0, #84]	@ 0x54
 800476a:	4313      	orrs	r3, r2
 800476c:	6543      	str	r3, [r0, #84]	@ 0x54
  tmp_hal_status = ADC_ConversionStop(hadc);
 800476e:	f7ff fe8b 	bl	8004488 <ADC_ConversionStop>
 8004772:	1e05      	subs	r5, r0, #0
  if (tmp_hal_status == HAL_OK)
 8004774:	d137      	bne.n	80047e6 <HAL_ADC_DeInit+0x8a>
    tmp_hal_status = ADC_Disable(hadc);
 8004776:	0020      	movs	r0, r4
 8004778:	f7ff feaf 	bl	80044da <ADC_Disable>
 800477c:	0005      	movs	r5, r0
    if (tmp_hal_status != HAL_ERROR)
 800477e:	2801      	cmp	r0, #1
 8004780:	d105      	bne.n	800478e <HAL_ADC_DeInit+0x32>
  tmp_hal_status = ADC_ConversionStop(hadc);
 8004782:	2501      	movs	r5, #1
  __HAL_UNLOCK(hadc);
 8004784:	2300      	movs	r3, #0
 8004786:	3450      	adds	r4, #80	@ 0x50
 8004788:	7023      	strb	r3, [r4, #0]
}
 800478a:	0028      	movs	r0, r5
 800478c:	bd70      	pop	{r4, r5, r6, pc}
      hadc->State = HAL_ADC_STATE_READY;
 800478e:	2301      	movs	r3, #1
 8004790:	6563      	str	r3, [r4, #84]	@ 0x54
    __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD | ADC_IT_OVR | ADC_IT_EOCAL | ADC_IT_EOS |  \
 8004792:	6823      	ldr	r3, [r4, #0]
 8004794:	4915      	ldr	r1, [pc, #84]	@ (80047ec <HAL_ADC_DeInit+0x90>)
 8004796:	685a      	ldr	r2, [r3, #4]
    HAL_ADC_MspDeInit(hadc);
 8004798:	0020      	movs	r0, r4
    __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD | ADC_IT_OVR | ADC_IT_EOCAL | ADC_IT_EOS |  \
 800479a:	400a      	ands	r2, r1
 800479c:	605a      	str	r2, [r3, #4]
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD | ADC_FLAG_EOCAL | ADC_FLAG_OVR | ADC_FLAG_EOS |  \
 800479e:	4a14      	ldr	r2, [pc, #80]	@ (80047f0 <HAL_ADC_DeInit+0x94>)
    hadc->Instance->CR &= ~ADC_CR_ADVREGEN;
 80047a0:	4914      	ldr	r1, [pc, #80]	@ (80047f4 <HAL_ADC_DeInit+0x98>)
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD | ADC_FLAG_EOCAL | ADC_FLAG_OVR | ADC_FLAG_EOS |  \
 80047a2:	601a      	str	r2, [r3, #0]
    hadc->Instance->CR &= ~ADC_CR_ADVREGEN;
 80047a4:	689a      	ldr	r2, [r3, #8]
 80047a6:	400a      	ands	r2, r1
 80047a8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_AWDCH  | ADC_CFGR1_AWDEN  | ADC_CFGR1_AWDSGL | \
 80047aa:	68da      	ldr	r2, [r3, #12]
 80047ac:	4912      	ldr	r1, [pc, #72]	@ (80047f8 <HAL_ADC_DeInit+0x9c>)
 80047ae:	400a      	ands	r2, r1
 80047b0:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_TOVS  | ADC_CFGR2_OVSS  | ADC_CFGR2_OVSR | \
 80047b2:	691a      	ldr	r2, [r3, #16]
 80047b4:	4911      	ldr	r1, [pc, #68]	@ (80047fc <HAL_ADC_DeInit+0xa0>)
 80047b6:	400a      	ands	r2, r1
    hadc->Instance->SMPR &= ~(ADC_SMPR_SMPR);
 80047b8:	2107      	movs	r1, #7
    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_TOVS  | ADC_CFGR2_OVSS  | ADC_CFGR2_OVSR | \
 80047ba:	611a      	str	r2, [r3, #16]
    hadc->Instance->SMPR &= ~(ADC_SMPR_SMPR);
 80047bc:	695a      	ldr	r2, [r3, #20]
 80047be:	438a      	bics	r2, r1
 80047c0:	615a      	str	r2, [r3, #20]
    hadc->Instance->TR &= ~(ADC_TR_LT | ADC_TR_HT);
 80047c2:	6a1a      	ldr	r2, [r3, #32]
 80047c4:	490e      	ldr	r1, [pc, #56]	@ (8004800 <HAL_ADC_DeInit+0xa4>)
 80047c6:	400a      	ands	r2, r1
    hadc->Instance->CALFACT &= ~(ADC_CALFACT_CALFACT);
 80047c8:	217f      	movs	r1, #127	@ 0x7f
    hadc->Instance->TR &= ~(ADC_TR_LT | ADC_TR_HT);
 80047ca:	621a      	str	r2, [r3, #32]
    hadc->Instance->CALFACT &= ~(ADC_CALFACT_CALFACT);
 80047cc:	33b4      	adds	r3, #180	@ 0xb4
 80047ce:	681a      	ldr	r2, [r3, #0]
 80047d0:	438a      	bics	r2, r1
 80047d2:	601a      	str	r2, [r3, #0]
    hadc->Instance->CALFACT &= ~(ADC_CALFACT_CALFACT);
 80047d4:	681a      	ldr	r2, [r3, #0]
 80047d6:	438a      	bics	r2, r1
 80047d8:	601a      	str	r2, [r3, #0]
    HAL_ADC_MspDeInit(hadc);
 80047da:	f7fe fc41 	bl	8003060 <HAL_ADC_MspDeInit>
    ADC_CLEAR_ERRORCODE(hadc);
 80047de:	2300      	movs	r3, #0
 80047e0:	65a3      	str	r3, [r4, #88]	@ 0x58
    hadc->State = HAL_ADC_STATE_RESET;
 80047e2:	6563      	str	r3, [r4, #84]	@ 0x54
 80047e4:	e7ce      	b.n	8004784 <HAL_ADC_DeInit+0x28>
  if (tmp_hal_status != HAL_ERROR)
 80047e6:	2801      	cmp	r0, #1
 80047e8:	d1d3      	bne.n	8004792 <HAL_ADC_DeInit+0x36>
 80047ea:	e7ca      	b.n	8004782 <HAL_ADC_DeInit+0x26>
 80047ec:	fffff760 	.word	0xfffff760
 80047f0:	0000089f 	.word	0x0000089f
 80047f4:	efffffff 	.word	0xefffffff
 80047f8:	833e0200 	.word	0x833e0200
 80047fc:	3ffffc02 	.word	0x3ffffc02
 8004800:	f000f000 	.word	0xf000f000

08004804 <HAL_ADC_Start>:
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8004804:	6803      	ldr	r3, [r0, #0]
{
 8004806:	b570      	push	{r4, r5, r6, lr}
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8004808:	689b      	ldr	r3, [r3, #8]
{
 800480a:	0004      	movs	r4, r0
    __HAL_LOCK(hadc);
 800480c:	2002      	movs	r0, #2
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800480e:	075b      	lsls	r3, r3, #29
 8004810:	d41a      	bmi.n	8004848 <HAL_ADC_Start+0x44>
    __HAL_LOCK(hadc);
 8004812:	0025      	movs	r5, r4
 8004814:	3550      	adds	r5, #80	@ 0x50
 8004816:	782b      	ldrb	r3, [r5, #0]
 8004818:	2b01      	cmp	r3, #1
 800481a:	d015      	beq.n	8004848 <HAL_ADC_Start+0x44>
 800481c:	2301      	movs	r3, #1
 800481e:	702b      	strb	r3, [r5, #0]
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8004820:	69e3      	ldr	r3, [r4, #28]
 8004822:	2b01      	cmp	r3, #1
 8004824:	d111      	bne.n	800484a <HAL_ADC_Start+0x46>
      ADC_STATE_CLR_SET(hadc->State,
 8004826:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004828:	4b0b      	ldr	r3, [pc, #44]	@ (8004858 <HAL_ADC_Start+0x54>)
      ADC_CLEAR_ERRORCODE(hadc);
 800482a:	2000      	movs	r0, #0
      ADC_STATE_CLR_SET(hadc->State,
 800482c:	401a      	ands	r2, r3
 800482e:	2380      	movs	r3, #128	@ 0x80
 8004830:	005b      	lsls	r3, r3, #1
 8004832:	4313      	orrs	r3, r2
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004834:	221c      	movs	r2, #28
      ADC_STATE_CLR_SET(hadc->State,
 8004836:	6563      	str	r3, [r4, #84]	@ 0x54
      ADC_CLEAR_ERRORCODE(hadc);
 8004838:	65a0      	str	r0, [r4, #88]	@ 0x58
      __HAL_UNLOCK(hadc);
 800483a:	7028      	strb	r0, [r5, #0]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800483c:	6823      	ldr	r3, [r4, #0]
 800483e:	601a      	str	r2, [r3, #0]
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8004840:	6899      	ldr	r1, [r3, #8]
 8004842:	3a18      	subs	r2, #24
 8004844:	430a      	orrs	r2, r1
 8004846:	609a      	str	r2, [r3, #8]
}
 8004848:	bd70      	pop	{r4, r5, r6, pc}
      tmp_hal_status = ADC_Enable(hadc);
 800484a:	0020      	movs	r0, r4
 800484c:	f7ff fe78 	bl	8004540 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8004850:	2800      	cmp	r0, #0
 8004852:	d0e8      	beq.n	8004826 <HAL_ADC_Start+0x22>
 8004854:	e7f8      	b.n	8004848 <HAL_ADC_Start+0x44>
 8004856:	46c0      	nop			@ (mov r8, r8)
 8004858:	fffff0fe 	.word	0xfffff0fe

0800485c <HAL_ADC_Stop>:
{
 800485c:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hadc);
 800485e:	0006      	movs	r6, r0
 8004860:	3650      	adds	r6, #80	@ 0x50
 8004862:	7833      	ldrb	r3, [r6, #0]
{
 8004864:	0004      	movs	r4, r0
  __HAL_LOCK(hadc);
 8004866:	2002      	movs	r0, #2
 8004868:	2b01      	cmp	r3, #1
 800486a:	d012      	beq.n	8004892 <HAL_ADC_Stop+0x36>
 800486c:	2501      	movs	r5, #1
  tmp_hal_status = ADC_ConversionStop(hadc);
 800486e:	0020      	movs	r0, r4
  __HAL_LOCK(hadc);
 8004870:	7035      	strb	r5, [r6, #0]
  tmp_hal_status = ADC_ConversionStop(hadc);
 8004872:	f7ff fe09 	bl	8004488 <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 8004876:	2800      	cmp	r0, #0
 8004878:	d109      	bne.n	800488e <HAL_ADC_Stop+0x32>
    tmp_hal_status = ADC_Disable(hadc);
 800487a:	0020      	movs	r0, r4
 800487c:	f7ff fe2d 	bl	80044da <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 8004880:	2800      	cmp	r0, #0
 8004882:	d104      	bne.n	800488e <HAL_ADC_Stop+0x32>
      ADC_STATE_CLR_SET(hadc->State,
 8004884:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8004886:	4a03      	ldr	r2, [pc, #12]	@ (8004894 <HAL_ADC_Stop+0x38>)
 8004888:	4013      	ands	r3, r2
 800488a:	431d      	orrs	r5, r3
 800488c:	6565      	str	r5, [r4, #84]	@ 0x54
  __HAL_UNLOCK(hadc);
 800488e:	2300      	movs	r3, #0
 8004890:	7033      	strb	r3, [r6, #0]
}
 8004892:	bd70      	pop	{r4, r5, r6, pc}
 8004894:	fffffefe 	.word	0xfffffefe

08004898 <HAL_ADC_PollForConversion>:
{
 8004898:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800489a:	6946      	ldr	r6, [r0, #20]
{
 800489c:	0004      	movs	r4, r0
 800489e:	000d      	movs	r5, r1
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80048a0:	2e08      	cmp	r6, #8
 80048a2:	d00d      	beq.n	80048c0 <HAL_ADC_PollForConversion+0x28>
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 80048a4:	6803      	ldr	r3, [r0, #0]
 80048a6:	2001      	movs	r0, #1
 80048a8:	68db      	ldr	r3, [r3, #12]
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 80048aa:	260c      	movs	r6, #12
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 80048ac:	4203      	tst	r3, r0
 80048ae:	d007      	beq.n	80048c0 <HAL_ADC_PollForConversion+0x28>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80048b0:	2320      	movs	r3, #32
 80048b2:	6d62      	ldr	r2, [r4, #84]	@ 0x54
      __HAL_UNLOCK(hadc);
 80048b4:	3450      	adds	r4, #80	@ 0x50
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80048b6:	4313      	orrs	r3, r2
 80048b8:	6063      	str	r3, [r4, #4]
      __HAL_UNLOCK(hadc);
 80048ba:	2300      	movs	r3, #0
 80048bc:	7023      	strb	r3, [r4, #0]
}
 80048be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  tickstart = HAL_GetTick();
 80048c0:	f7ff f8dd 	bl	8003a7e <HAL_GetTick>
 80048c4:	0007      	movs	r7, r0
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80048c6:	6823      	ldr	r3, [r4, #0]
 80048c8:	681a      	ldr	r2, [r3, #0]
 80048ca:	4216      	tst	r6, r2
 80048cc:	d023      	beq.n	8004916 <HAL_ADC_PollForConversion+0x7e>
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80048ce:	2280      	movs	r2, #128	@ 0x80
 80048d0:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 80048d2:	0092      	lsls	r2, r2, #2
 80048d4:	430a      	orrs	r2, r1
 80048d6:	6562      	str	r2, [r4, #84]	@ 0x54
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80048d8:	22c0      	movs	r2, #192	@ 0xc0
 80048da:	68d9      	ldr	r1, [r3, #12]
 80048dc:	0112      	lsls	r2, r2, #4
 80048de:	4211      	tst	r1, r2
 80048e0:	d114      	bne.n	800490c <HAL_ADC_PollForConversion+0x74>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 80048e2:	1c62      	adds	r2, r4, #1
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80048e4:	7fd2      	ldrb	r2, [r2, #31]
 80048e6:	2a00      	cmp	r2, #0
 80048e8:	d110      	bne.n	800490c <HAL_ADC_PollForConversion+0x74>
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80048ea:	681a      	ldr	r2, [r3, #0]
 80048ec:	0712      	lsls	r2, r2, #28
 80048ee:	d50d      	bpl.n	800490c <HAL_ADC_PollForConversion+0x74>
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80048f0:	689a      	ldr	r2, [r3, #8]
 80048f2:	0752      	lsls	r2, r2, #29
 80048f4:	d422      	bmi.n	800493c <HAL_ADC_PollForConversion+0xa4>
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80048f6:	210c      	movs	r1, #12
 80048f8:	685a      	ldr	r2, [r3, #4]
 80048fa:	438a      	bics	r2, r1
 80048fc:	605a      	str	r2, [r3, #4]
        ADC_STATE_CLR_SET(hadc->State,
 80048fe:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 8004900:	4a14      	ldr	r2, [pc, #80]	@ (8004954 <HAL_ADC_PollForConversion+0xbc>)
 8004902:	4011      	ands	r1, r2
 8004904:	3204      	adds	r2, #4
 8004906:	32ff      	adds	r2, #255	@ 0xff
 8004908:	430a      	orrs	r2, r1
 800490a:	6562      	str	r2, [r4, #84]	@ 0x54
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 800490c:	69a2      	ldr	r2, [r4, #24]
 800490e:	2a00      	cmp	r2, #0
 8004910:	d01d      	beq.n	800494e <HAL_ADC_PollForConversion+0xb6>
  return HAL_OK;
 8004912:	2000      	movs	r0, #0
 8004914:	e7d3      	b.n	80048be <HAL_ADC_PollForConversion+0x26>
    if(Timeout != HAL_MAX_DELAY)
 8004916:	1c6a      	adds	r2, r5, #1
 8004918:	d0d6      	beq.n	80048c8 <HAL_ADC_PollForConversion+0x30>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 800491a:	2d00      	cmp	r5, #0
 800491c:	d108      	bne.n	8004930 <HAL_ADC_PollForConversion+0x98>
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800491e:	2304      	movs	r3, #4
 8004920:	6d62      	ldr	r2, [r4, #84]	@ 0x54
        __HAL_UNLOCK(hadc);
 8004922:	3450      	adds	r4, #80	@ 0x50
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8004924:	4313      	orrs	r3, r2
 8004926:	6063      	str	r3, [r4, #4]
        __HAL_UNLOCK(hadc);
 8004928:	2300      	movs	r3, #0
        return HAL_TIMEOUT;
 800492a:	2003      	movs	r0, #3
        __HAL_UNLOCK(hadc);
 800492c:	7023      	strb	r3, [r4, #0]
        return HAL_TIMEOUT;
 800492e:	e7c6      	b.n	80048be <HAL_ADC_PollForConversion+0x26>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8004930:	f7ff f8a5 	bl	8003a7e <HAL_GetTick>
 8004934:	1bc0      	subs	r0, r0, r7
 8004936:	42a8      	cmp	r0, r5
 8004938:	d9c5      	bls.n	80048c6 <HAL_ADC_PollForConversion+0x2e>
 800493a:	e7f0      	b.n	800491e <HAL_ADC_PollForConversion+0x86>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800493c:	2220      	movs	r2, #32
 800493e:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 8004940:	430a      	orrs	r2, r1
 8004942:	6562      	str	r2, [r4, #84]	@ 0x54
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004944:	2201      	movs	r2, #1
 8004946:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 8004948:	430a      	orrs	r2, r1
 800494a:	65a2      	str	r2, [r4, #88]	@ 0x58
 800494c:	e7de      	b.n	800490c <HAL_ADC_PollForConversion+0x74>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800494e:	220c      	movs	r2, #12
 8004950:	601a      	str	r2, [r3, #0]
 8004952:	e7de      	b.n	8004912 <HAL_ADC_PollForConversion+0x7a>
 8004954:	fffffefe 	.word	0xfffffefe

08004958 <HAL_ADC_GetValue>:
  return hadc->Instance->DR;
 8004958:	6803      	ldr	r3, [r0, #0]
 800495a:	6c18      	ldr	r0, [r3, #64]	@ 0x40
}
 800495c:	4770      	bx	lr
	...

08004960 <HAL_ADC_ConfigChannel>:
{
 8004960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hadc);
 8004962:	0004      	movs	r4, r0
 8004964:	3450      	adds	r4, #80	@ 0x50
 8004966:	7822      	ldrb	r2, [r4, #0]
{
 8004968:	0003      	movs	r3, r0
  __HAL_LOCK(hadc);
 800496a:	2002      	movs	r0, #2
 800496c:	2a01      	cmp	r2, #1
 800496e:	d00b      	beq.n	8004988 <HAL_ADC_ConfigChannel+0x28>
 8004970:	3801      	subs	r0, #1
 8004972:	7020      	strb	r0, [r4, #0]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8004974:	681a      	ldr	r2, [r3, #0]
 8004976:	6895      	ldr	r5, [r2, #8]
 8004978:	076d      	lsls	r5, r5, #29
 800497a:	d506      	bpl.n	800498a <HAL_ADC_ConfigChannel+0x2a>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800497c:	2220      	movs	r2, #32
 800497e:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004980:	430a      	orrs	r2, r1
 8004982:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hadc);
 8004984:	2300      	movs	r3, #0
 8004986:	7023      	strb	r3, [r4, #0]
}
 8004988:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 800498a:	2380      	movs	r3, #128	@ 0x80
 800498c:	2680      	movs	r6, #128	@ 0x80
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 800498e:	680d      	ldr	r5, [r1, #0]
  if (sConfig->Rank != ADC_RANK_NONE)
 8004990:	4f19      	ldr	r7, [pc, #100]	@ (80049f8 <HAL_ADC_ConfigChannel+0x98>)
 8004992:	6849      	ldr	r1, [r1, #4]
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8004994:	0368      	lsls	r0, r5, #13
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8004996:	02db      	lsls	r3, r3, #11
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8004998:	0b40      	lsrs	r0, r0, #13
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 800499a:	402b      	ands	r3, r5
 800499c:	02b6      	lsls	r6, r6, #10
  if (sConfig->Rank != ADC_RANK_NONE)
 800499e:	42b9      	cmp	r1, r7
 80049a0:	d018      	beq.n	80049d4 <HAL_ADC_ConfigChannel+0x74>
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 80049a2:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80049a4:	4301      	orrs	r1, r0
 80049a6:	6291      	str	r1, [r2, #40]	@ 0x28
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d008      	beq.n	80049be <HAL_ADC_ConfigChannel+0x5e>
      ADC->CCR |= ADC_CCR_TSEN;   
 80049ac:	2380      	movs	r3, #128	@ 0x80
 80049ae:	4a13      	ldr	r2, [pc, #76]	@ (80049fc <HAL_ADC_ConfigChannel+0x9c>)
 80049b0:	041b      	lsls	r3, r3, #16
 80049b2:	6811      	ldr	r1, [r2, #0]
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 80049b4:	200a      	movs	r0, #10
      ADC->CCR |= ADC_CCR_TSEN;   
 80049b6:	430b      	orrs	r3, r1
 80049b8:	6013      	str	r3, [r2, #0]
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 80049ba:	f7ff fd4f 	bl	800445c <ADC_DelayMicroSecond>
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 80049be:	4235      	tst	r5, r6
 80049c0:	d005      	beq.n	80049ce <HAL_ADC_ConfigChannel+0x6e>
      ADC->CCR |= ADC_CCR_VREFEN;   
 80049c2:	2380      	movs	r3, #128	@ 0x80
 80049c4:	4a0d      	ldr	r2, [pc, #52]	@ (80049fc <HAL_ADC_ConfigChannel+0x9c>)
 80049c6:	03db      	lsls	r3, r3, #15
 80049c8:	6811      	ldr	r1, [r2, #0]
 80049ca:	430b      	orrs	r3, r1
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 80049cc:	6013      	str	r3, [r2, #0]
  __HAL_UNLOCK(hadc);
 80049ce:	2000      	movs	r0, #0
 80049d0:	7020      	strb	r0, [r4, #0]
  return HAL_OK;
 80049d2:	e7d9      	b.n	8004988 <HAL_ADC_ConfigChannel+0x28>
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 80049d4:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80049d6:	4381      	bics	r1, r0
 80049d8:	6291      	str	r1, [r2, #40]	@ 0x28
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d004      	beq.n	80049e8 <HAL_ADC_ConfigChannel+0x88>
      ADC->CCR &= ~ADC_CCR_TSEN;   
 80049de:	4a07      	ldr	r2, [pc, #28]	@ (80049fc <HAL_ADC_ConfigChannel+0x9c>)
 80049e0:	4907      	ldr	r1, [pc, #28]	@ (8004a00 <HAL_ADC_ConfigChannel+0xa0>)
 80049e2:	6813      	ldr	r3, [r2, #0]
 80049e4:	400b      	ands	r3, r1
 80049e6:	6013      	str	r3, [r2, #0]
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 80049e8:	4235      	tst	r5, r6
 80049ea:	d0f0      	beq.n	80049ce <HAL_ADC_ConfigChannel+0x6e>
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 80049ec:	4a03      	ldr	r2, [pc, #12]	@ (80049fc <HAL_ADC_ConfigChannel+0x9c>)
 80049ee:	4905      	ldr	r1, [pc, #20]	@ (8004a04 <HAL_ADC_ConfigChannel+0xa4>)
 80049f0:	6813      	ldr	r3, [r2, #0]
 80049f2:	400b      	ands	r3, r1
 80049f4:	e7ea      	b.n	80049cc <HAL_ADC_ConfigChannel+0x6c>
 80049f6:	46c0      	nop			@ (mov r8, r8)
 80049f8:	00001001 	.word	0x00001001
 80049fc:	40012708 	.word	0x40012708
 8004a00:	ff7fffff 	.word	0xff7fffff
 8004a04:	ffbfffff 	.word	0xffbfffff

08004a08 <HAL_ADCEx_Calibration_Start>:
  *          This parameter can be only of the following values:
  *            @arg ADC_SINGLE_ENDED: Channel in mode input single ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc, uint32_t SingleDiff)
{
 8004a08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004a0a:	0005      	movs	r5, r0
 8004a0c:	3550      	adds	r5, #80	@ 0x50
 8004a0e:	782b      	ldrb	r3, [r5, #0]
{
 8004a10:	0004      	movs	r4, r0
  __HAL_LOCK(hadc);
 8004a12:	2002      	movs	r0, #2
 8004a14:	2b01      	cmp	r3, #1
 8004a16:	d043      	beq.n	8004aa0 <HAL_ADCEx_Calibration_Start+0x98>
 8004a18:	2301      	movs	r3, #1
  
  /* Calibration prerequisite: ADC must be disabled. */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004a1a:	2203      	movs	r2, #3
  __HAL_LOCK(hadc);
 8004a1c:	702b      	strb	r3, [r5, #0]
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004a1e:	6823      	ldr	r3, [r4, #0]
 8004a20:	6898      	ldr	r0, [r3, #8]
 8004a22:	4010      	ands	r0, r2
 8004a24:	2801      	cmp	r0, #1
 8004a26:	d109      	bne.n	8004a3c <HAL_ADCEx_Calibration_Start+0x34>
 8004a28:	681a      	ldr	r2, [r3, #0]
 8004a2a:	4202      	tst	r2, r0
 8004a2c:	d006      	beq.n	8004a3c <HAL_ADCEx_Calibration_Start+0x34>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004a2e:	2320      	movs	r3, #32
 8004a30:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004a32:	4313      	orrs	r3, r2
 8004a34:	6563      	str	r3, [r4, #84]	@ 0x54
    
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004a36:	2300      	movs	r3, #0
 8004a38:	702b      	strb	r3, [r5, #0]
  
  /* Return function status */
  return tmp_hal_status;
 8004a3a:	e031      	b.n	8004aa0 <HAL_ADCEx_Calibration_Start+0x98>
    ADC_STATE_CLR_SET(hadc->State, 
 8004a3c:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 8004a3e:	4a19      	ldr	r2, [pc, #100]	@ (8004aa4 <HAL_ADCEx_Calibration_Start+0x9c>)
 8004a40:	4011      	ands	r1, r2
 8004a42:	3206      	adds	r2, #6
 8004a44:	32ff      	adds	r2, #255	@ 0xff
 8004a46:	430a      	orrs	r2, r1
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8004a48:	2103      	movs	r1, #3
    ADC_STATE_CLR_SET(hadc->State, 
 8004a4a:	6562      	str	r2, [r4, #84]	@ 0x54
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8004a4c:	68de      	ldr	r6, [r3, #12]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8004a4e:	68da      	ldr	r2, [r3, #12]
 8004a50:	438a      	bics	r2, r1
 8004a52:	60da      	str	r2, [r3, #12]
    hadc->Instance->CR |= ADC_CR_ADCAL;
 8004a54:	2280      	movs	r2, #128	@ 0x80
 8004a56:	6899      	ldr	r1, [r3, #8]
 8004a58:	0612      	lsls	r2, r2, #24
 8004a5a:	430a      	orrs	r2, r1
 8004a5c:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();  
 8004a5e:	f7ff f80e 	bl	8003a7e <HAL_GetTick>
 8004a62:	0007      	movs	r7, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8004a64:	6823      	ldr	r3, [r4, #0]
 8004a66:	689a      	ldr	r2, [r3, #8]
 8004a68:	2a00      	cmp	r2, #0
 8004a6a:	db0b      	blt.n	8004a84 <HAL_ADCEx_Calibration_Start+0x7c>
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8004a6c:	2103      	movs	r1, #3
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 8004a6e:	68da      	ldr	r2, [r3, #12]
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8004a70:	400e      	ands	r6, r1
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 8004a72:	4316      	orrs	r6, r2
 8004a74:	60de      	str	r6, [r3, #12]
    ADC_STATE_CLR_SET(hadc->State,
 8004a76:	2301      	movs	r3, #1
 8004a78:	6d62      	ldr	r2, [r4, #84]	@ 0x54
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004a7a:	2000      	movs	r0, #0
    ADC_STATE_CLR_SET(hadc->State,
 8004a7c:	438a      	bics	r2, r1
 8004a7e:	4313      	orrs	r3, r2
 8004a80:	6563      	str	r3, [r4, #84]	@ 0x54
 8004a82:	e7d8      	b.n	8004a36 <HAL_ADCEx_Calibration_Start+0x2e>
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8004a84:	f7fe fffb 	bl	8003a7e <HAL_GetTick>
 8004a88:	1bc0      	subs	r0, r0, r7
 8004a8a:	280a      	cmp	r0, #10
 8004a8c:	d9ea      	bls.n	8004a64 <HAL_ADCEx_Calibration_Start+0x5c>
        ADC_STATE_CLR_SET(hadc->State,
 8004a8e:	2312      	movs	r3, #18
 8004a90:	6d62      	ldr	r2, [r4, #84]	@ 0x54
        return HAL_ERROR;
 8004a92:	2001      	movs	r0, #1
        ADC_STATE_CLR_SET(hadc->State,
 8004a94:	439a      	bics	r2, r3
 8004a96:	3b02      	subs	r3, #2
 8004a98:	4313      	orrs	r3, r2
 8004a9a:	6563      	str	r3, [r4, #84]	@ 0x54
        __HAL_UNLOCK(hadc);
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	702b      	strb	r3, [r5, #0]
}
 8004aa0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004aa2:	46c0      	nop			@ (mov r8, r8)
 8004aa4:	fffffefd 	.word	0xfffffefd

08004aa8 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004aa8:	b510      	push	{r4, lr}
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004aaa:	24ff      	movs	r4, #255	@ 0xff
 8004aac:	2203      	movs	r2, #3
 8004aae:	000b      	movs	r3, r1
 8004ab0:	0021      	movs	r1, r4
 8004ab2:	4002      	ands	r2, r0
 8004ab4:	00d2      	lsls	r2, r2, #3
 8004ab6:	4091      	lsls	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004ab8:	019b      	lsls	r3, r3, #6
 8004aba:	4023      	ands	r3, r4
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004abc:	43c9      	mvns	r1, r1
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004abe:	4093      	lsls	r3, r2
  if ((int32_t)(IRQn) >= 0)
 8004ac0:	2800      	cmp	r0, #0
 8004ac2:	db0a      	blt.n	8004ada <HAL_NVIC_SetPriority+0x32>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004ac4:	24c0      	movs	r4, #192	@ 0xc0
 8004ac6:	4a0b      	ldr	r2, [pc, #44]	@ (8004af4 <HAL_NVIC_SetPriority+0x4c>)
 8004ac8:	0880      	lsrs	r0, r0, #2
 8004aca:	0080      	lsls	r0, r0, #2
 8004acc:	1880      	adds	r0, r0, r2
 8004ace:	00a4      	lsls	r4, r4, #2
 8004ad0:	5902      	ldr	r2, [r0, r4]
 8004ad2:	400a      	ands	r2, r1
 8004ad4:	4313      	orrs	r3, r2
 8004ad6:	5103      	str	r3, [r0, r4]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 8004ad8:	bd10      	pop	{r4, pc}
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004ada:	220f      	movs	r2, #15
 8004adc:	4010      	ands	r0, r2
 8004ade:	3808      	subs	r0, #8
 8004ae0:	4a05      	ldr	r2, [pc, #20]	@ (8004af8 <HAL_NVIC_SetPriority+0x50>)
 8004ae2:	0880      	lsrs	r0, r0, #2
 8004ae4:	0080      	lsls	r0, r0, #2
 8004ae6:	1880      	adds	r0, r0, r2
 8004ae8:	69c2      	ldr	r2, [r0, #28]
 8004aea:	4011      	ands	r1, r2
 8004aec:	4319      	orrs	r1, r3
 8004aee:	61c1      	str	r1, [r0, #28]
 8004af0:	e7f2      	b.n	8004ad8 <HAL_NVIC_SetPriority+0x30>
 8004af2:	46c0      	nop			@ (mov r8, r8)
 8004af4:	e000e100 	.word	0xe000e100
 8004af8:	e000ed00 	.word	0xe000ed00

08004afc <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8004afc:	2800      	cmp	r0, #0
 8004afe:	db05      	blt.n	8004b0c <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004b00:	231f      	movs	r3, #31
 8004b02:	4018      	ands	r0, r3
 8004b04:	3b1e      	subs	r3, #30
 8004b06:	4083      	lsls	r3, r0
 8004b08:	4a01      	ldr	r2, [pc, #4]	@ (8004b10 <HAL_NVIC_EnableIRQ+0x14>)
 8004b0a:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8004b0c:	4770      	bx	lr
 8004b0e:	46c0      	nop			@ (mov r8, r8)
 8004b10:	e000e100 	.word	0xe000e100

08004b14 <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8004b14:	2800      	cmp	r0, #0
 8004b16:	db09      	blt.n	8004b2c <HAL_NVIC_DisableIRQ+0x18>
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004b18:	231f      	movs	r3, #31
 8004b1a:	4018      	ands	r0, r3
 8004b1c:	3b1e      	subs	r3, #30
 8004b1e:	4083      	lsls	r3, r0
 8004b20:	4a03      	ldr	r2, [pc, #12]	@ (8004b30 <HAL_NVIC_DisableIRQ+0x1c>)
 8004b22:	67d3      	str	r3, [r2, #124]	@ 0x7c
  __ASM volatile ("dsb 0xF":::"memory");
 8004b24:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8004b28:	f3bf 8f6f 	isb	sy
    /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 8004b2c:	4770      	bx	lr
 8004b2e:	46c0      	nop			@ (mov r8, r8)
 8004b30:	e000e104 	.word	0xe000e104

08004b34 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004b34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b36:	0004      	movs	r4, r0
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
  {
    return HAL_ERROR;
 8004b38:	2001      	movs	r0, #1
  if(hdma == NULL)
 8004b3a:	2c00      	cmp	r4, #0
 8004b3c:	d035      	beq.n	8004baa <HAL_DMA_Init+0x76>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8004b3e:	6825      	ldr	r5, [r4, #0]
 8004b40:	4b1a      	ldr	r3, [pc, #104]	@ (8004bac <HAL_DMA_Init+0x78>)
 8004b42:	2114      	movs	r1, #20
 8004b44:	18e8      	adds	r0, r5, r3
 8004b46:	f7fb fb0f 	bl	8000168 <__udivsi3>
  hdma->DmaBaseAddress = DMA1;
 8004b4a:	4b19      	ldr	r3, [pc, #100]	@ (8004bb0 <HAL_DMA_Init+0x7c>)
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8004b4c:	0080      	lsls	r0, r0, #2
  hdma->DmaBaseAddress = DMA1;
 8004b4e:	6423      	str	r3, [r4, #64]	@ 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004b50:	2302      	movs	r3, #2
 8004b52:	1da2      	adds	r2, r4, #6
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8004b54:	6460      	str	r0, [r4, #68]	@ 0x44
  hdma->State = HAL_DMA_STATE_BUSY;
 8004b56:	77d3      	strb	r3, [r2, #31]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004b58:	682e      	ldr	r6, [r5, #0]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004b5a:	4b16      	ldr	r3, [pc, #88]	@ (8004bb4 <HAL_DMA_Init+0x80>)
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004b5c:	68a1      	ldr	r1, [r4, #8]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004b5e:	401e      	ands	r6, r3
  tmp |=  hdma->Init.Direction        |
 8004b60:	68e3      	ldr	r3, [r4, #12]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004b62:	6927      	ldr	r7, [r4, #16]
  tmp |=  hdma->Init.Direction        |
 8004b64:	430b      	orrs	r3, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004b66:	433b      	orrs	r3, r7
 8004b68:	6967      	ldr	r7, [r4, #20]
 8004b6a:	433b      	orrs	r3, r7
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004b6c:	69a7      	ldr	r7, [r4, #24]
 8004b6e:	433b      	orrs	r3, r7
 8004b70:	69e7      	ldr	r7, [r4, #28]
 8004b72:	433b      	orrs	r3, r7
          hdma->Init.Mode                | hdma->Init.Priority;
 8004b74:	6a27      	ldr	r7, [r4, #32]
 8004b76:	433b      	orrs	r3, r7
  tmp |=  hdma->Init.Direction        |
 8004b78:	4333      	orrs	r3, r6

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004b7a:	602b      	str	r3, [r5, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8004b7c:	2380      	movs	r3, #128	@ 0x80
 8004b7e:	01db      	lsls	r3, r3, #7
 8004b80:	4299      	cmp	r1, r3
 8004b82:	d00c      	beq.n	8004b9e <HAL_DMA_Init+0x6a>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8004b84:	251c      	movs	r5, #28
 8004b86:	4028      	ands	r0, r5
 8004b88:	3d0d      	subs	r5, #13
 8004b8a:	4085      	lsls	r5, r0
 8004b8c:	490a      	ldr	r1, [pc, #40]	@ (8004bb8 <HAL_DMA_Init+0x84>)
 8004b8e:	680b      	ldr	r3, [r1, #0]
 8004b90:	43ab      	bics	r3, r5
 8004b92:	600b      	str	r3, [r1, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8004b94:	6863      	ldr	r3, [r4, #4]
 8004b96:	680d      	ldr	r5, [r1, #0]
 8004b98:	4083      	lsls	r3, r0
 8004b9a:	432b      	orrs	r3, r5
 8004b9c:	600b      	str	r3, [r1, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004b9e:	2000      	movs	r0, #0

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8004ba0:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004ba2:	63e0      	str	r0, [r4, #60]	@ 0x3c

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004ba4:	3405      	adds	r4, #5
  hdma->State  = HAL_DMA_STATE_READY;
 8004ba6:	77d3      	strb	r3, [r2, #31]
  hdma->Lock = HAL_UNLOCKED;
 8004ba8:	77e0      	strb	r0, [r4, #31]

  return HAL_OK;
}
 8004baa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004bac:	bffdfff8 	.word	0xbffdfff8
 8004bb0:	40020000 	.word	0x40020000
 8004bb4:	ffff800f 	.word	0xffff800f
 8004bb8:	400200a8 	.word	0x400200a8

08004bbc <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8004bbc:	b570      	push	{r4, r5, r6, lr}
 8004bbe:	2501      	movs	r5, #1
 8004bc0:	0004      	movs	r4, r0

  /* Check the DMA handle allocation */
  if (NULL == hdma )
  {
    return HAL_ERROR;
 8004bc2:	0028      	movs	r0, r5
  if (NULL == hdma )
 8004bc4:	2c00      	cmp	r4, #0
 8004bc6:	d021      	beq.n	8004c0c <HAL_DMA_DeInit+0x50>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8004bc8:	6826      	ldr	r6, [r4, #0]

  /* Compute the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8004bca:	2114      	movs	r1, #20
  __HAL_DMA_DISABLE(hdma);
 8004bcc:	6833      	ldr	r3, [r6, #0]
 8004bce:	43ab      	bics	r3, r5
 8004bd0:	6033      	str	r3, [r6, #0]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8004bd2:	4b0f      	ldr	r3, [pc, #60]	@ (8004c10 <HAL_DMA_DeInit+0x54>)
 8004bd4:	18f0      	adds	r0, r6, r3
 8004bd6:	f7fb fac7 	bl	8000168 <__udivsi3>

  /* Reset DMA Channel control register */
  hdma->Instance->CCR  = 0U;

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8004bda:	211c      	movs	r1, #28
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8004bdc:	0083      	lsls	r3, r0, #2
 8004bde:	6463      	str	r3, [r4, #68]	@ 0x44
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8004be0:	400b      	ands	r3, r1
  hdma->Instance->CCR  = 0U;
 8004be2:	2000      	movs	r0, #0
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8004be4:	409d      	lsls	r5, r3

  /* Reset DMA channel selection register */
  /* DMA1 */
  DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8004be6:	390d      	subs	r1, #13
 8004be8:	4099      	lsls	r1, r3
  hdma->DmaBaseAddress = DMA1;
 8004bea:	4a0a      	ldr	r2, [pc, #40]	@ (8004c14 <HAL_DMA_DeInit+0x58>)

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8004bec:	1da3      	adds	r3, r4, #6
  hdma->DmaBaseAddress = DMA1;
 8004bee:	6422      	str	r2, [r4, #64]	@ 0x40
  hdma->Instance->CCR  = 0U;
 8004bf0:	6030      	str	r0, [r6, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8004bf2:	6055      	str	r5, [r2, #4]
  DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8004bf4:	4d08      	ldr	r5, [pc, #32]	@ (8004c18 <HAL_DMA_DeInit+0x5c>)
 8004bf6:	682a      	ldr	r2, [r5, #0]
 8004bf8:	438a      	bics	r2, r1
 8004bfa:	602a      	str	r2, [r5, #0]
  hdma->XferCpltCallback = NULL;
 8004bfc:	62e0      	str	r0, [r4, #44]	@ 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8004bfe:	6320      	str	r0, [r4, #48]	@ 0x30
  hdma->XferErrorCallback = NULL;
 8004c00:	6360      	str	r0, [r4, #52]	@ 0x34
  hdma->XferAbortCallback = NULL;
 8004c02:	63a0      	str	r0, [r4, #56]	@ 0x38
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004c04:	63e0      	str	r0, [r4, #60]	@ 0x3c

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8004c06:	3405      	adds	r4, #5
  hdma->State = HAL_DMA_STATE_RESET;
 8004c08:	77d8      	strb	r0, [r3, #31]
  __HAL_UNLOCK(hdma);
 8004c0a:	77e0      	strb	r0, [r4, #31]

  return HAL_OK;
}
 8004c0c:	bd70      	pop	{r4, r5, r6, pc}
 8004c0e:	46c0      	nop			@ (mov r8, r8)
 8004c10:	bffdfff8 	.word	0xbffdfff8
 8004c14:	40020000 	.word	0x40020000
 8004c18:	400200a8 	.word	0x400200a8

08004c1c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004c1c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004c1e:	1d44      	adds	r4, r0, #5
{
 8004c20:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hdma);
 8004c22:	7fe5      	ldrb	r5, [r4, #31]
 8004c24:	2d01      	cmp	r5, #1
 8004c26:	d035      	beq.n	8004c94 <HAL_DMA_Start_IT+0x78>
 8004c28:	2501      	movs	r5, #1

  if(HAL_DMA_STATE_READY == hdma->State)
 8004c2a:	1d87      	adds	r7, r0, #6
  __HAL_LOCK(hdma);
 8004c2c:	77e5      	strb	r5, [r4, #31]
  if(HAL_DMA_STATE_READY == hdma->State)
 8004c2e:	7ffd      	ldrb	r5, [r7, #31]
 8004c30:	2600      	movs	r6, #0
 8004c32:	46ac      	mov	ip, r5
 8004c34:	4663      	mov	r3, ip
 8004c36:	b2ed      	uxtb	r5, r5
 8004c38:	2b01      	cmp	r3, #1
 8004c3a:	d12a      	bne.n	8004c92 <HAL_DMA_Start_IT+0x76>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004c3c:	2402      	movs	r4, #2
 8004c3e:	77fc      	strb	r4, [r7, #31]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004c40:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004c42:	63c6      	str	r6, [r0, #60]	@ 0x3c
    __HAL_DMA_DISABLE(hdma);
 8004c44:	6826      	ldr	r6, [r4, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8004c46:	331b      	adds	r3, #27
    __HAL_DMA_DISABLE(hdma);
 8004c48:	43ae      	bics	r6, r5
 8004c4a:	6026      	str	r6, [r4, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8004c4c:	6c46      	ldr	r6, [r0, #68]	@ 0x44
 8004c4e:	6c07      	ldr	r7, [r0, #64]	@ 0x40
 8004c50:	401e      	ands	r6, r3
 8004c52:	40b5      	lsls	r5, r6

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004c54:	9b01      	ldr	r3, [sp, #4]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8004c56:	607d      	str	r5, [r7, #4]
  hdma->Instance->CNDTR = DataLength;
 8004c58:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004c5a:	6883      	ldr	r3, [r0, #8]
 8004c5c:	2b10      	cmp	r3, #16
 8004c5e:	d10e      	bne.n	8004c7e <HAL_DMA_Start_IT+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004c60:	60a2      	str	r2, [r4, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004c62:	60e1      	str	r1, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback )
 8004c64:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d00c      	beq.n	8004c84 <HAL_DMA_Start_IT+0x68>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004c6a:	230e      	movs	r3, #14
 8004c6c:	6822      	ldr	r2, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004c6e:	4313      	orrs	r3, r2
 8004c70:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 8004c72:	2301      	movs	r3, #1
  HAL_StatusTypeDef status = HAL_OK;
 8004c74:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8004c76:	6822      	ldr	r2, [r4, #0]
 8004c78:	4313      	orrs	r3, r2
 8004c7a:	6023      	str	r3, [r4, #0]
}
 8004c7c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8004c7e:	60a1      	str	r1, [r4, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8004c80:	60e2      	str	r2, [r4, #12]
 8004c82:	e7ef      	b.n	8004c64 <HAL_DMA_Start_IT+0x48>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004c84:	2204      	movs	r2, #4
 8004c86:	6823      	ldr	r3, [r4, #0]
 8004c88:	4393      	bics	r3, r2
 8004c8a:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004c8c:	6822      	ldr	r2, [r4, #0]
 8004c8e:	230a      	movs	r3, #10
 8004c90:	e7ed      	b.n	8004c6e <HAL_DMA_Start_IT+0x52>
    __HAL_UNLOCK(hdma);
 8004c92:	77e6      	strb	r6, [r4, #31]
  __HAL_LOCK(hdma);
 8004c94:	2002      	movs	r0, #2
 8004c96:	e7f1      	b.n	8004c7c <HAL_DMA_Start_IT+0x60>

08004c98 <HAL_DMA_Abort>:
{
 8004c98:	b530      	push	{r4, r5, lr}
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004c9a:	1d84      	adds	r4, r0, #6
 8004c9c:	7fe2      	ldrb	r2, [r4, #31]
{
 8004c9e:	0003      	movs	r3, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004ca0:	2a02      	cmp	r2, #2
 8004ca2:	d006      	beq.n	8004cb2 <HAL_DMA_Abort+0x1a>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004ca4:	2204      	movs	r2, #4
 8004ca6:	63c2      	str	r2, [r0, #60]	@ 0x3c
    return HAL_ERROR;
 8004ca8:	2001      	movs	r0, #1
    __HAL_UNLOCK(hdma);
 8004caa:	2200      	movs	r2, #0
 8004cac:	3305      	adds	r3, #5
 8004cae:	77da      	strb	r2, [r3, #31]
}
 8004cb0:	bd30      	pop	{r4, r5, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004cb2:	6802      	ldr	r2, [r0, #0]
 8004cb4:	200e      	movs	r0, #14
 8004cb6:	6811      	ldr	r1, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8004cb8:	251c      	movs	r5, #28
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004cba:	4381      	bics	r1, r0
 8004cbc:	6011      	str	r1, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8004cbe:	2101      	movs	r1, #1
 8004cc0:	6810      	ldr	r0, [r2, #0]
 8004cc2:	4388      	bics	r0, r1
 8004cc4:	6010      	str	r0, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8004cc6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004cc8:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 8004cca:	402a      	ands	r2, r5
 8004ccc:	000d      	movs	r5, r1
 8004cce:	4095      	lsls	r5, r2
 8004cd0:	6045      	str	r5, [r0, #4]
    return status;
 8004cd2:	2000      	movs	r0, #0
    hdma->State = HAL_DMA_STATE_READY;
 8004cd4:	77e1      	strb	r1, [r4, #31]
    return status;
 8004cd6:	e7e8      	b.n	8004caa <HAL_DMA_Abort+0x12>

08004cd8 <HAL_DMA_Abort_IT>:
{
 8004cd8:	b570      	push	{r4, r5, r6, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004cda:	1d84      	adds	r4, r0, #6
 8004cdc:	7fe3      	ldrb	r3, [r4, #31]
 8004cde:	2b02      	cmp	r3, #2
 8004ce0:	d003      	beq.n	8004cea <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004ce2:	2304      	movs	r3, #4
 8004ce4:	63c3      	str	r3, [r0, #60]	@ 0x3c
    status = HAL_ERROR;
 8004ce6:	2001      	movs	r0, #1
}
 8004ce8:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004cea:	210e      	movs	r1, #14
 8004cec:	6803      	ldr	r3, [r0, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8004cee:	251c      	movs	r5, #28
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004cf0:	681a      	ldr	r2, [r3, #0]
 8004cf2:	438a      	bics	r2, r1
 8004cf4:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8004cf6:	2201      	movs	r2, #1
 8004cf8:	6819      	ldr	r1, [r3, #0]
 8004cfa:	4391      	bics	r1, r2
 8004cfc:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8004cfe:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8004d00:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 8004d02:	402b      	ands	r3, r5
 8004d04:	0015      	movs	r5, r2
 8004d06:	409d      	lsls	r5, r3
 8004d08:	604d      	str	r5, [r1, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8004d0a:	77e2      	strb	r2, [r4, #31]
    __HAL_UNLOCK(hdma);
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	1d43      	adds	r3, r0, #5
 8004d10:	77da      	strb	r2, [r3, #31]
    if(hdma->XferAbortCallback != NULL)
 8004d12:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8004d14:	4293      	cmp	r3, r2
 8004d16:	d000      	beq.n	8004d1a <HAL_DMA_Abort_IT+0x42>
      hdma->XferAbortCallback(hdma);
 8004d18:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8004d1a:	2000      	movs	r0, #0
 8004d1c:	e7e4      	b.n	8004ce8 <HAL_DMA_Abort_IT+0x10>

08004d1e <HAL_DMA_IRQHandler>:
{
 8004d1e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8004d20:	261c      	movs	r6, #28
 8004d22:	2704      	movs	r7, #4
 8004d24:	6c42      	ldr	r2, [r0, #68]	@ 0x44
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004d26:	6c01      	ldr	r1, [r0, #64]	@ 0x40
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8004d28:	4032      	ands	r2, r6
 8004d2a:	003e      	movs	r6, r7
 8004d2c:	4096      	lsls	r6, r2
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004d2e:	680d      	ldr	r5, [r1, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8004d30:	6803      	ldr	r3, [r0, #0]
 8004d32:	681c      	ldr	r4, [r3, #0]
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8004d34:	4235      	tst	r5, r6
 8004d36:	d00d      	beq.n	8004d54 <HAL_DMA_IRQHandler+0x36>
 8004d38:	423c      	tst	r4, r7
 8004d3a:	d00b      	beq.n	8004d54 <HAL_DMA_IRQHandler+0x36>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004d3c:	681a      	ldr	r2, [r3, #0]
 8004d3e:	0692      	lsls	r2, r2, #26
 8004d40:	d402      	bmi.n	8004d48 <HAL_DMA_IRQHandler+0x2a>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004d42:	681a      	ldr	r2, [r3, #0]
 8004d44:	43ba      	bics	r2, r7
 8004d46:	601a      	str	r2, [r3, #0]
     if(hdma->XferHalfCpltCallback != NULL)
 8004d48:	6b03      	ldr	r3, [r0, #48]	@ 0x30
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 8004d4a:	604e      	str	r6, [r1, #4]
     if(hdma->XferHalfCpltCallback != NULL)
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d019      	beq.n	8004d84 <HAL_DMA_IRQHandler+0x66>
      hdma->XferErrorCallback(hdma);
 8004d50:	4798      	blx	r3
  return;
 8004d52:	e017      	b.n	8004d84 <HAL_DMA_IRQHandler+0x66>
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8004d54:	2702      	movs	r7, #2
 8004d56:	003e      	movs	r6, r7
 8004d58:	4096      	lsls	r6, r2
 8004d5a:	4235      	tst	r5, r6
 8004d5c:	d013      	beq.n	8004d86 <HAL_DMA_IRQHandler+0x68>
 8004d5e:	423c      	tst	r4, r7
 8004d60:	d011      	beq.n	8004d86 <HAL_DMA_IRQHandler+0x68>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004d62:	681a      	ldr	r2, [r3, #0]
 8004d64:	0692      	lsls	r2, r2, #26
 8004d66:	d406      	bmi.n	8004d76 <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004d68:	240a      	movs	r4, #10
 8004d6a:	681a      	ldr	r2, [r3, #0]
 8004d6c:	43a2      	bics	r2, r4
 8004d6e:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8004d70:	2201      	movs	r2, #1
 8004d72:	1d83      	adds	r3, r0, #6
 8004d74:	77da      	strb	r2, [r3, #31]
    __HAL_UNLOCK(hdma);
 8004d76:	2200      	movs	r2, #0
 8004d78:	1d43      	adds	r3, r0, #5
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8004d7a:	604e      	str	r6, [r1, #4]
    __HAL_UNLOCK(hdma);
 8004d7c:	77da      	strb	r2, [r3, #31]
    if(hdma->XferCpltCallback != NULL)
 8004d7e:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
    if (hdma->XferErrorCallback != NULL)
 8004d80:	4293      	cmp	r3, r2
 8004d82:	d1e5      	bne.n	8004d50 <HAL_DMA_IRQHandler+0x32>
}
 8004d84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 8004d86:	2608      	movs	r6, #8
 8004d88:	0037      	movs	r7, r6
 8004d8a:	4097      	lsls	r7, r2
 8004d8c:	423d      	tst	r5, r7
 8004d8e:	d0f9      	beq.n	8004d84 <HAL_DMA_IRQHandler+0x66>
 8004d90:	4234      	tst	r4, r6
 8004d92:	d0f7      	beq.n	8004d84 <HAL_DMA_IRQHandler+0x66>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004d94:	250e      	movs	r5, #14
 8004d96:	681c      	ldr	r4, [r3, #0]
 8004d98:	43ac      	bics	r4, r5
 8004d9a:	601c      	str	r4, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8004d9c:	2301      	movs	r3, #1
 8004d9e:	001c      	movs	r4, r3
 8004da0:	4094      	lsls	r4, r2
    hdma->State = HAL_DMA_STATE_READY;
 8004da2:	1d82      	adds	r2, r0, #6
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8004da4:	604c      	str	r4, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004da6:	63c3      	str	r3, [r0, #60]	@ 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 8004da8:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hdma);
 8004daa:	2200      	movs	r2, #0
 8004dac:	1d43      	adds	r3, r0, #5
 8004dae:	77da      	strb	r2, [r3, #31]
    if (hdma->XferErrorCallback != NULL)
 8004db0:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8004db2:	e7e5      	b.n	8004d80 <HAL_DMA_IRQHandler+0x62>

08004db4 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8004db4:	0003      	movs	r3, r0
 8004db6:	1e08      	subs	r0, r1, #0
  HAL_StatusTypeDef status = HAL_OK;

  switch (CallbackID)
 8004db8:	d101      	bne.n	8004dbe <HAL_EXTI_RegisterCallback+0xa>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8004dba:	605a      	str	r2, [r3, #4]
      status = HAL_ERROR;
      break;
  }

  return status;
}
 8004dbc:	4770      	bx	lr
      status = HAL_ERROR;
 8004dbe:	2001      	movs	r0, #1
 8004dc0:	e7fc      	b.n	8004dbc <HAL_EXTI_RegisterCallback+0x8>

08004dc2 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8004dc2:	0003      	movs	r3, r0
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
  {
    return HAL_ERROR;
 8004dc4:	2001      	movs	r0, #1
  if (hexti == NULL)
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d001      	beq.n	8004dce <HAL_EXTI_GetHandle+0xc>
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;

    return HAL_OK;
 8004dca:	2000      	movs	r0, #0
    hexti->Line = ExtiLine;
 8004dcc:	6019      	str	r1, [r3, #0]
  }
}
 8004dce:	4770      	bx	lr

08004dd0 <HAL_EXTI_IRQHandler>:
{
  uint32_t regval;
  uint32_t maskline;

  /* Compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8004dd0:	231f      	movs	r3, #31
 8004dd2:	6802      	ldr	r2, [r0, #0]
{
 8004dd4:	b510      	push	{r4, lr}
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8004dd6:	401a      	ands	r2, r3
 8004dd8:	3b1e      	subs	r3, #30
 8004dda:	4093      	lsls	r3, r2

  /* Get pending bit  */
  regval = (EXTI->PR & maskline);
 8004ddc:	4a04      	ldr	r2, [pc, #16]	@ (8004df0 <HAL_EXTI_IRQHandler+0x20>)
 8004dde:	6951      	ldr	r1, [r2, #20]
  if (regval != 0x00u)
 8004de0:	420b      	tst	r3, r1
 8004de2:	d004      	beq.n	8004dee <HAL_EXTI_IRQHandler+0x1e>
  {
    /* Clear pending bit */
    EXTI->PR = maskline;
 8004de4:	6153      	str	r3, [r2, #20]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 8004de6:	6843      	ldr	r3, [r0, #4]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d000      	beq.n	8004dee <HAL_EXTI_IRQHandler+0x1e>
    {
      hexti->PendingCallback();
 8004dec:	4798      	blx	r3
    }
  }
}
 8004dee:	bd10      	pop	{r4, pc}
 8004df0:	40010400 	.word	0x40010400

08004df4 <HAL_GPIO_Init>:
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
  uint32_t position = 0x00U;
 8004df4:	2300      	movs	r3, #0
{
 8004df6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004df8:	b085      	sub	sp, #20
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8004dfa:	680a      	ldr	r2, [r1, #0]
 8004dfc:	0014      	movs	r4, r2
 8004dfe:	40dc      	lsrs	r4, r3
 8004e00:	d101      	bne.n	8004e06 <HAL_GPIO_Init+0x12>
        EXTI->FTSR = temp;
      }
    }
    position++;
  }
}
 8004e02:	b005      	add	sp, #20
 8004e04:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8004e06:	2401      	movs	r4, #1
 8004e08:	0015      	movs	r5, r2
 8004e0a:	409c      	lsls	r4, r3
 8004e0c:	4025      	ands	r5, r4
 8004e0e:	9502      	str	r5, [sp, #8]
    if (iocurrent)
 8004e10:	4222      	tst	r2, r4
 8004e12:	d100      	bne.n	8004e16 <HAL_GPIO_Init+0x22>
 8004e14:	e098      	b.n	8004f48 <HAL_GPIO_Init+0x154>
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004e16:	2510      	movs	r5, #16
 8004e18:	684a      	ldr	r2, [r1, #4]
 8004e1a:	005f      	lsls	r7, r3, #1
 8004e1c:	9201      	str	r2, [sp, #4]
 8004e1e:	43aa      	bics	r2, r5
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8004e20:	3d0d      	subs	r5, #13
 8004e22:	40bd      	lsls	r5, r7
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004e24:	4694      	mov	ip, r2
 8004e26:	3a01      	subs	r2, #1
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8004e28:	43ed      	mvns	r5, r5
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004e2a:	2a01      	cmp	r2, #1
 8004e2c:	d80d      	bhi.n	8004e4a <HAL_GPIO_Init+0x56>
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004e2e:	68ca      	ldr	r2, [r1, #12]
        temp = GPIOx->OSPEEDR;
 8004e30:	6886      	ldr	r6, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004e32:	40ba      	lsls	r2, r7
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8004e34:	402e      	ands	r6, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004e36:	4332      	orrs	r2, r6
        GPIOx->OSPEEDR = temp;
 8004e38:	6082      	str	r2, [r0, #8]
        temp = GPIOx->OTYPER;
 8004e3a:	6842      	ldr	r2, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004e3c:	43a2      	bics	r2, r4
 8004e3e:	0014      	movs	r4, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004e40:	9a01      	ldr	r2, [sp, #4]
 8004e42:	0912      	lsrs	r2, r2, #4
 8004e44:	409a      	lsls	r2, r3
 8004e46:	4322      	orrs	r2, r4
        GPIOx->OTYPER = temp;
 8004e48:	6042      	str	r2, [r0, #4]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004e4a:	688a      	ldr	r2, [r1, #8]
      temp = GPIOx->PUPDR;
 8004e4c:	68c4      	ldr	r4, [r0, #12]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004e4e:	40ba      	lsls	r2, r7
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004e50:	402c      	ands	r4, r5
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004e52:	4322      	orrs	r2, r4
      GPIOx->PUPDR = temp;
 8004e54:	60c2      	str	r2, [r0, #12]
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004e56:	4662      	mov	r2, ip
 8004e58:	2a02      	cmp	r2, #2
 8004e5a:	d114      	bne.n	8004e86 <HAL_GPIO_Init+0x92>
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8004e5c:	2407      	movs	r4, #7
 8004e5e:	260f      	movs	r6, #15
 8004e60:	401c      	ands	r4, r3
 8004e62:	00a4      	lsls	r4, r4, #2
 8004e64:	40a6      	lsls	r6, r4
 8004e66:	46b4      	mov	ip, r6
        temp = GPIOx->AFR[position >> 3U];
 8004e68:	08da      	lsrs	r2, r3, #3
 8004e6a:	0092      	lsls	r2, r2, #2
 8004e6c:	1882      	adds	r2, r0, r2
 8004e6e:	9203      	str	r2, [sp, #12]
 8004e70:	6a12      	ldr	r2, [r2, #32]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8004e72:	0016      	movs	r6, r2
 8004e74:	4662      	mov	r2, ip
 8004e76:	4396      	bics	r6, r2
 8004e78:	46b4      	mov	ip, r6
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8004e7a:	690e      	ldr	r6, [r1, #16]
 8004e7c:	4662      	mov	r2, ip
 8004e7e:	40a6      	lsls	r6, r4
 8004e80:	4316      	orrs	r6, r2
        GPIOx->AFR[position >> 3U] = temp;
 8004e82:	9a03      	ldr	r2, [sp, #12]
 8004e84:	6216      	str	r6, [r2, #32]
      temp = GPIOx->MODER;
 8004e86:	6804      	ldr	r4, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004e88:	9a01      	ldr	r2, [sp, #4]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004e8a:	402c      	ands	r4, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004e8c:	2503      	movs	r5, #3
 8004e8e:	402a      	ands	r2, r5
 8004e90:	40ba      	lsls	r2, r7
 8004e92:	4322      	orrs	r2, r4
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004e94:	2480      	movs	r4, #128	@ 0x80
      GPIOx->MODER = temp;
 8004e96:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004e98:	9a01      	ldr	r2, [sp, #4]
 8004e9a:	0564      	lsls	r4, r4, #21
 8004e9c:	4222      	tst	r2, r4
 8004e9e:	d053      	beq.n	8004f48 <HAL_GPIO_Init+0x154>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004ea0:	4c2a      	ldr	r4, [pc, #168]	@ (8004f4c <HAL_GPIO_Init+0x158>)
 8004ea2:	3d02      	subs	r5, #2
 8004ea4:	6b62      	ldr	r2, [r4, #52]	@ 0x34
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8004ea6:	27a0      	movs	r7, #160	@ 0xa0
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004ea8:	432a      	orrs	r2, r5
 8004eaa:	6362      	str	r2, [r4, #52]	@ 0x34
        temp = SYSCFG->EXTICR[position >> 2U];
 8004eac:	4a28      	ldr	r2, [pc, #160]	@ (8004f50 <HAL_GPIO_Init+0x15c>)
 8004eae:	089c      	lsrs	r4, r3, #2
 8004eb0:	00a4      	lsls	r4, r4, #2
 8004eb2:	18a4      	adds	r4, r4, r2
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8004eb4:	220f      	movs	r2, #15
 8004eb6:	3502      	adds	r5, #2
 8004eb8:	401d      	ands	r5, r3
 8004eba:	00ad      	lsls	r5, r5, #2
 8004ebc:	40aa      	lsls	r2, r5
        temp = SYSCFG->EXTICR[position >> 2U];
 8004ebe:	68a6      	ldr	r6, [r4, #8]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8004ec0:	05ff      	lsls	r7, r7, #23
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8004ec2:	4396      	bics	r6, r2
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	42b8      	cmp	r0, r7
 8004ec8:	d014      	beq.n	8004ef4 <HAL_GPIO_Init+0x100>
 8004eca:	4f22      	ldr	r7, [pc, #136]	@ (8004f54 <HAL_GPIO_Init+0x160>)
 8004ecc:	3201      	adds	r2, #1
 8004ece:	42b8      	cmp	r0, r7
 8004ed0:	d010      	beq.n	8004ef4 <HAL_GPIO_Init+0x100>
 8004ed2:	4f21      	ldr	r7, [pc, #132]	@ (8004f58 <HAL_GPIO_Init+0x164>)
 8004ed4:	3201      	adds	r2, #1
 8004ed6:	42b8      	cmp	r0, r7
 8004ed8:	d00c      	beq.n	8004ef4 <HAL_GPIO_Init+0x100>
 8004eda:	4f20      	ldr	r7, [pc, #128]	@ (8004f5c <HAL_GPIO_Init+0x168>)
 8004edc:	3201      	adds	r2, #1
 8004ede:	42b8      	cmp	r0, r7
 8004ee0:	d008      	beq.n	8004ef4 <HAL_GPIO_Init+0x100>
 8004ee2:	4f1f      	ldr	r7, [pc, #124]	@ (8004f60 <HAL_GPIO_Init+0x16c>)
 8004ee4:	3201      	adds	r2, #1
 8004ee6:	42b8      	cmp	r0, r7
 8004ee8:	d004      	beq.n	8004ef4 <HAL_GPIO_Init+0x100>
 8004eea:	4a1e      	ldr	r2, [pc, #120]	@ (8004f64 <HAL_GPIO_Init+0x170>)
 8004eec:	1882      	adds	r2, r0, r2
 8004eee:	1e57      	subs	r7, r2, #1
 8004ef0:	41ba      	sbcs	r2, r7
 8004ef2:	3205      	adds	r2, #5
 8004ef4:	40aa      	lsls	r2, r5
 8004ef6:	4332      	orrs	r2, r6
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004ef8:	60a2      	str	r2, [r4, #8]
        temp = EXTI->IMR;
 8004efa:	4a1b      	ldr	r2, [pc, #108]	@ (8004f68 <HAL_GPIO_Init+0x174>)
        temp &= ~((uint32_t)iocurrent);
 8004efc:	9c02      	ldr	r4, [sp, #8]
        temp = EXTI->IMR;
 8004efe:	6816      	ldr	r6, [r2, #0]
          temp |= iocurrent;
 8004f00:	9d02      	ldr	r5, [sp, #8]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004f02:	9f01      	ldr	r7, [sp, #4]
        temp &= ~((uint32_t)iocurrent);
 8004f04:	43e4      	mvns	r4, r4
          temp |= iocurrent;
 8004f06:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004f08:	03ff      	lsls	r7, r7, #15
 8004f0a:	d401      	bmi.n	8004f10 <HAL_GPIO_Init+0x11c>
        temp &= ~((uint32_t)iocurrent);
 8004f0c:	0035      	movs	r5, r6
 8004f0e:	4025      	ands	r5, r4
        EXTI->IMR = temp;
 8004f10:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR;
 8004f12:	6856      	ldr	r6, [r2, #4]
          temp |= iocurrent;
 8004f14:	9d02      	ldr	r5, [sp, #8]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004f16:	9f01      	ldr	r7, [sp, #4]
          temp |= iocurrent;
 8004f18:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004f1a:	03bf      	lsls	r7, r7, #14
 8004f1c:	d401      	bmi.n	8004f22 <HAL_GPIO_Init+0x12e>
        temp &= ~((uint32_t)iocurrent);
 8004f1e:	0035      	movs	r5, r6
 8004f20:	4025      	ands	r5, r4
        EXTI->EMR = temp;
 8004f22:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR;
 8004f24:	6896      	ldr	r6, [r2, #8]
          temp |= iocurrent;
 8004f26:	9d02      	ldr	r5, [sp, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004f28:	9f01      	ldr	r7, [sp, #4]
          temp |= iocurrent;
 8004f2a:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004f2c:	02ff      	lsls	r7, r7, #11
 8004f2e:	d401      	bmi.n	8004f34 <HAL_GPIO_Init+0x140>
        temp &= ~((uint32_t)iocurrent);
 8004f30:	0035      	movs	r5, r6
 8004f32:	4025      	ands	r5, r4
        EXTI->RTSR = temp;
 8004f34:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 8004f36:	68d5      	ldr	r5, [r2, #12]
          temp |= iocurrent;
 8004f38:	9e02      	ldr	r6, [sp, #8]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004f3a:	9f01      	ldr	r7, [sp, #4]
          temp |= iocurrent;
 8004f3c:	432e      	orrs	r6, r5
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004f3e:	02bf      	lsls	r7, r7, #10
 8004f40:	d401      	bmi.n	8004f46 <HAL_GPIO_Init+0x152>
        temp &= ~((uint32_t)iocurrent);
 8004f42:	4025      	ands	r5, r4
 8004f44:	002e      	movs	r6, r5
        EXTI->FTSR = temp;
 8004f46:	60d6      	str	r6, [r2, #12]
    position++;
 8004f48:	3301      	adds	r3, #1
 8004f4a:	e756      	b.n	8004dfa <HAL_GPIO_Init+0x6>
 8004f4c:	40021000 	.word	0x40021000
 8004f50:	40010000 	.word	0x40010000
 8004f54:	50000400 	.word	0x50000400
 8004f58:	50000800 	.word	0x50000800
 8004f5c:	50000c00 	.word	0x50000c00
 8004f60:	50001000 	.word	0x50001000
 8004f64:	afffe400 	.word	0xafffe400
 8004f68:	40010400 	.word	0x40010400

08004f6c <HAL_GPIO_DeInit>:
  *                   This parameter can be one of GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004f6c:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t position = 0x00U;
 8004f6e:	2200      	movs	r2, #0
{
 8004f70:	000f      	movs	r7, r1
 8004f72:	b085      	sub	sp, #20

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0)
 8004f74:	003b      	movs	r3, r7
 8004f76:	40d3      	lsrs	r3, r2
 8004f78:	d101      	bne.n	8004f7e <HAL_GPIO_DeInit+0x12>
      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
    }
    position++;
  }
}
 8004f7a:	b005      	add	sp, #20
 8004f7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Pin) & (1U << position);
 8004f7e:	2301      	movs	r3, #1
 8004f80:	4093      	lsls	r3, r2
 8004f82:	001c      	movs	r4, r3
 8004f84:	9301      	str	r3, [sp, #4]
 8004f86:	403c      	ands	r4, r7
    if (iocurrent)
 8004f88:	421f      	tst	r7, r3
 8004f8a:	d05a      	beq.n	8005042 <HAL_GPIO_DeInit+0xd6>
      tmp = SYSCFG->EXTICR[position >> 2U];
 8004f8c:	4b2e      	ldr	r3, [pc, #184]	@ (8005048 <HAL_GPIO_DeInit+0xdc>)
      tmp &= ((0x0FUL) << (4U * (position & 0x03U)));
 8004f8e:	2503      	movs	r5, #3
      tmp = SYSCFG->EXTICR[position >> 2U];
 8004f90:	0891      	lsrs	r1, r2, #2
 8004f92:	0089      	lsls	r1, r1, #2
 8004f94:	18c9      	adds	r1, r1, r3
      tmp &= ((0x0FUL) << (4U * (position & 0x03U)));
 8004f96:	230f      	movs	r3, #15
 8004f98:	4015      	ands	r5, r2
 8004f9a:	00ad      	lsls	r5, r5, #2
 8004f9c:	40ab      	lsls	r3, r5
      tmp = SYSCFG->EXTICR[position >> 2U];
 8004f9e:	688e      	ldr	r6, [r1, #8]
      tmp &= ((0x0FUL) << (4U * (position & 0x03U)));
 8004fa0:	9302      	str	r3, [sp, #8]
 8004fa2:	401e      	ands	r6, r3
 8004fa4:	9603      	str	r6, [sp, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8004fa6:	26a0      	movs	r6, #160	@ 0xa0
 8004fa8:	2300      	movs	r3, #0
 8004faa:	05f6      	lsls	r6, r6, #23
 8004fac:	42b0      	cmp	r0, r6
 8004fae:	d018      	beq.n	8004fe2 <HAL_GPIO_DeInit+0x76>
 8004fb0:	4b26      	ldr	r3, [pc, #152]	@ (800504c <HAL_GPIO_DeInit+0xe0>)
 8004fb2:	469c      	mov	ip, r3
 8004fb4:	2301      	movs	r3, #1
 8004fb6:	4560      	cmp	r0, ip
 8004fb8:	d013      	beq.n	8004fe2 <HAL_GPIO_DeInit+0x76>
 8004fba:	4b25      	ldr	r3, [pc, #148]	@ (8005050 <HAL_GPIO_DeInit+0xe4>)
 8004fbc:	469c      	mov	ip, r3
 8004fbe:	2302      	movs	r3, #2
 8004fc0:	4560      	cmp	r0, ip
 8004fc2:	d00e      	beq.n	8004fe2 <HAL_GPIO_DeInit+0x76>
 8004fc4:	4b23      	ldr	r3, [pc, #140]	@ (8005054 <HAL_GPIO_DeInit+0xe8>)
 8004fc6:	469c      	mov	ip, r3
 8004fc8:	2303      	movs	r3, #3
 8004fca:	4560      	cmp	r0, ip
 8004fcc:	d009      	beq.n	8004fe2 <HAL_GPIO_DeInit+0x76>
 8004fce:	4b22      	ldr	r3, [pc, #136]	@ (8005058 <HAL_GPIO_DeInit+0xec>)
 8004fd0:	469c      	mov	ip, r3
 8004fd2:	2304      	movs	r3, #4
 8004fd4:	4560      	cmp	r0, ip
 8004fd6:	d004      	beq.n	8004fe2 <HAL_GPIO_DeInit+0x76>
 8004fd8:	4b20      	ldr	r3, [pc, #128]	@ (800505c <HAL_GPIO_DeInit+0xf0>)
 8004fda:	18c3      	adds	r3, r0, r3
 8004fdc:	1e5e      	subs	r6, r3, #1
 8004fde:	41b3      	sbcs	r3, r6
 8004fe0:	3305      	adds	r3, #5
 8004fe2:	40ab      	lsls	r3, r5
 8004fe4:	9d03      	ldr	r5, [sp, #12]
 8004fe6:	42ab      	cmp	r3, r5
 8004fe8:	d110      	bne.n	800500c <HAL_GPIO_DeInit+0xa0>
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8004fea:	4b1d      	ldr	r3, [pc, #116]	@ (8005060 <HAL_GPIO_DeInit+0xf4>)
 8004fec:	681d      	ldr	r5, [r3, #0]
 8004fee:	43a5      	bics	r5, r4
 8004ff0:	601d      	str	r5, [r3, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8004ff2:	685d      	ldr	r5, [r3, #4]
 8004ff4:	43a5      	bics	r5, r4
 8004ff6:	605d      	str	r5, [r3, #4]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8004ff8:	689d      	ldr	r5, [r3, #8]
 8004ffa:	43a5      	bics	r5, r4
 8004ffc:	609d      	str	r5, [r3, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8004ffe:	68dd      	ldr	r5, [r3, #12]
 8005000:	43a5      	bics	r5, r4
 8005002:	60dd      	str	r5, [r3, #12]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8005004:	688b      	ldr	r3, [r1, #8]
 8005006:	9c02      	ldr	r4, [sp, #8]
 8005008:	43a3      	bics	r3, r4
 800500a:	608b      	str	r3, [r1, #8]
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 800500c:	2403      	movs	r4, #3
 800500e:	0051      	lsls	r1, r2, #1
 8005010:	408c      	lsls	r4, r1
      GPIOx->AFR[position >> 3U] &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8005012:	2107      	movs	r1, #7
 8005014:	260f      	movs	r6, #15
 8005016:	4011      	ands	r1, r2
 8005018:	0089      	lsls	r1, r1, #2
 800501a:	408e      	lsls	r6, r1
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 800501c:	6803      	ldr	r3, [r0, #0]
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position);
 800501e:	9901      	ldr	r1, [sp, #4]
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8005020:	4323      	orrs	r3, r4
 8005022:	6003      	str	r3, [r0, #0]
      GPIOx->AFR[position >> 3U] &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8005024:	08d3      	lsrs	r3, r2, #3
 8005026:	009b      	lsls	r3, r3, #2
 8005028:	18c3      	adds	r3, r0, r3
 800502a:	6a1d      	ldr	r5, [r3, #32]
 800502c:	43b5      	bics	r5, r6
 800502e:	621d      	str	r5, [r3, #32]
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005030:	68c3      	ldr	r3, [r0, #12]
 8005032:	43a3      	bics	r3, r4
 8005034:	60c3      	str	r3, [r0, #12]
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position);
 8005036:	6843      	ldr	r3, [r0, #4]
 8005038:	438b      	bics	r3, r1
 800503a:	6043      	str	r3, [r0, #4]
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800503c:	6883      	ldr	r3, [r0, #8]
 800503e:	43a3      	bics	r3, r4
 8005040:	6083      	str	r3, [r0, #8]
    position++;
 8005042:	3201      	adds	r2, #1
 8005044:	e796      	b.n	8004f74 <HAL_GPIO_DeInit+0x8>
 8005046:	46c0      	nop			@ (mov r8, r8)
 8005048:	40010000 	.word	0x40010000
 800504c:	50000400 	.word	0x50000400
 8005050:	50000800 	.word	0x50000800
 8005054:	50000c00 	.word	0x50000c00
 8005058:	50001000 	.word	0x50001000
 800505c:	afffe400 	.word	0xafffe400
 8005060:	40010400 	.word	0x40010400

08005064 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005064:	6900      	ldr	r0, [r0, #16]
 8005066:	4008      	ands	r0, r1
 8005068:	1e43      	subs	r3, r0, #1
 800506a:	4198      	sbcs	r0, r3
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
 800506c:	b2c0      	uxtb	r0, r0
}
 800506e:	4770      	bx	lr

08005070 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005070:	2a00      	cmp	r2, #0
 8005072:	d001      	beq.n	8005078 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005074:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8005076:	4770      	bx	lr
    GPIOx->BRR = GPIO_Pin ;
 8005078:	6281      	str	r1, [r0, #40]	@ 0x28
}
 800507a:	e7fc      	b.n	8005076 <HAL_GPIO_WritePin+0x6>

0800507c <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800507c:	6942      	ldr	r2, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800507e:	0013      	movs	r3, r2
 8005080:	400b      	ands	r3, r1
 8005082:	041b      	lsls	r3, r3, #16
 8005084:	4391      	bics	r1, r2
 8005086:	430b      	orrs	r3, r1
 8005088:	6183      	str	r3, [r0, #24]
}
 800508a:	4770      	bx	lr

0800508c <HAL_PWR_DisablePVD>:
  * @retval None
  */
void HAL_PWR_DisablePVD(void)
{
  /* Disable the power voltage detector */
  CLEAR_BIT(PWR->CR, PWR_CR_PVDE);
 800508c:	2110      	movs	r1, #16
 800508e:	4a02      	ldr	r2, [pc, #8]	@ (8005098 <HAL_PWR_DisablePVD+0xc>)
 8005090:	6813      	ldr	r3, [r2, #0]
 8005092:	438b      	bics	r3, r1
 8005094:	6013      	str	r3, [r2, #0]
}
 8005096:	4770      	bx	lr
 8005098:	40007000 	.word	0x40007000

0800509c <HAL_PWR_EnterSLEEPMode>:
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* It is forbidden to configure both EN_VREFINT=1 and ULP=1 if the device is
     in Stop mode or in Sleep/Low-power sleep mode */
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 800509c:	4b17      	ldr	r3, [pc, #92]	@ (80050fc <HAL_PWR_EnterSLEEPMode+0x60>)
{
 800509e:	b5f0      	push	{r4, r5, r6, r7, lr}
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 80050a0:	681e      	ldr	r6, [r3, #0]
{
 80050a2:	0005      	movs	r5, r0
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 80050a4:	2080      	movs	r0, #128	@ 0x80
 80050a6:	0034      	movs	r4, r6
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 80050a8:	2701      	movs	r7, #1
 80050aa:	4a15      	ldr	r2, [pc, #84]	@ (8005100 <HAL_PWR_EnterSLEEPMode+0x64>)
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 80050ac:	0080      	lsls	r0, r0, #2
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 80050ae:	6a12      	ldr	r2, [r2, #32]
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 80050b0:	4004      	ands	r4, r0
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 80050b2:	403a      	ands	r2, r7
  if((ulpbit != 0) && (vrefinbit != 0))
 80050b4:	4206      	tst	r6, r0
 80050b6:	d005      	beq.n	80050c4 <HAL_PWR_EnterSLEEPMode+0x28>
 80050b8:	2a00      	cmp	r2, #0
 80050ba:	d003      	beq.n	80050c4 <HAL_PWR_EnterSLEEPMode+0x28>
  {
    CLEAR_BIT(PWR->CR, PWR_CR_ULP);
 80050bc:	6818      	ldr	r0, [r3, #0]
 80050be:	4e11      	ldr	r6, [pc, #68]	@ (8005104 <HAL_PWR_EnterSLEEPMode+0x68>)
 80050c0:	4030      	ands	r0, r6
 80050c2:	6018      	str	r0, [r3, #0]

  /* Select the regulator state in Sleep mode ---------------------------------*/
  tmpreg = PWR->CR;

  /* Clear PDDS and LPDS bits */
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 80050c4:	2603      	movs	r6, #3
  tmpreg = PWR->CR;
 80050c6:	6818      	ldr	r0, [r3, #0]
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 80050c8:	43b0      	bics	r0, r6

 /* Set LPSDSR bit according to PWR_Regulator value */
  SET_BIT(tmpreg, Regulator);
 80050ca:	4328      	orrs	r0, r5

  /* Store the new value */
  PWR->CR = tmpreg;
  
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 80050cc:	4d0e      	ldr	r5, [pc, #56]	@ (8005108 <HAL_PWR_EnterSLEEPMode+0x6c>)
  PWR->CR = tmpreg;
 80050ce:	6018      	str	r0, [r3, #0]
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 80050d0:	6928      	ldr	r0, [r5, #16]
 80050d2:	3601      	adds	r6, #1
 80050d4:	43b0      	bics	r0, r6
 80050d6:	6128      	str	r0, [r5, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 80050d8:	2901      	cmp	r1, #1
 80050da:	d10b      	bne.n	80050f4 <HAL_PWR_EnterSLEEPMode+0x58>
  {
    /* Request Wait For Interrupt */
    __WFI();
 80050dc:	bf30      	wfi
    __SEV();
    __WFE();
    __WFE();
  }

  if((ulpbit != 0) && (vrefinbit != 0))
 80050de:	2c00      	cmp	r4, #0
 80050e0:	d006      	beq.n	80050f0 <HAL_PWR_EnterSLEEPMode+0x54>
 80050e2:	2a00      	cmp	r2, #0
 80050e4:	d004      	beq.n	80050f0 <HAL_PWR_EnterSLEEPMode+0x54>
  {
    SET_BIT(PWR->CR, PWR_CR_ULP);
 80050e6:	2280      	movs	r2, #128	@ 0x80
 80050e8:	6819      	ldr	r1, [r3, #0]
 80050ea:	0092      	lsls	r2, r2, #2
 80050ec:	430a      	orrs	r2, r1
 80050ee:	601a      	str	r2, [r3, #0]
  }

  /* Additional NOP to ensure all pending instructions are flushed before entering low power mode */
  __NOP();
 80050f0:	46c0      	nop			@ (mov r8, r8)

}
 80050f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __SEV();
 80050f4:	bf40      	sev
    __WFE();
 80050f6:	bf20      	wfe
    __WFE();
 80050f8:	bf20      	wfe
 80050fa:	e7f0      	b.n	80050de <HAL_PWR_EnterSLEEPMode+0x42>
 80050fc:	40007000 	.word	0x40007000
 8005100:	40010000 	.word	0x40010000
 8005104:	fffffdff 	.word	0xfffffdff
 8005108:	e000ed00 	.word	0xe000ed00

0800510c <HAL_PWR_EnterSTOPMode>:
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* It is forbidden to configure both EN_VREFINT=1 and ULP=1 if the device is
     in Stop mode or in Sleep/Low-power sleep mode */
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 800510c:	4b19      	ldr	r3, [pc, #100]	@ (8005174 <HAL_PWR_EnterSTOPMode+0x68>)
{
 800510e:	b5f0      	push	{r4, r5, r6, r7, lr}
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 8005110:	681e      	ldr	r6, [r3, #0]
{
 8005112:	0005      	movs	r5, r0
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 8005114:	2080      	movs	r0, #128	@ 0x80
 8005116:	0034      	movs	r4, r6
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 8005118:	2701      	movs	r7, #1
 800511a:	4a17      	ldr	r2, [pc, #92]	@ (8005178 <HAL_PWR_EnterSTOPMode+0x6c>)
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 800511c:	0080      	lsls	r0, r0, #2
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 800511e:	6a12      	ldr	r2, [r2, #32]
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 8005120:	4004      	ands	r4, r0
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 8005122:	403a      	ands	r2, r7
  if((ulpbit != 0) && (vrefinbit != 0))
 8005124:	4206      	tst	r6, r0
 8005126:	d005      	beq.n	8005134 <HAL_PWR_EnterSTOPMode+0x28>
 8005128:	2a00      	cmp	r2, #0
 800512a:	d003      	beq.n	8005134 <HAL_PWR_EnterSTOPMode+0x28>
  {
    CLEAR_BIT(PWR->CR, PWR_CR_ULP);
 800512c:	6818      	ldr	r0, [r3, #0]
 800512e:	4e13      	ldr	r6, [pc, #76]	@ (800517c <HAL_PWR_EnterSTOPMode+0x70>)
 8005130:	4030      	ands	r0, r6
 8005132:	6018      	str	r0, [r3, #0]

  /* Select the regulator state in Stop mode ---------------------------------*/
  tmpreg = PWR->CR;
  
  /* Clear PDDS and LPDS bits */
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 8005134:	2603      	movs	r6, #3
  tmpreg = PWR->CR;
 8005136:	6818      	ldr	r0, [r3, #0]
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 8005138:	43b0      	bics	r0, r6

 /* Set LPSDSR bit according to PWR_Regulator value */
  SET_BIT(tmpreg, Regulator);
 800513a:	4328      	orrs	r0, r5

  /* Store the new value */
  PWR->CR = tmpreg;

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 800513c:	2504      	movs	r5, #4
  PWR->CR = tmpreg;
 800513e:	6018      	str	r0, [r3, #0]
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8005140:	480f      	ldr	r0, [pc, #60]	@ (8005180 <HAL_PWR_EnterSTOPMode+0x74>)
 8005142:	6906      	ldr	r6, [r0, #16]
 8005144:	4335      	orrs	r5, r6
 8005146:	6105      	str	r5, [r0, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8005148:	2901      	cmp	r1, #1
 800514a:	d10e      	bne.n	800516a <HAL_PWR_EnterSTOPMode+0x5e>
  {
    /* Request Wait For Interrupt */
    __WFI();
 800514c:	bf30      	wfi
    __WFE();
    __WFE();
  }
 
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 800514e:	2504      	movs	r5, #4
 8005150:	6901      	ldr	r1, [r0, #16]
 8005152:	43a9      	bics	r1, r5
 8005154:	6101      	str	r1, [r0, #16]

  if((ulpbit != 0) && (vrefinbit != 0))
 8005156:	2c00      	cmp	r4, #0
 8005158:	d006      	beq.n	8005168 <HAL_PWR_EnterSTOPMode+0x5c>
 800515a:	2a00      	cmp	r2, #0
 800515c:	d004      	beq.n	8005168 <HAL_PWR_EnterSTOPMode+0x5c>
  {
    SET_BIT(PWR->CR, PWR_CR_ULP);
 800515e:	2280      	movs	r2, #128	@ 0x80
 8005160:	6819      	ldr	r1, [r3, #0]
 8005162:	0092      	lsls	r2, r2, #2
 8005164:	430a      	orrs	r2, r1
 8005166:	601a      	str	r2, [r3, #0]
  }
}
 8005168:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __SEV();
 800516a:	bf40      	sev
    __WFE();
 800516c:	bf20      	wfe
    __WFE();
 800516e:	bf20      	wfe
 8005170:	e7ed      	b.n	800514e <HAL_PWR_EnterSTOPMode+0x42>
 8005172:	46c0      	nop			@ (mov r8, r8)
 8005174:	40007000 	.word	0x40007000
 8005178:	40010000 	.word	0x40010000
 800517c:	fffffdff 	.word	0xfffffdff
 8005180:	e000ed00 	.word	0xe000ed00

08005184 <HAL_PWREx_EnableFastWakeUp>:
  * @retval None
  */
void HAL_PWREx_EnableFastWakeUp(void)
{
  /* Enable the fast wake up */
  SET_BIT(PWR->CR, PWR_CR_FWU);
 8005184:	2380      	movs	r3, #128	@ 0x80
 8005186:	4a03      	ldr	r2, [pc, #12]	@ (8005194 <HAL_PWREx_EnableFastWakeUp+0x10>)
 8005188:	00db      	lsls	r3, r3, #3
 800518a:	6811      	ldr	r1, [r2, #0]
 800518c:	430b      	orrs	r3, r1
 800518e:	6013      	str	r3, [r2, #0]
}
 8005190:	4770      	bx	lr
 8005192:	46c0      	nop			@ (mov r8, r8)
 8005194:	40007000 	.word	0x40007000

08005198 <HAL_PWREx_EnableUltraLowPower>:
  * @retval None
  */
void HAL_PWREx_EnableUltraLowPower(void)
{
  /* Enable the Ultra Low Power mode */
  SET_BIT(PWR->CR, PWR_CR_ULP);
 8005198:	2380      	movs	r3, #128	@ 0x80
 800519a:	4a03      	ldr	r2, [pc, #12]	@ (80051a8 <HAL_PWREx_EnableUltraLowPower+0x10>)
 800519c:	009b      	lsls	r3, r3, #2
 800519e:	6811      	ldr	r1, [r2, #0]
 80051a0:	430b      	orrs	r3, r1
 80051a2:	6013      	str	r3, [r2, #0]
}
 80051a4:	4770      	bx	lr
 80051a6:	46c0      	nop			@ (mov r8, r8)
 80051a8:	40007000 	.word	0x40007000

080051ac <HAL_RCC_GetSysClockFreq>:
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80051ac:	220c      	movs	r2, #12
  tmpreg = RCC->CFGR;
 80051ae:	4b1e      	ldr	r3, [pc, #120]	@ (8005228 <HAL_RCC_GetSysClockFreq+0x7c>)
{
 80051b0:	b570      	push	{r4, r5, r6, lr}
  tmpreg = RCC->CFGR;
 80051b2:	68dc      	ldr	r4, [r3, #12]
  switch (tmpreg & RCC_CFGR_SWS)
 80051b4:	4022      	ands	r2, r4
 80051b6:	2a08      	cmp	r2, #8
 80051b8:	d034      	beq.n	8005224 <HAL_RCC_GetSysClockFreq+0x78>
 80051ba:	2a0c      	cmp	r2, #12
 80051bc:	d00c      	beq.n	80051d8 <HAL_RCC_GetSysClockFreq+0x2c>
 80051be:	2a04      	cmp	r2, #4
 80051c0:	d128      	bne.n	8005214 <HAL_RCC_GetSysClockFreq+0x68>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80051c2:	6818      	ldr	r0, [r3, #0]
 80051c4:	2310      	movs	r3, #16
 80051c6:	4018      	ands	r0, r3
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 80051c8:	4243      	negs	r3, r0
 80051ca:	4158      	adcs	r0, r3
 80051cc:	4b17      	ldr	r3, [pc, #92]	@ (800522c <HAL_RCC_GetSysClockFreq+0x80>)
 80051ce:	4240      	negs	r0, r0
 80051d0:	4018      	ands	r0, r3
 80051d2:	4b17      	ldr	r3, [pc, #92]	@ (8005230 <HAL_RCC_GetSysClockFreq+0x84>)
 80051d4:	18c0      	adds	r0, r0, r3
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
      break;
    }
  }
  return sysclockfreq;
}
 80051d6:	bd70      	pop	{r4, r5, r6, pc}
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80051d8:	02a2      	lsls	r2, r4, #10
 80051da:	4816      	ldr	r0, [pc, #88]	@ (8005234 <HAL_RCC_GetSysClockFreq+0x88>)
 80051dc:	0f12      	lsrs	r2, r2, #28
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80051de:	5c80      	ldrb	r0, [r0, r2]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80051e0:	2280      	movs	r2, #128	@ 0x80
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80051e2:	0224      	lsls	r4, r4, #8
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80051e4:	68d9      	ldr	r1, [r3, #12]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80051e6:	0fa4      	lsrs	r4, r4, #30
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80051e8:	0252      	lsls	r2, r2, #9
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80051ea:	3401      	adds	r4, #1
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80051ec:	4211      	tst	r1, r2
 80051ee:	d009      	beq.n	8005204 <HAL_RCC_GetSysClockFreq+0x58>
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80051f0:	4a11      	ldr	r2, [pc, #68]	@ (8005238 <HAL_RCC_GetSysClockFreq+0x8c>)
 80051f2:	2300      	movs	r3, #0
 80051f4:	2100      	movs	r1, #0
 80051f6:	f7fb f98b 	bl	8000510 <__aeabi_lmul>
 80051fa:	0022      	movs	r2, r4
 80051fc:	2300      	movs	r3, #0
 80051fe:	f7fb f967 	bl	80004d0 <__aeabi_uldivmod>
 8005202:	e7e8      	b.n	80051d6 <HAL_RCC_GetSysClockFreq+0x2a>
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8005204:	681a      	ldr	r2, [r3, #0]
 8005206:	2310      	movs	r3, #16
 8005208:	421a      	tst	r2, r3
 800520a:	d001      	beq.n	8005210 <HAL_RCC_GetSysClockFreq+0x64>
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 800520c:	4a08      	ldr	r2, [pc, #32]	@ (8005230 <HAL_RCC_GetSysClockFreq+0x84>)
 800520e:	e7f0      	b.n	80051f2 <HAL_RCC_GetSysClockFreq+0x46>
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8005210:	4a0a      	ldr	r2, [pc, #40]	@ (800523c <HAL_RCC_GetSysClockFreq+0x90>)
 8005212:	e7ee      	b.n	80051f2 <HAL_RCC_GetSysClockFreq+0x46>
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8005214:	2080      	movs	r0, #128	@ 0x80
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8005216:	685b      	ldr	r3, [r3, #4]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8005218:	0200      	lsls	r0, r0, #8
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800521a:	041b      	lsls	r3, r3, #16
 800521c:	0f5b      	lsrs	r3, r3, #29
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800521e:	3301      	adds	r3, #1
 8005220:	4098      	lsls	r0, r3
      break;
 8005222:	e7d8      	b.n	80051d6 <HAL_RCC_GetSysClockFreq+0x2a>
  switch (tmpreg & RCC_CFGR_SWS)
 8005224:	4804      	ldr	r0, [pc, #16]	@ (8005238 <HAL_RCC_GetSysClockFreq+0x8c>)
 8005226:	e7d6      	b.n	80051d6 <HAL_RCC_GetSysClockFreq+0x2a>
 8005228:	40021000 	.word	0x40021000
 800522c:	00b71b00 	.word	0x00b71b00
 8005230:	003d0900 	.word	0x003d0900
 8005234:	08010424 	.word	0x08010424
 8005238:	007a1200 	.word	0x007a1200
 800523c:	00f42400 	.word	0x00f42400

08005240 <HAL_RCC_OscConfig>:
{
 8005240:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005242:	0005      	movs	r5, r0
 8005244:	b085      	sub	sp, #20
  if(RCC_OscInitStruct == NULL)
 8005246:	2800      	cmp	r0, #0
 8005248:	d059      	beq.n	80052fe <HAL_RCC_OscConfig+0xbe>
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800524a:	230c      	movs	r3, #12
 800524c:	4cb8      	ldr	r4, [pc, #736]	@ (8005530 <HAL_RCC_OscConfig+0x2f0>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800524e:	6802      	ldr	r2, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005250:	68e6      	ldr	r6, [r4, #12]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005252:	68e7      	ldr	r7, [r4, #12]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005254:	401e      	ands	r6, r3
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005256:	2380      	movs	r3, #128	@ 0x80
 8005258:	025b      	lsls	r3, r3, #9
 800525a:	0019      	movs	r1, r3
 800525c:	401f      	ands	r7, r3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800525e:	07d2      	lsls	r2, r2, #31
 8005260:	d441      	bmi.n	80052e6 <HAL_RCC_OscConfig+0xa6>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005262:	682b      	ldr	r3, [r5, #0]
 8005264:	079b      	lsls	r3, r3, #30
 8005266:	d500      	bpl.n	800526a <HAL_RCC_OscConfig+0x2a>
 8005268:	e08a      	b.n	8005380 <HAL_RCC_OscConfig+0x140>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800526a:	682b      	ldr	r3, [r5, #0]
 800526c:	06db      	lsls	r3, r3, #27
 800526e:	d528      	bpl.n	80052c2 <HAL_RCC_OscConfig+0x82>
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005270:	2e00      	cmp	r6, #0
 8005272:	d000      	beq.n	8005276 <HAL_RCC_OscConfig+0x36>
 8005274:	e0e3      	b.n	800543e <HAL_RCC_OscConfig+0x1fe>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005276:	6823      	ldr	r3, [r4, #0]
 8005278:	059b      	lsls	r3, r3, #22
 800527a:	d502      	bpl.n	8005282 <HAL_RCC_OscConfig+0x42>
 800527c:	69eb      	ldr	r3, [r5, #28]
 800527e:	2b00      	cmp	r3, #0
 8005280:	d03d      	beq.n	80052fe <HAL_RCC_OscConfig+0xbe>
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8005282:	2780      	movs	r7, #128	@ 0x80
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005284:	6862      	ldr	r2, [r4, #4]
 8005286:	49ab      	ldr	r1, [pc, #684]	@ (8005534 <HAL_RCC_OscConfig+0x2f4>)
 8005288:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 800528a:	400a      	ands	r2, r1
 800528c:	431a      	orrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800528e:	0b5b      	lsrs	r3, r3, #13
 8005290:	3301      	adds	r3, #1
 8005292:	023f      	lsls	r7, r7, #8
 8005294:	409f      	lsls	r7, r3
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005296:	6062      	str	r2, [r4, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005298:	6861      	ldr	r1, [r4, #4]
 800529a:	6a2a      	ldr	r2, [r5, #32]
 800529c:	0209      	lsls	r1, r1, #8
 800529e:	0a09      	lsrs	r1, r1, #8
 80052a0:	0612      	lsls	r2, r2, #24
 80052a2:	430a      	orrs	r2, r1
 80052a4:	6062      	str	r2, [r4, #4]
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80052a6:	68e1      	ldr	r1, [r4, #12]
 80052a8:	48a3      	ldr	r0, [pc, #652]	@ (8005538 <HAL_RCC_OscConfig+0x2f8>)
 80052aa:	060b      	lsls	r3, r1, #24
 80052ac:	0f1b      	lsrs	r3, r3, #28
 80052ae:	5cc3      	ldrb	r3, [r0, r3]
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80052b0:	4aa2      	ldr	r2, [pc, #648]	@ (800553c <HAL_RCC_OscConfig+0x2fc>)
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80052b2:	40df      	lsrs	r7, r3
        status = HAL_InitTick (uwTickPrio);
 80052b4:	4ba2      	ldr	r3, [pc, #648]	@ (8005540 <HAL_RCC_OscConfig+0x300>)
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80052b6:	6017      	str	r7, [r2, #0]
        status = HAL_InitTick (uwTickPrio);
 80052b8:	6818      	ldr	r0, [r3, #0]
 80052ba:	f7fe fbde 	bl	8003a7a <HAL_InitTick>
        if(status != HAL_OK)
 80052be:	2800      	cmp	r0, #0
 80052c0:	d134      	bne.n	800532c <HAL_RCC_OscConfig+0xec>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80052c2:	682b      	ldr	r3, [r5, #0]
 80052c4:	071b      	lsls	r3, r3, #28
 80052c6:	d500      	bpl.n	80052ca <HAL_RCC_OscConfig+0x8a>
 80052c8:	e0f0      	b.n	80054ac <HAL_RCC_OscConfig+0x26c>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80052ca:	682b      	ldr	r3, [r5, #0]
 80052cc:	075b      	lsls	r3, r3, #29
 80052ce:	d500      	bpl.n	80052d2 <HAL_RCC_OscConfig+0x92>
 80052d0:	e112      	b.n	80054f8 <HAL_RCC_OscConfig+0x2b8>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80052d2:	682b      	ldr	r3, [r5, #0]
 80052d4:	069b      	lsls	r3, r3, #26
 80052d6:	d500      	bpl.n	80052da <HAL_RCC_OscConfig+0x9a>
 80052d8:	e197      	b.n	800560a <HAL_RCC_OscConfig+0x3ca>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80052da:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d000      	beq.n	80052e2 <HAL_RCC_OscConfig+0xa2>
 80052e0:	e1c6      	b.n	8005670 <HAL_RCC_OscConfig+0x430>
  return HAL_OK;
 80052e2:	2000      	movs	r0, #0
 80052e4:	e022      	b.n	800532c <HAL_RCC_OscConfig+0xec>
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80052e6:	2e08      	cmp	r6, #8
 80052e8:	d003      	beq.n	80052f2 <HAL_RCC_OscConfig+0xb2>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80052ea:	2e0c      	cmp	r6, #12
 80052ec:	d109      	bne.n	8005302 <HAL_RCC_OscConfig+0xc2>
 80052ee:	2f00      	cmp	r7, #0
 80052f0:	d007      	beq.n	8005302 <HAL_RCC_OscConfig+0xc2>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80052f2:	6823      	ldr	r3, [r4, #0]
 80052f4:	039b      	lsls	r3, r3, #14
 80052f6:	d5b4      	bpl.n	8005262 <HAL_RCC_OscConfig+0x22>
 80052f8:	686b      	ldr	r3, [r5, #4]
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d1b1      	bne.n	8005262 <HAL_RCC_OscConfig+0x22>
    return HAL_ERROR;
 80052fe:	2001      	movs	r0, #1
 8005300:	e014      	b.n	800532c <HAL_RCC_OscConfig+0xec>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005302:	686a      	ldr	r2, [r5, #4]
 8005304:	428a      	cmp	r2, r1
 8005306:	d113      	bne.n	8005330 <HAL_RCC_OscConfig+0xf0>
 8005308:	6822      	ldr	r2, [r4, #0]
 800530a:	4313      	orrs	r3, r2
 800530c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800530e:	f7fe fbb6 	bl	8003a7e <HAL_GetTick>
 8005312:	9000      	str	r0, [sp, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005314:	2280      	movs	r2, #128	@ 0x80
 8005316:	6823      	ldr	r3, [r4, #0]
 8005318:	0292      	lsls	r2, r2, #10
 800531a:	4213      	tst	r3, r2
 800531c:	d1a1      	bne.n	8005262 <HAL_RCC_OscConfig+0x22>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800531e:	f7fe fbae 	bl	8003a7e <HAL_GetTick>
 8005322:	9b00      	ldr	r3, [sp, #0]
 8005324:	1ac0      	subs	r0, r0, r3
 8005326:	2864      	cmp	r0, #100	@ 0x64
 8005328:	d9f4      	bls.n	8005314 <HAL_RCC_OscConfig+0xd4>
            return HAL_TIMEOUT;
 800532a:	2003      	movs	r0, #3
}
 800532c:	b005      	add	sp, #20
 800532e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005330:	21a0      	movs	r1, #160	@ 0xa0
 8005332:	02c9      	lsls	r1, r1, #11
 8005334:	428a      	cmp	r2, r1
 8005336:	d105      	bne.n	8005344 <HAL_RCC_OscConfig+0x104>
 8005338:	2280      	movs	r2, #128	@ 0x80
 800533a:	6821      	ldr	r1, [r4, #0]
 800533c:	02d2      	lsls	r2, r2, #11
 800533e:	430a      	orrs	r2, r1
 8005340:	6022      	str	r2, [r4, #0]
 8005342:	e7e1      	b.n	8005308 <HAL_RCC_OscConfig+0xc8>
 8005344:	6821      	ldr	r1, [r4, #0]
 8005346:	487f      	ldr	r0, [pc, #508]	@ (8005544 <HAL_RCC_OscConfig+0x304>)
 8005348:	4001      	ands	r1, r0
 800534a:	6021      	str	r1, [r4, #0]
 800534c:	6821      	ldr	r1, [r4, #0]
 800534e:	400b      	ands	r3, r1
 8005350:	9303      	str	r3, [sp, #12]
 8005352:	9b03      	ldr	r3, [sp, #12]
 8005354:	497c      	ldr	r1, [pc, #496]	@ (8005548 <HAL_RCC_OscConfig+0x308>)
 8005356:	6823      	ldr	r3, [r4, #0]
 8005358:	400b      	ands	r3, r1
 800535a:	6023      	str	r3, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800535c:	2a00      	cmp	r2, #0
 800535e:	d1d6      	bne.n	800530e <HAL_RCC_OscConfig+0xce>
        tickstart = HAL_GetTick();
 8005360:	f7fe fb8d 	bl	8003a7e <HAL_GetTick>
 8005364:	9000      	str	r0, [sp, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005366:	2280      	movs	r2, #128	@ 0x80
 8005368:	6823      	ldr	r3, [r4, #0]
 800536a:	0292      	lsls	r2, r2, #10
 800536c:	4213      	tst	r3, r2
 800536e:	d100      	bne.n	8005372 <HAL_RCC_OscConfig+0x132>
 8005370:	e777      	b.n	8005262 <HAL_RCC_OscConfig+0x22>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005372:	f7fe fb84 	bl	8003a7e <HAL_GetTick>
 8005376:	9b00      	ldr	r3, [sp, #0]
 8005378:	1ac0      	subs	r0, r0, r3
 800537a:	2864      	cmp	r0, #100	@ 0x64
 800537c:	d9f3      	bls.n	8005366 <HAL_RCC_OscConfig+0x126>
 800537e:	e7d4      	b.n	800532a <HAL_RCC_OscConfig+0xea>
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8005380:	2220      	movs	r2, #32
    hsi_state = RCC_OscInitStruct->HSIState;
 8005382:	68eb      	ldr	r3, [r5, #12]
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8005384:	4213      	tst	r3, r2
 8005386:	d003      	beq.n	8005390 <HAL_RCC_OscConfig+0x150>
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8005388:	6821      	ldr	r1, [r4, #0]
      hsi_state &= ~RCC_CR_HSIOUTEN;
 800538a:	4393      	bics	r3, r2
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 800538c:	4311      	orrs	r1, r2
 800538e:	6021      	str	r1, [r4, #0]
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005390:	2e04      	cmp	r6, #4
 8005392:	d003      	beq.n	800539c <HAL_RCC_OscConfig+0x15c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005394:	2e0c      	cmp	r6, #12
 8005396:	d124      	bne.n	80053e2 <HAL_RCC_OscConfig+0x1a2>
 8005398:	2f00      	cmp	r7, #0
 800539a:	d122      	bne.n	80053e2 <HAL_RCC_OscConfig+0x1a2>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 800539c:	6822      	ldr	r2, [r4, #0]
 800539e:	0752      	lsls	r2, r2, #29
 80053a0:	d501      	bpl.n	80053a6 <HAL_RCC_OscConfig+0x166>
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d0ab      	beq.n	80052fe <HAL_RCC_OscConfig+0xbe>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80053a6:	6861      	ldr	r1, [r4, #4]
 80053a8:	692a      	ldr	r2, [r5, #16]
 80053aa:	4868      	ldr	r0, [pc, #416]	@ (800554c <HAL_RCC_OscConfig+0x30c>)
 80053ac:	0212      	lsls	r2, r2, #8
 80053ae:	4001      	ands	r1, r0
 80053b0:	430a      	orrs	r2, r1
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80053b2:	2109      	movs	r1, #9
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80053b4:	6062      	str	r2, [r4, #4]
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80053b6:	6822      	ldr	r2, [r4, #0]
 80053b8:	438a      	bics	r2, r1
 80053ba:	4313      	orrs	r3, r2
 80053bc:	6023      	str	r3, [r4, #0]
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80053be:	f7ff fef5 	bl	80051ac <HAL_RCC_GetSysClockFreq>
 80053c2:	68e3      	ldr	r3, [r4, #12]
 80053c4:	4a5c      	ldr	r2, [pc, #368]	@ (8005538 <HAL_RCC_OscConfig+0x2f8>)
 80053c6:	061b      	lsls	r3, r3, #24
 80053c8:	0f1b      	lsrs	r3, r3, #28
 80053ca:	5cd3      	ldrb	r3, [r2, r3]
 80053cc:	495b      	ldr	r1, [pc, #364]	@ (800553c <HAL_RCC_OscConfig+0x2fc>)
 80053ce:	40d8      	lsrs	r0, r3
      status = HAL_InitTick (uwTickPrio);
 80053d0:	4b5b      	ldr	r3, [pc, #364]	@ (8005540 <HAL_RCC_OscConfig+0x300>)
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80053d2:	6008      	str	r0, [r1, #0]
      status = HAL_InitTick (uwTickPrio);
 80053d4:	6818      	ldr	r0, [r3, #0]
 80053d6:	f7fe fb50 	bl	8003a7a <HAL_InitTick>
      if(status != HAL_OK)
 80053da:	2800      	cmp	r0, #0
 80053dc:	d100      	bne.n	80053e0 <HAL_RCC_OscConfig+0x1a0>
 80053de:	e744      	b.n	800526a <HAL_RCC_OscConfig+0x2a>
 80053e0:	e7a4      	b.n	800532c <HAL_RCC_OscConfig+0xec>
      if(hsi_state != RCC_HSI_OFF)
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d019      	beq.n	800541a <HAL_RCC_OscConfig+0x1da>
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80053e6:	2109      	movs	r1, #9
 80053e8:	6822      	ldr	r2, [r4, #0]
 80053ea:	438a      	bics	r2, r1
 80053ec:	4313      	orrs	r3, r2
 80053ee:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80053f0:	f7fe fb45 	bl	8003a7e <HAL_GetTick>
 80053f4:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80053f6:	2204      	movs	r2, #4
 80053f8:	6823      	ldr	r3, [r4, #0]
 80053fa:	4213      	tst	r3, r2
 80053fc:	d007      	beq.n	800540e <HAL_RCC_OscConfig+0x1ce>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80053fe:	6862      	ldr	r2, [r4, #4]
 8005400:	692b      	ldr	r3, [r5, #16]
 8005402:	4952      	ldr	r1, [pc, #328]	@ (800554c <HAL_RCC_OscConfig+0x30c>)
 8005404:	021b      	lsls	r3, r3, #8
 8005406:	400a      	ands	r2, r1
 8005408:	4313      	orrs	r3, r2
 800540a:	6063      	str	r3, [r4, #4]
 800540c:	e72d      	b.n	800526a <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800540e:	f7fe fb36 	bl	8003a7e <HAL_GetTick>
 8005412:	1bc0      	subs	r0, r0, r7
 8005414:	2802      	cmp	r0, #2
 8005416:	d9ee      	bls.n	80053f6 <HAL_RCC_OscConfig+0x1b6>
 8005418:	e787      	b.n	800532a <HAL_RCC_OscConfig+0xea>
        __HAL_RCC_HSI_DISABLE();
 800541a:	2201      	movs	r2, #1
 800541c:	6823      	ldr	r3, [r4, #0]
 800541e:	4393      	bics	r3, r2
 8005420:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8005422:	f7fe fb2c 	bl	8003a7e <HAL_GetTick>
 8005426:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005428:	2204      	movs	r2, #4
 800542a:	6823      	ldr	r3, [r4, #0]
 800542c:	4213      	tst	r3, r2
 800542e:	d100      	bne.n	8005432 <HAL_RCC_OscConfig+0x1f2>
 8005430:	e71b      	b.n	800526a <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005432:	f7fe fb24 	bl	8003a7e <HAL_GetTick>
 8005436:	1bc0      	subs	r0, r0, r7
 8005438:	2802      	cmp	r0, #2
 800543a:	d9f5      	bls.n	8005428 <HAL_RCC_OscConfig+0x1e8>
 800543c:	e775      	b.n	800532a <HAL_RCC_OscConfig+0xea>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800543e:	69eb      	ldr	r3, [r5, #28]
 8005440:	2b00      	cmp	r3, #0
 8005442:	d020      	beq.n	8005486 <HAL_RCC_OscConfig+0x246>
        __HAL_RCC_MSI_ENABLE();
 8005444:	2380      	movs	r3, #128	@ 0x80
 8005446:	6822      	ldr	r2, [r4, #0]
 8005448:	005b      	lsls	r3, r3, #1
 800544a:	4313      	orrs	r3, r2
 800544c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800544e:	f7fe fb16 	bl	8003a7e <HAL_GetTick>
 8005452:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8005454:	2280      	movs	r2, #128	@ 0x80
 8005456:	6823      	ldr	r3, [r4, #0]
 8005458:	0092      	lsls	r2, r2, #2
 800545a:	4213      	tst	r3, r2
 800545c:	d00d      	beq.n	800547a <HAL_RCC_OscConfig+0x23a>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800545e:	6863      	ldr	r3, [r4, #4]
 8005460:	4a34      	ldr	r2, [pc, #208]	@ (8005534 <HAL_RCC_OscConfig+0x2f4>)
 8005462:	4013      	ands	r3, r2
 8005464:	6a6a      	ldr	r2, [r5, #36]	@ 0x24
 8005466:	4313      	orrs	r3, r2
 8005468:	6063      	str	r3, [r4, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800546a:	6862      	ldr	r2, [r4, #4]
 800546c:	6a2b      	ldr	r3, [r5, #32]
 800546e:	0212      	lsls	r2, r2, #8
 8005470:	061b      	lsls	r3, r3, #24
 8005472:	0a12      	lsrs	r2, r2, #8
 8005474:	4313      	orrs	r3, r2
 8005476:	6063      	str	r3, [r4, #4]
 8005478:	e723      	b.n	80052c2 <HAL_RCC_OscConfig+0x82>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800547a:	f7fe fb00 	bl	8003a7e <HAL_GetTick>
 800547e:	1bc0      	subs	r0, r0, r7
 8005480:	2802      	cmp	r0, #2
 8005482:	d9e7      	bls.n	8005454 <HAL_RCC_OscConfig+0x214>
 8005484:	e751      	b.n	800532a <HAL_RCC_OscConfig+0xea>
        __HAL_RCC_MSI_DISABLE();
 8005486:	6823      	ldr	r3, [r4, #0]
 8005488:	4a31      	ldr	r2, [pc, #196]	@ (8005550 <HAL_RCC_OscConfig+0x310>)
 800548a:	4013      	ands	r3, r2
 800548c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800548e:	f7fe faf6 	bl	8003a7e <HAL_GetTick>
 8005492:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8005494:	2280      	movs	r2, #128	@ 0x80
 8005496:	6823      	ldr	r3, [r4, #0]
 8005498:	0092      	lsls	r2, r2, #2
 800549a:	4213      	tst	r3, r2
 800549c:	d100      	bne.n	80054a0 <HAL_RCC_OscConfig+0x260>
 800549e:	e710      	b.n	80052c2 <HAL_RCC_OscConfig+0x82>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80054a0:	f7fe faed 	bl	8003a7e <HAL_GetTick>
 80054a4:	1bc0      	subs	r0, r0, r7
 80054a6:	2802      	cmp	r0, #2
 80054a8:	d9f4      	bls.n	8005494 <HAL_RCC_OscConfig+0x254>
 80054aa:	e73e      	b.n	800532a <HAL_RCC_OscConfig+0xea>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80054ac:	696a      	ldr	r2, [r5, #20]
 80054ae:	2301      	movs	r3, #1
 80054b0:	2a00      	cmp	r2, #0
 80054b2:	d010      	beq.n	80054d6 <HAL_RCC_OscConfig+0x296>
      __HAL_RCC_LSI_ENABLE();
 80054b4:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 80054b6:	4313      	orrs	r3, r2
 80054b8:	6523      	str	r3, [r4, #80]	@ 0x50
      tickstart = HAL_GetTick();
 80054ba:	f7fe fae0 	bl	8003a7e <HAL_GetTick>
 80054be:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80054c0:	2202      	movs	r2, #2
 80054c2:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 80054c4:	4213      	tst	r3, r2
 80054c6:	d000      	beq.n	80054ca <HAL_RCC_OscConfig+0x28a>
 80054c8:	e6ff      	b.n	80052ca <HAL_RCC_OscConfig+0x8a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80054ca:	f7fe fad8 	bl	8003a7e <HAL_GetTick>
 80054ce:	1bc0      	subs	r0, r0, r7
 80054d0:	2802      	cmp	r0, #2
 80054d2:	d9f5      	bls.n	80054c0 <HAL_RCC_OscConfig+0x280>
 80054d4:	e729      	b.n	800532a <HAL_RCC_OscConfig+0xea>
      __HAL_RCC_LSI_DISABLE();
 80054d6:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 80054d8:	439a      	bics	r2, r3
 80054da:	6522      	str	r2, [r4, #80]	@ 0x50
      tickstart = HAL_GetTick();
 80054dc:	f7fe facf 	bl	8003a7e <HAL_GetTick>
 80054e0:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80054e2:	2202      	movs	r2, #2
 80054e4:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 80054e6:	4213      	tst	r3, r2
 80054e8:	d100      	bne.n	80054ec <HAL_RCC_OscConfig+0x2ac>
 80054ea:	e6ee      	b.n	80052ca <HAL_RCC_OscConfig+0x8a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80054ec:	f7fe fac7 	bl	8003a7e <HAL_GetTick>
 80054f0:	1bc0      	subs	r0, r0, r7
 80054f2:	2802      	cmp	r0, #2
 80054f4:	d9f5      	bls.n	80054e2 <HAL_RCC_OscConfig+0x2a2>
 80054f6:	e718      	b.n	800532a <HAL_RCC_OscConfig+0xea>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80054f8:	2380      	movs	r3, #128	@ 0x80
    FlagStatus       pwrclkchanged = RESET;
 80054fa:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80054fc:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80054fe:	055b      	lsls	r3, r3, #21
    FlagStatus       pwrclkchanged = RESET;
 8005500:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005502:	421a      	tst	r2, r3
 8005504:	d104      	bne.n	8005510 <HAL_RCC_OscConfig+0x2d0>
      __HAL_RCC_PWR_CLK_ENABLE();
 8005506:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8005508:	4313      	orrs	r3, r2
 800550a:	63a3      	str	r3, [r4, #56]	@ 0x38
      pwrclkchanged = SET;
 800550c:	2301      	movs	r3, #1
 800550e:	9300      	str	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005510:	2280      	movs	r2, #128	@ 0x80
 8005512:	4f10      	ldr	r7, [pc, #64]	@ (8005554 <HAL_RCC_OscConfig+0x314>)
 8005514:	0052      	lsls	r2, r2, #1
 8005516:	683b      	ldr	r3, [r7, #0]
 8005518:	4213      	tst	r3, r2
 800551a:	d01d      	beq.n	8005558 <HAL_RCC_OscConfig+0x318>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800551c:	2280      	movs	r2, #128	@ 0x80
 800551e:	68ab      	ldr	r3, [r5, #8]
 8005520:	0052      	lsls	r2, r2, #1
 8005522:	4293      	cmp	r3, r2
 8005524:	d12c      	bne.n	8005580 <HAL_RCC_OscConfig+0x340>
 8005526:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 8005528:	4313      	orrs	r3, r2
 800552a:	6523      	str	r3, [r4, #80]	@ 0x50
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800552c:	e04d      	b.n	80055ca <HAL_RCC_OscConfig+0x38a>
 800552e:	46c0      	nop			@ (mov r8, r8)
 8005530:	40021000 	.word	0x40021000
 8005534:	ffff1fff 	.word	0xffff1fff
 8005538:	0801042d 	.word	0x0801042d
 800553c:	20000090 	.word	0x20000090
 8005540:	20000098 	.word	0x20000098
 8005544:	fffeffff 	.word	0xfffeffff
 8005548:	fffbffff 	.word	0xfffbffff
 800554c:	ffffe0ff 	.word	0xffffe0ff
 8005550:	fffffeff 	.word	0xfffffeff
 8005554:	40007000 	.word	0x40007000
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005558:	2280      	movs	r2, #128	@ 0x80
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	0052      	lsls	r2, r2, #1
 800555e:	4313      	orrs	r3, r2
 8005560:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8005562:	f7fe fa8c 	bl	8003a7e <HAL_GetTick>
 8005566:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005568:	2280      	movs	r2, #128	@ 0x80
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	0052      	lsls	r2, r2, #1
 800556e:	4213      	tst	r3, r2
 8005570:	d1d4      	bne.n	800551c <HAL_RCC_OscConfig+0x2dc>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005572:	f7fe fa84 	bl	8003a7e <HAL_GetTick>
 8005576:	9b01      	ldr	r3, [sp, #4]
 8005578:	1ac0      	subs	r0, r0, r3
 800557a:	2864      	cmp	r0, #100	@ 0x64
 800557c:	d9f4      	bls.n	8005568 <HAL_RCC_OscConfig+0x328>
 800557e:	e6d4      	b.n	800532a <HAL_RCC_OscConfig+0xea>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005580:	2b00      	cmp	r3, #0
 8005582:	d116      	bne.n	80055b2 <HAL_RCC_OscConfig+0x372>
 8005584:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8005586:	4a6b      	ldr	r2, [pc, #428]	@ (8005734 <HAL_RCC_OscConfig+0x4f4>)
 8005588:	4013      	ands	r3, r2
 800558a:	6523      	str	r3, [r4, #80]	@ 0x50
 800558c:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 800558e:	4a6a      	ldr	r2, [pc, #424]	@ (8005738 <HAL_RCC_OscConfig+0x4f8>)
 8005590:	4013      	ands	r3, r2
 8005592:	6523      	str	r3, [r4, #80]	@ 0x50
      tickstart = HAL_GetTick();
 8005594:	f7fe fa73 	bl	8003a7e <HAL_GetTick>
 8005598:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800559a:	2280      	movs	r2, #128	@ 0x80
 800559c:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 800559e:	0092      	lsls	r2, r2, #2
 80055a0:	4213      	tst	r3, r2
 80055a2:	d01a      	beq.n	80055da <HAL_RCC_OscConfig+0x39a>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80055a4:	f7fe fa6b 	bl	8003a7e <HAL_GetTick>
 80055a8:	4b64      	ldr	r3, [pc, #400]	@ (800573c <HAL_RCC_OscConfig+0x4fc>)
 80055aa:	1bc0      	subs	r0, r0, r7
 80055ac:	4298      	cmp	r0, r3
 80055ae:	d9f4      	bls.n	800559a <HAL_RCC_OscConfig+0x35a>
 80055b0:	e6bb      	b.n	800532a <HAL_RCC_OscConfig+0xea>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80055b2:	21a0      	movs	r1, #160	@ 0xa0
 80055b4:	00c9      	lsls	r1, r1, #3
 80055b6:	428b      	cmp	r3, r1
 80055b8:	d118      	bne.n	80055ec <HAL_RCC_OscConfig+0x3ac>
 80055ba:	2380      	movs	r3, #128	@ 0x80
 80055bc:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 80055be:	00db      	lsls	r3, r3, #3
 80055c0:	430b      	orrs	r3, r1
 80055c2:	6523      	str	r3, [r4, #80]	@ 0x50
 80055c4:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 80055c6:	431a      	orrs	r2, r3
 80055c8:	6522      	str	r2, [r4, #80]	@ 0x50
      tickstart = HAL_GetTick();
 80055ca:	f7fe fa58 	bl	8003a7e <HAL_GetTick>
 80055ce:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80055d0:	2280      	movs	r2, #128	@ 0x80
 80055d2:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 80055d4:	0092      	lsls	r2, r2, #2
 80055d6:	4213      	tst	r3, r2
 80055d8:	d010      	beq.n	80055fc <HAL_RCC_OscConfig+0x3bc>
    if(pwrclkchanged == SET)
 80055da:	9b00      	ldr	r3, [sp, #0]
 80055dc:	2b01      	cmp	r3, #1
 80055de:	d000      	beq.n	80055e2 <HAL_RCC_OscConfig+0x3a2>
 80055e0:	e677      	b.n	80052d2 <HAL_RCC_OscConfig+0x92>
      __HAL_RCC_PWR_CLK_DISABLE();
 80055e2:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80055e4:	4a56      	ldr	r2, [pc, #344]	@ (8005740 <HAL_RCC_OscConfig+0x500>)
 80055e6:	4013      	ands	r3, r2
 80055e8:	63a3      	str	r3, [r4, #56]	@ 0x38
 80055ea:	e672      	b.n	80052d2 <HAL_RCC_OscConfig+0x92>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80055ec:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 80055ee:	4a51      	ldr	r2, [pc, #324]	@ (8005734 <HAL_RCC_OscConfig+0x4f4>)
 80055f0:	4013      	ands	r3, r2
 80055f2:	6523      	str	r3, [r4, #80]	@ 0x50
 80055f4:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 80055f6:	4a50      	ldr	r2, [pc, #320]	@ (8005738 <HAL_RCC_OscConfig+0x4f8>)
 80055f8:	4013      	ands	r3, r2
 80055fa:	e796      	b.n	800552a <HAL_RCC_OscConfig+0x2ea>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80055fc:	f7fe fa3f 	bl	8003a7e <HAL_GetTick>
 8005600:	4b4e      	ldr	r3, [pc, #312]	@ (800573c <HAL_RCC_OscConfig+0x4fc>)
 8005602:	1bc0      	subs	r0, r0, r7
 8005604:	4298      	cmp	r0, r3
 8005606:	d9e3      	bls.n	80055d0 <HAL_RCC_OscConfig+0x390>
 8005608:	e68f      	b.n	800532a <HAL_RCC_OscConfig+0xea>
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800560a:	69aa      	ldr	r2, [r5, #24]
 800560c:	2101      	movs	r1, #1
 800560e:	4b4d      	ldr	r3, [pc, #308]	@ (8005744 <HAL_RCC_OscConfig+0x504>)
 8005610:	2a00      	cmp	r2, #0
 8005612:	d018      	beq.n	8005646 <HAL_RCC_OscConfig+0x406>
        __HAL_RCC_HSI48_ENABLE();
 8005614:	68a2      	ldr	r2, [r4, #8]
 8005616:	430a      	orrs	r2, r1
 8005618:	60a2      	str	r2, [r4, #8]
 800561a:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 800561c:	430a      	orrs	r2, r1
 800561e:	6362      	str	r2, [r4, #52]	@ 0x34
 8005620:	2280      	movs	r2, #128	@ 0x80
 8005622:	6a19      	ldr	r1, [r3, #32]
 8005624:	0192      	lsls	r2, r2, #6
 8005626:	430a      	orrs	r2, r1
 8005628:	621a      	str	r2, [r3, #32]
        tickstart = HAL_GetTick();
 800562a:	f7fe fa28 	bl	8003a7e <HAL_GetTick>
 800562e:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005630:	2202      	movs	r2, #2
 8005632:	68a3      	ldr	r3, [r4, #8]
 8005634:	4213      	tst	r3, r2
 8005636:	d000      	beq.n	800563a <HAL_RCC_OscConfig+0x3fa>
 8005638:	e64f      	b.n	80052da <HAL_RCC_OscConfig+0x9a>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800563a:	f7fe fa20 	bl	8003a7e <HAL_GetTick>
 800563e:	1bc0      	subs	r0, r0, r7
 8005640:	2802      	cmp	r0, #2
 8005642:	d9f5      	bls.n	8005630 <HAL_RCC_OscConfig+0x3f0>
 8005644:	e671      	b.n	800532a <HAL_RCC_OscConfig+0xea>
        __HAL_RCC_HSI48_DISABLE();
 8005646:	68a2      	ldr	r2, [r4, #8]
 8005648:	438a      	bics	r2, r1
 800564a:	60a2      	str	r2, [r4, #8]
 800564c:	6a1a      	ldr	r2, [r3, #32]
 800564e:	493e      	ldr	r1, [pc, #248]	@ (8005748 <HAL_RCC_OscConfig+0x508>)
 8005650:	400a      	ands	r2, r1
 8005652:	621a      	str	r2, [r3, #32]
        tickstart = HAL_GetTick();
 8005654:	f7fe fa13 	bl	8003a7e <HAL_GetTick>
 8005658:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800565a:	2202      	movs	r2, #2
 800565c:	68a3      	ldr	r3, [r4, #8]
 800565e:	4213      	tst	r3, r2
 8005660:	d100      	bne.n	8005664 <HAL_RCC_OscConfig+0x424>
 8005662:	e63a      	b.n	80052da <HAL_RCC_OscConfig+0x9a>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005664:	f7fe fa0b 	bl	8003a7e <HAL_GetTick>
 8005668:	1bc0      	subs	r0, r0, r7
 800566a:	2802      	cmp	r0, #2
 800566c:	d9f5      	bls.n	800565a <HAL_RCC_OscConfig+0x41a>
 800566e:	e65c      	b.n	800532a <HAL_RCC_OscConfig+0xea>
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005670:	2e0c      	cmp	r6, #12
 8005672:	d043      	beq.n	80056fc <HAL_RCC_OscConfig+0x4bc>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005674:	4a35      	ldr	r2, [pc, #212]	@ (800574c <HAL_RCC_OscConfig+0x50c>)
 8005676:	2b02      	cmp	r3, #2
 8005678:	d12e      	bne.n	80056d8 <HAL_RCC_OscConfig+0x498>
        __HAL_RCC_PLL_DISABLE();
 800567a:	6823      	ldr	r3, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800567c:	2780      	movs	r7, #128	@ 0x80
        __HAL_RCC_PLL_DISABLE();
 800567e:	4013      	ands	r3, r2
 8005680:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8005682:	f7fe f9fc 	bl	8003a7e <HAL_GetTick>
 8005686:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8005688:	04bf      	lsls	r7, r7, #18
 800568a:	6823      	ldr	r3, [r4, #0]
 800568c:	423b      	tst	r3, r7
 800568e:	d11d      	bne.n	80056cc <HAL_RCC_OscConfig+0x48c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005690:	6b29      	ldr	r1, [r5, #48]	@ 0x30
 8005692:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8005694:	68e2      	ldr	r2, [r4, #12]
 8005696:	430b      	orrs	r3, r1
 8005698:	492d      	ldr	r1, [pc, #180]	@ (8005750 <HAL_RCC_OscConfig+0x510>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800569a:	2680      	movs	r6, #128	@ 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800569c:	400a      	ands	r2, r1
 800569e:	4313      	orrs	r3, r2
 80056a0:	6b6a      	ldr	r2, [r5, #52]	@ 0x34
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80056a2:	04b6      	lsls	r6, r6, #18
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80056a4:	4313      	orrs	r3, r2
 80056a6:	60e3      	str	r3, [r4, #12]
        __HAL_RCC_PLL_ENABLE();
 80056a8:	2380      	movs	r3, #128	@ 0x80
 80056aa:	6822      	ldr	r2, [r4, #0]
 80056ac:	045b      	lsls	r3, r3, #17
 80056ae:	4313      	orrs	r3, r2
 80056b0:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80056b2:	f7fe f9e4 	bl	8003a7e <HAL_GetTick>
 80056b6:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80056b8:	6823      	ldr	r3, [r4, #0]
 80056ba:	4233      	tst	r3, r6
 80056bc:	d000      	beq.n	80056c0 <HAL_RCC_OscConfig+0x480>
 80056be:	e610      	b.n	80052e2 <HAL_RCC_OscConfig+0xa2>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80056c0:	f7fe f9dd 	bl	8003a7e <HAL_GetTick>
 80056c4:	1b40      	subs	r0, r0, r5
 80056c6:	2802      	cmp	r0, #2
 80056c8:	d9f6      	bls.n	80056b8 <HAL_RCC_OscConfig+0x478>
 80056ca:	e62e      	b.n	800532a <HAL_RCC_OscConfig+0xea>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80056cc:	f7fe f9d7 	bl	8003a7e <HAL_GetTick>
 80056d0:	1b80      	subs	r0, r0, r6
 80056d2:	2802      	cmp	r0, #2
 80056d4:	d9d9      	bls.n	800568a <HAL_RCC_OscConfig+0x44a>
 80056d6:	e628      	b.n	800532a <HAL_RCC_OscConfig+0xea>
        __HAL_RCC_PLL_DISABLE();
 80056d8:	6823      	ldr	r3, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80056da:	2680      	movs	r6, #128	@ 0x80
        __HAL_RCC_PLL_DISABLE();
 80056dc:	4013      	ands	r3, r2
 80056de:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80056e0:	f7fe f9cd 	bl	8003a7e <HAL_GetTick>
 80056e4:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80056e6:	04b6      	lsls	r6, r6, #18
 80056e8:	6823      	ldr	r3, [r4, #0]
 80056ea:	4233      	tst	r3, r6
 80056ec:	d100      	bne.n	80056f0 <HAL_RCC_OscConfig+0x4b0>
 80056ee:	e5f8      	b.n	80052e2 <HAL_RCC_OscConfig+0xa2>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80056f0:	f7fe f9c5 	bl	8003a7e <HAL_GetTick>
 80056f4:	1b40      	subs	r0, r0, r5
 80056f6:	2802      	cmp	r0, #2
 80056f8:	d9f6      	bls.n	80056e8 <HAL_RCC_OscConfig+0x4a8>
 80056fa:	e616      	b.n	800532a <HAL_RCC_OscConfig+0xea>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80056fc:	2b01      	cmp	r3, #1
 80056fe:	d100      	bne.n	8005702 <HAL_RCC_OscConfig+0x4c2>
 8005700:	e5fd      	b.n	80052fe <HAL_RCC_OscConfig+0xbe>
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005702:	2380      	movs	r3, #128	@ 0x80
        pll_config = RCC->CFGR;
 8005704:	68e0      	ldr	r0, [r4, #12]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005706:	6aea      	ldr	r2, [r5, #44]	@ 0x2c
 8005708:	025b      	lsls	r3, r3, #9
 800570a:	4003      	ands	r3, r0
 800570c:	4293      	cmp	r3, r2
 800570e:	d000      	beq.n	8005712 <HAL_RCC_OscConfig+0x4d2>
 8005710:	e5f5      	b.n	80052fe <HAL_RCC_OscConfig+0xbe>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8005712:	23f0      	movs	r3, #240	@ 0xf0
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005714:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8005716:	039b      	lsls	r3, r3, #14
 8005718:	4003      	ands	r3, r0
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800571a:	4293      	cmp	r3, r2
 800571c:	d000      	beq.n	8005720 <HAL_RCC_OscConfig+0x4e0>
 800571e:	e5ee      	b.n	80052fe <HAL_RCC_OscConfig+0xbe>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8005720:	23c0      	movs	r3, #192	@ 0xc0
 8005722:	041b      	lsls	r3, r3, #16
 8005724:	4018      	ands	r0, r3
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8005726:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8005728:	1ac0      	subs	r0, r0, r3
 800572a:	1e43      	subs	r3, r0, #1
 800572c:	4198      	sbcs	r0, r3
 800572e:	b2c0      	uxtb	r0, r0
 8005730:	e5fc      	b.n	800532c <HAL_RCC_OscConfig+0xec>
 8005732:	46c0      	nop			@ (mov r8, r8)
 8005734:	fffffeff 	.word	0xfffffeff
 8005738:	fffffbff 	.word	0xfffffbff
 800573c:	00001388 	.word	0x00001388
 8005740:	efffffff 	.word	0xefffffff
 8005744:	40010000 	.word	0x40010000
 8005748:	ffffdfff 	.word	0xffffdfff
 800574c:	feffffff 	.word	0xfeffffff
 8005750:	ff02ffff 	.word	0xff02ffff

08005754 <HAL_RCC_ClockConfig>:
{
 8005754:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005756:	1e04      	subs	r4, r0, #0
 8005758:	9101      	str	r1, [sp, #4]
  if(RCC_ClkInitStruct == NULL)
 800575a:	d101      	bne.n	8005760 <HAL_RCC_ClockConfig+0xc>
    return HAL_ERROR;
 800575c:	2001      	movs	r0, #1
}
 800575e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005760:	2501      	movs	r5, #1
 8005762:	4e5b      	ldr	r6, [pc, #364]	@ (80058d0 <HAL_RCC_ClockConfig+0x17c>)
 8005764:	9a01      	ldr	r2, [sp, #4]
 8005766:	6833      	ldr	r3, [r6, #0]
 8005768:	402b      	ands	r3, r5
 800576a:	4293      	cmp	r3, r2
 800576c:	d331      	bcc.n	80057d2 <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800576e:	6822      	ldr	r2, [r4, #0]
 8005770:	0793      	lsls	r3, r2, #30
 8005772:	d443      	bmi.n	80057fc <HAL_RCC_ClockConfig+0xa8>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005774:	07d2      	lsls	r2, r2, #31
 8005776:	d449      	bmi.n	800580c <HAL_RCC_ClockConfig+0xb8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005778:	2501      	movs	r5, #1
 800577a:	6833      	ldr	r3, [r6, #0]
 800577c:	9a01      	ldr	r2, [sp, #4]
 800577e:	402b      	ands	r3, r5
 8005780:	4293      	cmp	r3, r2
 8005782:	d909      	bls.n	8005798 <HAL_RCC_ClockConfig+0x44>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005784:	6833      	ldr	r3, [r6, #0]
 8005786:	43ab      	bics	r3, r5
 8005788:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 800578a:	f7fe f978 	bl	8003a7e <HAL_GetTick>
 800578e:	0007      	movs	r7, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005790:	6833      	ldr	r3, [r6, #0]
 8005792:	422b      	tst	r3, r5
 8005794:	d000      	beq.n	8005798 <HAL_RCC_ClockConfig+0x44>
 8005796:	e08c      	b.n	80058b2 <HAL_RCC_ClockConfig+0x15e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005798:	6822      	ldr	r2, [r4, #0]
 800579a:	4d4e      	ldr	r5, [pc, #312]	@ (80058d4 <HAL_RCC_ClockConfig+0x180>)
 800579c:	0753      	lsls	r3, r2, #29
 800579e:	d500      	bpl.n	80057a2 <HAL_RCC_ClockConfig+0x4e>
 80057a0:	e08f      	b.n	80058c2 <HAL_RCC_ClockConfig+0x16e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80057a2:	0712      	lsls	r2, r2, #28
 80057a4:	d506      	bpl.n	80057b4 <HAL_RCC_ClockConfig+0x60>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80057a6:	68ea      	ldr	r2, [r5, #12]
 80057a8:	6923      	ldr	r3, [r4, #16]
 80057aa:	494b      	ldr	r1, [pc, #300]	@ (80058d8 <HAL_RCC_ClockConfig+0x184>)
 80057ac:	00db      	lsls	r3, r3, #3
 80057ae:	400a      	ands	r2, r1
 80057b0:	4313      	orrs	r3, r2
 80057b2:	60eb      	str	r3, [r5, #12]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80057b4:	f7ff fcfa 	bl	80051ac <HAL_RCC_GetSysClockFreq>
 80057b8:	68eb      	ldr	r3, [r5, #12]
 80057ba:	4a48      	ldr	r2, [pc, #288]	@ (80058dc <HAL_RCC_ClockConfig+0x188>)
 80057bc:	061b      	lsls	r3, r3, #24
 80057be:	0f1b      	lsrs	r3, r3, #28
 80057c0:	5cd3      	ldrb	r3, [r2, r3]
 80057c2:	4947      	ldr	r1, [pc, #284]	@ (80058e0 <HAL_RCC_ClockConfig+0x18c>)
 80057c4:	40d8      	lsrs	r0, r3
  status = HAL_InitTick(uwTickPrio);
 80057c6:	4b47      	ldr	r3, [pc, #284]	@ (80058e4 <HAL_RCC_ClockConfig+0x190>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80057c8:	6008      	str	r0, [r1, #0]
  status = HAL_InitTick(uwTickPrio);
 80057ca:	6818      	ldr	r0, [r3, #0]
 80057cc:	f7fe f955 	bl	8003a7a <HAL_InitTick>
  if(status != HAL_OK)
 80057d0:	e7c5      	b.n	800575e <HAL_RCC_ClockConfig+0xa>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80057d2:	6833      	ldr	r3, [r6, #0]
 80057d4:	9a01      	ldr	r2, [sp, #4]
 80057d6:	43ab      	bics	r3, r5
 80057d8:	4313      	orrs	r3, r2
 80057da:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 80057dc:	f7fe f94f 	bl	8003a7e <HAL_GetTick>
 80057e0:	0007      	movs	r7, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80057e2:	6833      	ldr	r3, [r6, #0]
 80057e4:	9a01      	ldr	r2, [sp, #4]
 80057e6:	402b      	ands	r3, r5
 80057e8:	4293      	cmp	r3, r2
 80057ea:	d0c0      	beq.n	800576e <HAL_RCC_ClockConfig+0x1a>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80057ec:	f7fe f947 	bl	8003a7e <HAL_GetTick>
 80057f0:	4b3d      	ldr	r3, [pc, #244]	@ (80058e8 <HAL_RCC_ClockConfig+0x194>)
 80057f2:	1bc0      	subs	r0, r0, r7
 80057f4:	4298      	cmp	r0, r3
 80057f6:	d9f4      	bls.n	80057e2 <HAL_RCC_ClockConfig+0x8e>
        return HAL_TIMEOUT;
 80057f8:	2003      	movs	r0, #3
 80057fa:	e7b0      	b.n	800575e <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80057fc:	20f0      	movs	r0, #240	@ 0xf0
 80057fe:	4935      	ldr	r1, [pc, #212]	@ (80058d4 <HAL_RCC_ClockConfig+0x180>)
 8005800:	68cb      	ldr	r3, [r1, #12]
 8005802:	4383      	bics	r3, r0
 8005804:	68a0      	ldr	r0, [r4, #8]
 8005806:	4303      	orrs	r3, r0
 8005808:	60cb      	str	r3, [r1, #12]
 800580a:	e7b3      	b.n	8005774 <HAL_RCC_ClockConfig+0x20>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800580c:	4d31      	ldr	r5, [pc, #196]	@ (80058d4 <HAL_RCC_ClockConfig+0x180>)
 800580e:	6862      	ldr	r2, [r4, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005810:	682b      	ldr	r3, [r5, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005812:	2a02      	cmp	r2, #2
 8005814:	d118      	bne.n	8005848 <HAL_RCC_ClockConfig+0xf4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005816:	039b      	lsls	r3, r3, #14
 8005818:	d5a0      	bpl.n	800575c <HAL_RCC_ClockConfig+0x8>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800581a:	2103      	movs	r1, #3
 800581c:	68eb      	ldr	r3, [r5, #12]
 800581e:	438b      	bics	r3, r1
 8005820:	4313      	orrs	r3, r2
 8005822:	60eb      	str	r3, [r5, #12]
    tickstart = HAL_GetTick();
 8005824:	f7fe f92b 	bl	8003a7e <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005828:	6863      	ldr	r3, [r4, #4]
    tickstart = HAL_GetTick();
 800582a:	0007      	movs	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800582c:	2b02      	cmp	r3, #2
 800582e:	d118      	bne.n	8005862 <HAL_RCC_ClockConfig+0x10e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005830:	220c      	movs	r2, #12
 8005832:	68eb      	ldr	r3, [r5, #12]
 8005834:	4013      	ands	r3, r2
 8005836:	2b08      	cmp	r3, #8
 8005838:	d09e      	beq.n	8005778 <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800583a:	f7fe f920 	bl	8003a7e <HAL_GetTick>
 800583e:	4b2a      	ldr	r3, [pc, #168]	@ (80058e8 <HAL_RCC_ClockConfig+0x194>)
 8005840:	1bc0      	subs	r0, r0, r7
 8005842:	4298      	cmp	r0, r3
 8005844:	d9f4      	bls.n	8005830 <HAL_RCC_ClockConfig+0xdc>
 8005846:	e7d7      	b.n	80057f8 <HAL_RCC_ClockConfig+0xa4>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005848:	2a03      	cmp	r2, #3
 800584a:	d102      	bne.n	8005852 <HAL_RCC_ClockConfig+0xfe>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800584c:	019b      	lsls	r3, r3, #6
 800584e:	d4e4      	bmi.n	800581a <HAL_RCC_ClockConfig+0xc6>
 8005850:	e784      	b.n	800575c <HAL_RCC_ClockConfig+0x8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8005852:	2a01      	cmp	r2, #1
 8005854:	d102      	bne.n	800585c <HAL_RCC_ClockConfig+0x108>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005856:	075b      	lsls	r3, r3, #29
 8005858:	d4df      	bmi.n	800581a <HAL_RCC_ClockConfig+0xc6>
 800585a:	e77f      	b.n	800575c <HAL_RCC_ClockConfig+0x8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800585c:	059b      	lsls	r3, r3, #22
 800585e:	d4dc      	bmi.n	800581a <HAL_RCC_ClockConfig+0xc6>
 8005860:	e77c      	b.n	800575c <HAL_RCC_ClockConfig+0x8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005862:	2b03      	cmp	r3, #3
 8005864:	d10b      	bne.n	800587e <HAL_RCC_ClockConfig+0x12a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005866:	220c      	movs	r2, #12
 8005868:	68eb      	ldr	r3, [r5, #12]
 800586a:	4013      	ands	r3, r2
 800586c:	4293      	cmp	r3, r2
 800586e:	d083      	beq.n	8005778 <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005870:	f7fe f905 	bl	8003a7e <HAL_GetTick>
 8005874:	4b1c      	ldr	r3, [pc, #112]	@ (80058e8 <HAL_RCC_ClockConfig+0x194>)
 8005876:	1bc0      	subs	r0, r0, r7
 8005878:	4298      	cmp	r0, r3
 800587a:	d9f4      	bls.n	8005866 <HAL_RCC_ClockConfig+0x112>
 800587c:	e7bc      	b.n	80057f8 <HAL_RCC_ClockConfig+0xa4>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800587e:	2b01      	cmp	r3, #1
 8005880:	d011      	beq.n	80058a6 <HAL_RCC_ClockConfig+0x152>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8005882:	220c      	movs	r2, #12
 8005884:	68eb      	ldr	r3, [r5, #12]
 8005886:	4213      	tst	r3, r2
 8005888:	d100      	bne.n	800588c <HAL_RCC_ClockConfig+0x138>
 800588a:	e775      	b.n	8005778 <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800588c:	f7fe f8f7 	bl	8003a7e <HAL_GetTick>
 8005890:	4b15      	ldr	r3, [pc, #84]	@ (80058e8 <HAL_RCC_ClockConfig+0x194>)
 8005892:	1bc0      	subs	r0, r0, r7
 8005894:	4298      	cmp	r0, r3
 8005896:	d9f4      	bls.n	8005882 <HAL_RCC_ClockConfig+0x12e>
 8005898:	e7ae      	b.n	80057f8 <HAL_RCC_ClockConfig+0xa4>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800589a:	f7fe f8f0 	bl	8003a7e <HAL_GetTick>
 800589e:	4b12      	ldr	r3, [pc, #72]	@ (80058e8 <HAL_RCC_ClockConfig+0x194>)
 80058a0:	1bc0      	subs	r0, r0, r7
 80058a2:	4298      	cmp	r0, r3
 80058a4:	d8a8      	bhi.n	80057f8 <HAL_RCC_ClockConfig+0xa4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80058a6:	220c      	movs	r2, #12
 80058a8:	68eb      	ldr	r3, [r5, #12]
 80058aa:	4013      	ands	r3, r2
 80058ac:	2b04      	cmp	r3, #4
 80058ae:	d1f4      	bne.n	800589a <HAL_RCC_ClockConfig+0x146>
 80058b0:	e762      	b.n	8005778 <HAL_RCC_ClockConfig+0x24>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80058b2:	f7fe f8e4 	bl	8003a7e <HAL_GetTick>
 80058b6:	4b0c      	ldr	r3, [pc, #48]	@ (80058e8 <HAL_RCC_ClockConfig+0x194>)
 80058b8:	1bc0      	subs	r0, r0, r7
 80058ba:	4298      	cmp	r0, r3
 80058bc:	d800      	bhi.n	80058c0 <HAL_RCC_ClockConfig+0x16c>
 80058be:	e767      	b.n	8005790 <HAL_RCC_ClockConfig+0x3c>
 80058c0:	e79a      	b.n	80057f8 <HAL_RCC_ClockConfig+0xa4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80058c2:	68eb      	ldr	r3, [r5, #12]
 80058c4:	4909      	ldr	r1, [pc, #36]	@ (80058ec <HAL_RCC_ClockConfig+0x198>)
 80058c6:	400b      	ands	r3, r1
 80058c8:	68e1      	ldr	r1, [r4, #12]
 80058ca:	430b      	orrs	r3, r1
 80058cc:	60eb      	str	r3, [r5, #12]
 80058ce:	e768      	b.n	80057a2 <HAL_RCC_ClockConfig+0x4e>
 80058d0:	40022000 	.word	0x40022000
 80058d4:	40021000 	.word	0x40021000
 80058d8:	ffffc7ff 	.word	0xffffc7ff
 80058dc:	0801042d 	.word	0x0801042d
 80058e0:	20000090 	.word	0x20000090
 80058e4:	20000098 	.word	0x20000098
 80058e8:	00001388 	.word	0x00001388
 80058ec:	fffff8ff 	.word	0xfffff8ff

080058f0 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80058f0:	4b04      	ldr	r3, [pc, #16]	@ (8005904 <HAL_RCC_GetPCLK1Freq+0x14>)
  return SystemCoreClock;
 80058f2:	4a05      	ldr	r2, [pc, #20]	@ (8005908 <HAL_RCC_GetPCLK1Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80058f4:	68db      	ldr	r3, [r3, #12]
 80058f6:	4905      	ldr	r1, [pc, #20]	@ (800590c <HAL_RCC_GetPCLK1Freq+0x1c>)
 80058f8:	055b      	lsls	r3, r3, #21
 80058fa:	0f5b      	lsrs	r3, r3, #29
 80058fc:	5ccb      	ldrb	r3, [r1, r3]
 80058fe:	6810      	ldr	r0, [r2, #0]
 8005900:	40d8      	lsrs	r0, r3
}
 8005902:	4770      	bx	lr
 8005904:	40021000 	.word	0x40021000
 8005908:	20000090 	.word	0x20000090
 800590c:	0801043d 	.word	0x0801043d

08005910 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005910:	4b04      	ldr	r3, [pc, #16]	@ (8005924 <HAL_RCC_GetPCLK2Freq+0x14>)
  return SystemCoreClock;
 8005912:	4a05      	ldr	r2, [pc, #20]	@ (8005928 <HAL_RCC_GetPCLK2Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005914:	68db      	ldr	r3, [r3, #12]
 8005916:	4905      	ldr	r1, [pc, #20]	@ (800592c <HAL_RCC_GetPCLK2Freq+0x1c>)
 8005918:	049b      	lsls	r3, r3, #18
 800591a:	0f5b      	lsrs	r3, r3, #29
 800591c:	5ccb      	ldrb	r3, [r1, r3]
 800591e:	6810      	ldr	r0, [r2, #0]
 8005920:	40d8      	lsrs	r0, r3
}
 8005922:	4770      	bx	lr
 8005924:	40021000 	.word	0x40021000
 8005928:	20000090 	.word	0x20000090
 800592c:	0801043d 	.word	0x0801043d

08005930 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005930:	6803      	ldr	r3, [r0, #0]
{
 8005932:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005934:	0005      	movs	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005936:	069b      	lsls	r3, r3, #26
 8005938:	d53c      	bpl.n	80059b4 <HAL_RCCEx_PeriphCLKConfig+0x84>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800593a:	2380      	movs	r3, #128	@ 0x80
  FlagStatus       pwrclkchanged = RESET;
 800593c:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800593e:	4c5f      	ldr	r4, [pc, #380]	@ (8005abc <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8005940:	055b      	lsls	r3, r3, #21
 8005942:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
  FlagStatus       pwrclkchanged = RESET;
 8005944:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005946:	421a      	tst	r2, r3
 8005948:	d104      	bne.n	8005954 <HAL_RCCEx_PeriphCLKConfig+0x24>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800594a:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800594c:	4313      	orrs	r3, r2
 800594e:	63a3      	str	r3, [r4, #56]	@ 0x38
      pwrclkchanged = SET;
 8005950:	2301      	movs	r3, #1
 8005952:	9300      	str	r3, [sp, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005954:	2780      	movs	r7, #128	@ 0x80
 8005956:	4e5a      	ldr	r6, [pc, #360]	@ (8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8005958:	007f      	lsls	r7, r7, #1
 800595a:	6833      	ldr	r3, [r6, #0]
 800595c:	423b      	tst	r3, r7
 800595e:	d064      	beq.n	8005a2a <HAL_RCCEx_PeriphCLKConfig+0xfa>
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8005960:	6868      	ldr	r0, [r5, #4]
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8005962:	6822      	ldr	r2, [r4, #0]
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8005964:	0001      	movs	r1, r0
 8005966:	23c0      	movs	r3, #192	@ 0xc0
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8005968:	4042      	eors	r2, r0
 800596a:	20c0      	movs	r0, #192	@ 0xc0
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 800596c:	029b      	lsls	r3, r3, #10
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 800596e:	0380      	lsls	r0, r0, #14
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8005970:	4019      	ands	r1, r3
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8005972:	4202      	tst	r2, r0
 8005974:	d16a      	bne.n	8005a4c <HAL_RCCEx_PeriphCLKConfig+0x11c>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8005976:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 8005978:	0010      	movs	r0, r2
 800597a:	4018      	ands	r0, r3

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 800597c:	421a      	tst	r2, r3
 800597e:	d000      	beq.n	8005982 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8005980:	e06d      	b.n	8005a5e <HAL_RCCEx_PeriphCLKConfig+0x12e>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005982:	6869      	ldr	r1, [r5, #4]
 8005984:	23c0      	movs	r3, #192	@ 0xc0
 8005986:	000a      	movs	r2, r1
 8005988:	029b      	lsls	r3, r3, #10
 800598a:	401a      	ands	r2, r3
 800598c:	429a      	cmp	r2, r3
 800598e:	d107      	bne.n	80059a0 <HAL_RCCEx_PeriphCLKConfig+0x70>
 8005990:	6823      	ldr	r3, [r4, #0]
 8005992:	484c      	ldr	r0, [pc, #304]	@ (8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8005994:	4003      	ands	r3, r0
 8005996:	20c0      	movs	r0, #192	@ 0xc0
 8005998:	0380      	lsls	r0, r0, #14
 800599a:	4001      	ands	r1, r0
 800599c:	430b      	orrs	r3, r1
 800599e:	6023      	str	r3, [r4, #0]
 80059a0:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 80059a2:	431a      	orrs	r2, r3

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80059a4:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80059a6:	6522      	str	r2, [r4, #80]	@ 0x50
    if(pwrclkchanged == SET)
 80059a8:	2b01      	cmp	r3, #1
 80059aa:	d103      	bne.n	80059b4 <HAL_RCCEx_PeriphCLKConfig+0x84>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80059ac:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80059ae:	4a46      	ldr	r2, [pc, #280]	@ (8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 80059b0:	4013      	ands	r3, r2
 80059b2:	63a3      	str	r3, [r4, #56]	@ 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80059b4:	682b      	ldr	r3, [r5, #0]
 80059b6:	07da      	lsls	r2, r3, #31
 80059b8:	d506      	bpl.n	80059c8 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80059ba:	2003      	movs	r0, #3
 80059bc:	493f      	ldr	r1, [pc, #252]	@ (8005abc <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 80059be:	6cca      	ldr	r2, [r1, #76]	@ 0x4c
 80059c0:	4382      	bics	r2, r0
 80059c2:	68a8      	ldr	r0, [r5, #8]
 80059c4:	4302      	orrs	r2, r0
 80059c6:	64ca      	str	r2, [r1, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80059c8:	079a      	lsls	r2, r3, #30
 80059ca:	d506      	bpl.n	80059da <HAL_RCCEx_PeriphCLKConfig+0xaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80059cc:	200c      	movs	r0, #12
 80059ce:	493b      	ldr	r1, [pc, #236]	@ (8005abc <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 80059d0:	6cca      	ldr	r2, [r1, #76]	@ 0x4c
 80059d2:	4382      	bics	r2, r0
 80059d4:	68e8      	ldr	r0, [r5, #12]
 80059d6:	4302      	orrs	r2, r0
 80059d8:	64ca      	str	r2, [r1, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80059da:	075a      	lsls	r2, r3, #29
 80059dc:	d506      	bpl.n	80059ec <HAL_RCCEx_PeriphCLKConfig+0xbc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80059de:	4937      	ldr	r1, [pc, #220]	@ (8005abc <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 80059e0:	483a      	ldr	r0, [pc, #232]	@ (8005acc <HAL_RCCEx_PeriphCLKConfig+0x19c>)
 80059e2:	6cca      	ldr	r2, [r1, #76]	@ 0x4c
 80059e4:	4002      	ands	r2, r0
 80059e6:	6928      	ldr	r0, [r5, #16]
 80059e8:	4302      	orrs	r2, r0
 80059ea:	64ca      	str	r2, [r1, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80059ec:	071a      	lsls	r2, r3, #28
 80059ee:	d506      	bpl.n	80059fe <HAL_RCCEx_PeriphCLKConfig+0xce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80059f0:	4932      	ldr	r1, [pc, #200]	@ (8005abc <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 80059f2:	4837      	ldr	r0, [pc, #220]	@ (8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 80059f4:	6cca      	ldr	r2, [r1, #76]	@ 0x4c
 80059f6:	4002      	ands	r2, r0
 80059f8:	6968      	ldr	r0, [r5, #20]
 80059fa:	4302      	orrs	r2, r0
 80059fc:	64ca      	str	r2, [r1, #76]	@ 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80059fe:	05da      	lsls	r2, r3, #23
 8005a00:	d506      	bpl.n	8005a10 <HAL_RCCEx_PeriphCLKConfig+0xe0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005a02:	492e      	ldr	r1, [pc, #184]	@ (8005abc <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8005a04:	4833      	ldr	r0, [pc, #204]	@ (8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8005a06:	6cca      	ldr	r2, [r1, #76]	@ 0x4c
 8005a08:	4002      	ands	r2, r0
 8005a0a:	69a8      	ldr	r0, [r5, #24]
 8005a0c:	4302      	orrs	r2, r0
 8005a0e:	64ca      	str	r2, [r1, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005a10:	065a      	lsls	r2, r3, #25
 8005a12:	d506      	bpl.n	8005a22 <HAL_RCCEx_PeriphCLKConfig+0xf2>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005a14:	4929      	ldr	r1, [pc, #164]	@ (8005abc <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8005a16:	4830      	ldr	r0, [pc, #192]	@ (8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8005a18:	6cca      	ldr	r2, [r1, #76]	@ 0x4c
 8005a1a:	4002      	ands	r2, r0
 8005a1c:	6a28      	ldr	r0, [r5, #32]
 8005a1e:	4302      	orrs	r2, r0
 8005a20:	64ca      	str	r2, [r1, #76]	@ 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005a22:	061b      	lsls	r3, r3, #24
 8005a24:	d442      	bmi.n	8005aac <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
  }

  return HAL_OK;
 8005a26:	2000      	movs	r0, #0
 8005a28:	e00f      	b.n	8005a4a <HAL_RCCEx_PeriphCLKConfig+0x11a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005a2a:	6833      	ldr	r3, [r6, #0]
 8005a2c:	433b      	orrs	r3, r7
 8005a2e:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8005a30:	f7fe f825 	bl	8003a7e <HAL_GetTick>
 8005a34:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a36:	6833      	ldr	r3, [r6, #0]
 8005a38:	423b      	tst	r3, r7
 8005a3a:	d191      	bne.n	8005960 <HAL_RCCEx_PeriphCLKConfig+0x30>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005a3c:	f7fe f81f 	bl	8003a7e <HAL_GetTick>
 8005a40:	9b01      	ldr	r3, [sp, #4]
 8005a42:	1ac0      	subs	r0, r0, r3
 8005a44:	2864      	cmp	r0, #100	@ 0x64
 8005a46:	d9f6      	bls.n	8005a36 <HAL_RCCEx_PeriphCLKConfig+0x106>
          return HAL_TIMEOUT;
 8005a48:	2003      	movs	r0, #3
}
 8005a4a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8005a4c:	4299      	cmp	r1, r3
 8005a4e:	d000      	beq.n	8005a52 <HAL_RCCEx_PeriphCLKConfig+0x122>
 8005a50:	e791      	b.n	8005976 <HAL_RCCEx_PeriphCLKConfig+0x46>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005a52:	6822      	ldr	r2, [r4, #0]
          return HAL_ERROR;
 8005a54:	2001      	movs	r0, #1
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005a56:	0392      	lsls	r2, r2, #14
 8005a58:	d400      	bmi.n	8005a5c <HAL_RCCEx_PeriphCLKConfig+0x12c>
 8005a5a:	e78c      	b.n	8005976 <HAL_RCCEx_PeriphCLKConfig+0x46>
 8005a5c:	e7f5      	b.n	8005a4a <HAL_RCCEx_PeriphCLKConfig+0x11a>
    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8005a5e:	4288      	cmp	r0, r1
 8005a60:	d100      	bne.n	8005a64 <HAL_RCCEx_PeriphCLKConfig+0x134>
 8005a62:	e78e      	b.n	8005982 <HAL_RCCEx_PeriphCLKConfig+0x52>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005a64:	682b      	ldr	r3, [r5, #0]
 8005a66:	069b      	lsls	r3, r3, #26
 8005a68:	d400      	bmi.n	8005a6c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005a6a:	e78a      	b.n	8005982 <HAL_RCCEx_PeriphCLKConfig+0x52>
      __HAL_RCC_BACKUPRESET_FORCE();
 8005a6c:	2180      	movs	r1, #128	@ 0x80
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8005a6e:	6d23      	ldr	r3, [r4, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_FORCE();
 8005a70:	6d20      	ldr	r0, [r4, #80]	@ 0x50
 8005a72:	0309      	lsls	r1, r1, #12
 8005a74:	4301      	orrs	r1, r0
 8005a76:	6521      	str	r1, [r4, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005a78:	6d21      	ldr	r1, [r4, #80]	@ 0x50
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8005a7a:	4a16      	ldr	r2, [pc, #88]	@ (8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005a7c:	4817      	ldr	r0, [pc, #92]	@ (8005adc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8005a7e:	401a      	ands	r2, r3
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005a80:	4001      	ands	r1, r0
 8005a82:	6521      	str	r1, [r4, #80]	@ 0x50
      RCC->CSR = temp_reg;
 8005a84:	6522      	str	r2, [r4, #80]	@ 0x50
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8005a86:	05db      	lsls	r3, r3, #23
 8005a88:	d400      	bmi.n	8005a8c <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8005a8a:	e77a      	b.n	8005982 <HAL_RCCEx_PeriphCLKConfig+0x52>
        tickstart = HAL_GetTick();
 8005a8c:	f7fd fff7 	bl	8003a7e <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005a90:	2780      	movs	r7, #128	@ 0x80
        tickstart = HAL_GetTick();
 8005a92:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005a94:	00bf      	lsls	r7, r7, #2
 8005a96:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8005a98:	423b      	tst	r3, r7
 8005a9a:	d000      	beq.n	8005a9e <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8005a9c:	e771      	b.n	8005982 <HAL_RCCEx_PeriphCLKConfig+0x52>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005a9e:	f7fd ffee 	bl	8003a7e <HAL_GetTick>
 8005aa2:	4b0f      	ldr	r3, [pc, #60]	@ (8005ae0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8005aa4:	1b80      	subs	r0, r0, r6
 8005aa6:	4298      	cmp	r0, r3
 8005aa8:	d9f5      	bls.n	8005a96 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8005aaa:	e7cd      	b.n	8005a48 <HAL_RCCEx_PeriphCLKConfig+0x118>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8005aac:	4a03      	ldr	r2, [pc, #12]	@ (8005abc <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8005aae:	490d      	ldr	r1, [pc, #52]	@ (8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8005ab0:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 8005ab2:	400b      	ands	r3, r1
 8005ab4:	69e9      	ldr	r1, [r5, #28]
 8005ab6:	430b      	orrs	r3, r1
 8005ab8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005aba:	e7b4      	b.n	8005a26 <HAL_RCCEx_PeriphCLKConfig+0xf6>
 8005abc:	40021000 	.word	0x40021000
 8005ac0:	40007000 	.word	0x40007000
 8005ac4:	ffcfffff 	.word	0xffcfffff
 8005ac8:	efffffff 	.word	0xefffffff
 8005acc:	fffff3ff 	.word	0xfffff3ff
 8005ad0:	ffffcfff 	.word	0xffffcfff
 8005ad4:	fffcffff 	.word	0xfffcffff
 8005ad8:	fbffffff 	.word	0xfbffffff
 8005adc:	fff7ffff 	.word	0xfff7ffff
 8005ae0:	00001388 	.word	0x00001388
 8005ae4:	fff3ffff 	.word	0xfff3ffff

08005ae8 <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 8005ae8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005aea:	2702      	movs	r7, #2

  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005aec:	1c45      	adds	r5, r0, #1
 8005aee:	7feb      	ldrb	r3, [r5, #31]
{
 8005af0:	0004      	movs	r4, r0
  __HAL_LOCK(hrtc);
 8005af2:	0038      	movs	r0, r7
 8005af4:	2b01      	cmp	r3, #1
 8005af6:	d024      	beq.n	8005b42 <HAL_RTC_DeactivateAlarm+0x5a>
 8005af8:	2301      	movs	r3, #1

  hrtc->State = HAL_RTC_STATE_BUSY;

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005afa:	22ca      	movs	r2, #202	@ 0xca
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005afc:	19e6      	adds	r6, r4, r7
  __HAL_LOCK(hrtc);
 8005afe:	77eb      	strb	r3, [r5, #31]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005b00:	77f7      	strb	r7, [r6, #31]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005b02:	6823      	ldr	r3, [r4, #0]
 8005b04:	625a      	str	r2, [r3, #36]	@ 0x24
 8005b06:	3a77      	subs	r2, #119	@ 0x77
 8005b08:	625a      	str	r2, [r3, #36]	@ 0x24

  if (Alarm == RTC_ALARM_A)
 8005b0a:	32ad      	adds	r2, #173	@ 0xad
 8005b0c:	4291      	cmp	r1, r2
 8005b0e:	d128      	bne.n	8005b62 <HAL_RTC_DeactivateAlarm+0x7a>
  {
    /* AlarmA */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8005b10:	689a      	ldr	r2, [r3, #8]
 8005b12:	4920      	ldr	r1, [pc, #128]	@ (8005b94 <HAL_RTC_DeactivateAlarm+0xac>)
    tickstart = HAL_GetTick();

    /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8005b14:	27fa      	movs	r7, #250	@ 0xfa
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8005b16:	400a      	ands	r2, r1
 8005b18:	609a      	str	r2, [r3, #8]
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8005b1a:	689a      	ldr	r2, [r3, #8]
 8005b1c:	491e      	ldr	r1, [pc, #120]	@ (8005b98 <HAL_RTC_DeactivateAlarm+0xb0>)
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8005b1e:	00bf      	lsls	r7, r7, #2
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8005b20:	400a      	ands	r2, r1
 8005b22:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8005b24:	f7fd ffab 	bl	8003a7e <HAL_GetTick>
 8005b28:	9001      	str	r0, [sp, #4]
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8005b2a:	2201      	movs	r2, #1
 8005b2c:	6823      	ldr	r3, [r4, #0]
 8005b2e:	68db      	ldr	r3, [r3, #12]
 8005b30:	4213      	tst	r3, r2
 8005b32:	d007      	beq.n	8005b44 <HAL_RTC_DeactivateAlarm+0x5c>
        return HAL_TIMEOUT;
      }
    }
  }
  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005b34:	22ff      	movs	r2, #255	@ 0xff
 8005b36:	6823      	ldr	r3, [r4, #0]

  hrtc->State = HAL_RTC_STATE_READY;

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005b38:	2000      	movs	r0, #0
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005b3a:	625a      	str	r2, [r3, #36]	@ 0x24
  hrtc->State = HAL_RTC_STATE_READY;
 8005b3c:	2301      	movs	r3, #1
 8005b3e:	77f3      	strb	r3, [r6, #31]
  __HAL_UNLOCK(hrtc);
 8005b40:	77e8      	strb	r0, [r5, #31]

  return HAL_OK;
}
 8005b42:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8005b44:	f7fd ff9b 	bl	8003a7e <HAL_GetTick>
 8005b48:	9b01      	ldr	r3, [sp, #4]
 8005b4a:	1ac0      	subs	r0, r0, r3
 8005b4c:	42b8      	cmp	r0, r7
 8005b4e:	d9ec      	bls.n	8005b2a <HAL_RTC_DeactivateAlarm+0x42>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005b50:	22ff      	movs	r2, #255	@ 0xff
 8005b52:	6823      	ldr	r3, [r4, #0]
        return HAL_TIMEOUT;
 8005b54:	2003      	movs	r0, #3
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005b56:	625a      	str	r2, [r3, #36]	@ 0x24
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005b58:	2303      	movs	r3, #3
 8005b5a:	77f3      	strb	r3, [r6, #31]
        __HAL_UNLOCK(hrtc);
 8005b5c:	2300      	movs	r3, #0
 8005b5e:	77eb      	strb	r3, [r5, #31]
 8005b60:	e7ef      	b.n	8005b42 <HAL_RTC_DeactivateAlarm+0x5a>
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8005b62:	689a      	ldr	r2, [r3, #8]
 8005b64:	490d      	ldr	r1, [pc, #52]	@ (8005b9c <HAL_RTC_DeactivateAlarm+0xb4>)
 8005b66:	400a      	ands	r2, r1
 8005b68:	609a      	str	r2, [r3, #8]
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8005b6a:	689a      	ldr	r2, [r3, #8]
 8005b6c:	490c      	ldr	r1, [pc, #48]	@ (8005ba0 <HAL_RTC_DeactivateAlarm+0xb8>)
 8005b6e:	400a      	ands	r2, r1
 8005b70:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8005b72:	f7fd ff84 	bl	8003a7e <HAL_GetTick>
 8005b76:	9001      	str	r0, [sp, #4]
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8005b78:	6823      	ldr	r3, [r4, #0]
 8005b7a:	68db      	ldr	r3, [r3, #12]
 8005b7c:	423b      	tst	r3, r7
 8005b7e:	d1d9      	bne.n	8005b34 <HAL_RTC_DeactivateAlarm+0x4c>
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005b80:	f7fd ff7d 	bl	8003a7e <HAL_GetTick>
 8005b84:	9b01      	ldr	r3, [sp, #4]
 8005b86:	1ac0      	subs	r0, r0, r3
 8005b88:	23fa      	movs	r3, #250	@ 0xfa
 8005b8a:	009b      	lsls	r3, r3, #2
 8005b8c:	4298      	cmp	r0, r3
 8005b8e:	d9f3      	bls.n	8005b78 <HAL_RTC_DeactivateAlarm+0x90>
 8005b90:	e7de      	b.n	8005b50 <HAL_RTC_DeactivateAlarm+0x68>
 8005b92:	46c0      	nop			@ (mov r8, r8)
 8005b94:	fffffeff 	.word	0xfffffeff
 8005b98:	ffffefff 	.word	0xffffefff
 8005b9c:	fffffdff 	.word	0xfffffdff
 8005ba0:	ffffdfff 	.word	0xffffdfff

08005ba4 <HAL_RTC_AlarmIRQHandler>:
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
  /* Get the AlarmA interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8005ba4:	6803      	ldr	r3, [r0, #0]
{
 8005ba6:	b510      	push	{r4, lr}
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8005ba8:	689a      	ldr	r2, [r3, #8]
{
 8005baa:	0004      	movs	r4, r0
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8005bac:	04d2      	lsls	r2, r2, #19
 8005bae:	d50a      	bpl.n	8005bc6 <HAL_RTC_AlarmIRQHandler+0x22>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8005bb0:	68db      	ldr	r3, [r3, #12]
 8005bb2:	05db      	lsls	r3, r3, #23
 8005bb4:	d507      	bpl.n	8005bc6 <HAL_RTC_AlarmIRQHandler+0x22>
    {
      /* AlarmA callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8005bb6:	f7fd fdc2 	bl	800373e <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8005bba:	6821      	ldr	r1, [r4, #0]
 8005bbc:	4b0e      	ldr	r3, [pc, #56]	@ (8005bf8 <HAL_RTC_AlarmIRQHandler+0x54>)
 8005bbe:	68ca      	ldr	r2, [r1, #12]
 8005bc0:	b2d2      	uxtb	r2, r2
 8005bc2:	4313      	orrs	r3, r2
 8005bc4:	60cb      	str	r3, [r1, #12]
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8005bc6:	6823      	ldr	r3, [r4, #0]
 8005bc8:	689a      	ldr	r2, [r3, #8]
 8005bca:	0492      	lsls	r2, r2, #18
 8005bcc:	d50b      	bpl.n	8005be6 <HAL_RTC_AlarmIRQHandler+0x42>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8005bce:	68db      	ldr	r3, [r3, #12]
 8005bd0:	059b      	lsls	r3, r3, #22
 8005bd2:	d508      	bpl.n	8005be6 <HAL_RTC_AlarmIRQHandler+0x42>
    {
      /* AlarmB callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8005bd4:	0020      	movs	r0, r4
 8005bd6:	f000 fae5 	bl	80061a4 <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8005bda:	6821      	ldr	r1, [r4, #0]
 8005bdc:	4b07      	ldr	r3, [pc, #28]	@ (8005bfc <HAL_RTC_AlarmIRQHandler+0x58>)
 8005bde:	68ca      	ldr	r2, [r1, #12]
 8005be0:	b2d2      	uxtb	r2, r2
 8005be2:	4313      	orrs	r3, r2
 8005be4:	60cb      	str	r3, [r1, #12]
    }
  }
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8005be6:	2280      	movs	r2, #128	@ 0x80
 8005be8:	4b05      	ldr	r3, [pc, #20]	@ (8005c00 <HAL_RTC_AlarmIRQHandler+0x5c>)
 8005bea:	0292      	lsls	r2, r2, #10
 8005bec:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8005bee:	2301      	movs	r3, #1
 8005bf0:	3402      	adds	r4, #2
 8005bf2:	77e3      	strb	r3, [r4, #31]
}
 8005bf4:	bd10      	pop	{r4, pc}
 8005bf6:	46c0      	nop			@ (mov r8, r8)
 8005bf8:	fffffe7f 	.word	0xfffffe7f
 8005bfc:	fffffd7f 	.word	0xfffffd7f
 8005c00:	40010400 	.word	0x40010400

08005c04 <HAL_RTC_WaitForSynchro>:
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8005c04:	21a0      	movs	r1, #160	@ 0xa0
 8005c06:	6802      	ldr	r2, [r0, #0]
{
 8005c08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8005c0a:	68d3      	ldr	r3, [r2, #12]
{
 8005c0c:	0004      	movs	r4, r0
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8005c0e:	438b      	bics	r3, r1
 8005c10:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8005c12:	f7fd ff34 	bl	8003a7e <HAL_GetTick>

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005c16:	27fa      	movs	r7, #250	@ 0xfa
  tickstart = HAL_GetTick();
 8005c18:	0005      	movs	r5, r0
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005c1a:	2620      	movs	r6, #32
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005c1c:	00bf      	lsls	r7, r7, #2
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005c1e:	6823      	ldr	r3, [r4, #0]
 8005c20:	68db      	ldr	r3, [r3, #12]
 8005c22:	4233      	tst	r3, r6
 8005c24:	d001      	beq.n	8005c2a <HAL_RTC_WaitForSynchro+0x26>
    {
      return HAL_TIMEOUT;
    }
  }

  return HAL_OK;
 8005c26:	2000      	movs	r0, #0
}
 8005c28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005c2a:	f7fd ff28 	bl	8003a7e <HAL_GetTick>
 8005c2e:	1b40      	subs	r0, r0, r5
 8005c30:	42b8      	cmp	r0, r7
 8005c32:	d9f4      	bls.n	8005c1e <HAL_RTC_WaitForSynchro+0x1a>
      return HAL_TIMEOUT;
 8005c34:	2003      	movs	r0, #3
 8005c36:	e7f7      	b.n	8005c28 <HAL_RTC_WaitForSynchro+0x24>

08005c38 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005c38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8005c3a:	2640      	movs	r6, #64	@ 0x40
 8005c3c:	6803      	ldr	r3, [r0, #0]
{
 8005c3e:	0004      	movs	r4, r0
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8005c40:	68da      	ldr	r2, [r3, #12]
 8005c42:	4232      	tst	r2, r6
 8005c44:	d001      	beq.n	8005c4a <RTC_EnterInitMode+0x12>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 8005c46:	2000      	movs	r0, #0
}
 8005c48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8005c4a:	2201      	movs	r2, #1
 8005c4c:	4252      	negs	r2, r2
 8005c4e:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 8005c50:	f7fd ff15 	bl	8003a7e <HAL_GetTick>
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8005c54:	27fa      	movs	r7, #250	@ 0xfa
    tickstart = HAL_GetTick();
 8005c56:	0005      	movs	r5, r0
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8005c58:	00bf      	lsls	r7, r7, #2
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8005c5a:	6823      	ldr	r3, [r4, #0]
 8005c5c:	68db      	ldr	r3, [r3, #12]
 8005c5e:	4233      	tst	r3, r6
 8005c60:	d1f1      	bne.n	8005c46 <RTC_EnterInitMode+0xe>
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8005c62:	f7fd ff0c 	bl	8003a7e <HAL_GetTick>
 8005c66:	1b40      	subs	r0, r0, r5
 8005c68:	42b8      	cmp	r0, r7
 8005c6a:	d9f6      	bls.n	8005c5a <RTC_EnterInitMode+0x22>
        return HAL_TIMEOUT;
 8005c6c:	2003      	movs	r0, #3
 8005c6e:	e7eb      	b.n	8005c48 <RTC_EnterInitMode+0x10>

08005c70 <HAL_RTC_Init>:
{
 8005c70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c72:	1e04      	subs	r4, r0, #0
  if (hrtc == NULL)
 8005c74:	d019      	beq.n	8005caa <HAL_RTC_Init+0x3a>
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8005c76:	1c86      	adds	r6, r0, #2
 8005c78:	7ff3      	ldrb	r3, [r6, #31]
 8005c7a:	b2da      	uxtb	r2, r3
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d103      	bne.n	8005c88 <HAL_RTC_Init+0x18>
    hrtc->Lock = HAL_UNLOCKED;
 8005c80:	1c43      	adds	r3, r0, #1
 8005c82:	77da      	strb	r2, [r3, #31]
    HAL_RTC_MspInit(hrtc);
 8005c84:	f7fd fb72 	bl	800336c <HAL_RTC_MspInit>
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005c88:	2302      	movs	r3, #2
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005c8a:	22ca      	movs	r2, #202	@ 0xca
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005c8c:	77f3      	strb	r3, [r6, #31]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005c8e:	6823      	ldr	r3, [r4, #0]
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8005c90:	0020      	movs	r0, r4
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005c92:	625a      	str	r2, [r3, #36]	@ 0x24
 8005c94:	3a77      	subs	r2, #119	@ 0x77
 8005c96:	625a      	str	r2, [r3, #36]	@ 0x24
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8005c98:	f7ff ffce 	bl	8005c38 <RTC_EnterInitMode>
 8005c9c:	6823      	ldr	r3, [r4, #0]
 8005c9e:	1e05      	subs	r5, r0, #0
 8005ca0:	d006      	beq.n	8005cb0 <HAL_RTC_Init+0x40>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005ca2:	22ff      	movs	r2, #255	@ 0xff
 8005ca4:	625a      	str	r2, [r3, #36]	@ 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005ca6:	2304      	movs	r3, #4
 8005ca8:	77f3      	strb	r3, [r6, #31]
    return HAL_ERROR;
 8005caa:	2501      	movs	r5, #1
}
 8005cac:	0028      	movs	r0, r5
 8005cae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005cb0:	689a      	ldr	r2, [r3, #8]
 8005cb2:	491c      	ldr	r1, [pc, #112]	@ (8005d24 <HAL_RTC_Init+0xb4>)
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005cb4:	6920      	ldr	r0, [r4, #16]
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005cb6:	400a      	ands	r2, r1
 8005cb8:	609a      	str	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005cba:	6862      	ldr	r2, [r4, #4]
 8005cbc:	6899      	ldr	r1, [r3, #8]
 8005cbe:	4302      	orrs	r2, r0
 8005cc0:	69a0      	ldr	r0, [r4, #24]
 8005cc2:	4302      	orrs	r2, r0
 8005cc4:	430a      	orrs	r2, r1
 8005cc6:	609a      	str	r2, [r3, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005cc8:	68e2      	ldr	r2, [r4, #12]
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8005cca:	6960      	ldr	r0, [r4, #20]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005ccc:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8005cce:	68a2      	ldr	r2, [r4, #8]
 8005cd0:	6919      	ldr	r1, [r3, #16]
 8005cd2:	0412      	lsls	r2, r2, #16
 8005cd4:	430a      	orrs	r2, r1
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8005cd6:	2180      	movs	r1, #128	@ 0x80
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8005cd8:	611a      	str	r2, [r3, #16]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8005cda:	68da      	ldr	r2, [r3, #12]
 8005cdc:	438a      	bics	r2, r1
 8005cde:	60da      	str	r2, [r3, #12]
    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8005ce0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005ce2:	397d      	subs	r1, #125	@ 0x7d
 8005ce4:	438a      	bics	r2, r1
 8005ce6:	64da      	str	r2, [r3, #76]	@ 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8005ce8:	69e2      	ldr	r2, [r4, #28]
 8005cea:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8005cec:	4302      	orrs	r2, r0
 8005cee:	430a      	orrs	r2, r1
 8005cf0:	64da      	str	r2, [r3, #76]	@ 0x4c
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8005cf2:	689a      	ldr	r2, [r3, #8]
 8005cf4:	2320      	movs	r3, #32
 8005cf6:	0017      	movs	r7, r2
 8005cf8:	401f      	ands	r7, r3
 8005cfa:	421a      	tst	r2, r3
 8005cfc:	d10c      	bne.n	8005d18 <HAL_RTC_Init+0xa8>
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005cfe:	0020      	movs	r0, r4
 8005d00:	f7ff ff80 	bl	8005c04 <HAL_RTC_WaitForSynchro>
 8005d04:	2800      	cmp	r0, #0
 8005d06:	d007      	beq.n	8005d18 <HAL_RTC_Init+0xa8>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005d08:	22ff      	movs	r2, #255	@ 0xff
 8005d0a:	6823      	ldr	r3, [r4, #0]
        __HAL_UNLOCK(hrtc);
 8005d0c:	3401      	adds	r4, #1
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005d0e:	625a      	str	r2, [r3, #36]	@ 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8005d10:	2304      	movs	r3, #4
 8005d12:	77f3      	strb	r3, [r6, #31]
        __HAL_UNLOCK(hrtc);
 8005d14:	77e7      	strb	r7, [r4, #31]
        return HAL_ERROR;
 8005d16:	e7c8      	b.n	8005caa <HAL_RTC_Init+0x3a>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005d18:	22ff      	movs	r2, #255	@ 0xff
 8005d1a:	6823      	ldr	r3, [r4, #0]
 8005d1c:	625a      	str	r2, [r3, #36]	@ 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 8005d1e:	2301      	movs	r3, #1
 8005d20:	77f3      	strb	r3, [r6, #31]
    return HAL_OK;
 8005d22:	e7c3      	b.n	8005cac <HAL_RTC_Init+0x3c>
 8005d24:	ff8fffbf 	.word	0xff8fffbf

08005d28 <RTC_ByteToBcd2>:
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0U;
 8005d28:	2300      	movs	r3, #0
  uint8_t Param = Value;

  while (Param >= 10U)
 8005d2a:	2809      	cmp	r0, #9
 8005d2c:	d803      	bhi.n	8005d36 <RTC_ByteToBcd2+0xe>
  {
    bcdhigh++;
    Param -= 10U;
  }

  return ((uint8_t)(bcdhigh << 4U) | Param);
 8005d2e:	011b      	lsls	r3, r3, #4
 8005d30:	4318      	orrs	r0, r3
 8005d32:	b2c0      	uxtb	r0, r0
}
 8005d34:	4770      	bx	lr
    Param -= 10U;
 8005d36:	380a      	subs	r0, #10
    bcdhigh++;
 8005d38:	3301      	adds	r3, #1
    Param -= 10U;
 8005d3a:	b2c0      	uxtb	r0, r0
 8005d3c:	e7f5      	b.n	8005d2a <RTC_ByteToBcd2+0x2>
	...

08005d40 <HAL_RTC_SetTime>:
{
 8005d40:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 8005d42:	1c43      	adds	r3, r0, #1
{
 8005d44:	b085      	sub	sp, #20
  __HAL_LOCK(hrtc);
 8005d46:	9302      	str	r3, [sp, #8]
{
 8005d48:	000c      	movs	r4, r1
  __HAL_LOCK(hrtc);
 8005d4a:	7fd9      	ldrb	r1, [r3, #31]
 8005d4c:	2302      	movs	r3, #2
{
 8005d4e:	0005      	movs	r5, r0
  __HAL_LOCK(hrtc);
 8005d50:	001f      	movs	r7, r3
 8005d52:	2901      	cmp	r1, #1
 8005d54:	d036      	beq.n	8005dc4 <HAL_RTC_SetTime+0x84>
 8005d56:	2101      	movs	r1, #1
 8005d58:	1840      	adds	r0, r0, r1
 8005d5a:	77c1      	strb	r1, [r0, #31]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005d5c:	18e9      	adds	r1, r5, r3
 8005d5e:	77cb      	strb	r3, [r1, #31]
 8005d60:	9101      	str	r1, [sp, #4]
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005d62:	682f      	ldr	r7, [r5, #0]
 8005d64:	7820      	ldrb	r0, [r4, #0]
 8005d66:	7866      	ldrb	r6, [r4, #1]
 8005d68:	333e      	adds	r3, #62	@ 0x3e
  if (Format == RTC_FORMAT_BIN)
 8005d6a:	2a00      	cmp	r2, #0
 8005d6c:	d12d      	bne.n	8005dca <HAL_RTC_SetTime+0x8a>
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005d6e:	68ba      	ldr	r2, [r7, #8]
 8005d70:	0011      	movs	r1, r2
 8005d72:	4019      	ands	r1, r3
 8005d74:	421a      	tst	r2, r3
 8005d76:	d100      	bne.n	8005d7a <HAL_RTC_SetTime+0x3a>
      sTime->TimeFormat = 0x00U;
 8005d78:	70e1      	strb	r1, [r4, #3]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8005d7a:	f7ff ffd5 	bl	8005d28 <RTC_ByteToBcd2>
 8005d7e:	9003      	str	r0, [sp, #12]
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8005d80:	0030      	movs	r0, r6
 8005d82:	f7ff ffd1 	bl	8005d28 <RTC_ByteToBcd2>
 8005d86:	0006      	movs	r6, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8005d88:	78a0      	ldrb	r0, [r4, #2]
 8005d8a:	f7ff ffcd 	bl	8005d28 <RTC_ByteToBcd2>
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8005d8e:	78e3      	ldrb	r3, [r4, #3]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8005d90:	9a03      	ldr	r2, [sp, #12]
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8005d92:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8005d94:	4303      	orrs	r3, r0
 8005d96:	0412      	lsls	r2, r2, #16
 8005d98:	4313      	orrs	r3, r2
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8005d9a:	0236      	lsls	r6, r6, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8005d9c:	431e      	orrs	r6, r3
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005d9e:	23ca      	movs	r3, #202	@ 0xca
 8005da0:	627b      	str	r3, [r7, #36]	@ 0x24
 8005da2:	3b77      	subs	r3, #119	@ 0x77
 8005da4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8005da6:	0028      	movs	r0, r5
 8005da8:	f7ff ff46 	bl	8005c38 <RTC_EnterInitMode>
 8005dac:	682b      	ldr	r3, [r5, #0]
 8005dae:	1e07      	subs	r7, r0, #0
 8005db0:	d019      	beq.n	8005de6 <HAL_RTC_SetTime+0xa6>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005db2:	22ff      	movs	r2, #255	@ 0xff
 8005db4:	625a      	str	r2, [r3, #36]	@ 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8005db6:	2304      	movs	r3, #4
 8005db8:	9a01      	ldr	r2, [sp, #4]
    return HAL_ERROR;
 8005dba:	2701      	movs	r7, #1
        hrtc->State = HAL_RTC_STATE_ERROR;
 8005dbc:	77d3      	strb	r3, [r2, #31]
        __HAL_UNLOCK(hrtc);
 8005dbe:	2300      	movs	r3, #0
 8005dc0:	9a02      	ldr	r2, [sp, #8]
 8005dc2:	77d3      	strb	r3, [r2, #31]
}
 8005dc4:	0038      	movs	r0, r7
 8005dc6:	b005      	add	sp, #20
 8005dc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005dca:	68ba      	ldr	r2, [r7, #8]
 8005dcc:	0011      	movs	r1, r2
 8005dce:	4019      	ands	r1, r3
 8005dd0:	421a      	tst	r2, r3
 8005dd2:	d100      	bne.n	8005dd6 <HAL_RTC_SetTime+0x96>
      sTime->TimeFormat = 0x00U;
 8005dd4:	70e1      	strb	r1, [r4, #3]
              ((uint32_t)sTime->Seconds) | \
 8005dd6:	78a3      	ldrb	r3, [r4, #2]
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8005dd8:	0400      	lsls	r0, r0, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8005dda:	0236      	lsls	r6, r6, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8005ddc:	4306      	orrs	r6, r0
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8005dde:	431e      	orrs	r6, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8005de0:	78e3      	ldrb	r3, [r4, #3]
 8005de2:	041b      	lsls	r3, r3, #16
 8005de4:	e7da      	b.n	8005d9c <HAL_RTC_SetTime+0x5c>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8005de6:	4a12      	ldr	r2, [pc, #72]	@ (8005e30 <HAL_RTC_SetTime+0xf0>)
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8005de8:	4912      	ldr	r1, [pc, #72]	@ (8005e34 <HAL_RTC_SetTime+0xf4>)
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8005dea:	4016      	ands	r6, r2
 8005dec:	601e      	str	r6, [r3, #0]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8005dee:	689a      	ldr	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005df0:	6920      	ldr	r0, [r4, #16]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8005df2:	400a      	ands	r2, r1
 8005df4:	609a      	str	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005df6:	68e2      	ldr	r2, [r4, #12]
 8005df8:	6899      	ldr	r1, [r3, #8]
 8005dfa:	4302      	orrs	r2, r0
 8005dfc:	430a      	orrs	r2, r1
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8005dfe:	2180      	movs	r1, #128	@ 0x80
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005e00:	609a      	str	r2, [r3, #8]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8005e02:	68da      	ldr	r2, [r3, #12]
 8005e04:	438a      	bics	r2, r1
 8005e06:	60da      	str	r2, [r3, #12]
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8005e08:	689b      	ldr	r3, [r3, #8]
 8005e0a:	069b      	lsls	r3, r3, #26
 8005e0c:	d406      	bmi.n	8005e1c <HAL_RTC_SetTime+0xdc>
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005e0e:	0028      	movs	r0, r5
 8005e10:	f7ff fef8 	bl	8005c04 <HAL_RTC_WaitForSynchro>
 8005e14:	2800      	cmp	r0, #0
 8005e16:	d001      	beq.n	8005e1c <HAL_RTC_SetTime+0xdc>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005e18:	682b      	ldr	r3, [r5, #0]
 8005e1a:	e7ca      	b.n	8005db2 <HAL_RTC_SetTime+0x72>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005e1c:	22ff      	movs	r2, #255	@ 0xff
 8005e1e:	682b      	ldr	r3, [r5, #0]
 8005e20:	625a      	str	r2, [r3, #36]	@ 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 8005e22:	2301      	movs	r3, #1
 8005e24:	9a01      	ldr	r2, [sp, #4]
 8005e26:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hrtc);
 8005e28:	2300      	movs	r3, #0
 8005e2a:	9a02      	ldr	r2, [sp, #8]
 8005e2c:	77d3      	strb	r3, [r2, #31]
    return HAL_OK;
 8005e2e:	e7c9      	b.n	8005dc4 <HAL_RTC_SetTime+0x84>
 8005e30:	007f7f7f 	.word	0x007f7f7f
 8005e34:	fffbffff 	.word	0xfffbffff

08005e38 <HAL_RTC_SetDate>:
{
 8005e38:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 8005e3a:	1c43      	adds	r3, r0, #1
{
 8005e3c:	b085      	sub	sp, #20
  __HAL_LOCK(hrtc);
 8005e3e:	9302      	str	r3, [sp, #8]
{
 8005e40:	000d      	movs	r5, r1
  __HAL_LOCK(hrtc);
 8005e42:	7fd9      	ldrb	r1, [r3, #31]
 8005e44:	2302      	movs	r3, #2
{
 8005e46:	0004      	movs	r4, r0
  __HAL_LOCK(hrtc);
 8005e48:	001e      	movs	r6, r3
 8005e4a:	2901      	cmp	r1, #1
 8005e4c:	d024      	beq.n	8005e98 <HAL_RTC_SetDate+0x60>
 8005e4e:	2101      	movs	r1, #1
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005e50:	18e7      	adds	r7, r4, r3
  __HAL_LOCK(hrtc);
 8005e52:	1840      	adds	r0, r0, r1
 8005e54:	77c1      	strb	r1, [r0, #31]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005e56:	77fb      	strb	r3, [r7, #31]
                  ((uint32_t)sDate->Date) | \
 8005e58:	78a9      	ldrb	r1, [r5, #2]
                  (((uint32_t)sDate->WeekDay) << 13U));
 8005e5a:	782e      	ldrb	r6, [r5, #0]
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8005e5c:	78e8      	ldrb	r0, [r5, #3]
                  (((uint32_t)sDate->Month) << 8U) | \
 8005e5e:	786b      	ldrb	r3, [r5, #1]
                  (((uint32_t)sDate->WeekDay) << 13U));
 8005e60:	0376      	lsls	r6, r6, #13
                  ((uint32_t)sDate->Date) | \
 8005e62:	9101      	str	r1, [sp, #4]
  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8005e64:	2a00      	cmp	r2, #0
 8005e66:	d01a      	beq.n	8005e9e <HAL_RTC_SetDate+0x66>
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8005e68:	0400      	lsls	r0, r0, #16
 8005e6a:	4330      	orrs	r0, r6
 8005e6c:	4308      	orrs	r0, r1
                  (((uint32_t)sDate->Month) << 8U) | \
 8005e6e:	021d      	lsls	r5, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8005e70:	4305      	orrs	r5, r0
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005e72:	22ca      	movs	r2, #202	@ 0xca
 8005e74:	6823      	ldr	r3, [r4, #0]
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8005e76:	0020      	movs	r0, r4
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005e78:	625a      	str	r2, [r3, #36]	@ 0x24
 8005e7a:	3a77      	subs	r2, #119	@ 0x77
 8005e7c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8005e7e:	f7ff fedb 	bl	8005c38 <RTC_EnterInitMode>
 8005e82:	6823      	ldr	r3, [r4, #0]
 8005e84:	1e06      	subs	r6, r0, #0
 8005e86:	d021      	beq.n	8005ecc <HAL_RTC_SetDate+0x94>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005e88:	22ff      	movs	r2, #255	@ 0xff
 8005e8a:	625a      	str	r2, [r3, #36]	@ 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8005e8c:	2304      	movs	r3, #4
 8005e8e:	77fb      	strb	r3, [r7, #31]
        __HAL_UNLOCK(hrtc);
 8005e90:	2300      	movs	r3, #0
    return HAL_ERROR;
 8005e92:	2601      	movs	r6, #1
        __HAL_UNLOCK(hrtc);
 8005e94:	9a02      	ldr	r2, [sp, #8]
 8005e96:	77d3      	strb	r3, [r2, #31]
}
 8005e98:	0030      	movs	r0, r6
 8005e9a:	b005      	add	sp, #20
 8005e9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8005e9e:	2210      	movs	r2, #16
 8005ea0:	4213      	tst	r3, r2
 8005ea2:	d002      	beq.n	8005eaa <HAL_RTC_SetDate+0x72>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8005ea4:	4393      	bics	r3, r2
 8005ea6:	330a      	adds	r3, #10
 8005ea8:	706b      	strb	r3, [r5, #1]
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8005eaa:	f7ff ff3d 	bl	8005d28 <RTC_ByteToBcd2>
 8005eae:	9003      	str	r0, [sp, #12]
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8005eb0:	7868      	ldrb	r0, [r5, #1]
 8005eb2:	f7ff ff39 	bl	8005d28 <RTC_ByteToBcd2>
 8005eb6:	0005      	movs	r5, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8005eb8:	9801      	ldr	r0, [sp, #4]
 8005eba:	f7ff ff35 	bl	8005d28 <RTC_ByteToBcd2>
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8005ebe:	9b03      	ldr	r3, [sp, #12]
 8005ec0:	4330      	orrs	r0, r6
 8005ec2:	041b      	lsls	r3, r3, #16
 8005ec4:	4303      	orrs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8005ec6:	022d      	lsls	r5, r5, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8005ec8:	431d      	orrs	r5, r3
 8005eca:	e7d2      	b.n	8005e72 <HAL_RTC_SetDate+0x3a>
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8005ecc:	2180      	movs	r1, #128	@ 0x80
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8005ece:	4a0c      	ldr	r2, [pc, #48]	@ (8005f00 <HAL_RTC_SetDate+0xc8>)
 8005ed0:	4015      	ands	r5, r2
 8005ed2:	605d      	str	r5, [r3, #4]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8005ed4:	68da      	ldr	r2, [r3, #12]
 8005ed6:	438a      	bics	r2, r1
 8005ed8:	60da      	str	r2, [r3, #12]
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8005eda:	689b      	ldr	r3, [r3, #8]
 8005edc:	069b      	lsls	r3, r3, #26
 8005ede:	d406      	bmi.n	8005eee <HAL_RTC_SetDate+0xb6>
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005ee0:	0020      	movs	r0, r4
 8005ee2:	f7ff fe8f 	bl	8005c04 <HAL_RTC_WaitForSynchro>
 8005ee6:	2800      	cmp	r0, #0
 8005ee8:	d001      	beq.n	8005eee <HAL_RTC_SetDate+0xb6>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005eea:	6823      	ldr	r3, [r4, #0]
 8005eec:	e7cc      	b.n	8005e88 <HAL_RTC_SetDate+0x50>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005eee:	22ff      	movs	r2, #255	@ 0xff
 8005ef0:	6823      	ldr	r3, [r4, #0]
 8005ef2:	625a      	str	r2, [r3, #36]	@ 0x24
    hrtc->State = HAL_RTC_STATE_READY ;
 8005ef4:	2301      	movs	r3, #1
 8005ef6:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hrtc);
 8005ef8:	2300      	movs	r3, #0
 8005efa:	9a02      	ldr	r2, [sp, #8]
 8005efc:	77d3      	strb	r3, [r2, #31]
    return HAL_OK;
 8005efe:	e7cb      	b.n	8005e98 <HAL_RTC_SetDate+0x60>
 8005f00:	00ffff3f 	.word	0x00ffff3f

08005f04 <HAL_RTC_SetAlarm_IT>:
  __HAL_LOCK(hrtc);
 8005f04:	2302      	movs	r3, #2
{
 8005f06:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005f08:	000c      	movs	r4, r1
  __HAL_LOCK(hrtc);
 8005f0a:	1c41      	adds	r1, r0, #1
 8005f0c:	7fcd      	ldrb	r5, [r1, #31]
{
 8005f0e:	0007      	movs	r7, r0
 8005f10:	b085      	sub	sp, #20
  __HAL_LOCK(hrtc);
 8005f12:	0018      	movs	r0, r3
 8005f14:	2d01      	cmp	r5, #1
 8005f16:	d100      	bne.n	8005f1a <HAL_RTC_SetAlarm_IT+0x16>
 8005f18:	e096      	b.n	8006048 <HAL_RTC_SetAlarm_IT+0x144>
 8005f1a:	3801      	subs	r0, #1
 8005f1c:	77c8      	strb	r0, [r1, #31]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005f1e:	18f9      	adds	r1, r7, r3
 8005f20:	77cb      	strb	r3, [r1, #31]
  if (Format == RTC_FORMAT_BIN)
 8005f22:	69e1      	ldr	r1, [r4, #28]
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005f24:	683e      	ldr	r6, [r7, #0]
 8005f26:	9100      	str	r1, [sp, #0]
 8005f28:	78a1      	ldrb	r1, [r4, #2]
 8005f2a:	7865      	ldrb	r5, [r4, #1]
 8005f2c:	7820      	ldrb	r0, [r4, #0]
 8005f2e:	333e      	adds	r3, #62	@ 0x3e
 8005f30:	9101      	str	r1, [sp, #4]
  if (Format == RTC_FORMAT_BIN)
 8005f32:	2a00      	cmp	r2, #0
 8005f34:	d162      	bne.n	8005ffc <HAL_RTC_SetAlarm_IT+0xf8>
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005f36:	68b2      	ldr	r2, [r6, #8]
 8005f38:	0011      	movs	r1, r2
 8005f3a:	4019      	ands	r1, r3
 8005f3c:	421a      	tst	r2, r3
 8005f3e:	d100      	bne.n	8005f42 <HAL_RTC_SetAlarm_IT+0x3e>
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8005f40:	70e1      	strb	r1, [r4, #3]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8005f42:	f7ff fef1 	bl	8005d28 <RTC_ByteToBcd2>
 8005f46:	9002      	str	r0, [sp, #8]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8005f48:	0028      	movs	r0, r5
 8005f4a:	f7ff feed 	bl	8005d28 <RTC_ByteToBcd2>
 8005f4e:	9003      	str	r0, [sp, #12]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8005f50:	9801      	ldr	r0, [sp, #4]
 8005f52:	f7ff fee9 	bl	8005d28 <RTC_ByteToBcd2>
 8005f56:	0005      	movs	r5, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8005f58:	1c63      	adds	r3, r4, #1
 8005f5a:	7fd8      	ldrb	r0, [r3, #31]
 8005f5c:	f7ff fee4 	bl	8005d28 <RTC_ByteToBcd2>
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8005f60:	6962      	ldr	r2, [r4, #20]
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8005f62:	78e3      	ldrb	r3, [r4, #3]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8005f64:	9900      	ldr	r1, [sp, #0]
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8005f66:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8005f68:	4311      	orrs	r1, r2
 8005f6a:	9a02      	ldr	r2, [sp, #8]
 8005f6c:	430b      	orrs	r3, r1
 8005f6e:	432b      	orrs	r3, r5
 8005f70:	0412      	lsls	r2, r2, #16
 8005f72:	4313      	orrs	r3, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8005f74:	9a03      	ldr	r2, [sp, #12]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8005f76:	0605      	lsls	r5, r0, #24
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8005f78:	0212      	lsls	r2, r2, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8005f7a:	4313      	orrs	r3, r2
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8005f7c:	6862      	ldr	r2, [r4, #4]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8005f7e:	431d      	orrs	r5, r3
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8005f80:	69a3      	ldr	r3, [r4, #24]
 8005f82:	431a      	orrs	r2, r3
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005f84:	23ca      	movs	r3, #202	@ 0xca
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8005f86:	9200      	str	r2, [sp, #0]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005f88:	6273      	str	r3, [r6, #36]	@ 0x24
  if (sAlarm->Alarm == RTC_ALARM_A)
 8005f8a:	6a62      	ldr	r2, [r4, #36]	@ 0x24
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005f8c:	3b77      	subs	r3, #119	@ 0x77
 8005f8e:	6273      	str	r3, [r6, #36]	@ 0x24
  if (sAlarm->Alarm == RTC_ALARM_A)
 8005f90:	33ad      	adds	r3, #173	@ 0xad
 8005f92:	429a      	cmp	r2, r3
 8005f94:	d15a      	bne.n	800604c <HAL_RTC_SetAlarm_IT+0x148>
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8005f96:	68b3      	ldr	r3, [r6, #8]
 8005f98:	4a3f      	ldr	r2, [pc, #252]	@ (8006098 <HAL_RTC_SetAlarm_IT+0x194>)
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005f9a:	24fa      	movs	r4, #250	@ 0xfa
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8005f9c:	4013      	ands	r3, r2
 8005f9e:	60b3      	str	r3, [r6, #8]
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8005fa0:	68f2      	ldr	r2, [r6, #12]
 8005fa2:	4b3e      	ldr	r3, [pc, #248]	@ (800609c <HAL_RTC_SetAlarm_IT+0x198>)
 8005fa4:	b2d2      	uxtb	r2, r2
 8005fa6:	4313      	orrs	r3, r2
 8005fa8:	60f3      	str	r3, [r6, #12]
    tickstart = HAL_GetTick();
 8005faa:	f7fd fd68 	bl	8003a7e <HAL_GetTick>
 8005fae:	0006      	movs	r6, r0
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005fb0:	00a4      	lsls	r4, r4, #2
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8005fb2:	2101      	movs	r1, #1
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	68da      	ldr	r2, [r3, #12]
 8005fb8:	420a      	tst	r2, r1
 8005fba:	d036      	beq.n	800602a <HAL_RTC_SetAlarm_IT+0x126>
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8005fbc:	9a00      	ldr	r2, [sp, #0]
    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8005fbe:	61dd      	str	r5, [r3, #28]
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8005fc0:	645a      	str	r2, [r3, #68]	@ 0x44
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8005fc2:	2280      	movs	r2, #128	@ 0x80
 8005fc4:	6899      	ldr	r1, [r3, #8]
 8005fc6:	0052      	lsls	r2, r2, #1
 8005fc8:	430a      	orrs	r2, r1
 8005fca:	609a      	str	r2, [r3, #8]
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8005fcc:	2280      	movs	r2, #128	@ 0x80
 8005fce:	6899      	ldr	r1, [r3, #8]
 8005fd0:	0152      	lsls	r2, r2, #5
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8005fd2:	430a      	orrs	r2, r1
 8005fd4:	609a      	str	r2, [r3, #8]
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8005fd6:	2280      	movs	r2, #128	@ 0x80
 8005fd8:	4b31      	ldr	r3, [pc, #196]	@ (80060a0 <HAL_RTC_SetAlarm_IT+0x19c>)
 8005fda:	0292      	lsls	r2, r2, #10
 8005fdc:	6819      	ldr	r1, [r3, #0]
  __HAL_UNLOCK(hrtc);
 8005fde:	2000      	movs	r0, #0
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8005fe0:	4311      	orrs	r1, r2
 8005fe2:	6019      	str	r1, [r3, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8005fe4:	6899      	ldr	r1, [r3, #8]
 8005fe6:	430a      	orrs	r2, r1
 8005fe8:	609a      	str	r2, [r3, #8]
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005fea:	22ff      	movs	r2, #255	@ 0xff
 8005fec:	683b      	ldr	r3, [r7, #0]
 8005fee:	625a      	str	r2, [r3, #36]	@ 0x24
  hrtc->State = HAL_RTC_STATE_READY;
 8005ff0:	1cbb      	adds	r3, r7, #2
 8005ff2:	3afe      	subs	r2, #254	@ 0xfe
 8005ff4:	77da      	strb	r2, [r3, #31]
  __HAL_UNLOCK(hrtc);
 8005ff6:	18bb      	adds	r3, r7, r2
 8005ff8:	77d8      	strb	r0, [r3, #31]
  return HAL_OK;
 8005ffa:	e025      	b.n	8006048 <HAL_RTC_SetAlarm_IT+0x144>
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005ffc:	68b2      	ldr	r2, [r6, #8]
 8005ffe:	0011      	movs	r1, r2
 8006000:	4019      	ands	r1, r3
 8006002:	421a      	tst	r2, r3
 8006004:	d100      	bne.n	8006008 <HAL_RTC_SetAlarm_IT+0x104>
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8006006:	70e1      	strb	r1, [r4, #3]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8006008:	6963      	ldr	r3, [r4, #20]
 800600a:	9a00      	ldr	r2, [sp, #0]
 800600c:	0400      	lsls	r0, r0, #16
 800600e:	431a      	orrs	r2, r3
 8006010:	0013      	movs	r3, r2
 8006012:	9a01      	ldr	r2, [sp, #4]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8006014:	022d      	lsls	r5, r5, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8006016:	4313      	orrs	r3, r2
 8006018:	4303      	orrs	r3, r0
 800601a:	431d      	orrs	r5, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800601c:	78e3      	ldrb	r3, [r4, #3]
 800601e:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8006020:	431d      	orrs	r5, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8006022:	1c63      	adds	r3, r4, #1
 8006024:	7fdb      	ldrb	r3, [r3, #31]
 8006026:	061b      	lsls	r3, r3, #24
 8006028:	e7a8      	b.n	8005f7c <HAL_RTC_SetAlarm_IT+0x78>
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800602a:	f7fd fd28 	bl	8003a7e <HAL_GetTick>
 800602e:	1b80      	subs	r0, r0, r6
 8006030:	42a0      	cmp	r0, r4
 8006032:	d9be      	bls.n	8005fb2 <HAL_RTC_SetAlarm_IT+0xae>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006034:	22ff      	movs	r2, #255	@ 0xff
 8006036:	683b      	ldr	r3, [r7, #0]
        return HAL_TIMEOUT;
 8006038:	2003      	movs	r0, #3
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800603a:	625a      	str	r2, [r3, #36]	@ 0x24
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800603c:	1cbb      	adds	r3, r7, #2
 800603e:	3afc      	subs	r2, #252	@ 0xfc
 8006040:	77da      	strb	r2, [r3, #31]
        __HAL_UNLOCK(hrtc);
 8006042:	2200      	movs	r2, #0
 8006044:	3701      	adds	r7, #1
 8006046:	77fa      	strb	r2, [r7, #31]
}
 8006048:	b005      	add	sp, #20
 800604a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800604c:	68b3      	ldr	r3, [r6, #8]
 800604e:	4a15      	ldr	r2, [pc, #84]	@ (80060a4 <HAL_RTC_SetAlarm_IT+0x1a0>)
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006050:	24fa      	movs	r4, #250	@ 0xfa
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8006052:	4013      	ands	r3, r2
 8006054:	60b3      	str	r3, [r6, #8]
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8006056:	68f2      	ldr	r2, [r6, #12]
 8006058:	4b13      	ldr	r3, [pc, #76]	@ (80060a8 <HAL_RTC_SetAlarm_IT+0x1a4>)
 800605a:	b2d2      	uxtb	r2, r2
 800605c:	4313      	orrs	r3, r2
 800605e:	60f3      	str	r3, [r6, #12]
    tickstart = HAL_GetTick();
 8006060:	f7fd fd0d 	bl	8003a7e <HAL_GetTick>
 8006064:	0006      	movs	r6, r0
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006066:	00a4      	lsls	r4, r4, #2
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8006068:	2102      	movs	r1, #2
 800606a:	683b      	ldr	r3, [r7, #0]
 800606c:	68da      	ldr	r2, [r3, #12]
 800606e:	420a      	tst	r2, r1
 8006070:	d00b      	beq.n	800608a <HAL_RTC_SetAlarm_IT+0x186>
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8006072:	9a00      	ldr	r2, [sp, #0]
    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8006074:	621d      	str	r5, [r3, #32]
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8006076:	649a      	str	r2, [r3, #72]	@ 0x48
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8006078:	2280      	movs	r2, #128	@ 0x80
 800607a:	6899      	ldr	r1, [r3, #8]
 800607c:	0092      	lsls	r2, r2, #2
 800607e:	430a      	orrs	r2, r1
 8006080:	609a      	str	r2, [r3, #8]
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8006082:	2280      	movs	r2, #128	@ 0x80
 8006084:	6899      	ldr	r1, [r3, #8]
 8006086:	0192      	lsls	r2, r2, #6
 8006088:	e7a3      	b.n	8005fd2 <HAL_RTC_SetAlarm_IT+0xce>
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800608a:	f7fd fcf8 	bl	8003a7e <HAL_GetTick>
 800608e:	1b80      	subs	r0, r0, r6
 8006090:	42a0      	cmp	r0, r4
 8006092:	d9e9      	bls.n	8006068 <HAL_RTC_SetAlarm_IT+0x164>
 8006094:	e7ce      	b.n	8006034 <HAL_RTC_SetAlarm_IT+0x130>
 8006096:	46c0      	nop			@ (mov r8, r8)
 8006098:	fffffeff 	.word	0xfffffeff
 800609c:	fffffe7f 	.word	0xfffffe7f
 80060a0:	40010400 	.word	0x40010400
 80060a4:	fffffdff 	.word	0xfffffdff
 80060a8:	fffffd7f 	.word	0xfffffd7f

080060ac <RTC_Bcd2ToByte>:
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 80060ac:	0903      	lsrs	r3, r0, #4
{
 80060ae:	0002      	movs	r2, r0
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 80060b0:	200a      	movs	r0, #10
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 80060b2:	210f      	movs	r1, #15
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 80060b4:	4358      	muls	r0, r3
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 80060b6:	400a      	ands	r2, r1
 80060b8:	1880      	adds	r0, r0, r2
 80060ba:	b2c0      	uxtb	r0, r0
}
 80060bc:	4770      	bx	lr
	...

080060c0 <HAL_RTC_GetTime>:
{
 80060c0:	b570      	push	{r4, r5, r6, lr}
 80060c2:	000c      	movs	r4, r1
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80060c4:	6801      	ldr	r1, [r0, #0]
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 80060c6:	203f      	movs	r0, #63	@ 0x3f
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80060c8:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
 80060ca:	6063      	str	r3, [r4, #4]
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80060cc:	690b      	ldr	r3, [r1, #16]
 80060ce:	045b      	lsls	r3, r3, #17
 80060d0:	0c5b      	lsrs	r3, r3, #17
 80060d2:	60a3      	str	r3, [r4, #8]
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80060d4:	680b      	ldr	r3, [r1, #0]
 80060d6:	490e      	ldr	r1, [pc, #56]	@ (8006110 <HAL_RTC_GetTime+0x50>)
 80060d8:	400b      	ands	r3, r1
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 80060da:	0c19      	lsrs	r1, r3, #16
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 80060dc:	0a1e      	lsrs	r6, r3, #8
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 80060de:	b2dd      	uxtb	r5, r3
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 80060e0:	2340      	movs	r3, #64	@ 0x40
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 80060e2:	4008      	ands	r0, r1
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 80060e4:	b2f6      	uxtb	r6, r6
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 80060e6:	4019      	ands	r1, r3
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 80060e8:	7020      	strb	r0, [r4, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 80060ea:	7066      	strb	r6, [r4, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 80060ec:	70a5      	strb	r5, [r4, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 80060ee:	70e1      	strb	r1, [r4, #3]
  if (Format == RTC_FORMAT_BIN)
 80060f0:	2a00      	cmp	r2, #0
 80060f2:	d10a      	bne.n	800610a <HAL_RTC_GetTime+0x4a>
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80060f4:	f7ff ffda 	bl	80060ac <RTC_Bcd2ToByte>
 80060f8:	7020      	strb	r0, [r4, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80060fa:	0030      	movs	r0, r6
 80060fc:	f7ff ffd6 	bl	80060ac <RTC_Bcd2ToByte>
 8006100:	7060      	strb	r0, [r4, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8006102:	0028      	movs	r0, r5
 8006104:	f7ff ffd2 	bl	80060ac <RTC_Bcd2ToByte>
 8006108:	70a0      	strb	r0, [r4, #2]
}
 800610a:	2000      	movs	r0, #0
 800610c:	bd70      	pop	{r4, r5, r6, pc}
 800610e:	46c0      	nop			@ (mov r8, r8)
 8006110:	007f7f7f 	.word	0x007f7f7f

08006114 <HAL_RTC_GetDate>:
{
 8006114:	b570      	push	{r4, r5, r6, lr}
 8006116:	000c      	movs	r4, r1
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8006118:	6803      	ldr	r3, [r0, #0]
 800611a:	490e      	ldr	r1, [pc, #56]	@ (8006154 <HAL_RTC_GetDate+0x40>)
 800611c:	685b      	ldr	r3, [r3, #4]
 800611e:	400b      	ands	r3, r1
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8006120:	0c18      	lsrs	r0, r3, #16
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8006122:	04dd      	lsls	r5, r3, #19
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8006124:	b2de      	uxtb	r6, r3
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8006126:	041b      	lsls	r3, r3, #16
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8006128:	0eed      	lsrs	r5, r5, #27
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 800612a:	0f5b      	lsrs	r3, r3, #29
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 800612c:	70e0      	strb	r0, [r4, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 800612e:	7065      	strb	r5, [r4, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8006130:	70a6      	strb	r6, [r4, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8006132:	7023      	strb	r3, [r4, #0]
  if (Format == RTC_FORMAT_BIN)
 8006134:	2a00      	cmp	r2, #0
 8006136:	d10a      	bne.n	800614e <HAL_RTC_GetDate+0x3a>
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8006138:	f7ff ffb8 	bl	80060ac <RTC_Bcd2ToByte>
 800613c:	70e0      	strb	r0, [r4, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800613e:	0028      	movs	r0, r5
 8006140:	f7ff ffb4 	bl	80060ac <RTC_Bcd2ToByte>
 8006144:	7060      	strb	r0, [r4, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8006146:	0030      	movs	r0, r6
 8006148:	f7ff ffb0 	bl	80060ac <RTC_Bcd2ToByte>
 800614c:	70a0      	strb	r0, [r4, #2]
}
 800614e:	2000      	movs	r0, #0
 8006150:	bd70      	pop	{r4, r5, r6, pc}
 8006152:	46c0      	nop			@ (mov r8, r8)
 8006154:	00ffff3f 	.word	0x00ffff3f

08006158 <HAL_RTCEx_BKUPWrite>:
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8006158:	6803      	ldr	r3, [r0, #0]
  tmp += (BackupRegister * 4U);
 800615a:	0089      	lsls	r1, r1, #2
  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 800615c:	3350      	adds	r3, #80	@ 0x50
  tmp += (BackupRegister * 4U);
 800615e:	18c9      	adds	r1, r1, r3

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8006160:	600a      	str	r2, [r1, #0]
}
 8006162:	4770      	bx	lr

08006164 <HAL_RTCEx_BKUPRead>:
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8006164:	6803      	ldr	r3, [r0, #0]
  tmp += (BackupRegister * 4U);
 8006166:	0089      	lsls	r1, r1, #2
  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8006168:	3350      	adds	r3, #80	@ 0x50
  tmp += (BackupRegister * 4U);
 800616a:	18c9      	adds	r1, r1, r3

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 800616c:	6808      	ldr	r0, [r1, #0]
}
 800616e:	4770      	bx	lr

08006170 <HAL_RTCEx_EnableBypassShadow>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006170:	2202      	movs	r2, #2
{
 8006172:	b510      	push	{r4, lr}
  __HAL_LOCK(hrtc);
 8006174:	1c41      	adds	r1, r0, #1
 8006176:	7fcc      	ldrb	r4, [r1, #31]
{
 8006178:	0003      	movs	r3, r0
  __HAL_LOCK(hrtc);
 800617a:	0010      	movs	r0, r2
 800617c:	2c01      	cmp	r4, #1
 800617e:	d010      	beq.n	80061a2 <HAL_RTCEx_EnableBypassShadow+0x32>

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006180:	1898      	adds	r0, r3, r2
 8006182:	77c2      	strb	r2, [r0, #31]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	32c8      	adds	r2, #200	@ 0xc8
 8006188:	625a      	str	r2, [r3, #36]	@ 0x24
 800618a:	3a77      	subs	r2, #119	@ 0x77
 800618c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the BYPSHAD bit */
  hrtc->Instance->CR |= (uint8_t)RTC_CR_BYPSHAD;
 800618e:	689c      	ldr	r4, [r3, #8]
 8006190:	3a33      	subs	r2, #51	@ 0x33
 8006192:	4322      	orrs	r2, r4
 8006194:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006196:	22ff      	movs	r2, #255	@ 0xff
 8006198:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800619a:	2301      	movs	r3, #1
 800619c:	77c3      	strb	r3, [r0, #31]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800619e:	2000      	movs	r0, #0
 80061a0:	77c8      	strb	r0, [r1, #31]

  return HAL_OK;
}
 80061a2:	bd10      	pop	{r4, pc}

080061a4 <HAL_RTCEx_AlarmBEventCallback>:
/**
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
 80061a4:	4770      	bx	lr
	...

080061a8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80061a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80061aa:	001f      	movs	r7, r3
 80061ac:	b085      	sub	sp, #20
 80061ae:	000e      	movs	r6, r1
 80061b0:	9201      	str	r2, [sp, #4]
 80061b2:	0004      	movs	r4, r0
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80061b4:	f7fd fc63 	bl	8003a7e <HAL_GetTick>
 80061b8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80061ba:	19dd      	adds	r5, r3, r7
 80061bc:	1a2d      	subs	r5, r5, r0
  tmp_tickstart = HAL_GetTick();
 80061be:	f7fd fc5e 	bl	8003a7e <HAL_GetTick>

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80061c2:	4b28      	ldr	r3, [pc, #160]	@ (8006264 <SPI_WaitFlagStateUntilTimeout+0xbc>)
  tmp_tickstart = HAL_GetTick();
 80061c4:	9000      	str	r0, [sp, #0]
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	015b      	lsls	r3, r3, #5
 80061ca:	0d1b      	lsrs	r3, r3, #20
 80061cc:	436b      	muls	r3, r5
 80061ce:	9303      	str	r3, [sp, #12]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80061d0:	6822      	ldr	r2, [r4, #0]
 80061d2:	6893      	ldr	r3, [r2, #8]
 80061d4:	4033      	ands	r3, r6
 80061d6:	1b9b      	subs	r3, r3, r6
 80061d8:	4259      	negs	r1, r3
 80061da:	414b      	adcs	r3, r1
 80061dc:	9901      	ldr	r1, [sp, #4]
 80061de:	428b      	cmp	r3, r1
 80061e0:	d101      	bne.n	80061e6 <SPI_WaitFlagStateUntilTimeout+0x3e>
      }
      count--;
    }
  }

  return HAL_OK;
 80061e2:	2000      	movs	r0, #0
 80061e4:	e032      	b.n	800624c <SPI_WaitFlagStateUntilTimeout+0xa4>
    if (Timeout != HAL_MAX_DELAY)
 80061e6:	1c7b      	adds	r3, r7, #1
 80061e8:	d0f3      	beq.n	80061d2 <SPI_WaitFlagStateUntilTimeout+0x2a>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80061ea:	f7fd fc48 	bl	8003a7e <HAL_GetTick>
 80061ee:	9b00      	ldr	r3, [sp, #0]
 80061f0:	1ac0      	subs	r0, r0, r3
 80061f2:	42a8      	cmp	r0, r5
 80061f4:	d32c      	bcc.n	8006250 <SPI_WaitFlagStateUntilTimeout+0xa8>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80061f6:	21e0      	movs	r1, #224	@ 0xe0
 80061f8:	6823      	ldr	r3, [r4, #0]
 80061fa:	685a      	ldr	r2, [r3, #4]
 80061fc:	438a      	bics	r2, r1
 80061fe:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006200:	2282      	movs	r2, #130	@ 0x82
 8006202:	6861      	ldr	r1, [r4, #4]
 8006204:	0052      	lsls	r2, r2, #1
 8006206:	4291      	cmp	r1, r2
 8006208:	d10c      	bne.n	8006224 <SPI_WaitFlagStateUntilTimeout+0x7c>
 800620a:	2180      	movs	r1, #128	@ 0x80
 800620c:	68a2      	ldr	r2, [r4, #8]
 800620e:	0209      	lsls	r1, r1, #8
 8006210:	428a      	cmp	r2, r1
 8006212:	d003      	beq.n	800621c <SPI_WaitFlagStateUntilTimeout+0x74>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006214:	2180      	movs	r1, #128	@ 0x80
 8006216:	00c9      	lsls	r1, r1, #3
 8006218:	428a      	cmp	r2, r1
 800621a:	d103      	bne.n	8006224 <SPI_WaitFlagStateUntilTimeout+0x7c>
          __HAL_SPI_DISABLE(hspi);
 800621c:	2140      	movs	r1, #64	@ 0x40
 800621e:	681a      	ldr	r2, [r3, #0]
 8006220:	438a      	bics	r2, r1
 8006222:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006224:	2180      	movs	r1, #128	@ 0x80
 8006226:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8006228:	0189      	lsls	r1, r1, #6
 800622a:	428a      	cmp	r2, r1
 800622c:	d106      	bne.n	800623c <SPI_WaitFlagStateUntilTimeout+0x94>
          SPI_RESET_CRC(hspi);
 800622e:	6819      	ldr	r1, [r3, #0]
 8006230:	480d      	ldr	r0, [pc, #52]	@ (8006268 <SPI_WaitFlagStateUntilTimeout+0xc0>)
 8006232:	4001      	ands	r1, r0
 8006234:	6019      	str	r1, [r3, #0]
 8006236:	6819      	ldr	r1, [r3, #0]
 8006238:	430a      	orrs	r2, r1
 800623a:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 800623c:	0023      	movs	r3, r4
 800623e:	2201      	movs	r2, #1
 8006240:	3351      	adds	r3, #81	@ 0x51
 8006242:	701a      	strb	r2, [r3, #0]
        __HAL_UNLOCK(hspi);
 8006244:	2300      	movs	r3, #0
        return HAL_TIMEOUT;
 8006246:	2003      	movs	r0, #3
        __HAL_UNLOCK(hspi);
 8006248:	3450      	adds	r4, #80	@ 0x50
 800624a:	7023      	strb	r3, [r4, #0]
}
 800624c:	b005      	add	sp, #20
 800624e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if(count == 0U)
 8006250:	9b03      	ldr	r3, [sp, #12]
 8006252:	2b00      	cmp	r3, #0
 8006254:	d000      	beq.n	8006258 <SPI_WaitFlagStateUntilTimeout+0xb0>
 8006256:	002b      	movs	r3, r5
      count--;
 8006258:	9a03      	ldr	r2, [sp, #12]
 800625a:	001d      	movs	r5, r3
 800625c:	3a01      	subs	r2, #1
 800625e:	9203      	str	r2, [sp, #12]
 8006260:	e7b6      	b.n	80061d0 <SPI_WaitFlagStateUntilTimeout+0x28>
 8006262:	46c0      	nop			@ (mov r8, r8)
 8006264:	20000090 	.word	0x20000090
 8006268:	ffffdfff 	.word	0xffffdfff

0800626c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800626c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800626e:	4b17      	ldr	r3, [pc, #92]	@ (80062cc <SPI_EndRxTxTransaction+0x60>)
{
 8006270:	0004      	movs	r4, r0
 8006272:	000d      	movs	r5, r1
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006274:	6818      	ldr	r0, [r3, #0]
 8006276:	4916      	ldr	r1, [pc, #88]	@ (80062d0 <SPI_EndRxTxTransaction+0x64>)
{
 8006278:	0016      	movs	r6, r2
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800627a:	f7f9 ff75 	bl	8000168 <__udivsi3>
 800627e:	23fa      	movs	r3, #250	@ 0xfa
 8006280:	009b      	lsls	r3, r3, #2
 8006282:	4343      	muls	r3, r0
 8006284:	9303      	str	r3, [sp, #12]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006286:	2382      	movs	r3, #130	@ 0x82
 8006288:	6861      	ldr	r1, [r4, #4]
      if (count == 0U)
      {
        break;
      }
      count--;
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800628a:	2280      	movs	r2, #128	@ 0x80
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800628c:	005b      	lsls	r3, r3, #1
 800628e:	4299      	cmp	r1, r3
 8006290:	d10f      	bne.n	80062b2 <SPI_EndRxTxTransaction+0x46>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006292:	002b      	movs	r3, r5
 8006294:	2200      	movs	r2, #0
 8006296:	2180      	movs	r1, #128	@ 0x80
 8006298:	0020      	movs	r0, r4
 800629a:	9600      	str	r6, [sp, #0]
 800629c:	f7ff ff84 	bl	80061a8 <SPI_WaitFlagStateUntilTimeout>
 80062a0:	2800      	cmp	r0, #0
 80062a2:	d010      	beq.n	80062c6 <SPI_EndRxTxTransaction+0x5a>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80062a4:	2320      	movs	r3, #32
      return HAL_TIMEOUT;
 80062a6:	2003      	movs	r0, #3
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80062a8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80062aa:	4313      	orrs	r3, r2
 80062ac:	6563      	str	r3, [r4, #84]	@ 0x54
  }

  return HAL_OK;
}
 80062ae:	b004      	add	sp, #16
 80062b0:	bd70      	pop	{r4, r5, r6, pc}
      if (count == 0U)
 80062b2:	9b03      	ldr	r3, [sp, #12]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d006      	beq.n	80062c6 <SPI_EndRxTxTransaction+0x5a>
      count--;
 80062b8:	9b03      	ldr	r3, [sp, #12]
 80062ba:	3b01      	subs	r3, #1
 80062bc:	9303      	str	r3, [sp, #12]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80062be:	6823      	ldr	r3, [r4, #0]
 80062c0:	689b      	ldr	r3, [r3, #8]
 80062c2:	4213      	tst	r3, r2
 80062c4:	d1f5      	bne.n	80062b2 <SPI_EndRxTxTransaction+0x46>
  return HAL_OK;
 80062c6:	2000      	movs	r0, #0
 80062c8:	e7f1      	b.n	80062ae <SPI_EndRxTxTransaction+0x42>
 80062ca:	46c0      	nop			@ (mov r8, r8)
 80062cc:	20000090 	.word	0x20000090
 80062d0:	016e3600 	.word	0x016e3600

080062d4 <HAL_SPI_MspInit>:
}
 80062d4:	4770      	bx	lr
	...

080062d8 <HAL_SPI_Init>:
{
 80062d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062da:	0004      	movs	r4, r0
    return HAL_ERROR;
 80062dc:	2001      	movs	r0, #1
  if (hspi == NULL)
 80062de:	2c00      	cmp	r4, #0
 80062e0:	d05a      	beq.n	8006398 <HAL_SPI_Init+0xc0>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80062e2:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d158      	bne.n	800639a <HAL_SPI_Init+0xc2>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80062e8:	2282      	movs	r2, #130	@ 0x82
 80062ea:	6861      	ldr	r1, [r4, #4]
 80062ec:	0052      	lsls	r2, r2, #1
 80062ee:	4291      	cmp	r1, r2
 80062f0:	d000      	beq.n	80062f4 <HAL_SPI_Init+0x1c>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80062f2:	61e3      	str	r3, [r4, #28]
  if (hspi->State == HAL_SPI_STATE_RESET)
 80062f4:	0025      	movs	r5, r4
 80062f6:	3551      	adds	r5, #81	@ 0x51
 80062f8:	782b      	ldrb	r3, [r5, #0]
 80062fa:	b2da      	uxtb	r2, r3
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d105      	bne.n	800630c <HAL_SPI_Init+0x34>
    hspi->Lock = HAL_UNLOCKED;
 8006300:	0023      	movs	r3, r4
 8006302:	3350      	adds	r3, #80	@ 0x50
    HAL_SPI_MspInit(hspi);
 8006304:	0020      	movs	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 8006306:	701a      	strb	r2, [r3, #0]
    HAL_SPI_MspInit(hspi);
 8006308:	f7ff ffe4 	bl	80062d4 <HAL_SPI_MspInit>
  hspi->State = HAL_SPI_STATE_BUSY;
 800630c:	2702      	movs	r7, #2
  __HAL_SPI_DISABLE(hspi);
 800630e:	2240      	movs	r2, #64	@ 0x40
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006310:	2682      	movs	r6, #130	@ 0x82
  hspi->State = HAL_SPI_STATE_BUSY;
 8006312:	702f      	strb	r7, [r5, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006314:	2784      	movs	r7, #132	@ 0x84
  __HAL_SPI_DISABLE(hspi);
 8006316:	6821      	ldr	r1, [r4, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006318:	0076      	lsls	r6, r6, #1
  __HAL_SPI_DISABLE(hspi);
 800631a:	680b      	ldr	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800631c:	023f      	lsls	r7, r7, #8
  __HAL_SPI_DISABLE(hspi);
 800631e:	4393      	bics	r3, r2
 8006320:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006322:	6863      	ldr	r3, [r4, #4]
 8006324:	69a2      	ldr	r2, [r4, #24]
 8006326:	4033      	ands	r3, r6
 8006328:	68a6      	ldr	r6, [r4, #8]
 800632a:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 800632c:	403e      	ands	r6, r7
 800632e:	2780      	movs	r7, #128	@ 0x80
 8006330:	4333      	orrs	r3, r6
 8006332:	68e6      	ldr	r6, [r4, #12]
 8006334:	013f      	lsls	r7, r7, #4
 8006336:	403e      	ands	r6, r7
 8006338:	2702      	movs	r7, #2
 800633a:	4333      	orrs	r3, r6
 800633c:	6926      	ldr	r6, [r4, #16]
 800633e:	403e      	ands	r6, r7
 8006340:	4333      	orrs	r3, r6
 8006342:	6966      	ldr	r6, [r4, #20]
 8006344:	3f01      	subs	r7, #1
 8006346:	403e      	ands	r6, r7
 8006348:	4333      	orrs	r3, r6
 800634a:	2680      	movs	r6, #128	@ 0x80
 800634c:	00b6      	lsls	r6, r6, #2
 800634e:	4016      	ands	r6, r2
 8006350:	4333      	orrs	r3, r6
 8006352:	69e6      	ldr	r6, [r4, #28]
 8006354:	3737      	adds	r7, #55	@ 0x37
 8006356:	403e      	ands	r6, r7
 8006358:	4333      	orrs	r3, r6
 800635a:	6a26      	ldr	r6, [r4, #32]
 800635c:	3748      	adds	r7, #72	@ 0x48
 800635e:	403e      	ands	r6, r7
 8006360:	4333      	orrs	r3, r6
 8006362:	2680      	movs	r6, #128	@ 0x80
 8006364:	0007      	movs	r7, r0
 8006366:	01b6      	lsls	r6, r6, #6
 8006368:	4037      	ands	r7, r6
 800636a:	433b      	orrs	r3, r7
 800636c:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800636e:	2304      	movs	r3, #4
 8006370:	2710      	movs	r7, #16
 8006372:	0c12      	lsrs	r2, r2, #16
 8006374:	401a      	ands	r2, r3
 8006376:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8006378:	403b      	ands	r3, r7
 800637a:	431a      	orrs	r2, r3
 800637c:	604a      	str	r2, [r1, #4]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800637e:	42b0      	cmp	r0, r6
 8006380:	d102      	bne.n	8006388 <HAL_SPI_Init+0xb0>
    WRITE_REG(hspi->Instance->CRCPR, (hspi->Init.CRCPolynomial & SPI_CRCPR_CRCPOLY_Msk));
 8006382:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8006384:	b29b      	uxth	r3, r3
 8006386:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006388:	69cb      	ldr	r3, [r1, #28]
 800638a:	4a06      	ldr	r2, [pc, #24]	@ (80063a4 <HAL_SPI_Init+0xcc>)
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800638c:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800638e:	4013      	ands	r3, r2
 8006390:	61cb      	str	r3, [r1, #28]
  hspi->State     = HAL_SPI_STATE_READY;
 8006392:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006394:	6560      	str	r0, [r4, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006396:	702b      	strb	r3, [r5, #0]
}
 8006398:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800639a:	2300      	movs	r3, #0
 800639c:	6123      	str	r3, [r4, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800639e:	6163      	str	r3, [r4, #20]
 80063a0:	e7a8      	b.n	80062f4 <HAL_SPI_Init+0x1c>
 80063a2:	46c0      	nop			@ (mov r8, r8)
 80063a4:	fffff7ff 	.word	0xfffff7ff

080063a8 <HAL_SPI_TransmitReceive>:
{
 80063a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80063aa:	001e      	movs	r6, r3
  __HAL_LOCK(hspi);
 80063ac:	0003      	movs	r3, r0
{
 80063ae:	b087      	sub	sp, #28
 80063b0:	9203      	str	r2, [sp, #12]
  __HAL_LOCK(hspi);
 80063b2:	3350      	adds	r3, #80	@ 0x50
 80063b4:	781a      	ldrb	r2, [r3, #0]
{
 80063b6:	0004      	movs	r4, r0
 80063b8:	000d      	movs	r5, r1
  __HAL_LOCK(hspi);
 80063ba:	2702      	movs	r7, #2
 80063bc:	2a01      	cmp	r2, #1
 80063be:	d021      	beq.n	8006404 <HAL_SPI_TransmitReceive+0x5c>
 80063c0:	2201      	movs	r2, #1
 80063c2:	701a      	strb	r2, [r3, #0]
  tickstart = HAL_GetTick();
 80063c4:	f7fd fb5b 	bl	8003a7e <HAL_GetTick>
  tmp_state           = hspi->State;
 80063c8:	0023      	movs	r3, r4
  tickstart = HAL_GetTick();
 80063ca:	9002      	str	r0, [sp, #8]
  tmp_state           = hspi->State;
 80063cc:	3351      	adds	r3, #81	@ 0x51
 80063ce:	781b      	ldrb	r3, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 80063d0:	6861      	ldr	r1, [r4, #4]
  tmp_state           = hspi->State;
 80063d2:	b2da      	uxtb	r2, r3
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80063d4:	2b01      	cmp	r3, #1
 80063d6:	d008      	beq.n	80063ea <HAL_SPI_TransmitReceive+0x42>
 80063d8:	2382      	movs	r3, #130	@ 0x82
 80063da:	005b      	lsls	r3, r3, #1
 80063dc:	4299      	cmp	r1, r3
 80063de:	d10a      	bne.n	80063f6 <HAL_SPI_TransmitReceive+0x4e>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80063e0:	68a3      	ldr	r3, [r4, #8]
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d107      	bne.n	80063f6 <HAL_SPI_TransmitReceive+0x4e>
 80063e6:	2a04      	cmp	r2, #4
 80063e8:	d105      	bne.n	80063f6 <HAL_SPI_TransmitReceive+0x4e>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80063ea:	2d00      	cmp	r5, #0
 80063ec:	d002      	beq.n	80063f4 <HAL_SPI_TransmitReceive+0x4c>
 80063ee:	9b03      	ldr	r3, [sp, #12]
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d10a      	bne.n	800640a <HAL_SPI_TransmitReceive+0x62>
    errorcode = HAL_ERROR;
 80063f4:	2701      	movs	r7, #1
  hspi->State = HAL_SPI_STATE_READY;
 80063f6:	0023      	movs	r3, r4
 80063f8:	2201      	movs	r2, #1
 80063fa:	3351      	adds	r3, #81	@ 0x51
 80063fc:	701a      	strb	r2, [r3, #0]
  __HAL_UNLOCK(hspi);
 80063fe:	2300      	movs	r3, #0
 8006400:	3450      	adds	r4, #80	@ 0x50
 8006402:	7023      	strb	r3, [r4, #0]
}
 8006404:	0038      	movs	r0, r7
 8006406:	b007      	add	sp, #28
 8006408:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800640a:	2e00      	cmp	r6, #0
 800640c:	d0f2      	beq.n	80063f4 <HAL_SPI_TransmitReceive+0x4c>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800640e:	0023      	movs	r3, r4
 8006410:	3351      	adds	r3, #81	@ 0x51
 8006412:	781a      	ldrb	r2, [r3, #0]
 8006414:	2a04      	cmp	r2, #4
 8006416:	d001      	beq.n	800641c <HAL_SPI_TransmitReceive+0x74>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006418:	2205      	movs	r2, #5
 800641a:	701a      	strb	r2, [r3, #0]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800641c:	2300      	movs	r3, #0
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800641e:	2080      	movs	r0, #128	@ 0x80
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006420:	9a03      	ldr	r2, [sp, #12]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006422:	6563      	str	r3, [r4, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006424:	63a2      	str	r2, [r4, #56]	@ 0x38
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006426:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
  hspi->RxXferCount = Size;
 8006428:	87e6      	strh	r6, [r4, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 800642a:	6423      	str	r3, [r4, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800642c:	6463      	str	r3, [r4, #68]	@ 0x44
  hspi->RxXferSize  = Size;
 800642e:	87a6      	strh	r6, [r4, #60]	@ 0x3c
    SPI_RESET_CRC(hspi);
 8006430:	6823      	ldr	r3, [r4, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006432:	6325      	str	r5, [r4, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8006434:	86e6      	strh	r6, [r4, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8006436:	86a6      	strh	r6, [r4, #52]	@ 0x34
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006438:	0180      	lsls	r0, r0, #6
 800643a:	4282      	cmp	r2, r0
 800643c:	d106      	bne.n	800644c <HAL_SPI_TransmitReceive+0xa4>
    SPI_RESET_CRC(hspi);
 800643e:	6818      	ldr	r0, [r3, #0]
 8006440:	4f7a      	ldr	r7, [pc, #488]	@ (800662c <HAL_SPI_TransmitReceive+0x284>)
 8006442:	4038      	ands	r0, r7
 8006444:	6018      	str	r0, [r3, #0]
 8006446:	6818      	ldr	r0, [r3, #0]
 8006448:	4302      	orrs	r2, r0
 800644a:	601a      	str	r2, [r3, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800644c:	2240      	movs	r2, #64	@ 0x40
 800644e:	6818      	ldr	r0, [r3, #0]
 8006450:	4210      	tst	r0, r2
 8006452:	d102      	bne.n	800645a <HAL_SPI_TransmitReceive+0xb2>
    __HAL_SPI_ENABLE(hspi);
 8006454:	6818      	ldr	r0, [r3, #0]
 8006456:	4302      	orrs	r2, r0
 8006458:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800645a:	2280      	movs	r2, #128	@ 0x80
 800645c:	68e0      	ldr	r0, [r4, #12]
 800645e:	0112      	lsls	r2, r2, #4
 8006460:	4290      	cmp	r0, r2
 8006462:	d167      	bne.n	8006534 <HAL_SPI_TransmitReceive+0x18c>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006464:	2900      	cmp	r1, #0
 8006466:	d001      	beq.n	800646c <HAL_SPI_TransmitReceive+0xc4>
 8006468:	2e01      	cmp	r6, #1
 800646a:	d107      	bne.n	800647c <HAL_SPI_TransmitReceive+0xd4>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800646c:	882a      	ldrh	r2, [r5, #0]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800646e:	3502      	adds	r5, #2
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006470:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 8006472:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006474:	6325      	str	r5, [r4, #48]	@ 0x30
      hspi->TxXferCount--;
 8006476:	3b01      	subs	r3, #1
 8006478:	b29b      	uxth	r3, r3
 800647a:	86e3      	strh	r3, [r4, #54]	@ 0x36
        txallowed = 1U;
 800647c:	2501      	movs	r5, #1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800647e:	2702      	movs	r7, #2
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006480:	002e      	movs	r6, r5
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006482:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8006484:	2b00      	cmp	r3, #0
 8006486:	d118      	bne.n	80064ba <HAL_SPI_TransmitReceive+0x112>
 8006488:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 800648a:	2b00      	cmp	r3, #0
 800648c:	d115      	bne.n	80064ba <HAL_SPI_TransmitReceive+0x112>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800648e:	2380      	movs	r3, #128	@ 0x80
 8006490:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8006492:	019b      	lsls	r3, r3, #6
 8006494:	429a      	cmp	r2, r3
 8006496:	d000      	beq.n	800649a <HAL_SPI_TransmitReceive+0xf2>
 8006498:	e0a5      	b.n	80065e6 <HAL_SPI_TransmitReceive+0x23e>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 800649a:	2201      	movs	r2, #1
 800649c:	9b02      	ldr	r3, [sp, #8]
 800649e:	0011      	movs	r1, r2
 80064a0:	9300      	str	r3, [sp, #0]
 80064a2:	0020      	movs	r0, r4
 80064a4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80064a6:	f7ff fe7f 	bl	80061a8 <SPI_WaitFlagStateUntilTimeout>
 80064aa:	2800      	cmp	r0, #0
 80064ac:	d100      	bne.n	80064b0 <HAL_SPI_TransmitReceive+0x108>
 80064ae:	e098      	b.n	80065e2 <HAL_SPI_TransmitReceive+0x23a>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 80064b0:	2302      	movs	r3, #2
 80064b2:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80064b4:	4313      	orrs	r3, r2
 80064b6:	6563      	str	r3, [r4, #84]	@ 0x54
      goto error;
 80064b8:	e03a      	b.n	8006530 <HAL_SPI_TransmitReceive+0x188>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80064ba:	6823      	ldr	r3, [r4, #0]
 80064bc:	689a      	ldr	r2, [r3, #8]
 80064be:	423a      	tst	r2, r7
 80064c0:	d01b      	beq.n	80064fa <HAL_SPI_TransmitReceive+0x152>
 80064c2:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 80064c4:	2a00      	cmp	r2, #0
 80064c6:	d018      	beq.n	80064fa <HAL_SPI_TransmitReceive+0x152>
 80064c8:	2d01      	cmp	r5, #1
 80064ca:	d115      	bne.n	80064f8 <HAL_SPI_TransmitReceive+0x150>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80064cc:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80064ce:	8811      	ldrh	r1, [r2, #0]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80064d0:	3202      	adds	r2, #2
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80064d2:	60d9      	str	r1, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80064d4:	6322      	str	r2, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 80064d6:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 80064d8:	3a01      	subs	r2, #1
 80064da:	b292      	uxth	r2, r2
 80064dc:	86e2      	strh	r2, [r4, #54]	@ 0x36
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 80064de:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 80064e0:	2a00      	cmp	r2, #0
 80064e2:	d109      	bne.n	80064f8 <HAL_SPI_TransmitReceive+0x150>
 80064e4:	2280      	movs	r2, #128	@ 0x80
 80064e6:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 80064e8:	0192      	lsls	r2, r2, #6
 80064ea:	4291      	cmp	r1, r2
 80064ec:	d104      	bne.n	80064f8 <HAL_SPI_TransmitReceive+0x150>
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 80064ee:	2280      	movs	r2, #128	@ 0x80
 80064f0:	6819      	ldr	r1, [r3, #0]
 80064f2:	0152      	lsls	r2, r2, #5
 80064f4:	430a      	orrs	r2, r1
 80064f6:	601a      	str	r2, [r3, #0]
        txallowed = 0U;
 80064f8:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80064fa:	6899      	ldr	r1, [r3, #8]
 80064fc:	000a      	movs	r2, r1
 80064fe:	4032      	ands	r2, r6
 8006500:	4231      	tst	r1, r6
 8006502:	d00c      	beq.n	800651e <HAL_SPI_TransmitReceive+0x176>
 8006504:	8fe1      	ldrh	r1, [r4, #62]	@ 0x3e
 8006506:	2900      	cmp	r1, #0
 8006508:	d009      	beq.n	800651e <HAL_SPI_TransmitReceive+0x176>
        txallowed = 1U;
 800650a:	0015      	movs	r5, r2
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800650c:	68d9      	ldr	r1, [r3, #12]
 800650e:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8006510:	8019      	strh	r1, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006512:	3302      	adds	r3, #2
 8006514:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->RxXferCount--;
 8006516:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8006518:	3b01      	subs	r3, #1
 800651a:	b29b      	uxth	r3, r3
 800651c:	87e3      	strh	r3, [r4, #62]	@ 0x3e
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800651e:	f7fd faae 	bl	8003a7e <HAL_GetTick>
 8006522:	9b02      	ldr	r3, [sp, #8]
 8006524:	1ac0      	subs	r0, r0, r3
 8006526:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006528:	4298      	cmp	r0, r3
 800652a:	d3aa      	bcc.n	8006482 <HAL_SPI_TransmitReceive+0xda>
 800652c:	3301      	adds	r3, #1
 800652e:	d0a8      	beq.n	8006482 <HAL_SPI_TransmitReceive+0xda>
        errorcode = HAL_TIMEOUT;
 8006530:	2703      	movs	r7, #3
 8006532:	e760      	b.n	80063f6 <HAL_SPI_TransmitReceive+0x4e>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006534:	2900      	cmp	r1, #0
 8006536:	d001      	beq.n	800653c <HAL_SPI_TransmitReceive+0x194>
 8006538:	2e01      	cmp	r6, #1
 800653a:	d108      	bne.n	800654e <HAL_SPI_TransmitReceive+0x1a6>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800653c:	782a      	ldrb	r2, [r5, #0]
 800653e:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006540:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8006542:	3301      	adds	r3, #1
 8006544:	6323      	str	r3, [r4, #48]	@ 0x30
      hspi->TxXferCount--;
 8006546:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8006548:	3b01      	subs	r3, #1
 800654a:	b29b      	uxth	r3, r3
 800654c:	86e3      	strh	r3, [r4, #54]	@ 0x36
        txallowed = 1U;
 800654e:	2501      	movs	r5, #1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006550:	2702      	movs	r7, #2
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006552:	002e      	movs	r6, r5
 8006554:	e03e      	b.n	80065d4 <HAL_SPI_TransmitReceive+0x22c>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006556:	6823      	ldr	r3, [r4, #0]
 8006558:	689a      	ldr	r2, [r3, #8]
 800655a:	423a      	tst	r2, r7
 800655c:	d01d      	beq.n	800659a <HAL_SPI_TransmitReceive+0x1f2>
 800655e:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 8006560:	2a00      	cmp	r2, #0
 8006562:	d01a      	beq.n	800659a <HAL_SPI_TransmitReceive+0x1f2>
 8006564:	2d01      	cmp	r5, #1
 8006566:	d117      	bne.n	8006598 <HAL_SPI_TransmitReceive+0x1f0>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006568:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 800656a:	7812      	ldrb	r2, [r2, #0]
 800656c:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr++;
 800656e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8006570:	3301      	adds	r3, #1
 8006572:	6323      	str	r3, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 8006574:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8006576:	3b01      	subs	r3, #1
 8006578:	b29b      	uxth	r3, r3
 800657a:	86e3      	strh	r3, [r4, #54]	@ 0x36
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 800657c:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 800657e:	2b00      	cmp	r3, #0
 8006580:	d10a      	bne.n	8006598 <HAL_SPI_TransmitReceive+0x1f0>
 8006582:	2380      	movs	r3, #128	@ 0x80
 8006584:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8006586:	6822      	ldr	r2, [r4, #0]
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8006588:	019b      	lsls	r3, r3, #6
 800658a:	4299      	cmp	r1, r3
 800658c:	d104      	bne.n	8006598 <HAL_SPI_TransmitReceive+0x1f0>
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 800658e:	2380      	movs	r3, #128	@ 0x80
 8006590:	6811      	ldr	r1, [r2, #0]
 8006592:	015b      	lsls	r3, r3, #5
 8006594:	430b      	orrs	r3, r1
 8006596:	6013      	str	r3, [r2, #0]
        txallowed = 0U;
 8006598:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800659a:	6823      	ldr	r3, [r4, #0]
 800659c:	6899      	ldr	r1, [r3, #8]
 800659e:	000a      	movs	r2, r1
 80065a0:	4032      	ands	r2, r6
 80065a2:	4231      	tst	r1, r6
 80065a4:	d00d      	beq.n	80065c2 <HAL_SPI_TransmitReceive+0x21a>
 80065a6:	8fe1      	ldrh	r1, [r4, #62]	@ 0x3e
 80065a8:	2900      	cmp	r1, #0
 80065aa:	d00a      	beq.n	80065c2 <HAL_SPI_TransmitReceive+0x21a>
        txallowed = 1U;
 80065ac:	0015      	movs	r5, r2
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80065ae:	68d9      	ldr	r1, [r3, #12]
 80065b0:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80065b2:	7019      	strb	r1, [r3, #0]
        hspi->pRxBuffPtr++;
 80065b4:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80065b6:	3301      	adds	r3, #1
 80065b8:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->RxXferCount--;
 80065ba:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80065bc:	3b01      	subs	r3, #1
 80065be:	b29b      	uxth	r3, r3
 80065c0:	87e3      	strh	r3, [r4, #62]	@ 0x3e
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80065c2:	f7fd fa5c 	bl	8003a7e <HAL_GetTick>
 80065c6:	9b02      	ldr	r3, [sp, #8]
 80065c8:	1ac0      	subs	r0, r0, r3
 80065ca:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80065cc:	4298      	cmp	r0, r3
 80065ce:	d301      	bcc.n	80065d4 <HAL_SPI_TransmitReceive+0x22c>
 80065d0:	3301      	adds	r3, #1
 80065d2:	d1ad      	bne.n	8006530 <HAL_SPI_TransmitReceive+0x188>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80065d4:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d1bd      	bne.n	8006556 <HAL_SPI_TransmitReceive+0x1ae>
 80065da:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d1ba      	bne.n	8006556 <HAL_SPI_TransmitReceive+0x1ae>
 80065e0:	e755      	b.n	800648e <HAL_SPI_TransmitReceive+0xe6>
    READ_REG(hspi->Instance->DR);
 80065e2:	6823      	ldr	r3, [r4, #0]
 80065e4:	68db      	ldr	r3, [r3, #12]
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 80065e6:	6822      	ldr	r2, [r4, #0]
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80065e8:	2700      	movs	r7, #0
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 80065ea:	6893      	ldr	r3, [r2, #8]
 80065ec:	06db      	lsls	r3, r3, #27
 80065ee:	d506      	bpl.n	80065fe <HAL_SPI_TransmitReceive+0x256>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 80065f0:	2302      	movs	r3, #2
 80065f2:	6d61      	ldr	r1, [r4, #84]	@ 0x54
    errorcode = HAL_ERROR;
 80065f4:	3701      	adds	r7, #1
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 80065f6:	430b      	orrs	r3, r1
 80065f8:	6563      	str	r3, [r4, #84]	@ 0x54
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 80065fa:	4b0d      	ldr	r3, [pc, #52]	@ (8006630 <HAL_SPI_TransmitReceive+0x288>)
 80065fc:	6093      	str	r3, [r2, #8]
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80065fe:	0020      	movs	r0, r4
 8006600:	9a02      	ldr	r2, [sp, #8]
 8006602:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8006604:	f7ff fe32 	bl	800626c <SPI_EndRxTxTransaction>
 8006608:	2800      	cmp	r0, #0
 800660a:	d002      	beq.n	8006612 <HAL_SPI_TransmitReceive+0x26a>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800660c:	2320      	movs	r3, #32
 800660e:	6563      	str	r3, [r4, #84]	@ 0x54
    goto error;
 8006610:	e6f0      	b.n	80063f4 <HAL_SPI_TransmitReceive+0x4c>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006612:	68a3      	ldr	r3, [r4, #8]
 8006614:	2b00      	cmp	r3, #0
 8006616:	d000      	beq.n	800661a <HAL_SPI_TransmitReceive+0x272>
 8006618:	e6ed      	b.n	80063f6 <HAL_SPI_TransmitReceive+0x4e>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800661a:	9305      	str	r3, [sp, #20]
 800661c:	6823      	ldr	r3, [r4, #0]
 800661e:	68da      	ldr	r2, [r3, #12]
 8006620:	9205      	str	r2, [sp, #20]
 8006622:	689b      	ldr	r3, [r3, #8]
 8006624:	9305      	str	r3, [sp, #20]
 8006626:	9b05      	ldr	r3, [sp, #20]
 8006628:	e6e5      	b.n	80063f6 <HAL_SPI_TransmitReceive+0x4e>
 800662a:	46c0      	nop			@ (mov r8, r8)
 800662c:	ffffdfff 	.word	0xffffdfff
 8006630:	0000ffef 	.word	0x0000ffef

08006634 <HAL_SPI_GetState>:
  return hspi->State;
 8006634:	3051      	adds	r0, #81	@ 0x51
 8006636:	7800      	ldrb	r0, [r0, #0]
 8006638:	b2c0      	uxtb	r0, r0
}
 800663a:	4770      	bx	lr

0800663c <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800663c:	6803      	ldr	r3, [r0, #0]
 800663e:	490b      	ldr	r1, [pc, #44]	@ (800666c <UART_EndRxTransfer+0x30>)
 8006640:	681a      	ldr	r2, [r3, #0]
 8006642:	400a      	ands	r2, r1
 8006644:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006646:	689a      	ldr	r2, [r3, #8]
 8006648:	3123      	adds	r1, #35	@ 0x23
 800664a:	31ff      	adds	r1, #255	@ 0xff
 800664c:	438a      	bics	r2, r1
 800664e:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006650:	6e02      	ldr	r2, [r0, #96]	@ 0x60
 8006652:	428a      	cmp	r2, r1
 8006654:	d103      	bne.n	800665e <UART_EndRxTransfer+0x22>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006656:	681a      	ldr	r2, [r3, #0]
 8006658:	310f      	adds	r1, #15
 800665a:	438a      	bics	r2, r1
 800665c:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800665e:	2320      	movs	r3, #32
 8006660:	67c3      	str	r3, [r0, #124]	@ 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006662:	2300      	movs	r3, #0
 8006664:	6603      	str	r3, [r0, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006666:	6643      	str	r3, [r0, #100]	@ 0x64
}
 8006668:	4770      	bx	lr
 800666a:	46c0      	nop			@ (mov r8, r8)
 800666c:	fffffedf 	.word	0xfffffedf

08006670 <HAL_UART_Transmit_DMA>:
{
 8006670:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006672:	0013      	movs	r3, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8006674:	6f82      	ldr	r2, [r0, #120]	@ 0x78
{
 8006676:	0004      	movs	r4, r0
    __HAL_LOCK(huart);
 8006678:	2002      	movs	r0, #2
  if (huart->gState == HAL_UART_STATE_READY)
 800667a:	2a20      	cmp	r2, #32
 800667c:	d104      	bne.n	8006688 <HAL_UART_Transmit_DMA+0x18>
    if ((pData == NULL) || (Size == 0U))
 800667e:	2900      	cmp	r1, #0
 8006680:	d001      	beq.n	8006686 <HAL_UART_Transmit_DMA+0x16>
 8006682:	2b00      	cmp	r3, #0
 8006684:	d101      	bne.n	800668a <HAL_UART_Transmit_DMA+0x1a>
      return HAL_ERROR;
 8006686:	2001      	movs	r0, #1
}
 8006688:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800668a:	2280      	movs	r2, #128	@ 0x80
 800668c:	68a0      	ldr	r0, [r4, #8]
 800668e:	0152      	lsls	r2, r2, #5
 8006690:	4290      	cmp	r0, r2
 8006692:	d104      	bne.n	800669e <HAL_UART_Transmit_DMA+0x2e>
 8006694:	6922      	ldr	r2, [r4, #16]
 8006696:	2a00      	cmp	r2, #0
 8006698:	d101      	bne.n	800669e <HAL_UART_Transmit_DMA+0x2e>
      if ((((uint32_t)pData) & 1U) != 0U)
 800669a:	07ca      	lsls	r2, r1, #31
 800669c:	d4f3      	bmi.n	8006686 <HAL_UART_Transmit_DMA+0x16>
    __HAL_LOCK(huart);
 800669e:	0025      	movs	r5, r4
 80066a0:	3574      	adds	r5, #116	@ 0x74
 80066a2:	782a      	ldrb	r2, [r5, #0]
 80066a4:	2002      	movs	r0, #2
 80066a6:	2a01      	cmp	r2, #1
 80066a8:	d0ee      	beq.n	8006688 <HAL_UART_Transmit_DMA+0x18>
 80066aa:	2201      	movs	r2, #1
 80066ac:	702a      	strb	r2, [r5, #0]
    huart->TxXferSize  = Size;
 80066ae:	0022      	movs	r2, r4
 80066b0:	3250      	adds	r2, #80	@ 0x50
    huart->pTxBuffPtr  = pData;
 80066b2:	64e1      	str	r1, [r4, #76]	@ 0x4c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066b4:	2600      	movs	r6, #0
    huart->TxXferSize  = Size;
 80066b6:	8013      	strh	r3, [r2, #0]
    huart->TxXferCount = Size;
 80066b8:	8053      	strh	r3, [r2, #2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80066ba:	2221      	movs	r2, #33	@ 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066bc:	1d27      	adds	r7, r4, #4
 80066be:	67fe      	str	r6, [r7, #124]	@ 0x7c
    if (huart->hdmatx != NULL)
 80066c0:	6ee0      	ldr	r0, [r4, #108]	@ 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80066c2:	67a2      	str	r2, [r4, #120]	@ 0x78
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80066c4:	6822      	ldr	r2, [r4, #0]
 80066c6:	9201      	str	r2, [sp, #4]
    if (huart->hdmatx != NULL)
 80066c8:	42b0      	cmp	r0, r6
 80066ca:	d012      	beq.n	80066f2 <HAL_UART_Transmit_DMA+0x82>
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80066cc:	4a0e      	ldr	r2, [pc, #56]	@ (8006708 <HAL_UART_Transmit_DMA+0x98>)
      huart->hdmatx->XferAbortCallback = NULL;
 80066ce:	6386      	str	r6, [r0, #56]	@ 0x38
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80066d0:	62c2      	str	r2, [r0, #44]	@ 0x2c
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80066d2:	4a0e      	ldr	r2, [pc, #56]	@ (800670c <HAL_UART_Transmit_DMA+0x9c>)
 80066d4:	6302      	str	r2, [r0, #48]	@ 0x30
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80066d6:	4a0e      	ldr	r2, [pc, #56]	@ (8006710 <HAL_UART_Transmit_DMA+0xa0>)
 80066d8:	6342      	str	r2, [r0, #52]	@ 0x34
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80066da:	9a01      	ldr	r2, [sp, #4]
 80066dc:	3228      	adds	r2, #40	@ 0x28
 80066de:	f7fe fa9d 	bl	8004c1c <HAL_DMA_Start_IT>
 80066e2:	42b0      	cmp	r0, r6
 80066e4:	d005      	beq.n	80066f2 <HAL_UART_Transmit_DMA+0x82>
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80066e6:	2310      	movs	r3, #16
 80066e8:	67fb      	str	r3, [r7, #124]	@ 0x7c
        huart->gState = HAL_UART_STATE_READY;
 80066ea:	18db      	adds	r3, r3, r3
        __HAL_UNLOCK(huart);
 80066ec:	702e      	strb	r6, [r5, #0]
        huart->gState = HAL_UART_STATE_READY;
 80066ee:	67a3      	str	r3, [r4, #120]	@ 0x78
        return HAL_ERROR;
 80066f0:	e7c9      	b.n	8006686 <HAL_UART_Transmit_DMA+0x16>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80066f2:	2240      	movs	r2, #64	@ 0x40
    __HAL_UNLOCK(huart);
 80066f4:	2000      	movs	r0, #0
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80066f6:	6823      	ldr	r3, [r4, #0]
    __HAL_UNLOCK(huart);
 80066f8:	3474      	adds	r4, #116	@ 0x74
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80066fa:	621a      	str	r2, [r3, #32]
    __HAL_UNLOCK(huart);
 80066fc:	7020      	strb	r0, [r4, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80066fe:	6899      	ldr	r1, [r3, #8]
 8006700:	1892      	adds	r2, r2, r2
 8006702:	430a      	orrs	r2, r1
 8006704:	609a      	str	r2, [r3, #8]
    return HAL_OK;
 8006706:	e7bf      	b.n	8006688 <HAL_UART_Transmit_DMA+0x18>
 8006708:	08006715 	.word	0x08006715
 800670c:	0800674b 	.word	0x0800674b
 8006710:	08006757 	.word	0x08006757

08006714 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006714:	0003      	movs	r3, r0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8006716:	681b      	ldr	r3, [r3, #0]
{
 8006718:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800671a:	681a      	ldr	r2, [r3, #0]
 800671c:	2320      	movs	r3, #32
 800671e:	0011      	movs	r1, r2
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006720:	6a80      	ldr	r0, [r0, #40]	@ 0x28
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8006722:	4019      	ands	r1, r3
 8006724:	421a      	tst	r2, r3
 8006726:	d10c      	bne.n	8006742 <UART_DMATransmitCplt+0x2e>
  {
    huart->TxXferCount = 0U;
 8006728:	0003      	movs	r3, r0
 800672a:	3352      	adds	r3, #82	@ 0x52
 800672c:	8019      	strh	r1, [r3, #0]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800672e:	2180      	movs	r1, #128	@ 0x80
 8006730:	6803      	ldr	r3, [r0, #0]
 8006732:	689a      	ldr	r2, [r3, #8]
 8006734:	438a      	bics	r2, r1
 8006736:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006738:	2240      	movs	r2, #64	@ 0x40
 800673a:	6819      	ldr	r1, [r3, #0]
 800673c:	430a      	orrs	r2, r1
 800673e:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006740:	bd10      	pop	{r4, pc}
    HAL_UART_TxCpltCallback(huart);
 8006742:	f7fd fae3 	bl	8003d0c <HAL_UART_TxCpltCallback>
}
 8006746:	e7fb      	b.n	8006740 <UART_DMATransmitCplt+0x2c>

08006748 <HAL_UART_TxHalfCpltCallback>:
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
 8006748:	4770      	bx	lr

0800674a <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800674a:	b510      	push	{r4, lr}
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800674c:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 800674e:	f7ff fffb 	bl	8006748 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006752:	bd10      	pop	{r4, pc}

08006754 <HAL_UART_ErrorCallback>:
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
 8006754:	4770      	bx	lr

08006756 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006756:	b510      	push	{r4, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006758:	6a84      	ldr	r4, [r0, #40]	@ 0x28

  const HAL_UART_StateTypeDef gstate = huart->gState;
  const HAL_UART_StateTypeDef rxstate = huart->RxState;

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800675a:	6823      	ldr	r3, [r4, #0]
  const HAL_UART_StateTypeDef gstate = huart->gState;
 800675c:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800675e:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8006760:	689a      	ldr	r2, [r3, #8]
 8006762:	0612      	lsls	r2, r2, #24
 8006764:	d50b      	bpl.n	800677e <UART_DMAError+0x28>
 8006766:	2821      	cmp	r0, #33	@ 0x21
 8006768:	d109      	bne.n	800677e <UART_DMAError+0x28>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800676a:	0022      	movs	r2, r4
 800676c:	2000      	movs	r0, #0
 800676e:	3252      	adds	r2, #82	@ 0x52
 8006770:	8010      	strh	r0, [r2, #0]
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006772:	681a      	ldr	r2, [r3, #0]
 8006774:	30c0      	adds	r0, #192	@ 0xc0
 8006776:	4382      	bics	r2, r0
 8006778:	601a      	str	r2, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 800677a:	2220      	movs	r2, #32
 800677c:	67a2      	str	r2, [r4, #120]	@ 0x78
    UART_EndTxTransfer(huart);
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800677e:	689b      	ldr	r3, [r3, #8]
 8006780:	065b      	lsls	r3, r3, #25
 8006782:	d508      	bpl.n	8006796 <UART_DMAError+0x40>
 8006784:	2922      	cmp	r1, #34	@ 0x22
 8006786:	d106      	bne.n	8006796 <UART_DMAError+0x40>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8006788:	0023      	movs	r3, r4
 800678a:	2200      	movs	r2, #0
 800678c:	335a      	adds	r3, #90	@ 0x5a
    UART_EndRxTransfer(huart);
 800678e:	0020      	movs	r0, r4
    huart->RxXferCount = 0U;
 8006790:	801a      	strh	r2, [r3, #0]
    UART_EndRxTransfer(huart);
 8006792:	f7ff ff53 	bl	800663c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006796:	2310      	movs	r3, #16
 8006798:	1d22      	adds	r2, r4, #4
 800679a:	6fd1      	ldr	r1, [r2, #124]	@ 0x7c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800679c:	0020      	movs	r0, r4
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800679e:	430b      	orrs	r3, r1
 80067a0:	67d3      	str	r3, [r2, #124]	@ 0x7c
  HAL_UART_ErrorCallback(huart);
 80067a2:	f7ff ffd7 	bl	8006754 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80067a6:	bd10      	pop	{r4, pc}

080067a8 <UART_DMAAbortOnError>:
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80067a8:	6a80      	ldr	r0, [r0, #40]	@ 0x28
  huart->RxXferCount = 0U;
 80067aa:	2300      	movs	r3, #0
 80067ac:	0002      	movs	r2, r0
{
 80067ae:	b510      	push	{r4, lr}
  huart->RxXferCount = 0U;
 80067b0:	325a      	adds	r2, #90	@ 0x5a
 80067b2:	8013      	strh	r3, [r2, #0]
  huart->TxXferCount = 0U;
 80067b4:	3a08      	subs	r2, #8
 80067b6:	8013      	strh	r3, [r2, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80067b8:	f7ff ffcc 	bl	8006754 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80067bc:	bd10      	pop	{r4, pc}

080067be <HAL_UARTEx_RxEventCallback>:
}
 80067be:	4770      	bx	lr

080067c0 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80067c0:	6803      	ldr	r3, [r0, #0]
{
 80067c2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80067c4:	69d9      	ldr	r1, [r3, #28]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80067c6:	4a85      	ldr	r2, [pc, #532]	@ (80069dc <HAL_UART_IRQHandler+0x21c>)
{
 80067c8:	0004      	movs	r4, r0
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80067ca:	6818      	ldr	r0, [r3, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80067cc:	689e      	ldr	r6, [r3, #8]
  if (errorflags == 0U)
 80067ce:	4211      	tst	r1, r2
 80067d0:	d10b      	bne.n	80067ea <HAL_UART_IRQHandler+0x2a>
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80067d2:	2220      	movs	r2, #32
 80067d4:	4211      	tst	r1, r2
 80067d6:	d100      	bne.n	80067da <HAL_UART_IRQHandler+0x1a>
 80067d8:	e076      	b.n	80068c8 <HAL_UART_IRQHandler+0x108>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80067da:	4210      	tst	r0, r2
 80067dc:	d100      	bne.n	80067e0 <HAL_UART_IRQHandler+0x20>
 80067de:	e073      	b.n	80068c8 <HAL_UART_IRQHandler+0x108>
      if (huart->RxISR != NULL)
 80067e0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
      huart->TxISR(huart);
 80067e2:	0020      	movs	r0, r4
    if (huart->TxISR != NULL)
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d165      	bne.n	80068b4 <HAL_UART_IRQHandler+0xf4>
 80067e8:	e065      	b.n	80068b6 <HAL_UART_IRQHandler+0xf6>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80067ea:	2201      	movs	r2, #1
 80067ec:	0037      	movs	r7, r6
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80067ee:	4d7c      	ldr	r5, [pc, #496]	@ (80069e0 <HAL_UART_IRQHandler+0x220>)
      && (((cr3its & USART_CR3_EIE) != 0U)
 80067f0:	4017      	ands	r7, r2
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80067f2:	4005      	ands	r5, r0
 80067f4:	433d      	orrs	r5, r7
 80067f6:	d067      	beq.n	80068c8 <HAL_UART_IRQHandler+0x108>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80067f8:	1d25      	adds	r5, r4, #4
 80067fa:	4211      	tst	r1, r2
 80067fc:	d005      	beq.n	800680a <HAL_UART_IRQHandler+0x4a>
 80067fe:	05c6      	lsls	r6, r0, #23
 8006800:	d503      	bpl.n	800680a <HAL_UART_IRQHandler+0x4a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006802:	621a      	str	r2, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006804:	6fee      	ldr	r6, [r5, #124]	@ 0x7c
 8006806:	4332      	orrs	r2, r6
 8006808:	67ea      	str	r2, [r5, #124]	@ 0x7c
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800680a:	2202      	movs	r2, #2
 800680c:	4211      	tst	r1, r2
 800680e:	d006      	beq.n	800681e <HAL_UART_IRQHandler+0x5e>
 8006810:	2f00      	cmp	r7, #0
 8006812:	d004      	beq.n	800681e <HAL_UART_IRQHandler+0x5e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006814:	621a      	str	r2, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006816:	6fee      	ldr	r6, [r5, #124]	@ 0x7c
 8006818:	1892      	adds	r2, r2, r2
 800681a:	4332      	orrs	r2, r6
 800681c:	67ea      	str	r2, [r5, #124]	@ 0x7c
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800681e:	2204      	movs	r2, #4
 8006820:	4211      	tst	r1, r2
 8006822:	d006      	beq.n	8006832 <HAL_UART_IRQHandler+0x72>
 8006824:	2f00      	cmp	r7, #0
 8006826:	d004      	beq.n	8006832 <HAL_UART_IRQHandler+0x72>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006828:	621a      	str	r2, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800682a:	6fee      	ldr	r6, [r5, #124]	@ 0x7c
 800682c:	3a02      	subs	r2, #2
 800682e:	4332      	orrs	r2, r6
 8006830:	67ea      	str	r2, [r5, #124]	@ 0x7c
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006832:	2208      	movs	r2, #8
 8006834:	4211      	tst	r1, r2
 8006836:	d007      	beq.n	8006848 <HAL_UART_IRQHandler+0x88>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006838:	2620      	movs	r6, #32
 800683a:	4006      	ands	r6, r0
 800683c:	433e      	orrs	r6, r7
 800683e:	d003      	beq.n	8006848 <HAL_UART_IRQHandler+0x88>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006840:	621a      	str	r2, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006842:	6fee      	ldr	r6, [r5, #124]	@ 0x7c
 8006844:	4332      	orrs	r2, r6
 8006846:	67ea      	str	r2, [r5, #124]	@ 0x7c
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006848:	2280      	movs	r2, #128	@ 0x80
 800684a:	0112      	lsls	r2, r2, #4
 800684c:	4211      	tst	r1, r2
 800684e:	d006      	beq.n	800685e <HAL_UART_IRQHandler+0x9e>
 8006850:	0146      	lsls	r6, r0, #5
 8006852:	d504      	bpl.n	800685e <HAL_UART_IRQHandler+0x9e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006854:	621a      	str	r2, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006856:	2320      	movs	r3, #32
 8006858:	6fea      	ldr	r2, [r5, #124]	@ 0x7c
 800685a:	4313      	orrs	r3, r2
 800685c:	67eb      	str	r3, [r5, #124]	@ 0x7c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800685e:	6feb      	ldr	r3, [r5, #124]	@ 0x7c
 8006860:	2b00      	cmp	r3, #0
 8006862:	d028      	beq.n	80068b6 <HAL_UART_IRQHandler+0xf6>
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006864:	2320      	movs	r3, #32
 8006866:	4219      	tst	r1, r3
 8006868:	d006      	beq.n	8006878 <HAL_UART_IRQHandler+0xb8>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800686a:	4218      	tst	r0, r3
 800686c:	d004      	beq.n	8006878 <HAL_UART_IRQHandler+0xb8>
        if (huart->RxISR != NULL)
 800686e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006870:	2b00      	cmp	r3, #0
 8006872:	d001      	beq.n	8006878 <HAL_UART_IRQHandler+0xb8>
          huart->RxISR(huart);
 8006874:	0020      	movs	r0, r4
 8006876:	4798      	blx	r3
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006878:	2240      	movs	r2, #64	@ 0x40
 800687a:	6827      	ldr	r7, [r4, #0]
      errorcode = huart->ErrorCode;
 800687c:	6feb      	ldr	r3, [r5, #124]	@ 0x7c
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800687e:	68be      	ldr	r6, [r7, #8]
        UART_EndRxTransfer(huart);
 8006880:	0020      	movs	r0, r4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006882:	4016      	ands	r6, r2
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006884:	3a18      	subs	r2, #24
 8006886:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006888:	431e      	orrs	r6, r3
 800688a:	d019      	beq.n	80068c0 <HAL_UART_IRQHandler+0x100>
        UART_EndRxTransfer(huart);
 800688c:	f7ff fed6 	bl	800663c <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006890:	2240      	movs	r2, #64	@ 0x40
 8006892:	68bb      	ldr	r3, [r7, #8]
 8006894:	4213      	tst	r3, r2
 8006896:	d00f      	beq.n	80068b8 <HAL_UART_IRQHandler+0xf8>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006898:	68bb      	ldr	r3, [r7, #8]
          if (huart->hdmarx != NULL)
 800689a:	6f20      	ldr	r0, [r4, #112]	@ 0x70
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800689c:	4393      	bics	r3, r2
 800689e:	60bb      	str	r3, [r7, #8]
          if (huart->hdmarx != NULL)
 80068a0:	2800      	cmp	r0, #0
 80068a2:	d009      	beq.n	80068b8 <HAL_UART_IRQHandler+0xf8>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80068a4:	4b4f      	ldr	r3, [pc, #316]	@ (80069e4 <HAL_UART_IRQHandler+0x224>)
 80068a6:	6383      	str	r3, [r0, #56]	@ 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80068a8:	f7fe fa16 	bl	8004cd8 <HAL_DMA_Abort_IT>
 80068ac:	2800      	cmp	r0, #0
 80068ae:	d002      	beq.n	80068b6 <HAL_UART_IRQHandler+0xf6>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80068b0:	6f20      	ldr	r0, [r4, #112]	@ 0x70
 80068b2:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 80068b4:	4798      	blx	r3
}
 80068b6:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
            HAL_UART_ErrorCallback(huart);
 80068b8:	0020      	movs	r0, r4
 80068ba:	f7ff ff4b 	bl	8006754 <HAL_UART_ErrorCallback>
 80068be:	e7fa      	b.n	80068b6 <HAL_UART_IRQHandler+0xf6>
        HAL_UART_ErrorCallback(huart);
 80068c0:	f7ff ff48 	bl	8006754 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068c4:	67ee      	str	r6, [r5, #124]	@ 0x7c
 80068c6:	e7f6      	b.n	80068b6 <HAL_UART_IRQHandler+0xf6>
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80068c8:	6e25      	ldr	r5, [r4, #96]	@ 0x60
 80068ca:	2d01      	cmp	r5, #1
 80068cc:	d161      	bne.n	8006992 <HAL_UART_IRQHandler+0x1d2>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 80068ce:	2210      	movs	r2, #16
 80068d0:	4211      	tst	r1, r2
 80068d2:	d05e      	beq.n	8006992 <HAL_UART_IRQHandler+0x1d2>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 80068d4:	4210      	tst	r0, r2
 80068d6:	d05c      	beq.n	8006992 <HAL_UART_IRQHandler+0x1d2>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80068d8:	621a      	str	r2, [r3, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068da:	6899      	ldr	r1, [r3, #8]
 80068dc:	2640      	movs	r6, #64	@ 0x40
 80068de:	000f      	movs	r7, r1
 80068e0:	4037      	ands	r7, r6
 80068e2:	4231      	tst	r1, r6
 80068e4:	d038      	beq.n	8006958 <HAL_UART_IRQHandler+0x198>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80068e6:	6f21      	ldr	r1, [r4, #112]	@ 0x70
 80068e8:	680f      	ldr	r7, [r1, #0]
 80068ea:	9100      	str	r1, [sp, #0]
 80068ec:	6879      	ldr	r1, [r7, #4]
 80068ee:	b289      	uxth	r1, r1
      if (  (nb_remaining_rx_data > 0U)
 80068f0:	2900      	cmp	r1, #0
 80068f2:	d0e0      	beq.n	80068b6 <HAL_UART_IRQHandler+0xf6>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80068f4:	2058      	movs	r0, #88	@ 0x58
 80068f6:	4684      	mov	ip, r0
 80068f8:	44a4      	add	ip, r4
 80068fa:	4660      	mov	r0, ip
 80068fc:	8800      	ldrh	r0, [r0, #0]
 80068fe:	4288      	cmp	r0, r1
 8006900:	d9d9      	bls.n	80068b6 <HAL_UART_IRQHandler+0xf6>
        huart->RxXferCount = nb_remaining_rx_data;
 8006902:	205a      	movs	r0, #90	@ 0x5a
 8006904:	4684      	mov	ip, r0
 8006906:	44a4      	add	ip, r4
 8006908:	4660      	mov	r0, ip
 800690a:	8001      	strh	r1, [r0, #0]
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800690c:	683f      	ldr	r7, [r7, #0]
 800690e:	2120      	movs	r1, #32
 8006910:	0038      	movs	r0, r7
 8006912:	4008      	ands	r0, r1
 8006914:	9001      	str	r0, [sp, #4]
 8006916:	420f      	tst	r7, r1
 8006918:	d112      	bne.n	8006940 <HAL_UART_IRQHandler+0x180>
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800691a:	681f      	ldr	r7, [r3, #0]
 800691c:	4832      	ldr	r0, [pc, #200]	@ (80069e8 <HAL_UART_IRQHandler+0x228>)
 800691e:	4007      	ands	r7, r0
 8006920:	601f      	str	r7, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006922:	689f      	ldr	r7, [r3, #8]
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006924:	9800      	ldr	r0, [sp, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006926:	43af      	bics	r7, r5
 8006928:	609f      	str	r7, [r3, #8]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800692a:	689d      	ldr	r5, [r3, #8]
 800692c:	43b5      	bics	r5, r6
 800692e:	609d      	str	r5, [r3, #8]
          huart->RxState = HAL_UART_STATE_READY;
 8006930:	67e1      	str	r1, [r4, #124]	@ 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006932:	9901      	ldr	r1, [sp, #4]
 8006934:	6621      	str	r1, [r4, #96]	@ 0x60
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006936:	6819      	ldr	r1, [r3, #0]
 8006938:	4391      	bics	r1, r2
 800693a:	6019      	str	r1, [r3, #0]
          (void)HAL_DMA_Abort(huart->hdmarx);
 800693c:	f7fe f9ac 	bl	8004c98 <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006940:	0023      	movs	r3, r4
 8006942:	0022      	movs	r2, r4
 8006944:	335a      	adds	r3, #90	@ 0x5a
 8006946:	3258      	adds	r2, #88	@ 0x58
 8006948:	881b      	ldrh	r3, [r3, #0]
 800694a:	8811      	ldrh	r1, [r2, #0]
 800694c:	1ac9      	subs	r1, r1, r3
 800694e:	b289      	uxth	r1, r1
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006950:	0020      	movs	r0, r4
 8006952:	f7ff ff34 	bl	80067be <HAL_UARTEx_RxEventCallback>
 8006956:	e7ae      	b.n	80068b6 <HAL_UART_IRQHandler+0xf6>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006958:	0026      	movs	r6, r4
 800695a:	0021      	movs	r1, r4
 800695c:	365a      	adds	r6, #90	@ 0x5a
 800695e:	8830      	ldrh	r0, [r6, #0]
      if (  (huart->RxXferCount > 0U)
 8006960:	8836      	ldrh	r6, [r6, #0]
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006962:	3158      	adds	r1, #88	@ 0x58
 8006964:	8809      	ldrh	r1, [r1, #0]
 8006966:	b280      	uxth	r0, r0
      if (  (huart->RxXferCount > 0U)
 8006968:	2e00      	cmp	r6, #0
 800696a:	d0a4      	beq.n	80068b6 <HAL_UART_IRQHandler+0xf6>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800696c:	1a09      	subs	r1, r1, r0
 800696e:	b289      	uxth	r1, r1
          &&(nb_rx_data > 0U) )
 8006970:	2900      	cmp	r1, #0
 8006972:	d0a0      	beq.n	80068b6 <HAL_UART_IRQHandler+0xf6>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006974:	6818      	ldr	r0, [r3, #0]
 8006976:	4e1d      	ldr	r6, [pc, #116]	@ (80069ec <HAL_UART_IRQHandler+0x22c>)
 8006978:	4030      	ands	r0, r6
 800697a:	6018      	str	r0, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800697c:	6898      	ldr	r0, [r3, #8]
 800697e:	43a8      	bics	r0, r5
 8006980:	6098      	str	r0, [r3, #8]
        huart->RxState = HAL_UART_STATE_READY;
 8006982:	2020      	movs	r0, #32
 8006984:	67e0      	str	r0, [r4, #124]	@ 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006986:	6627      	str	r7, [r4, #96]	@ 0x60
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006988:	6818      	ldr	r0, [r3, #0]
        huart->RxISR = NULL;
 800698a:	6667      	str	r7, [r4, #100]	@ 0x64
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800698c:	4390      	bics	r0, r2
 800698e:	6018      	str	r0, [r3, #0]
 8006990:	e7de      	b.n	8006950 <HAL_UART_IRQHandler+0x190>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006992:	2280      	movs	r2, #128	@ 0x80
 8006994:	0352      	lsls	r2, r2, #13
 8006996:	4211      	tst	r1, r2
 8006998:	d006      	beq.n	80069a8 <HAL_UART_IRQHandler+0x1e8>
 800699a:	0276      	lsls	r6, r6, #9
 800699c:	d504      	bpl.n	80069a8 <HAL_UART_IRQHandler+0x1e8>
    HAL_UARTEx_WakeupCallback(huart);
 800699e:	0020      	movs	r0, r4
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80069a0:	621a      	str	r2, [r3, #32]
    HAL_UARTEx_WakeupCallback(huart);
 80069a2:	f000 fb49 	bl	8007038 <HAL_UARTEx_WakeupCallback>
    return;
 80069a6:	e786      	b.n	80068b6 <HAL_UART_IRQHandler+0xf6>
  if (((isrflags & USART_ISR_TXE) != 0U)
 80069a8:	2280      	movs	r2, #128	@ 0x80
 80069aa:	4211      	tst	r1, r2
 80069ac:	d003      	beq.n	80069b6 <HAL_UART_IRQHandler+0x1f6>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80069ae:	4210      	tst	r0, r2
 80069b0:	d001      	beq.n	80069b6 <HAL_UART_IRQHandler+0x1f6>
    if (huart->TxISR != NULL)
 80069b2:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
 80069b4:	e715      	b.n	80067e2 <HAL_UART_IRQHandler+0x22>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80069b6:	2540      	movs	r5, #64	@ 0x40
 80069b8:	4229      	tst	r1, r5
 80069ba:	d100      	bne.n	80069be <HAL_UART_IRQHandler+0x1fe>
 80069bc:	e77b      	b.n	80068b6 <HAL_UART_IRQHandler+0xf6>
 80069be:	4228      	tst	r0, r5
 80069c0:	d100      	bne.n	80069c4 <HAL_UART_IRQHandler+0x204>
 80069c2:	e778      	b.n	80068b6 <HAL_UART_IRQHandler+0xf6>
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80069c4:	681a      	ldr	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80069c6:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80069c8:	43aa      	bics	r2, r5
 80069ca:	601a      	str	r2, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 80069cc:	2320      	movs	r3, #32
 80069ce:	67a3      	str	r3, [r4, #120]	@ 0x78
  huart->TxISR = NULL;
 80069d0:	2300      	movs	r3, #0
 80069d2:	66a3      	str	r3, [r4, #104]	@ 0x68
  HAL_UART_TxCpltCallback(huart);
 80069d4:	f7fd f99a 	bl	8003d0c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80069d8:	e76d      	b.n	80068b6 <HAL_UART_IRQHandler+0xf6>
 80069da:	46c0      	nop			@ (mov r8, r8)
 80069dc:	0000080f 	.word	0x0000080f
 80069e0:	04000120 	.word	0x04000120
 80069e4:	080067a9 	.word	0x080067a9
 80069e8:	fffffeff 	.word	0xfffffeff
 80069ec:	fffffedf 	.word	0xfffffedf

080069f0 <UART_RxISR_8BIT>:
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
  uint16_t uhMask = huart->Mask;
 80069f0:	0003      	movs	r3, r0
{
 80069f2:	b510      	push	{r4, lr}
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80069f4:	6fc1      	ldr	r1, [r0, #124]	@ 0x7c
  uint16_t uhMask = huart->Mask;
 80069f6:	335c      	adds	r3, #92	@ 0x5c
 80069f8:	881a      	ldrh	r2, [r3, #0]
{
 80069fa:	0004      	movs	r4, r0
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80069fc:	6803      	ldr	r3, [r0, #0]
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80069fe:	2922      	cmp	r1, #34	@ 0x22
 8006a00:	d131      	bne.n	8006a66 <UART_RxISR_8BIT+0x76>
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006a02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006a04:	6d41      	ldr	r1, [r0, #84]	@ 0x54
 8006a06:	4013      	ands	r3, r2
    huart->pRxBuffPtr++;
    huart->RxXferCount--;
 8006a08:	0002      	movs	r2, r0
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006a0a:	700b      	strb	r3, [r1, #0]
    huart->pRxBuffPtr++;
 8006a0c:	6d43      	ldr	r3, [r0, #84]	@ 0x54
    huart->RxXferCount--;
 8006a0e:	325a      	adds	r2, #90	@ 0x5a
    huart->pRxBuffPtr++;
 8006a10:	3301      	adds	r3, #1
 8006a12:	6543      	str	r3, [r0, #84]	@ 0x54
    huart->RxXferCount--;
 8006a14:	8813      	ldrh	r3, [r2, #0]
 8006a16:	3b01      	subs	r3, #1
 8006a18:	b29b      	uxth	r3, r3
 8006a1a:	8013      	strh	r3, [r2, #0]

    if (huart->RxXferCount == 0U)
 8006a1c:	8813      	ldrh	r3, [r2, #0]
 8006a1e:	b299      	uxth	r1, r3
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d11b      	bne.n	8006a5c <UART_RxISR_8BIT+0x6c>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006a24:	6803      	ldr	r3, [r0, #0]
 8006a26:	4812      	ldr	r0, [pc, #72]	@ (8006a70 <UART_RxISR_8BIT+0x80>)
 8006a28:	681a      	ldr	r2, [r3, #0]
 8006a2a:	4002      	ands	r2, r0
 8006a2c:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a2e:	689a      	ldr	r2, [r3, #8]
 8006a30:	3023      	adds	r0, #35	@ 0x23
 8006a32:	30ff      	adds	r0, #255	@ 0xff
 8006a34:	4382      	bics	r2, r0
 8006a36:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006a38:	2220      	movs	r2, #32
 8006a3a:	67e2      	str	r2, [r4, #124]	@ 0x7c
      /* Clear RxISR function pointer */
      huart->RxISR = NULL;

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a3c:	6e22      	ldr	r2, [r4, #96]	@ 0x60
      huart->RxISR = NULL;
 8006a3e:	6661      	str	r1, [r4, #100]	@ 0x64
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a40:	4282      	cmp	r2, r0
 8006a42:	d10c      	bne.n	8006a5e <UART_RxISR_8BIT+0x6e>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a44:	2110      	movs	r1, #16
 8006a46:	681a      	ldr	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006a48:	0020      	movs	r0, r4
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a4a:	438a      	bics	r2, r1
 8006a4c:	601a      	str	r2, [r3, #0]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006a4e:	0023      	movs	r3, r4
 8006a50:	3358      	adds	r3, #88	@ 0x58
 8006a52:	8819      	ldrh	r1, [r3, #0]
 8006a54:	f7ff feb3 	bl	80067be <HAL_UARTEx_RxEventCallback>
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a58:	2300      	movs	r3, #0
 8006a5a:	6623      	str	r3, [r4, #96]	@ 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006a5c:	bd10      	pop	{r4, pc}
        HAL_UART_RxCpltCallback(huart);
 8006a5e:	0020      	movs	r0, r4
 8006a60:	f7fd f95c 	bl	8003d1c <HAL_UART_RxCpltCallback>
 8006a64:	e7f8      	b.n	8006a58 <UART_RxISR_8BIT+0x68>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006a66:	2208      	movs	r2, #8
 8006a68:	6999      	ldr	r1, [r3, #24]
 8006a6a:	430a      	orrs	r2, r1
 8006a6c:	619a      	str	r2, [r3, #24]
}
 8006a6e:	e7f5      	b.n	8006a5c <UART_RxISR_8BIT+0x6c>
 8006a70:	fffffedf 	.word	0xfffffedf

08006a74 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006a74:	b510      	push	{r4, lr}
 8006a76:	0004      	movs	r4, r0
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006a78:	0003      	movs	r3, r0
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006a7a:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
  uint16_t uhMask = huart->Mask;
 8006a7c:	335c      	adds	r3, #92	@ 0x5c
 8006a7e:	8818      	ldrh	r0, [r3, #0]
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006a80:	6823      	ldr	r3, [r4, #0]
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006a82:	2a22      	cmp	r2, #34	@ 0x22
 8006a84:	d12f      	bne.n	8006ae6 <UART_RxISR_16BIT+0x72>
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006a86:	6a59      	ldr	r1, [r3, #36]	@ 0x24
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006a88:	6d62      	ldr	r2, [r4, #84]	@ 0x54
    *tmp = (uint16_t)(uhdata & uhMask);
 8006a8a:	4001      	ands	r1, r0
 8006a8c:	8011      	strh	r1, [r2, #0]
    huart->pRxBuffPtr += 2U;
    huart->RxXferCount--;
 8006a8e:	0021      	movs	r1, r4
    huart->pRxBuffPtr += 2U;
 8006a90:	3202      	adds	r2, #2
    huart->RxXferCount--;
 8006a92:	315a      	adds	r1, #90	@ 0x5a
    huart->pRxBuffPtr += 2U;
 8006a94:	6562      	str	r2, [r4, #84]	@ 0x54
    huart->RxXferCount--;
 8006a96:	880a      	ldrh	r2, [r1, #0]
 8006a98:	3a01      	subs	r2, #1
 8006a9a:	b292      	uxth	r2, r2
 8006a9c:	800a      	strh	r2, [r1, #0]

    if (huart->RxXferCount == 0U)
 8006a9e:	880a      	ldrh	r2, [r1, #0]
 8006aa0:	b291      	uxth	r1, r2
 8006aa2:	2a00      	cmp	r2, #0
 8006aa4:	d11a      	bne.n	8006adc <UART_RxISR_16BIT+0x68>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006aa6:	681a      	ldr	r2, [r3, #0]
 8006aa8:	4811      	ldr	r0, [pc, #68]	@ (8006af0 <UART_RxISR_16BIT+0x7c>)
 8006aaa:	4002      	ands	r2, r0
 8006aac:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006aae:	689a      	ldr	r2, [r3, #8]
 8006ab0:	3023      	adds	r0, #35	@ 0x23
 8006ab2:	30ff      	adds	r0, #255	@ 0xff
 8006ab4:	4382      	bics	r2, r0
 8006ab6:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006ab8:	2220      	movs	r2, #32
 8006aba:	67e2      	str	r2, [r4, #124]	@ 0x7c
      /* Clear RxISR function pointer */
      huart->RxISR = NULL;

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006abc:	6e22      	ldr	r2, [r4, #96]	@ 0x60
      huart->RxISR = NULL;
 8006abe:	6661      	str	r1, [r4, #100]	@ 0x64
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ac0:	4282      	cmp	r2, r0
 8006ac2:	d10c      	bne.n	8006ade <UART_RxISR_16BIT+0x6a>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ac4:	2110      	movs	r1, #16
 8006ac6:	681a      	ldr	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006ac8:	0020      	movs	r0, r4
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006aca:	438a      	bics	r2, r1
 8006acc:	601a      	str	r2, [r3, #0]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006ace:	0023      	movs	r3, r4
 8006ad0:	3358      	adds	r3, #88	@ 0x58
 8006ad2:	8819      	ldrh	r1, [r3, #0]
 8006ad4:	f7ff fe73 	bl	80067be <HAL_UARTEx_RxEventCallback>
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ad8:	2300      	movs	r3, #0
 8006ada:	6623      	str	r3, [r4, #96]	@ 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006adc:	bd10      	pop	{r4, pc}
        HAL_UART_RxCpltCallback(huart);
 8006ade:	0020      	movs	r0, r4
 8006ae0:	f7fd f91c 	bl	8003d1c <HAL_UART_RxCpltCallback>
 8006ae4:	e7f8      	b.n	8006ad8 <UART_RxISR_16BIT+0x64>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006ae6:	2208      	movs	r2, #8
 8006ae8:	6999      	ldr	r1, [r3, #24]
 8006aea:	430a      	orrs	r2, r1
 8006aec:	619a      	str	r2, [r3, #24]
}
 8006aee:	e7f5      	b.n	8006adc <UART_RxISR_16BIT+0x68>
 8006af0:	fffffedf 	.word	0xfffffedf

08006af4 <UART_SetConfig>:
{
 8006af4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006af6:	0004      	movs	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006af8:	6925      	ldr	r5, [r4, #16]
 8006afa:	68a1      	ldr	r1, [r4, #8]
  if (UART_INSTANCE_LOWPOWER(huart))
 8006afc:	6802      	ldr	r2, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006afe:	4329      	orrs	r1, r5
 8006b00:	6965      	ldr	r5, [r4, #20]
 8006b02:	69c3      	ldr	r3, [r0, #28]
 8006b04:	4329      	orrs	r1, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006b06:	6810      	ldr	r0, [r2, #0]
 8006b08:	4d73      	ldr	r5, [pc, #460]	@ (8006cd8 <UART_SetConfig+0x1e4>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006b0a:	4319      	orrs	r1, r3
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006b0c:	4028      	ands	r0, r5
 8006b0e:	4301      	orrs	r1, r0
 8006b10:	6011      	str	r1, [r2, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006b12:	6851      	ldr	r1, [r2, #4]
 8006b14:	4871      	ldr	r0, [pc, #452]	@ (8006cdc <UART_SetConfig+0x1e8>)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006b16:	4d72      	ldr	r5, [pc, #456]	@ (8006ce0 <UART_SetConfig+0x1ec>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006b18:	4001      	ands	r1, r0
 8006b1a:	68e0      	ldr	r0, [r4, #12]
 8006b1c:	4301      	orrs	r1, r0
 8006b1e:	6051      	str	r1, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006b20:	69a0      	ldr	r0, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006b22:	42aa      	cmp	r2, r5
 8006b24:	d001      	beq.n	8006b2a <UART_SetConfig+0x36>
    tmpreg |= huart->Init.OneBitSampling;
 8006b26:	6a21      	ldr	r1, [r4, #32]
 8006b28:	4308      	orrs	r0, r1
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006b2a:	6891      	ldr	r1, [r2, #8]
 8006b2c:	4e6d      	ldr	r6, [pc, #436]	@ (8006ce4 <UART_SetConfig+0x1f0>)
 8006b2e:	4031      	ands	r1, r6
 8006b30:	4301      	orrs	r1, r0
 8006b32:	6091      	str	r1, [r2, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006b34:	496c      	ldr	r1, [pc, #432]	@ (8006ce8 <UART_SetConfig+0x1f4>)
 8006b36:	428a      	cmp	r2, r1
 8006b38:	d113      	bne.n	8006b62 <UART_SetConfig+0x6e>
 8006b3a:	2103      	movs	r1, #3
 8006b3c:	2080      	movs	r0, #128	@ 0x80
 8006b3e:	4a6b      	ldr	r2, [pc, #428]	@ (8006cec <UART_SetConfig+0x1f8>)
 8006b40:	0200      	lsls	r0, r0, #8
 8006b42:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8006b44:	400a      	ands	r2, r1
 8006b46:	2a02      	cmp	r2, #2
 8006b48:	d100      	bne.n	8006b4c <UART_SetConfig+0x58>
 8006b4a:	e07d      	b.n	8006c48 <UART_SetConfig+0x154>
 8006b4c:	428a      	cmp	r2, r1
 8006b4e:	d01e      	beq.n	8006b8e <UART_SetConfig+0x9a>
 8006b50:	2a01      	cmp	r2, #1
 8006b52:	d000      	beq.n	8006b56 <UART_SetConfig+0x62>
 8006b54:	e0a4      	b.n	8006ca0 <UART_SetConfig+0x1ac>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006b56:	4283      	cmp	r3, r0
 8006b58:	d100      	bne.n	8006b5c <UART_SetConfig+0x68>
 8006b5a:	e072      	b.n	8006c42 <UART_SetConfig+0x14e>
        pclk = HAL_RCC_GetSysClockFreq();
 8006b5c:	f7fe fb26 	bl	80051ac <HAL_RCC_GetSysClockFreq>
        break;
 8006b60:	e067      	b.n	8006c32 <UART_SetConfig+0x13e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006b62:	4963      	ldr	r1, [pc, #396]	@ (8006cf0 <UART_SetConfig+0x1fc>)
 8006b64:	428a      	cmp	r2, r1
 8006b66:	d115      	bne.n	8006b94 <UART_SetConfig+0xa0>
 8006b68:	210c      	movs	r1, #12
 8006b6a:	4a60      	ldr	r2, [pc, #384]	@ (8006cec <UART_SetConfig+0x1f8>)
 8006b6c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8006b6e:	400a      	ands	r2, r1
 8006b70:	2a08      	cmp	r2, #8
 8006b72:	d100      	bne.n	8006b76 <UART_SetConfig+0x82>
 8006b74:	e099      	b.n	8006caa <UART_SetConfig+0x1b6>
 8006b76:	d806      	bhi.n	8006b86 <UART_SetConfig+0x92>
 8006b78:	2a00      	cmp	r2, #0
 8006b7a:	d100      	bne.n	8006b7e <UART_SetConfig+0x8a>
 8006b7c:	e084      	b.n	8006c88 <UART_SetConfig+0x194>
 8006b7e:	2a04      	cmp	r2, #4
 8006b80:	d05a      	beq.n	8006c38 <UART_SetConfig+0x144>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006b82:	2001      	movs	r0, #1
 8006b84:	e025      	b.n	8006bd2 <UART_SetConfig+0xde>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006b86:	2a0c      	cmp	r2, #12
 8006b88:	d1fb      	bne.n	8006b82 <UART_SetConfig+0x8e>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006b8a:	2080      	movs	r0, #128	@ 0x80
 8006b8c:	0200      	lsls	r0, r0, #8
 8006b8e:	4283      	cmp	r3, r0
 8006b90:	d064      	beq.n	8006c5c <UART_SetConfig+0x168>
 8006b92:	e096      	b.n	8006cc2 <UART_SetConfig+0x1ce>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006b94:	4957      	ldr	r1, [pc, #348]	@ (8006cf4 <UART_SetConfig+0x200>)
 8006b96:	428a      	cmp	r2, r1
 8006b98:	d100      	bne.n	8006b9c <UART_SetConfig+0xa8>
 8006b9a:	e075      	b.n	8006c88 <UART_SetConfig+0x194>
 8006b9c:	4956      	ldr	r1, [pc, #344]	@ (8006cf8 <UART_SetConfig+0x204>)
 8006b9e:	428a      	cmp	r2, r1
 8006ba0:	d100      	bne.n	8006ba4 <UART_SetConfig+0xb0>
 8006ba2:	e071      	b.n	8006c88 <UART_SetConfig+0x194>
 8006ba4:	42aa      	cmp	r2, r5
 8006ba6:	d1ec      	bne.n	8006b82 <UART_SetConfig+0x8e>
 8006ba8:	21c0      	movs	r1, #192	@ 0xc0
 8006baa:	2080      	movs	r0, #128	@ 0x80
 8006bac:	4a4f      	ldr	r2, [pc, #316]	@ (8006cec <UART_SetConfig+0x1f8>)
 8006bae:	0109      	lsls	r1, r1, #4
 8006bb0:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 8006bb2:	0100      	lsls	r0, r0, #4
 8006bb4:	400b      	ands	r3, r1
 8006bb6:	4283      	cmp	r3, r0
 8006bb8:	d014      	beq.n	8006be4 <UART_SetConfig+0xf0>
 8006bba:	d80e      	bhi.n	8006bda <UART_SetConfig+0xe6>
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d033      	beq.n	8006c28 <UART_SetConfig+0x134>
 8006bc0:	2280      	movs	r2, #128	@ 0x80
 8006bc2:	00d2      	lsls	r2, r2, #3
 8006bc4:	4293      	cmp	r3, r2
 8006bc6:	d1dc      	bne.n	8006b82 <UART_SetConfig+0x8e>
        pclk = HAL_RCC_GetSysClockFreq();
 8006bc8:	f7fe faf0 	bl	80051ac <HAL_RCC_GetSysClockFreq>
    if (pclk != 0U)
 8006bcc:	2800      	cmp	r0, #0
 8006bce:	d110      	bne.n	8006bf2 <UART_SetConfig+0xfe>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006bd0:	2000      	movs	r0, #0
  huart->RxISR = NULL;
 8006bd2:	2300      	movs	r3, #0
 8006bd4:	6663      	str	r3, [r4, #100]	@ 0x64
  huart->TxISR = NULL;
 8006bd6:	66a3      	str	r3, [r4, #104]	@ 0x68
}
 8006bd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006bda:	428b      	cmp	r3, r1
 8006bdc:	d1d1      	bne.n	8006b82 <UART_SetConfig+0x8e>
 8006bde:	2080      	movs	r0, #128	@ 0x80
 8006be0:	0200      	lsls	r0, r0, #8
 8006be2:	e006      	b.n	8006bf2 <UART_SetConfig+0xfe>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006be4:	6810      	ldr	r0, [r2, #0]
          pclk = (uint32_t) HSI_VALUE;
 8006be6:	4b45      	ldr	r3, [pc, #276]	@ (8006cfc <UART_SetConfig+0x208>)
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006be8:	06c0      	lsls	r0, r0, #27
          pclk = (uint32_t) HSI_VALUE;
 8006bea:	17c0      	asrs	r0, r0, #31
 8006bec:	4018      	ands	r0, r3
 8006bee:	4b44      	ldr	r3, [pc, #272]	@ (8006d00 <UART_SetConfig+0x20c>)
 8006bf0:	18c0      	adds	r0, r0, r3
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006bf2:	2303      	movs	r3, #3
 8006bf4:	6862      	ldr	r2, [r4, #4]
 8006bf6:	4353      	muls	r3, r2
 8006bf8:	4298      	cmp	r0, r3
 8006bfa:	d3c2      	bcc.n	8006b82 <UART_SetConfig+0x8e>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006bfc:	0313      	lsls	r3, r2, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006bfe:	4298      	cmp	r0, r3
 8006c00:	d8bf      	bhi.n	8006b82 <UART_SetConfig+0x8e>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006c02:	2100      	movs	r1, #0
 8006c04:	0e07      	lsrs	r7, r0, #24
 8006c06:	0206      	lsls	r6, r0, #8
 8006c08:	0850      	lsrs	r0, r2, #1
 8006c0a:	1836      	adds	r6, r6, r0
 8006c0c:	414f      	adcs	r7, r1
 8006c0e:	000b      	movs	r3, r1
 8006c10:	0030      	movs	r0, r6
 8006c12:	0039      	movs	r1, r7
 8006c14:	f7f9 fc5c 	bl	80004d0 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006c18:	4b3a      	ldr	r3, [pc, #232]	@ (8006d04 <UART_SetConfig+0x210>)
 8006c1a:	18c2      	adds	r2, r0, r3
 8006c1c:	4b3a      	ldr	r3, [pc, #232]	@ (8006d08 <UART_SetConfig+0x214>)
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006c1e:	429a      	cmp	r2, r3
 8006c20:	d8af      	bhi.n	8006b82 <UART_SetConfig+0x8e>
        huart->Instance->BRR = usartdiv;
 8006c22:	6823      	ldr	r3, [r4, #0]
 8006c24:	60d8      	str	r0, [r3, #12]
 8006c26:	e7d3      	b.n	8006bd0 <UART_SetConfig+0xdc>
        pclk = HAL_RCC_GetPCLK1Freq();
 8006c28:	f7fe fe62 	bl	80058f0 <HAL_RCC_GetPCLK1Freq>
        break;
 8006c2c:	e7ce      	b.n	8006bcc <UART_SetConfig+0xd8>
        pclk = HAL_RCC_GetPCLK1Freq();
 8006c2e:	f7fe fe5f 	bl	80058f0 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8006c32:	2800      	cmp	r0, #0
 8006c34:	d0cc      	beq.n	8006bd0 <UART_SetConfig+0xdc>
 8006c36:	e044      	b.n	8006cc2 <UART_SetConfig+0x1ce>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006c38:	2280      	movs	r2, #128	@ 0x80
 8006c3a:	0212      	lsls	r2, r2, #8
 8006c3c:	4293      	cmp	r3, r2
 8006c3e:	d000      	beq.n	8006c42 <UART_SetConfig+0x14e>
 8006c40:	e78c      	b.n	8006b5c <UART_SetConfig+0x68>
        pclk = HAL_RCC_GetSysClockFreq();
 8006c42:	f7fe fab3 	bl	80051ac <HAL_RCC_GetSysClockFreq>
 8006c46:	e025      	b.n	8006c94 <UART_SetConfig+0x1a0>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006c48:	4283      	cmp	r3, r0
 8006c4a:	d132      	bne.n	8006cb2 <UART_SetConfig+0x1be>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006c4c:	4b27      	ldr	r3, [pc, #156]	@ (8006cec <UART_SetConfig+0x1f8>)
          pclk = (uint32_t) HSI_VALUE;
 8006c4e:	4a2b      	ldr	r2, [pc, #172]	@ (8006cfc <UART_SetConfig+0x208>)
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	06db      	lsls	r3, r3, #27
          pclk = (uint32_t) HSI_VALUE;
 8006c54:	17db      	asrs	r3, r3, #31
 8006c56:	4013      	ands	r3, r2
 8006c58:	4a29      	ldr	r2, [pc, #164]	@ (8006d00 <UART_SetConfig+0x20c>)
 8006c5a:	189b      	adds	r3, r3, r2
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006c5c:	6861      	ldr	r1, [r4, #4]
 8006c5e:	005b      	lsls	r3, r3, #1
 8006c60:	0848      	lsrs	r0, r1, #1
 8006c62:	1818      	adds	r0, r3, r0
 8006c64:	f7f9 fa80 	bl	8000168 <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006c68:	4928      	ldr	r1, [pc, #160]	@ (8006d0c <UART_SetConfig+0x218>)
 8006c6a:	b282      	uxth	r2, r0
 8006c6c:	3a10      	subs	r2, #16
 8006c6e:	0403      	lsls	r3, r0, #16
 8006c70:	428a      	cmp	r2, r1
 8006c72:	d900      	bls.n	8006c76 <UART_SetConfig+0x182>
 8006c74:	e785      	b.n	8006b82 <UART_SetConfig+0x8e>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006c76:	220f      	movs	r2, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006c78:	031b      	lsls	r3, r3, #12
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006c7a:	4390      	bics	r0, r2
 8006c7c:	b280      	uxth	r0, r0
        huart->Instance->BRR = brrtemp;
 8006c7e:	6822      	ldr	r2, [r4, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006c80:	0f5b      	lsrs	r3, r3, #29
        huart->Instance->BRR = brrtemp;
 8006c82:	4318      	orrs	r0, r3
 8006c84:	60d0      	str	r0, [r2, #12]
 8006c86:	e7a3      	b.n	8006bd0 <UART_SetConfig+0xdc>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006c88:	2280      	movs	r2, #128	@ 0x80
 8006c8a:	0212      	lsls	r2, r2, #8
 8006c8c:	4293      	cmp	r3, r2
 8006c8e:	d1ce      	bne.n	8006c2e <UART_SetConfig+0x13a>
        pclk = HAL_RCC_GetPCLK1Freq();
 8006c90:	f7fe fe2e 	bl	80058f0 <HAL_RCC_GetPCLK1Freq>
        pclk = HAL_RCC_GetSysClockFreq();
 8006c94:	1e03      	subs	r3, r0, #0
    if (pclk != 0U)
 8006c96:	d09b      	beq.n	8006bd0 <UART_SetConfig+0xdc>
 8006c98:	e7e0      	b.n	8006c5c <UART_SetConfig+0x168>
        pclk = HAL_RCC_GetPCLK2Freq();
 8006c9a:	f7fe fe39 	bl	8005910 <HAL_RCC_GetPCLK2Freq>
 8006c9e:	e7f9      	b.n	8006c94 <UART_SetConfig+0x1a0>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006ca0:	4283      	cmp	r3, r0
 8006ca2:	d0fa      	beq.n	8006c9a <UART_SetConfig+0x1a6>
        pclk = HAL_RCC_GetPCLK2Freq();
 8006ca4:	f7fe fe34 	bl	8005910 <HAL_RCC_GetPCLK2Freq>
        break;
 8006ca8:	e7c3      	b.n	8006c32 <UART_SetConfig+0x13e>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006caa:	2280      	movs	r2, #128	@ 0x80
 8006cac:	0212      	lsls	r2, r2, #8
 8006cae:	4293      	cmp	r3, r2
 8006cb0:	d0cc      	beq.n	8006c4c <UART_SetConfig+0x158>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006cb2:	4b0e      	ldr	r3, [pc, #56]	@ (8006cec <UART_SetConfig+0x1f8>)
 8006cb4:	6818      	ldr	r0, [r3, #0]
          pclk = (uint32_t) HSI_VALUE;
 8006cb6:	4b11      	ldr	r3, [pc, #68]	@ (8006cfc <UART_SetConfig+0x208>)
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006cb8:	06c0      	lsls	r0, r0, #27
          pclk = (uint32_t) HSI_VALUE;
 8006cba:	17c0      	asrs	r0, r0, #31
 8006cbc:	4018      	ands	r0, r3
 8006cbe:	4b10      	ldr	r3, [pc, #64]	@ (8006d00 <UART_SetConfig+0x20c>)
 8006cc0:	18c0      	adds	r0, r0, r3
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006cc2:	6861      	ldr	r1, [r4, #4]
 8006cc4:	084b      	lsrs	r3, r1, #1
 8006cc6:	1818      	adds	r0, r3, r0
 8006cc8:	f7f9 fa4e 	bl	8000168 <__udivsi3>
 8006ccc:	b280      	uxth	r0, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006cce:	0002      	movs	r2, r0
 8006cd0:	4b0e      	ldr	r3, [pc, #56]	@ (8006d0c <UART_SetConfig+0x218>)
 8006cd2:	3a10      	subs	r2, #16
 8006cd4:	e7a3      	b.n	8006c1e <UART_SetConfig+0x12a>
 8006cd6:	46c0      	nop			@ (mov r8, r8)
 8006cd8:	efff69f3 	.word	0xefff69f3
 8006cdc:	ffffcfff 	.word	0xffffcfff
 8006ce0:	40004800 	.word	0x40004800
 8006ce4:	fffff4ff 	.word	0xfffff4ff
 8006ce8:	40013800 	.word	0x40013800
 8006cec:	40021000 	.word	0x40021000
 8006cf0:	40004400 	.word	0x40004400
 8006cf4:	40004c00 	.word	0x40004c00
 8006cf8:	40005000 	.word	0x40005000
 8006cfc:	ff48e500 	.word	0xff48e500
 8006d00:	00f42400 	.word	0x00f42400
 8006d04:	fffffd00 	.word	0xfffffd00
 8006d08:	000ffcff 	.word	0x000ffcff
 8006d0c:	0000ffef 	.word	0x0000ffef

08006d10 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006d10:	6a43      	ldr	r3, [r0, #36]	@ 0x24
{
 8006d12:	b530      	push	{r4, r5, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006d14:	07da      	lsls	r2, r3, #31
 8006d16:	d506      	bpl.n	8006d26 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006d18:	6801      	ldr	r1, [r0, #0]
 8006d1a:	4c28      	ldr	r4, [pc, #160]	@ (8006dbc <UART_AdvFeatureConfig+0xac>)
 8006d1c:	684a      	ldr	r2, [r1, #4]
 8006d1e:	4022      	ands	r2, r4
 8006d20:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 8006d22:	4322      	orrs	r2, r4
 8006d24:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006d26:	079a      	lsls	r2, r3, #30
 8006d28:	d506      	bpl.n	8006d38 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006d2a:	6801      	ldr	r1, [r0, #0]
 8006d2c:	4c24      	ldr	r4, [pc, #144]	@ (8006dc0 <UART_AdvFeatureConfig+0xb0>)
 8006d2e:	684a      	ldr	r2, [r1, #4]
 8006d30:	4022      	ands	r2, r4
 8006d32:	6ac4      	ldr	r4, [r0, #44]	@ 0x2c
 8006d34:	4322      	orrs	r2, r4
 8006d36:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006d38:	075a      	lsls	r2, r3, #29
 8006d3a:	d506      	bpl.n	8006d4a <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006d3c:	6801      	ldr	r1, [r0, #0]
 8006d3e:	4c21      	ldr	r4, [pc, #132]	@ (8006dc4 <UART_AdvFeatureConfig+0xb4>)
 8006d40:	684a      	ldr	r2, [r1, #4]
 8006d42:	4022      	ands	r2, r4
 8006d44:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 8006d46:	4322      	orrs	r2, r4
 8006d48:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006d4a:	071a      	lsls	r2, r3, #28
 8006d4c:	d506      	bpl.n	8006d5c <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006d4e:	6801      	ldr	r1, [r0, #0]
 8006d50:	4c1d      	ldr	r4, [pc, #116]	@ (8006dc8 <UART_AdvFeatureConfig+0xb8>)
 8006d52:	684a      	ldr	r2, [r1, #4]
 8006d54:	4022      	ands	r2, r4
 8006d56:	6b44      	ldr	r4, [r0, #52]	@ 0x34
 8006d58:	4322      	orrs	r2, r4
 8006d5a:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006d5c:	06da      	lsls	r2, r3, #27
 8006d5e:	d506      	bpl.n	8006d6e <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006d60:	6801      	ldr	r1, [r0, #0]
 8006d62:	4c1a      	ldr	r4, [pc, #104]	@ (8006dcc <UART_AdvFeatureConfig+0xbc>)
 8006d64:	688a      	ldr	r2, [r1, #8]
 8006d66:	4022      	ands	r2, r4
 8006d68:	6b84      	ldr	r4, [r0, #56]	@ 0x38
 8006d6a:	4322      	orrs	r2, r4
 8006d6c:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006d6e:	069a      	lsls	r2, r3, #26
 8006d70:	d506      	bpl.n	8006d80 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006d72:	6801      	ldr	r1, [r0, #0]
 8006d74:	4c16      	ldr	r4, [pc, #88]	@ (8006dd0 <UART_AdvFeatureConfig+0xc0>)
 8006d76:	688a      	ldr	r2, [r1, #8]
 8006d78:	4022      	ands	r2, r4
 8006d7a:	6bc4      	ldr	r4, [r0, #60]	@ 0x3c
 8006d7c:	4322      	orrs	r2, r4
 8006d7e:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006d80:	065a      	lsls	r2, r3, #25
 8006d82:	d510      	bpl.n	8006da6 <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006d84:	6801      	ldr	r1, [r0, #0]
 8006d86:	4d13      	ldr	r5, [pc, #76]	@ (8006dd4 <UART_AdvFeatureConfig+0xc4>)
 8006d88:	684a      	ldr	r2, [r1, #4]
 8006d8a:	6c04      	ldr	r4, [r0, #64]	@ 0x40
 8006d8c:	402a      	ands	r2, r5
 8006d8e:	4322      	orrs	r2, r4
 8006d90:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006d92:	2280      	movs	r2, #128	@ 0x80
 8006d94:	0352      	lsls	r2, r2, #13
 8006d96:	4294      	cmp	r4, r2
 8006d98:	d105      	bne.n	8006da6 <UART_AdvFeatureConfig+0x96>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006d9a:	684a      	ldr	r2, [r1, #4]
 8006d9c:	4c0e      	ldr	r4, [pc, #56]	@ (8006dd8 <UART_AdvFeatureConfig+0xc8>)
 8006d9e:	4022      	ands	r2, r4
 8006da0:	6c44      	ldr	r4, [r0, #68]	@ 0x44
 8006da2:	4322      	orrs	r2, r4
 8006da4:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006da6:	061b      	lsls	r3, r3, #24
 8006da8:	d506      	bpl.n	8006db8 <UART_AdvFeatureConfig+0xa8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006daa:	6802      	ldr	r2, [r0, #0]
 8006dac:	490b      	ldr	r1, [pc, #44]	@ (8006ddc <UART_AdvFeatureConfig+0xcc>)
 8006dae:	6853      	ldr	r3, [r2, #4]
 8006db0:	400b      	ands	r3, r1
 8006db2:	6c81      	ldr	r1, [r0, #72]	@ 0x48
 8006db4:	430b      	orrs	r3, r1
 8006db6:	6053      	str	r3, [r2, #4]
}
 8006db8:	bd30      	pop	{r4, r5, pc}
 8006dba:	46c0      	nop			@ (mov r8, r8)
 8006dbc:	fffdffff 	.word	0xfffdffff
 8006dc0:	fffeffff 	.word	0xfffeffff
 8006dc4:	fffbffff 	.word	0xfffbffff
 8006dc8:	ffff7fff 	.word	0xffff7fff
 8006dcc:	ffffefff 	.word	0xffffefff
 8006dd0:	ffffdfff 	.word	0xffffdfff
 8006dd4:	ffefffff 	.word	0xffefffff
 8006dd8:	ff9fffff 	.word	0xff9fffff
 8006ddc:	fff7ffff 	.word	0xfff7ffff

08006de0 <UART_WaitOnFlagUntilTimeout>:
{
 8006de0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006de2:	0004      	movs	r4, r0
 8006de4:	000d      	movs	r5, r1
 8006de6:	0017      	movs	r7, r2
 8006de8:	001e      	movs	r6, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006dea:	6822      	ldr	r2, [r4, #0]
 8006dec:	69d3      	ldr	r3, [r2, #28]
 8006dee:	402b      	ands	r3, r5
 8006df0:	1b5b      	subs	r3, r3, r5
 8006df2:	4259      	negs	r1, r3
 8006df4:	414b      	adcs	r3, r1
 8006df6:	42bb      	cmp	r3, r7
 8006df8:	d001      	beq.n	8006dfe <UART_WaitOnFlagUntilTimeout+0x1e>
  return HAL_OK;
 8006dfa:	2000      	movs	r0, #0
 8006dfc:	e01b      	b.n	8006e36 <UART_WaitOnFlagUntilTimeout+0x56>
    if (Timeout != HAL_MAX_DELAY)
 8006dfe:	9b06      	ldr	r3, [sp, #24]
 8006e00:	3301      	adds	r3, #1
 8006e02:	d0f3      	beq.n	8006dec <UART_WaitOnFlagUntilTimeout+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006e04:	f7fc fe3b 	bl	8003a7e <HAL_GetTick>
 8006e08:	9a06      	ldr	r2, [sp, #24]
 8006e0a:	6823      	ldr	r3, [r4, #0]
 8006e0c:	1b80      	subs	r0, r0, r6
 8006e0e:	4290      	cmp	r0, r2
 8006e10:	d801      	bhi.n	8006e16 <UART_WaitOnFlagUntilTimeout+0x36>
 8006e12:	2a00      	cmp	r2, #0
 8006e14:	d110      	bne.n	8006e38 <UART_WaitOnFlagUntilTimeout+0x58>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006e16:	681a      	ldr	r2, [r3, #0]
 8006e18:	4913      	ldr	r1, [pc, #76]	@ (8006e68 <UART_WaitOnFlagUntilTimeout+0x88>)
 8006e1a:	400a      	ands	r2, r1
 8006e1c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e1e:	689a      	ldr	r2, [r3, #8]
 8006e20:	31a3      	adds	r1, #163	@ 0xa3
 8006e22:	31ff      	adds	r1, #255	@ 0xff
 8006e24:	438a      	bics	r2, r1
 8006e26:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 8006e28:	2320      	movs	r3, #32
 8006e2a:	67a3      	str	r3, [r4, #120]	@ 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006e2c:	67e3      	str	r3, [r4, #124]	@ 0x7c
          __HAL_UNLOCK(huart);
 8006e2e:	2300      	movs	r3, #0
        return HAL_TIMEOUT;
 8006e30:	2003      	movs	r0, #3
          __HAL_UNLOCK(huart);
 8006e32:	3474      	adds	r4, #116	@ 0x74
 8006e34:	7023      	strb	r3, [r4, #0]
}
 8006e36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006e38:	681a      	ldr	r2, [r3, #0]
 8006e3a:	0752      	lsls	r2, r2, #29
 8006e3c:	d5d5      	bpl.n	8006dea <UART_WaitOnFlagUntilTimeout+0xa>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006e3e:	2280      	movs	r2, #128	@ 0x80
 8006e40:	69d9      	ldr	r1, [r3, #28]
 8006e42:	0112      	lsls	r2, r2, #4
 8006e44:	4211      	tst	r1, r2
 8006e46:	d0d0      	beq.n	8006dea <UART_WaitOnFlagUntilTimeout+0xa>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006e48:	621a      	str	r2, [r3, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006e4a:	681a      	ldr	r2, [r3, #0]
 8006e4c:	4906      	ldr	r1, [pc, #24]	@ (8006e68 <UART_WaitOnFlagUntilTimeout+0x88>)
 8006e4e:	400a      	ands	r2, r1
 8006e50:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e52:	689a      	ldr	r2, [r3, #8]
 8006e54:	31a3      	adds	r1, #163	@ 0xa3
 8006e56:	31ff      	adds	r1, #255	@ 0xff
 8006e58:	438a      	bics	r2, r1
 8006e5a:	609a      	str	r2, [r3, #8]
          huart->gState = HAL_UART_STATE_READY;
 8006e5c:	2320      	movs	r3, #32
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006e5e:	1d22      	adds	r2, r4, #4
          huart->gState = HAL_UART_STATE_READY;
 8006e60:	67a3      	str	r3, [r4, #120]	@ 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006e62:	67e3      	str	r3, [r4, #124]	@ 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006e64:	67d3      	str	r3, [r2, #124]	@ 0x7c
          return HAL_TIMEOUT;
 8006e66:	e7e2      	b.n	8006e2e <UART_WaitOnFlagUntilTimeout+0x4e>
 8006e68:	fffffe5f 	.word	0xfffffe5f

08006e6c <UART_CheckIdleState>:
{
 8006e6c:	b573      	push	{r0, r1, r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e6e:	2600      	movs	r6, #0
{
 8006e70:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e72:	1d03      	adds	r3, r0, #4
 8006e74:	67de      	str	r6, [r3, #124]	@ 0x7c
  tickstart = HAL_GetTick();
 8006e76:	f7fc fe02 	bl	8003a7e <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006e7a:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8006e7c:	0005      	movs	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	071b      	lsls	r3, r3, #28
 8006e82:	d416      	bmi.n	8006eb2 <UART_CheckIdleState+0x46>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006e84:	6823      	ldr	r3, [r4, #0]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	075b      	lsls	r3, r3, #29
 8006e8a:	d50a      	bpl.n	8006ea2 <UART_CheckIdleState+0x36>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006e8c:	2180      	movs	r1, #128	@ 0x80
 8006e8e:	4b0f      	ldr	r3, [pc, #60]	@ (8006ecc <UART_CheckIdleState+0x60>)
 8006e90:	2200      	movs	r2, #0
 8006e92:	9300      	str	r3, [sp, #0]
 8006e94:	0020      	movs	r0, r4
 8006e96:	002b      	movs	r3, r5
 8006e98:	03c9      	lsls	r1, r1, #15
 8006e9a:	f7ff ffa1 	bl	8006de0 <UART_WaitOnFlagUntilTimeout>
 8006e9e:	2800      	cmp	r0, #0
 8006ea0:	d112      	bne.n	8006ec8 <UART_CheckIdleState+0x5c>
  huart->gState = HAL_UART_STATE_READY;
 8006ea2:	2320      	movs	r3, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ea4:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8006ea6:	67a3      	str	r3, [r4, #120]	@ 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006ea8:	67e3      	str	r3, [r4, #124]	@ 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006eaa:	6620      	str	r0, [r4, #96]	@ 0x60
  __HAL_UNLOCK(huart);
 8006eac:	3474      	adds	r4, #116	@ 0x74
 8006eae:	7020      	strb	r0, [r4, #0]
  return HAL_OK;
 8006eb0:	e00b      	b.n	8006eca <UART_CheckIdleState+0x5e>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006eb2:	2180      	movs	r1, #128	@ 0x80
 8006eb4:	4b05      	ldr	r3, [pc, #20]	@ (8006ecc <UART_CheckIdleState+0x60>)
 8006eb6:	0032      	movs	r2, r6
 8006eb8:	9300      	str	r3, [sp, #0]
 8006eba:	0389      	lsls	r1, r1, #14
 8006ebc:	0003      	movs	r3, r0
 8006ebe:	0020      	movs	r0, r4
 8006ec0:	f7ff ff8e 	bl	8006de0 <UART_WaitOnFlagUntilTimeout>
 8006ec4:	2800      	cmp	r0, #0
 8006ec6:	d0dd      	beq.n	8006e84 <UART_CheckIdleState+0x18>
      return HAL_TIMEOUT;
 8006ec8:	2003      	movs	r0, #3
}
 8006eca:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 8006ecc:	01ffffff 	.word	0x01ffffff

08006ed0 <HAL_UART_Init>:
{
 8006ed0:	b510      	push	{r4, lr}
 8006ed2:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 8006ed4:	d101      	bne.n	8006eda <HAL_UART_Init+0xa>
    return HAL_ERROR;
 8006ed6:	2001      	movs	r0, #1
}
 8006ed8:	bd10      	pop	{r4, pc}
  if (huart->gState == HAL_UART_STATE_RESET)
 8006eda:	6f83      	ldr	r3, [r0, #120]	@ 0x78
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d104      	bne.n	8006eea <HAL_UART_Init+0x1a>
    huart->Lock = HAL_UNLOCKED;
 8006ee0:	0002      	movs	r2, r0
 8006ee2:	3274      	adds	r2, #116	@ 0x74
 8006ee4:	7013      	strb	r3, [r2, #0]
    HAL_UART_MspInit(huart);
 8006ee6:	f7fc fe29 	bl	8003b3c <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8006eea:	2324      	movs	r3, #36	@ 0x24
  __HAL_UART_DISABLE(huart);
 8006eec:	2101      	movs	r1, #1
 8006eee:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8006ef0:	67a3      	str	r3, [r4, #120]	@ 0x78
  __HAL_UART_DISABLE(huart);
 8006ef2:	6813      	ldr	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006ef4:	0020      	movs	r0, r4
  __HAL_UART_DISABLE(huart);
 8006ef6:	438b      	bics	r3, r1
 8006ef8:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006efa:	f7ff fdfb 	bl	8006af4 <UART_SetConfig>
 8006efe:	2801      	cmp	r0, #1
 8006f00:	d0e9      	beq.n	8006ed6 <HAL_UART_Init+0x6>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006f02:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d002      	beq.n	8006f0e <HAL_UART_Init+0x3e>
    UART_AdvFeatureConfig(huart);
 8006f08:	0020      	movs	r0, r4
 8006f0a:	f7ff ff01 	bl	8006d10 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006f0e:	6823      	ldr	r3, [r4, #0]
 8006f10:	4907      	ldr	r1, [pc, #28]	@ (8006f30 <HAL_UART_Init+0x60>)
 8006f12:	685a      	ldr	r2, [r3, #4]
  return (UART_CheckIdleState(huart));
 8006f14:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006f16:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006f18:	212a      	movs	r1, #42	@ 0x2a
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006f1a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006f1c:	689a      	ldr	r2, [r3, #8]
 8006f1e:	438a      	bics	r2, r1
 8006f20:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8006f22:	2201      	movs	r2, #1
 8006f24:	6819      	ldr	r1, [r3, #0]
 8006f26:	430a      	orrs	r2, r1
 8006f28:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8006f2a:	f7ff ff9f 	bl	8006e6c <UART_CheckIdleState>
 8006f2e:	e7d3      	b.n	8006ed8 <HAL_UART_Init+0x8>
 8006f30:	ffffb7ff 	.word	0xffffb7ff

08006f34 <UART_Start_Receive_IT>:
  huart->RxXferSize  = Size;
 8006f34:	0003      	movs	r3, r0
 8006f36:	3358      	adds	r3, #88	@ 0x58
{
 8006f38:	b510      	push	{r4, lr}
  huart->pRxBuffPtr  = pData;
 8006f3a:	6541      	str	r1, [r0, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8006f3c:	801a      	strh	r2, [r3, #0]
  huart->RxXferCount = Size;
 8006f3e:	805a      	strh	r2, [r3, #2]
  UART_MASK_COMPUTATION(huart);
 8006f40:	2380      	movs	r3, #128	@ 0x80
 8006f42:	6881      	ldr	r1, [r0, #8]
 8006f44:	015b      	lsls	r3, r3, #5
 8006f46:	4299      	cmp	r1, r3
 8006f48:	d128      	bne.n	8006f9c <UART_Start_Receive_IT+0x68>
 8006f4a:	6903      	ldr	r3, [r0, #16]
 8006f4c:	1e5a      	subs	r2, r3, #1
 8006f4e:	4193      	sbcs	r3, r2
 8006f50:	22ff      	movs	r2, #255	@ 0xff
 8006f52:	425b      	negs	r3, r3
 8006f54:	4393      	bics	r3, r2
 8006f56:	4a1b      	ldr	r2, [pc, #108]	@ (8006fc4 <UART_Start_Receive_IT+0x90>)
 8006f58:	189b      	adds	r3, r3, r2
 8006f5a:	0002      	movs	r2, r0
 8006f5c:	325c      	adds	r2, #92	@ 0x5c
 8006f5e:	8013      	strh	r3, [r2, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f60:	2200      	movs	r2, #0
 8006f62:	1d03      	adds	r3, r0, #4
 8006f64:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006f66:	2322      	movs	r3, #34	@ 0x22
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f68:	6802      	ldr	r2, [r0, #0]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006f6a:	67c3      	str	r3, [r0, #124]	@ 0x7c
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f6c:	6894      	ldr	r4, [r2, #8]
 8006f6e:	3b21      	subs	r3, #33	@ 0x21
 8006f70:	4323      	orrs	r3, r4
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006f72:	2480      	movs	r4, #128	@ 0x80
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f74:	6093      	str	r3, [r2, #8]
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006f76:	0164      	lsls	r4, r4, #5
    huart->RxISR = UART_RxISR_8BIT;
 8006f78:	4b13      	ldr	r3, [pc, #76]	@ (8006fc8 <UART_Start_Receive_IT+0x94>)
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006f7a:	42a1      	cmp	r1, r4
 8006f7c:	d103      	bne.n	8006f86 <UART_Start_Receive_IT+0x52>
 8006f7e:	6901      	ldr	r1, [r0, #16]
 8006f80:	2900      	cmp	r1, #0
 8006f82:	d100      	bne.n	8006f86 <UART_Start_Receive_IT+0x52>
    huart->RxISR = UART_RxISR_16BIT;
 8006f84:	4b11      	ldr	r3, [pc, #68]	@ (8006fcc <UART_Start_Receive_IT+0x98>)
 8006f86:	6643      	str	r3, [r0, #100]	@ 0x64
  __HAL_UNLOCK(huart);
 8006f88:	0003      	movs	r3, r0
 8006f8a:	2000      	movs	r0, #0
 8006f8c:	3374      	adds	r3, #116	@ 0x74
 8006f8e:	7018      	strb	r0, [r3, #0]
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8006f90:	2390      	movs	r3, #144	@ 0x90
 8006f92:	6811      	ldr	r1, [r2, #0]
 8006f94:	005b      	lsls	r3, r3, #1
 8006f96:	430b      	orrs	r3, r1
 8006f98:	6013      	str	r3, [r2, #0]
}
 8006f9a:	bd10      	pop	{r4, pc}
  UART_MASK_COMPUTATION(huart);
 8006f9c:	2900      	cmp	r1, #0
 8006f9e:	d105      	bne.n	8006fac <UART_Start_Receive_IT+0x78>
 8006fa0:	6902      	ldr	r2, [r0, #16]
 8006fa2:	237f      	movs	r3, #127	@ 0x7f
 8006fa4:	2a00      	cmp	r2, #0
 8006fa6:	d1d8      	bne.n	8006f5a <UART_Start_Receive_IT+0x26>
 8006fa8:	3380      	adds	r3, #128	@ 0x80
 8006faa:	e7d6      	b.n	8006f5a <UART_Start_Receive_IT+0x26>
 8006fac:	2280      	movs	r2, #128	@ 0x80
 8006fae:	2300      	movs	r3, #0
 8006fb0:	0552      	lsls	r2, r2, #21
 8006fb2:	4291      	cmp	r1, r2
 8006fb4:	d1d1      	bne.n	8006f5a <UART_Start_Receive_IT+0x26>
 8006fb6:	6902      	ldr	r2, [r0, #16]
 8006fb8:	333f      	adds	r3, #63	@ 0x3f
 8006fba:	2a00      	cmp	r2, #0
 8006fbc:	d1cd      	bne.n	8006f5a <UART_Start_Receive_IT+0x26>
 8006fbe:	3340      	adds	r3, #64	@ 0x40
 8006fc0:	e7cb      	b.n	8006f5a <UART_Start_Receive_IT+0x26>
 8006fc2:	46c0      	nop			@ (mov r8, r8)
 8006fc4:	000001ff 	.word	0x000001ff
 8006fc8:	080069f1 	.word	0x080069f1
 8006fcc:	08006a75 	.word	0x08006a75

08006fd0 <HAL_UART_Receive_IT>:
{
 8006fd0:	b570      	push	{r4, r5, r6, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 8006fd2:	6fc4      	ldr	r4, [r0, #124]	@ 0x7c
{
 8006fd4:	0003      	movs	r3, r0
    __HAL_LOCK(huart);
 8006fd6:	2002      	movs	r0, #2
  if (huart->RxState == HAL_UART_STATE_READY)
 8006fd8:	2c20      	cmp	r4, #32
 8006fda:	d129      	bne.n	8007030 <HAL_UART_Receive_IT+0x60>
      return HAL_ERROR;
 8006fdc:	3801      	subs	r0, #1
    if ((pData == NULL) || (Size == 0U))
 8006fde:	2900      	cmp	r1, #0
 8006fe0:	d026      	beq.n	8007030 <HAL_UART_Receive_IT+0x60>
 8006fe2:	2a00      	cmp	r2, #0
 8006fe4:	d024      	beq.n	8007030 <HAL_UART_Receive_IT+0x60>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006fe6:	2080      	movs	r0, #128	@ 0x80
 8006fe8:	689c      	ldr	r4, [r3, #8]
 8006fea:	0140      	lsls	r0, r0, #5
 8006fec:	4284      	cmp	r4, r0
 8006fee:	d106      	bne.n	8006ffe <HAL_UART_Receive_IT+0x2e>
 8006ff0:	6918      	ldr	r0, [r3, #16]
 8006ff2:	2800      	cmp	r0, #0
 8006ff4:	d103      	bne.n	8006ffe <HAL_UART_Receive_IT+0x2e>
      if ((((uint32_t)pData) & 1U) != 0U)
 8006ff6:	2401      	movs	r4, #1
      return HAL_ERROR;
 8006ff8:	0020      	movs	r0, r4
      if ((((uint32_t)pData) & 1U) != 0U)
 8006ffa:	4221      	tst	r1, r4
 8006ffc:	d118      	bne.n	8007030 <HAL_UART_Receive_IT+0x60>
    __HAL_LOCK(huart);
 8006ffe:	001c      	movs	r4, r3
 8007000:	3474      	adds	r4, #116	@ 0x74
 8007002:	7825      	ldrb	r5, [r4, #0]
 8007004:	2002      	movs	r0, #2
 8007006:	2d01      	cmp	r5, #1
 8007008:	d012      	beq.n	8007030 <HAL_UART_Receive_IT+0x60>
 800700a:	3801      	subs	r0, #1
 800700c:	7020      	strb	r0, [r4, #0]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800700e:	2000      	movs	r0, #0
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007010:	4c08      	ldr	r4, [pc, #32]	@ (8007034 <HAL_UART_Receive_IT+0x64>)
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007012:	6618      	str	r0, [r3, #96]	@ 0x60
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007014:	6818      	ldr	r0, [r3, #0]
 8007016:	42a0      	cmp	r0, r4
 8007018:	d007      	beq.n	800702a <HAL_UART_Receive_IT+0x5a>
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800701a:	6844      	ldr	r4, [r0, #4]
 800701c:	0224      	lsls	r4, r4, #8
 800701e:	d504      	bpl.n	800702a <HAL_UART_Receive_IT+0x5a>
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007020:	2480      	movs	r4, #128	@ 0x80
 8007022:	6805      	ldr	r5, [r0, #0]
 8007024:	04e4      	lsls	r4, r4, #19
 8007026:	432c      	orrs	r4, r5
 8007028:	6004      	str	r4, [r0, #0]
    return(UART_Start_Receive_IT(huart, pData, Size));
 800702a:	0018      	movs	r0, r3
 800702c:	f7ff ff82 	bl	8006f34 <UART_Start_Receive_IT>
}
 8007030:	bd70      	pop	{r4, r5, r6, pc}
 8007032:	46c0      	nop			@ (mov r8, r8)
 8007034:	40004800 	.word	0x40004800

08007038 <HAL_UARTEx_WakeupCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007038:	4770      	bx	lr
	...

0800703c <HAL_UARTEx_StopModeWakeUpSourceConfig>:
  *          @arg @ref UART_WAKEUP_ON_STARTBIT
  *          @arg @ref UART_WAKEUP_ON_READDATA_NONEMPTY
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_StopModeWakeUpSourceConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 800703c:	b5f0      	push	{r4, r5, r6, r7, lr}
  assert_param(IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance));
  /* check the wake-up selection parameter */
  assert_param(IS_UART_WAKEUP_SELECTION(WakeUpSelection.WakeUpEvent));

  /* Process Locked */
  __HAL_LOCK(huart);
 800703e:	0005      	movs	r5, r0
{
 8007040:	b085      	sub	sp, #20
 8007042:	9102      	str	r1, [sp, #8]
 8007044:	9203      	str	r2, [sp, #12]
  __HAL_LOCK(huart);
 8007046:	3574      	adds	r5, #116	@ 0x74
 8007048:	782b      	ldrb	r3, [r5, #0]
{
 800704a:	0004      	movs	r4, r0
 800704c:	000f      	movs	r7, r1
  __HAL_LOCK(huart);
 800704e:	2002      	movs	r0, #2
{
 8007050:	ae02      	add	r6, sp, #8
  __HAL_LOCK(huart);
 8007052:	2b01      	cmp	r3, #1
 8007054:	d030      	beq.n	80070b8 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x7c>

  huart->gState = HAL_UART_STATE_BUSY;
 8007056:	2324      	movs	r3, #36	@ 0x24
  __HAL_LOCK(huart);
 8007058:	3801      	subs	r0, #1
 800705a:	7028      	strb	r0, [r5, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800705c:	67a3      	str	r3, [r4, #120]	@ 0x78

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800705e:	6823      	ldr	r3, [r4, #0]
 8007060:	6819      	ldr	r1, [r3, #0]
 8007062:	4381      	bics	r1, r0
 8007064:	6019      	str	r1, [r3, #0]

  /* Set the wake-up selection scheme */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 8007066:	6899      	ldr	r1, [r3, #8]
 8007068:	4815      	ldr	r0, [pc, #84]	@ (80070c0 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x84>)
 800706a:	4001      	ands	r1, r0
 800706c:	4339      	orrs	r1, r7
 800706e:	6099      	str	r1, [r3, #8]

  if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 8007070:	2f00      	cmp	r7, #0
 8007072:	d10c      	bne.n	800708e <HAL_UARTEx_StopModeWakeUpSourceConfig+0x52>
static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(WakeUpSelection.AddressLength));

  /* Set the USART address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 8007074:	2010      	movs	r0, #16
 8007076:	685a      	ldr	r2, [r3, #4]
 8007078:	79b1      	ldrb	r1, [r6, #6]
 800707a:	4382      	bics	r2, r0
 800707c:	88b0      	ldrh	r0, [r6, #4]

  /* Set the USART address node */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 800707e:	0609      	lsls	r1, r1, #24
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 8007080:	4302      	orrs	r2, r0
 8007082:	605a      	str	r2, [r3, #4]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 8007084:	685a      	ldr	r2, [r3, #4]
 8007086:	0212      	lsls	r2, r2, #8
 8007088:	0a12      	lsrs	r2, r2, #8
 800708a:	430a      	orrs	r2, r1
 800708c:	605a      	str	r2, [r3, #4]
  __HAL_UART_ENABLE(huart);
 800708e:	2201      	movs	r2, #1
 8007090:	6819      	ldr	r1, [r3, #0]
 8007092:	430a      	orrs	r2, r1
 8007094:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8007096:	f7fc fcf2 	bl	8003a7e <HAL_GetTick>
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800709a:	2180      	movs	r1, #128	@ 0x80
 800709c:	4a09      	ldr	r2, [pc, #36]	@ (80070c4 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x88>)
  tickstart = HAL_GetTick();
 800709e:	0003      	movs	r3, r0
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80070a0:	9200      	str	r2, [sp, #0]
 80070a2:	0020      	movs	r0, r4
 80070a4:	2200      	movs	r2, #0
 80070a6:	03c9      	lsls	r1, r1, #15
 80070a8:	f7ff fe9a 	bl	8006de0 <UART_WaitOnFlagUntilTimeout>
 80070ac:	2800      	cmp	r0, #0
 80070ae:	d105      	bne.n	80070bc <HAL_UARTEx_StopModeWakeUpSourceConfig+0x80>
    huart->gState = HAL_UART_STATE_READY;
 80070b0:	2320      	movs	r3, #32
 80070b2:	67a3      	str	r3, [r4, #120]	@ 0x78
  __HAL_UNLOCK(huart);
 80070b4:	2300      	movs	r3, #0
 80070b6:	702b      	strb	r3, [r5, #0]
}
 80070b8:	b005      	add	sp, #20
 80070ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
    status = HAL_TIMEOUT;
 80070bc:	2003      	movs	r0, #3
 80070be:	e7f9      	b.n	80070b4 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x78>
 80070c0:	ffcfffff 	.word	0xffcfffff
 80070c4:	01ffffff 	.word	0x01ffffff

080070c8 <HAL_UARTEx_EnableStopMode>:
  __HAL_LOCK(huart);
 80070c8:	0001      	movs	r1, r0
 80070ca:	2302      	movs	r3, #2
{
 80070cc:	b510      	push	{r4, lr}
  __HAL_LOCK(huart);
 80070ce:	3174      	adds	r1, #116	@ 0x74
 80070d0:	780c      	ldrb	r4, [r1, #0]
{
 80070d2:	0002      	movs	r2, r0
  __HAL_LOCK(huart);
 80070d4:	0018      	movs	r0, r3
 80070d6:	2c01      	cmp	r4, #1
 80070d8:	d005      	beq.n	80070e6 <HAL_UARTEx_EnableStopMode+0x1e>
  SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 80070da:	6812      	ldr	r2, [r2, #0]
 80070dc:	6810      	ldr	r0, [r2, #0]
 80070de:	4303      	orrs	r3, r0
  __HAL_UNLOCK(huart);
 80070e0:	2000      	movs	r0, #0
  SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 80070e2:	6013      	str	r3, [r2, #0]
  __HAL_UNLOCK(huart);
 80070e4:	7008      	strb	r0, [r1, #0]
}
 80070e6:	bd10      	pop	{r4, pc}

080070e8 <AES_CMAC_Init>:
            ( r )[i] = ( r )[i] ^ ( v )[i]; \
        }                                   \
    } while( 0 )

void AES_CMAC_Init( AES_CMAC_CTX* ctx )
{
 80070e8:	b510      	push	{r4, lr}
 80070ea:	0004      	movs	r4, r0
    memset1( ctx->X, 0, sizeof ctx->X );
 80070ec:	2210      	movs	r2, #16
 80070ee:	2100      	movs	r1, #0
 80070f0:	30f1      	adds	r0, #241	@ 0xf1
 80070f2:	f006 fb5c 	bl	800d7ae <memset1>
    ctx->M_n = 0;
 80070f6:	0023      	movs	r3, r4
 80070f8:	2100      	movs	r1, #0
 80070fa:	33fc      	adds	r3, #252	@ 0xfc
    memset1( ctx->rijndael.ksch, '\0', 240 );
 80070fc:	22f0      	movs	r2, #240	@ 0xf0
 80070fe:	0020      	movs	r0, r4
    ctx->M_n = 0;
 8007100:	6199      	str	r1, [r3, #24]
    memset1( ctx->rijndael.ksch, '\0', 240 );
 8007102:	f006 fb54 	bl	800d7ae <memset1>
}
 8007106:	bd10      	pop	{r4, pc}

08007108 <AES_CMAC_SetKey>:

void AES_CMAC_SetKey( AES_CMAC_CTX* ctx, const uint8_t key[AES_CMAC_KEY_LENGTH] )
{
 8007108:	b510      	push	{r4, lr}
 800710a:	0002      	movs	r2, r0
 800710c:	0008      	movs	r0, r1
    lorawan_aes_set_key( key, AES_CMAC_KEY_LENGTH, &ctx->rijndael );
 800710e:	2110      	movs	r1, #16
 8007110:	f000 f9a0 	bl	8007454 <lorawan_aes_set_key>
}
 8007114:	bd10      	pop	{r4, pc}

08007116 <AES_CMAC_Update>:
void AES_CMAC_Update( AES_CMAC_CTX* ctx, const uint8_t* data, uint32_t len )
{
    uint32_t mlen;
    uint8_t  in[16];

    if( ctx->M_n > 0 )
 8007116:	0003      	movs	r3, r0
{
 8007118:	b5f0      	push	{r4, r5, r6, r7, lr}
 800711a:	0004      	movs	r4, r0
    if( ctx->M_n > 0 )
 800711c:	33fc      	adds	r3, #252	@ 0xfc
 800711e:	6998      	ldr	r0, [r3, #24]
    {
        mlen = MIN( 16 - ctx->M_n, len );
        memcpy1( ctx->M_last + ctx->M_n, data, mlen );
 8007120:	1ca3      	adds	r3, r4, #2
{
 8007122:	b087      	sub	sp, #28
        memcpy1( ctx->M_last + ctx->M_n, data, mlen );
 8007124:	33ff      	adds	r3, #255	@ 0xff
{
 8007126:	000e      	movs	r6, r1
 8007128:	0015      	movs	r5, r2
        memcpy1( ctx->M_last + ctx->M_n, data, mlen );
 800712a:	9301      	str	r3, [sp, #4]
    if( ctx->M_n > 0 )
 800712c:	2800      	cmp	r0, #0
 800712e:	d036      	beq.n	800719e <AES_CMAC_Update+0x88>
        mlen = MIN( 16 - ctx->M_n, len );
 8007130:	2710      	movs	r7, #16
 8007132:	1a3f      	subs	r7, r7, r0
 8007134:	9700      	str	r7, [sp, #0]
 8007136:	4297      	cmp	r7, r2
 8007138:	d900      	bls.n	800713c <AES_CMAC_Update+0x26>
 800713a:	9200      	str	r2, [sp, #0]
        memcpy1( ctx->M_last + ctx->M_n, data, mlen );
 800713c:	466b      	mov	r3, sp
 800713e:	881a      	ldrh	r2, [r3, #0]
 8007140:	1ca3      	adds	r3, r4, #2
 8007142:	33ff      	adds	r3, #255	@ 0xff
 8007144:	0031      	movs	r1, r6
 8007146:	1818      	adds	r0, r3, r0
 8007148:	f006 fb1c 	bl	800d784 <memcpy1>
        ctx->M_n += mlen;
 800714c:	0022      	movs	r2, r4
 800714e:	32fc      	adds	r2, #252	@ 0xfc
 8007150:	6993      	ldr	r3, [r2, #24]
 8007152:	9900      	ldr	r1, [sp, #0]
 8007154:	18cb      	adds	r3, r1, r3
 8007156:	6193      	str	r3, [r2, #24]
        if( ctx->M_n < 16 || len == mlen )
 8007158:	2b0f      	cmp	r3, #15
 800715a:	d929      	bls.n	80071b0 <AES_CMAC_Update+0x9a>
 800715c:	42af      	cmp	r7, r5
 800715e:	d227      	bcs.n	80071b0 <AES_CMAC_Update+0x9a>
 8007160:	0023      	movs	r3, r4
 8007162:	1ca1      	adds	r1, r4, #2
 8007164:	33f1      	adds	r3, #241	@ 0xf1
 8007166:	31ff      	adds	r1, #255	@ 0xff
            return;
        XOR( ctx->M_last, ctx->X );
 8007168:	781a      	ldrb	r2, [r3, #0]
 800716a:	7c18      	ldrb	r0, [r3, #16]
 800716c:	4042      	eors	r2, r0
 800716e:	701a      	strb	r2, [r3, #0]
 8007170:	3301      	adds	r3, #1
 8007172:	428b      	cmp	r3, r1
 8007174:	d1f8      	bne.n	8007168 <AES_CMAC_Update+0x52>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 8007176:	0027      	movs	r7, r4
 8007178:	37f1      	adds	r7, #241	@ 0xf1
 800717a:	2210      	movs	r2, #16
 800717c:	0039      	movs	r1, r7
 800717e:	a802      	add	r0, sp, #8
 8007180:	f006 fb00 	bl	800d784 <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 8007184:	a902      	add	r1, sp, #8
 8007186:	0022      	movs	r2, r4
 8007188:	0008      	movs	r0, r1
 800718a:	f000 f9e5 	bl	8007558 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 800718e:	2210      	movs	r2, #16
 8007190:	0038      	movs	r0, r7
 8007192:	a902      	add	r1, sp, #8
 8007194:	f006 faf6 	bl	800d784 <memcpy1>

        data += mlen;
 8007198:	9b00      	ldr	r3, [sp, #0]
 800719a:	18f6      	adds	r6, r6, r3
        len -= mlen;
 800719c:	1aed      	subs	r5, r5, r3
    }
    while( len > 16 )
 800719e:	2d10      	cmp	r5, #16
 80071a0:	d808      	bhi.n	80071b4 <AES_CMAC_Update+0x9e>

        data += 16;
        len -= 16;
    }
    /* potential last block, save it */
    memcpy1( ctx->M_last, data, len );
 80071a2:	0031      	movs	r1, r6
 80071a4:	9801      	ldr	r0, [sp, #4]
 80071a6:	b2aa      	uxth	r2, r5
    ctx->M_n = len;
 80071a8:	34fc      	adds	r4, #252	@ 0xfc
    memcpy1( ctx->M_last, data, len );
 80071aa:	f006 faeb 	bl	800d784 <memcpy1>
    ctx->M_n = len;
 80071ae:	61a5      	str	r5, [r4, #24]
}
 80071b0:	b007      	add	sp, #28
 80071b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80071b4:	0023      	movs	r3, r4
 80071b6:	0032      	movs	r2, r6
 80071b8:	1ca0      	adds	r0, r4, #2
 80071ba:	33f1      	adds	r3, #241	@ 0xf1
 80071bc:	30ff      	adds	r0, #255	@ 0xff
        XOR( data, ctx->X );
 80071be:	7819      	ldrb	r1, [r3, #0]
 80071c0:	7817      	ldrb	r7, [r2, #0]
 80071c2:	3201      	adds	r2, #1
 80071c4:	4079      	eors	r1, r7
 80071c6:	7019      	strb	r1, [r3, #0]
 80071c8:	3301      	adds	r3, #1
 80071ca:	4283      	cmp	r3, r0
 80071cc:	d1f7      	bne.n	80071be <AES_CMAC_Update+0xa8>
        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 80071ce:	0027      	movs	r7, r4
 80071d0:	37f1      	adds	r7, #241	@ 0xf1
 80071d2:	2210      	movs	r2, #16
 80071d4:	0039      	movs	r1, r7
 80071d6:	a802      	add	r0, sp, #8
 80071d8:	f006 fad4 	bl	800d784 <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 80071dc:	a902      	add	r1, sp, #8
 80071de:	0022      	movs	r2, r4
 80071e0:	0008      	movs	r0, r1
 80071e2:	f000 f9b9 	bl	8007558 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 80071e6:	2210      	movs	r2, #16
 80071e8:	0038      	movs	r0, r7
 80071ea:	a902      	add	r1, sp, #8
 80071ec:	f006 faca 	bl	800d784 <memcpy1>
        data += 16;
 80071f0:	3610      	adds	r6, #16
        len -= 16;
 80071f2:	3d10      	subs	r5, #16
 80071f4:	e7d3      	b.n	800719e <AES_CMAC_Update+0x88>

080071f6 <AES_CMAC_Final>:

void AES_CMAC_Final( uint8_t digest[AES_CMAC_DIGEST_LENGTH], AES_CMAC_CTX* ctx )
{
 80071f6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80071f8:	000c      	movs	r4, r1
 80071fa:	b08b      	sub	sp, #44	@ 0x2c
    uint8_t K[16];
    uint8_t in[16];
    /* generate subkey K1 */
    memset1( K, '\0', 16 );
 80071fc:	2210      	movs	r2, #16
 80071fe:	2100      	movs	r1, #0
{
 8007200:	9001      	str	r0, [sp, #4]
    memset1( K, '\0', 16 );
 8007202:	a802      	add	r0, sp, #8
 8007204:	f006 fad3 	bl	800d7ae <memset1>

    lorawan_aes_encrypt( K, K, &ctx->rijndael );
 8007208:	a902      	add	r1, sp, #8
 800720a:	0022      	movs	r2, r4
 800720c:	0008      	movs	r0, r1
 800720e:	f000 f9a3 	bl	8007558 <lorawan_aes_encrypt>

    if( K[0] & 0x80 )
 8007212:	ab02      	add	r3, sp, #8
 8007214:	781a      	ldrb	r2, [r3, #0]
    {
        LSHIFT( K, K );
        K[15] ^= 0x87;
    }
    else
        LSHIFT( K, K );
 8007216:	2100      	movs	r1, #0
    if( K[0] & 0x80 )
 8007218:	2a7f      	cmp	r2, #127	@ 0x7f
 800721a:	d940      	bls.n	800729e <AES_CMAC_Final+0xa8>
        LSHIFT( K, K );
 800721c:	7818      	ldrb	r0, [r3, #0]
 800721e:	785a      	ldrb	r2, [r3, #1]
 8007220:	0040      	lsls	r0, r0, #1
 8007222:	09d2      	lsrs	r2, r2, #7
 8007224:	4302      	orrs	r2, r0
 8007226:	3101      	adds	r1, #1
 8007228:	701a      	strb	r2, [r3, #0]
 800722a:	3301      	adds	r3, #1
 800722c:	290f      	cmp	r1, #15
 800722e:	d1f5      	bne.n	800721c <AES_CMAC_Final+0x26>
 8007230:	ab02      	add	r3, sp, #8
 8007232:	7bda      	ldrb	r2, [r3, #15]
        K[15] ^= 0x87;
 8007234:	2379      	movs	r3, #121	@ 0x79
        LSHIFT( K, K );
 8007236:	0052      	lsls	r2, r2, #1
        K[15] ^= 0x87;
 8007238:	425b      	negs	r3, r3
 800723a:	4053      	eors	r3, r2

    if( ctx->M_n == 16 )
 800723c:	0026      	movs	r6, r4
 800723e:	36fc      	adds	r6, #252	@ 0xfc
 8007240:	69b0      	ldr	r0, [r6, #24]
        LSHIFT( K, K );
 8007242:	b2db      	uxtb	r3, r3
        K[15] ^= 0x87;
 8007244:	aa02      	add	r2, sp, #8
 8007246:	73d3      	strb	r3, [r2, #15]
    if( ctx->M_n == 16 )
 8007248:	2810      	cmp	r0, #16
 800724a:	d136      	bne.n	80072ba <AES_CMAC_Final+0xc4>
 800724c:	0020      	movs	r0, r4
 800724e:	1ca3      	adds	r3, r4, #2
 8007250:	3012      	adds	r0, #18
 8007252:	33ff      	adds	r3, #255	@ 0xff
 8007254:	30ff      	adds	r0, #255	@ 0xff
    {
        /* last block was a complete block */
        XOR( K, ctx->M_last );
 8007256:	7819      	ldrb	r1, [r3, #0]
 8007258:	7815      	ldrb	r5, [r2, #0]
 800725a:	3201      	adds	r2, #1
 800725c:	4069      	eors	r1, r5
 800725e:	7019      	strb	r1, [r3, #0]
 8007260:	3301      	adds	r3, #1
 8007262:	4298      	cmp	r0, r3
 8007264:	d1f7      	bne.n	8007256 <AES_CMAC_Final+0x60>
        while( ++ctx->M_n < 16 )
            ctx->M_last[ctx->M_n] = 0;

        XOR( K, ctx->M_last );
    }
    XOR( ctx->M_last, ctx->X );
 8007266:	0023      	movs	r3, r4
 8007268:	33f1      	adds	r3, #241	@ 0xf1
 800726a:	0019      	movs	r1, r3
 800726c:	1ca0      	adds	r0, r4, #2
 800726e:	30ff      	adds	r0, #255	@ 0xff
 8007270:	781a      	ldrb	r2, [r3, #0]
 8007272:	7c1d      	ldrb	r5, [r3, #16]
 8007274:	406a      	eors	r2, r5
 8007276:	701a      	strb	r2, [r3, #0]
 8007278:	3301      	adds	r3, #1
 800727a:	4283      	cmp	r3, r0
 800727c:	d1f8      	bne.n	8007270 <AES_CMAC_Final+0x7a>

    memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800727e:	a806      	add	r0, sp, #24
 8007280:	2210      	movs	r2, #16
 8007282:	f006 fa7f 	bl	800d784 <memcpy1>
    lorawan_aes_encrypt( in, digest, &ctx->rijndael );
 8007286:	0022      	movs	r2, r4
 8007288:	9901      	ldr	r1, [sp, #4]
 800728a:	a806      	add	r0, sp, #24
 800728c:	f000 f964 	bl	8007558 <lorawan_aes_encrypt>
    memset1( K, 0, sizeof K );
 8007290:	2210      	movs	r2, #16
 8007292:	2100      	movs	r1, #0
 8007294:	a802      	add	r0, sp, #8
 8007296:	f006 fa8a 	bl	800d7ae <memset1>
}
 800729a:	b00b      	add	sp, #44	@ 0x2c
 800729c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        LSHIFT( K, K );
 800729e:	7818      	ldrb	r0, [r3, #0]
 80072a0:	785a      	ldrb	r2, [r3, #1]
 80072a2:	0040      	lsls	r0, r0, #1
 80072a4:	09d2      	lsrs	r2, r2, #7
 80072a6:	4302      	orrs	r2, r0
 80072a8:	3101      	adds	r1, #1
 80072aa:	701a      	strb	r2, [r3, #0]
 80072ac:	3301      	adds	r3, #1
 80072ae:	290f      	cmp	r1, #15
 80072b0:	d1f5      	bne.n	800729e <AES_CMAC_Final+0xa8>
 80072b2:	ab02      	add	r3, sp, #8
 80072b4:	7bdb      	ldrb	r3, [r3, #15]
 80072b6:	005b      	lsls	r3, r3, #1
 80072b8:	e7c0      	b.n	800723c <AES_CMAC_Final+0x46>
        if( K[0] & 0x80 )
 80072ba:	2200      	movs	r2, #0
            LSHIFT( K, K );
 80072bc:	2100      	movs	r1, #0
        if( K[0] & 0x80 )
 80072be:	ab02      	add	r3, sp, #8
 80072c0:	569a      	ldrsb	r2, [r3, r2]
 80072c2:	428a      	cmp	r2, r1
 80072c4:	da34      	bge.n	8007330 <AES_CMAC_Final+0x13a>
            LSHIFT( K, K );
 80072c6:	781d      	ldrb	r5, [r3, #0]
 80072c8:	785a      	ldrb	r2, [r3, #1]
 80072ca:	006d      	lsls	r5, r5, #1
 80072cc:	09d2      	lsrs	r2, r2, #7
 80072ce:	432a      	orrs	r2, r5
 80072d0:	3101      	adds	r1, #1
 80072d2:	701a      	strb	r2, [r3, #0]
 80072d4:	3301      	adds	r3, #1
 80072d6:	290f      	cmp	r1, #15
 80072d8:	d1f5      	bne.n	80072c6 <AES_CMAC_Final+0xd0>
 80072da:	ab02      	add	r3, sp, #8
 80072dc:	7bda      	ldrb	r2, [r3, #15]
            K[15] ^= 0x87;
 80072de:	2379      	movs	r3, #121	@ 0x79
            LSHIFT( K, K );
 80072e0:	0052      	lsls	r2, r2, #1
            K[15] ^= 0x87;
 80072e2:	425b      	negs	r3, r3
 80072e4:	4053      	eors	r3, r2
            LSHIFT( K, K );
 80072e6:	b2db      	uxtb	r3, r3
            K[15] ^= 0x87;
 80072e8:	aa02      	add	r2, sp, #8
 80072ea:	73d3      	strb	r3, [r2, #15]
        ctx->M_last[ctx->M_n] = 0x80;
 80072ec:	2280      	movs	r2, #128	@ 0x80
 80072ee:	1823      	adds	r3, r4, r0
 80072f0:	33ff      	adds	r3, #255	@ 0xff
            ctx->M_last[ctx->M_n] = 0;
 80072f2:	1c47      	adds	r7, r0, #1
 80072f4:	2500      	movs	r5, #0
        ctx->M_last[ctx->M_n] = 0x80;
 80072f6:	709a      	strb	r2, [r3, #2]
            ctx->M_last[ctx->M_n] = 0;
 80072f8:	2f10      	cmp	r7, #16
 80072fa:	d801      	bhi.n	8007300 <AES_CMAC_Final+0x10a>
 80072fc:	350f      	adds	r5, #15
 80072fe:	1a2d      	subs	r5, r5, r0
 8007300:	3003      	adds	r0, #3
 8007302:	30ff      	adds	r0, #255	@ 0xff
 8007304:	002a      	movs	r2, r5
 8007306:	2100      	movs	r1, #0
 8007308:	1820      	adds	r0, r4, r0
 800730a:	f008 fd51 	bl	800fdb0 <memset>
 800730e:	0020      	movs	r0, r4
        while( ++ctx->M_n < 16 )
 8007310:	19ed      	adds	r5, r5, r7
 8007312:	1ca3      	adds	r3, r4, #2
 8007314:	3012      	adds	r0, #18
 8007316:	61b5      	str	r5, [r6, #24]
 8007318:	33ff      	adds	r3, #255	@ 0xff
 800731a:	aa02      	add	r2, sp, #8
 800731c:	30ff      	adds	r0, #255	@ 0xff
        XOR( K, ctx->M_last );
 800731e:	7819      	ldrb	r1, [r3, #0]
 8007320:	7815      	ldrb	r5, [r2, #0]
 8007322:	3201      	adds	r2, #1
 8007324:	4069      	eors	r1, r5
 8007326:	7019      	strb	r1, [r3, #0]
 8007328:	3301      	adds	r3, #1
 800732a:	4298      	cmp	r0, r3
 800732c:	d1f7      	bne.n	800731e <AES_CMAC_Final+0x128>
 800732e:	e79a      	b.n	8007266 <AES_CMAC_Final+0x70>
            LSHIFT( K, K );
 8007330:	781d      	ldrb	r5, [r3, #0]
 8007332:	785a      	ldrb	r2, [r3, #1]
 8007334:	006d      	lsls	r5, r5, #1
 8007336:	09d2      	lsrs	r2, r2, #7
 8007338:	432a      	orrs	r2, r5
 800733a:	3101      	adds	r1, #1
 800733c:	701a      	strb	r2, [r3, #0]
 800733e:	3301      	adds	r3, #1
 8007340:	290f      	cmp	r1, #15
 8007342:	d1f5      	bne.n	8007330 <AES_CMAC_Final+0x13a>
 8007344:	ab02      	add	r3, sp, #8
 8007346:	7bdb      	ldrb	r3, [r3, #15]
 8007348:	005b      	lsls	r3, r3, #1
 800734a:	e7cc      	b.n	80072e6 <AES_CMAC_Final+0xf0>

0800734c <xor_block>:
    ((uint32_t*)d)[ 0] ^= ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] ^= ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] ^= ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] ^= ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] ^= ((uint8_t*)s)[ 0];
 800734c:	780a      	ldrb	r2, [r1, #0]
 800734e:	7803      	ldrb	r3, [r0, #0]
 8007350:	4053      	eors	r3, r2
 8007352:	7003      	strb	r3, [r0, #0]
    ((uint8_t*)d)[ 1] ^= ((uint8_t*)s)[ 1];
 8007354:	784a      	ldrb	r2, [r1, #1]
 8007356:	7843      	ldrb	r3, [r0, #1]
 8007358:	4053      	eors	r3, r2
 800735a:	7043      	strb	r3, [r0, #1]
    ((uint8_t*)d)[ 2] ^= ((uint8_t*)s)[ 2];
 800735c:	788a      	ldrb	r2, [r1, #2]
 800735e:	7883      	ldrb	r3, [r0, #2]
 8007360:	4053      	eors	r3, r2
 8007362:	7083      	strb	r3, [r0, #2]
    ((uint8_t*)d)[ 3] ^= ((uint8_t*)s)[ 3];
 8007364:	78ca      	ldrb	r2, [r1, #3]
 8007366:	78c3      	ldrb	r3, [r0, #3]
 8007368:	4053      	eors	r3, r2
 800736a:	70c3      	strb	r3, [r0, #3]
    ((uint8_t*)d)[ 4] ^= ((uint8_t*)s)[ 4];
 800736c:	790a      	ldrb	r2, [r1, #4]
 800736e:	7903      	ldrb	r3, [r0, #4]
 8007370:	4053      	eors	r3, r2
 8007372:	7103      	strb	r3, [r0, #4]
    ((uint8_t*)d)[ 5] ^= ((uint8_t*)s)[ 5];
 8007374:	794a      	ldrb	r2, [r1, #5]
 8007376:	7943      	ldrb	r3, [r0, #5]
 8007378:	4053      	eors	r3, r2
 800737a:	7143      	strb	r3, [r0, #5]
    ((uint8_t*)d)[ 6] ^= ((uint8_t*)s)[ 6];
 800737c:	798a      	ldrb	r2, [r1, #6]
 800737e:	7983      	ldrb	r3, [r0, #6]
 8007380:	4053      	eors	r3, r2
 8007382:	7183      	strb	r3, [r0, #6]
    ((uint8_t*)d)[ 7] ^= ((uint8_t*)s)[ 7];
 8007384:	79ca      	ldrb	r2, [r1, #7]
 8007386:	79c3      	ldrb	r3, [r0, #7]
 8007388:	4053      	eors	r3, r2
 800738a:	71c3      	strb	r3, [r0, #7]
    ((uint8_t*)d)[ 8] ^= ((uint8_t*)s)[ 8];
 800738c:	7a0a      	ldrb	r2, [r1, #8]
 800738e:	7a03      	ldrb	r3, [r0, #8]
 8007390:	4053      	eors	r3, r2
 8007392:	7203      	strb	r3, [r0, #8]
    ((uint8_t*)d)[ 9] ^= ((uint8_t*)s)[ 9];
 8007394:	7a4a      	ldrb	r2, [r1, #9]
 8007396:	7a43      	ldrb	r3, [r0, #9]
 8007398:	4053      	eors	r3, r2
 800739a:	7243      	strb	r3, [r0, #9]
    ((uint8_t*)d)[10] ^= ((uint8_t*)s)[10];
 800739c:	7a8a      	ldrb	r2, [r1, #10]
 800739e:	7a83      	ldrb	r3, [r0, #10]
 80073a0:	4053      	eors	r3, r2
 80073a2:	7283      	strb	r3, [r0, #10]
    ((uint8_t*)d)[11] ^= ((uint8_t*)s)[11];
 80073a4:	7aca      	ldrb	r2, [r1, #11]
 80073a6:	7ac3      	ldrb	r3, [r0, #11]
 80073a8:	4053      	eors	r3, r2
 80073aa:	72c3      	strb	r3, [r0, #11]
    ((uint8_t*)d)[12] ^= ((uint8_t*)s)[12];
 80073ac:	7b0a      	ldrb	r2, [r1, #12]
 80073ae:	7b03      	ldrb	r3, [r0, #12]
 80073b0:	4053      	eors	r3, r2
 80073b2:	7303      	strb	r3, [r0, #12]
    ((uint8_t*)d)[13] ^= ((uint8_t*)s)[13];
 80073b4:	7b4a      	ldrb	r2, [r1, #13]
 80073b6:	7b43      	ldrb	r3, [r0, #13]
 80073b8:	4053      	eors	r3, r2
 80073ba:	7343      	strb	r3, [r0, #13]
    ((uint8_t*)d)[14] ^= ((uint8_t*)s)[14];
 80073bc:	7b8a      	ldrb	r2, [r1, #14]
 80073be:	7b83      	ldrb	r3, [r0, #14]
 80073c0:	4053      	eors	r3, r2
 80073c2:	7383      	strb	r3, [r0, #14]
    ((uint8_t*)d)[15] ^= ((uint8_t*)s)[15];
 80073c4:	7bca      	ldrb	r2, [r1, #15]
 80073c6:	7bc3      	ldrb	r3, [r0, #15]
 80073c8:	4053      	eors	r3, r2
 80073ca:	73c3      	strb	r3, [r0, #15]
#endif
}
 80073cc:	4770      	bx	lr

080073ce <copy_and_key>:

static void copy_and_key( void *d, const void *s, const void *k )
{
 80073ce:	b510      	push	{r4, lr}
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0] ^ ((uint32_t*)k)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1] ^ ((uint32_t*)k)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2] ^ ((uint32_t*)k)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3] ^ ((uint32_t*)k)[ 3];
#elif 1
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0] ^ ((uint8_t*)k)[ 0];
 80073d0:	780b      	ldrb	r3, [r1, #0]
 80073d2:	7814      	ldrb	r4, [r2, #0]
 80073d4:	4063      	eors	r3, r4
 80073d6:	7003      	strb	r3, [r0, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1] ^ ((uint8_t*)k)[ 1];
 80073d8:	7854      	ldrb	r4, [r2, #1]
 80073da:	784b      	ldrb	r3, [r1, #1]
 80073dc:	4063      	eors	r3, r4
 80073de:	7043      	strb	r3, [r0, #1]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2] ^ ((uint8_t*)k)[ 2];
 80073e0:	7894      	ldrb	r4, [r2, #2]
 80073e2:	788b      	ldrb	r3, [r1, #2]
 80073e4:	4063      	eors	r3, r4
 80073e6:	7083      	strb	r3, [r0, #2]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3] ^ ((uint8_t*)k)[ 3];
 80073e8:	78d4      	ldrb	r4, [r2, #3]
 80073ea:	78cb      	ldrb	r3, [r1, #3]
 80073ec:	4063      	eors	r3, r4
 80073ee:	70c3      	strb	r3, [r0, #3]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4] ^ ((uint8_t*)k)[ 4];
 80073f0:	7914      	ldrb	r4, [r2, #4]
 80073f2:	790b      	ldrb	r3, [r1, #4]
 80073f4:	4063      	eors	r3, r4
 80073f6:	7103      	strb	r3, [r0, #4]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5] ^ ((uint8_t*)k)[ 5];
 80073f8:	7954      	ldrb	r4, [r2, #5]
 80073fa:	794b      	ldrb	r3, [r1, #5]
 80073fc:	4063      	eors	r3, r4
 80073fe:	7143      	strb	r3, [r0, #5]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6] ^ ((uint8_t*)k)[ 6];
 8007400:	7994      	ldrb	r4, [r2, #6]
 8007402:	798b      	ldrb	r3, [r1, #6]
 8007404:	4063      	eors	r3, r4
 8007406:	7183      	strb	r3, [r0, #6]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7] ^ ((uint8_t*)k)[ 7];
 8007408:	79d4      	ldrb	r4, [r2, #7]
 800740a:	79cb      	ldrb	r3, [r1, #7]
 800740c:	4063      	eors	r3, r4
 800740e:	71c3      	strb	r3, [r0, #7]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8] ^ ((uint8_t*)k)[ 8];
 8007410:	7a14      	ldrb	r4, [r2, #8]
 8007412:	7a0b      	ldrb	r3, [r1, #8]
 8007414:	4063      	eors	r3, r4
 8007416:	7203      	strb	r3, [r0, #8]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9] ^ ((uint8_t*)k)[ 9];
 8007418:	7a4b      	ldrb	r3, [r1, #9]
 800741a:	7a54      	ldrb	r4, [r2, #9]
 800741c:	4063      	eors	r3, r4
 800741e:	7243      	strb	r3, [r0, #9]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10] ^ ((uint8_t*)k)[10];
 8007420:	7a8b      	ldrb	r3, [r1, #10]
 8007422:	7a94      	ldrb	r4, [r2, #10]
 8007424:	4063      	eors	r3, r4
 8007426:	7283      	strb	r3, [r0, #10]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11] ^ ((uint8_t*)k)[11];
 8007428:	7ad4      	ldrb	r4, [r2, #11]
 800742a:	7acb      	ldrb	r3, [r1, #11]
 800742c:	4063      	eors	r3, r4
 800742e:	72c3      	strb	r3, [r0, #11]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12] ^ ((uint8_t*)k)[12];
 8007430:	7b14      	ldrb	r4, [r2, #12]
 8007432:	7b0b      	ldrb	r3, [r1, #12]
 8007434:	4063      	eors	r3, r4
 8007436:	7303      	strb	r3, [r0, #12]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13] ^ ((uint8_t*)k)[13];
 8007438:	7b54      	ldrb	r4, [r2, #13]
 800743a:	7b4b      	ldrb	r3, [r1, #13]
 800743c:	4063      	eors	r3, r4
 800743e:	7343      	strb	r3, [r0, #13]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14] ^ ((uint8_t*)k)[14];
 8007440:	7b94      	ldrb	r4, [r2, #14]
 8007442:	7b8b      	ldrb	r3, [r1, #14]
 8007444:	4063      	eors	r3, r4
 8007446:	7383      	strb	r3, [r0, #14]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15] ^ ((uint8_t*)k)[15];
 8007448:	7bcb      	ldrb	r3, [r1, #15]
 800744a:	7bd2      	ldrb	r2, [r2, #15]
 800744c:	4053      	eors	r3, r2
 800744e:	73c3      	strb	r3, [r0, #15]
#else
    block_copy(d, s);
    xor_block(d, k);
#endif
}
 8007450:	bd10      	pop	{r4, pc}
	...

08007454 <lorawan_aes_set_key>:
#if defined( AES_ENC_PREKEYED ) || defined( AES_DEC_PREKEYED )

/*  Set the cipher key for the pre-keyed version */

return_type lorawan_aes_set_key( const uint8_t key[], length_type keylen, lorawan_aes_context ctx[1] )
{
 8007454:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007456:	0014      	movs	r4, r2
    uint8_t cc, rc, hi;

    switch( keylen )
 8007458:	000a      	movs	r2, r1
 800745a:	3a10      	subs	r2, #16
 800745c:	b2d2      	uxtb	r2, r2
{
 800745e:	000e      	movs	r6, r1
 8007460:	b089      	sub	sp, #36	@ 0x24
    switch( keylen )
 8007462:	2a10      	cmp	r2, #16
 8007464:	d803      	bhi.n	800746e <lorawan_aes_set_key+0x1a>
 8007466:	4b3a      	ldr	r3, [pc, #232]	@ (8007550 <lorawan_aes_set_key+0xfc>)
 8007468:	40d3      	lsrs	r3, r2
 800746a:	07db      	lsls	r3, r3, #31
 800746c:	d405      	bmi.n	800747a <lorawan_aes_set_key+0x26>
    case 16:
    case 24:
    case 32:
        break;
    default:
        ctx->rnd = 0;
 800746e:	2300      	movs	r3, #0
        return ( uint8_t )-1;
 8007470:	20ff      	movs	r0, #255	@ 0xff
        ctx->rnd = 0;
 8007472:	34f0      	adds	r4, #240	@ 0xf0
 8007474:	7023      	strb	r3, [r4, #0]
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
    }
    return 0;
}
 8007476:	b009      	add	sp, #36	@ 0x24
 8007478:	bdf0      	pop	{r4, r5, r6, r7, pc}
    switch( keylen )
 800747a:	2300      	movs	r3, #0
        *d++ = *s++;
 800747c:	5cc2      	ldrb	r2, [r0, r3]
 800747e:	54e2      	strb	r2, [r4, r3]
    while( nn-- )
 8007480:	3301      	adds	r3, #1
 8007482:	b2da      	uxtb	r2, r3
 8007484:	4296      	cmp	r6, r2
 8007486:	d1f9      	bne.n	800747c <lorawan_aes_set_key+0x28>
    hi = (keylen + 28) << 2;
 8007488:	0033      	movs	r3, r6
    ctx->rnd = (hi >> 4) - 1;
 800748a:	0022      	movs	r2, r4
    hi = (keylen + 28) << 2;
 800748c:	331c      	adds	r3, #28
 800748e:	009b      	lsls	r3, r3, #2
 8007490:	b2db      	uxtb	r3, r3
 8007492:	9307      	str	r3, [sp, #28]
    ctx->rnd = (hi >> 4) - 1;
 8007494:	091b      	lsrs	r3, r3, #4
 8007496:	3b01      	subs	r3, #1
 8007498:	32f0      	adds	r2, #240	@ 0xf0
 800749a:	7013      	strb	r3, [r2, #0]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800749c:	2301      	movs	r3, #1
 800749e:	9305      	str	r3, [sp, #20]
            t0 = s_box(t1) ^ rc;
 80074a0:	4b2c      	ldr	r3, [pc, #176]	@ (8007554 <lorawan_aes_set_key+0x100>)
 80074a2:	1f35      	subs	r5, r6, #4
 80074a4:	9604      	str	r6, [sp, #16]
 80074a6:	1965      	adds	r5, r4, r5
 80074a8:	9306      	str	r3, [sp, #24]
        t1 = ctx->ksch[cc - 3];
 80074aa:	786b      	ldrb	r3, [r5, #1]
        if( cc % keylen == 0 )
 80074ac:	0031      	movs	r1, r6
        t1 = ctx->ksch[cc - 3];
 80074ae:	9301      	str	r3, [sp, #4]
        t2 = ctx->ksch[cc - 2];
 80074b0:	78ab      	ldrb	r3, [r5, #2]
        t0 = ctx->ksch[cc - 4];
 80074b2:	782f      	ldrb	r7, [r5, #0]
        t2 = ctx->ksch[cc - 2];
 80074b4:	9302      	str	r3, [sp, #8]
        t3 = ctx->ksch[cc - 1];
 80074b6:	78eb      	ldrb	r3, [r5, #3]
 80074b8:	9303      	str	r3, [sp, #12]
        if( cc % keylen == 0 )
 80074ba:	466b      	mov	r3, sp
 80074bc:	7c18      	ldrb	r0, [r3, #16]
 80074be:	f7f8 fed9 	bl	8000274 <__aeabi_uidivmod>
 80074c2:	b2c9      	uxtb	r1, r1
 80074c4:	2900      	cmp	r1, #0
 80074c6:	d133      	bne.n	8007530 <lorawan_aes_set_key+0xdc>
            t0 = s_box(t1) ^ rc;
 80074c8:	9a01      	ldr	r2, [sp, #4]
 80074ca:	9b06      	ldr	r3, [sp, #24]
            t1 = s_box(t2);
 80074cc:	9902      	ldr	r1, [sp, #8]
            t0 = s_box(t1) ^ rc;
 80074ce:	5c9b      	ldrb	r3, [r3, r2]
 80074d0:	9a05      	ldr	r2, [sp, #20]
            rc = f2(rc);
 80074d2:	201b      	movs	r0, #27
            t0 = s_box(t1) ^ rc;
 80074d4:	4053      	eors	r3, r2
            t1 = s_box(t2);
 80074d6:	9a06      	ldr	r2, [sp, #24]
 80074d8:	5c52      	ldrb	r2, [r2, r1]
            t2 = s_box(t3);
 80074da:	9903      	ldr	r1, [sp, #12]
            t1 = s_box(t2);
 80074dc:	9201      	str	r2, [sp, #4]
            t2 = s_box(t3);
 80074de:	9a06      	ldr	r2, [sp, #24]
 80074e0:	5c52      	ldrb	r2, [r2, r1]
 80074e2:	9202      	str	r2, [sp, #8]
            t3 = s_box(tt);
 80074e4:	9a06      	ldr	r2, [sp, #24]
 80074e6:	5dd2      	ldrb	r2, [r2, r7]
            t0 = s_box(t1) ^ rc;
 80074e8:	001f      	movs	r7, r3
            t3 = s_box(tt);
 80074ea:	9203      	str	r2, [sp, #12]
            rc = f2(rc);
 80074ec:	9a05      	ldr	r2, [sp, #20]
 80074ee:	09d1      	lsrs	r1, r2, #7
 80074f0:	4341      	muls	r1, r0
 80074f2:	0052      	lsls	r2, r2, #1
 80074f4:	b2d2      	uxtb	r2, r2
 80074f6:	4051      	eors	r1, r2
 80074f8:	9105      	str	r1, [sp, #20]
        ctx->ksch[cc + 0] = ctx->ksch[tt + 0] ^ t0;
 80074fa:	7823      	ldrb	r3, [r4, #0]
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
 80074fc:	9a01      	ldr	r2, [sp, #4]
        ctx->ksch[cc + 0] = ctx->ksch[tt + 0] ^ t0;
 80074fe:	405f      	eors	r7, r3
 8007500:	712f      	strb	r7, [r5, #4]
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
 8007502:	7863      	ldrb	r3, [r4, #1]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 8007504:	3504      	adds	r5, #4
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
 8007506:	405a      	eors	r2, r3
 8007508:	706a      	strb	r2, [r5, #1]
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
 800750a:	78a3      	ldrb	r3, [r4, #2]
 800750c:	9a02      	ldr	r2, [sp, #8]
 800750e:	405a      	eors	r2, r3
 8007510:	70aa      	strb	r2, [r5, #2]
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 8007512:	78e3      	ldrb	r3, [r4, #3]
 8007514:	9a03      	ldr	r2, [sp, #12]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 8007516:	3404      	adds	r4, #4
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 8007518:	405a      	eors	r2, r3
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800751a:	9b04      	ldr	r3, [sp, #16]
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 800751c:	70ea      	strb	r2, [r5, #3]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800751e:	3304      	adds	r3, #4
 8007520:	9304      	str	r3, [sp, #16]
 8007522:	466b      	mov	r3, sp
 8007524:	9a07      	ldr	r2, [sp, #28]
 8007526:	7c1b      	ldrb	r3, [r3, #16]
 8007528:	429a      	cmp	r2, r3
 800752a:	d8be      	bhi.n	80074aa <lorawan_aes_set_key+0x56>
    return 0;
 800752c:	2000      	movs	r0, #0
 800752e:	e7a2      	b.n	8007476 <lorawan_aes_set_key+0x22>
        else if( keylen > 24 && cc % keylen == 16 )
 8007530:	2e18      	cmp	r6, #24
 8007532:	d9e2      	bls.n	80074fa <lorawan_aes_set_key+0xa6>
 8007534:	2910      	cmp	r1, #16
 8007536:	d1e0      	bne.n	80074fa <lorawan_aes_set_key+0xa6>
            t0 = s_box(t0);
 8007538:	4b06      	ldr	r3, [pc, #24]	@ (8007554 <lorawan_aes_set_key+0x100>)
            t1 = s_box(t1);
 800753a:	9a01      	ldr	r2, [sp, #4]
            t0 = s_box(t0);
 800753c:	5ddf      	ldrb	r7, [r3, r7]
            t1 = s_box(t1);
 800753e:	5c9a      	ldrb	r2, [r3, r2]
 8007540:	9201      	str	r2, [sp, #4]
            t2 = s_box(t2);
 8007542:	9a02      	ldr	r2, [sp, #8]
 8007544:	5c9a      	ldrb	r2, [r3, r2]
 8007546:	9202      	str	r2, [sp, #8]
            t3 = s_box(t3);
 8007548:	9a03      	ldr	r2, [sp, #12]
 800754a:	5c9b      	ldrb	r3, [r3, r2]
 800754c:	9303      	str	r3, [sp, #12]
 800754e:	e7d4      	b.n	80074fa <lorawan_aes_set_key+0xa6>
 8007550:	00010101 	.word	0x00010101
 8007554:	08010645 	.word	0x08010645

08007558 <lorawan_aes_encrypt>:
#if defined( AES_ENC_PREKEYED )

/*  Encrypt a single block of 16 bytes */

return_type lorawan_aes_encrypt( const uint8_t in[N_BLOCK], uint8_t  out[N_BLOCK], const lorawan_aes_context ctx[1] )
{
 8007558:	b5f0      	push	{r4, r5, r6, r7, lr}
    if( ctx->rnd )
 800755a:	0017      	movs	r7, r2
{
 800755c:	b0a7      	sub	sp, #156	@ 0x9c
 800755e:	0016      	movs	r6, r2
 8007560:	9121      	str	r1, [sp, #132]	@ 0x84
    if( ctx->rnd )
 8007562:	32f0      	adds	r2, #240	@ 0xf0
 8007564:	7812      	ldrb	r2, [r2, #0]
{
 8007566:	0003      	movs	r3, r0
    if( ctx->rnd )
 8007568:	3710      	adds	r7, #16
#endif
        shift_sub_rows( s1 );
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
    }
    else
        return ( uint8_t )-1;
 800756a:	20ff      	movs	r0, #255	@ 0xff
    if( ctx->rnd )
 800756c:	9201      	str	r2, [sp, #4]
 800756e:	2a00      	cmp	r2, #0
 8007570:	d100      	bne.n	8007574 <lorawan_aes_encrypt+0x1c>
 8007572:	e08c      	b.n	800768e <lorawan_aes_encrypt+0x136>
        copy_and_key( s1, in, ctx->ksch );
 8007574:	0019      	movs	r1, r3
 8007576:	0032      	movs	r2, r6
 8007578:	a822      	add	r0, sp, #136	@ 0x88
 800757a:	f7ff ff28 	bl	80073ce <copy_and_key>
        for( r = 1 ; r < ctx->rnd ; ++r )
 800757e:	9b01      	ldr	r3, [sp, #4]
 8007580:	011b      	lsls	r3, r3, #4
 8007582:	18fb      	adds	r3, r7, r3
 8007584:	931f      	str	r3, [sp, #124]	@ 0x7c
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 8007586:	ab22      	add	r3, sp, #136	@ 0x88
 8007588:	781b      	ldrb	r3, [r3, #0]
            add_round_key( s1, ctx->ksch + r * N_BLOCK);
 800758a:	9720      	str	r7, [sp, #128]	@ 0x80
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 800758c:	9302      	str	r3, [sp, #8]
 800758e:	ab22      	add	r3, sp, #136	@ 0x88
 8007590:	795b      	ldrb	r3, [r3, #5]
        for( r = 1 ; r < ctx->rnd ; ++r )
 8007592:	3710      	adds	r7, #16
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 8007594:	9303      	str	r3, [sp, #12]
 8007596:	ab22      	add	r3, sp, #136	@ 0x88
 8007598:	7a9b      	ldrb	r3, [r3, #10]
 800759a:	9304      	str	r3, [sp, #16]
 800759c:	9a04      	ldr	r2, [sp, #16]
 800759e:	4b90      	ldr	r3, [pc, #576]	@ (80077e0 <lorawan_aes_encrypt+0x288>)
 80075a0:	5c9a      	ldrb	r2, [r3, r2]
 80075a2:	9205      	str	r2, [sp, #20]
 80075a4:	aa22      	add	r2, sp, #136	@ 0x88
 80075a6:	7bd2      	ldrb	r2, [r2, #15]
 80075a8:	9206      	str	r2, [sp, #24]
 80075aa:	5c9a      	ldrb	r2, [r3, r2]
 80075ac:	9207      	str	r2, [sp, #28]
    dt[ 1] = s_box(st[0]) ^ gfm2_sb(st[5]) ^ gfm3_sb(st[10]) ^ s_box(st[15]);
 80075ae:	9a02      	ldr	r2, [sp, #8]
 80075b0:	5c9c      	ldrb	r4, [r3, r2]
    dt[ 2] = s_box(st[0]) ^ s_box(st[5]) ^ gfm2_sb(st[10]) ^ gfm3_sb(st[15]);
 80075b2:	9a03      	ldr	r2, [sp, #12]
 80075b4:	5c98      	ldrb	r0, [r3, r2]
    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 80075b6:	aa22      	add	r2, sp, #136	@ 0x88
 80075b8:	7912      	ldrb	r2, [r2, #4]
 80075ba:	9208      	str	r2, [sp, #32]
 80075bc:	aa22      	add	r2, sp, #136	@ 0x88
 80075be:	7a52      	ldrb	r2, [r2, #9]
 80075c0:	9209      	str	r2, [sp, #36]	@ 0x24
 80075c2:	aa22      	add	r2, sp, #136	@ 0x88
 80075c4:	7b92      	ldrb	r2, [r2, #14]
 80075c6:	920a      	str	r2, [sp, #40]	@ 0x28
 80075c8:	5c9a      	ldrb	r2, [r3, r2]
 80075ca:	920b      	str	r2, [sp, #44]	@ 0x2c
 80075cc:	aa22      	add	r2, sp, #136	@ 0x88
 80075ce:	78d2      	ldrb	r2, [r2, #3]
 80075d0:	920c      	str	r2, [sp, #48]	@ 0x30
 80075d2:	5c9a      	ldrb	r2, [r3, r2]
 80075d4:	4694      	mov	ip, r2
    dt[ 5] = s_box(st[4]) ^ gfm2_sb(st[9]) ^ gfm3_sb(st[14]) ^ s_box(st[3]);
 80075d6:	9a08      	ldr	r2, [sp, #32]
 80075d8:	5c9a      	ldrb	r2, [r3, r2]
 80075da:	920d      	str	r2, [sp, #52]	@ 0x34
    dt[ 6] = s_box(st[4]) ^ s_box(st[9]) ^ gfm2_sb(st[14]) ^ gfm3_sb(st[3]);
 80075dc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80075de:	5c9a      	ldrb	r2, [r3, r2]
 80075e0:	920e      	str	r2, [sp, #56]	@ 0x38
    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
 80075e2:	aa22      	add	r2, sp, #136	@ 0x88
 80075e4:	7a12      	ldrb	r2, [r2, #8]
 80075e6:	920f      	str	r2, [sp, #60]	@ 0x3c
 80075e8:	aa22      	add	r2, sp, #136	@ 0x88
 80075ea:	7b52      	ldrb	r2, [r2, #13]
 80075ec:	9210      	str	r2, [sp, #64]	@ 0x40
 80075ee:	aa22      	add	r2, sp, #136	@ 0x88
 80075f0:	7892      	ldrb	r2, [r2, #2]
 80075f2:	9211      	str	r2, [sp, #68]	@ 0x44
 80075f4:	5c9a      	ldrb	r2, [r3, r2]
 80075f6:	9212      	str	r2, [sp, #72]	@ 0x48
 80075f8:	aa22      	add	r2, sp, #136	@ 0x88
 80075fa:	79d2      	ldrb	r2, [r2, #7]
 80075fc:	9213      	str	r2, [sp, #76]	@ 0x4c
 80075fe:	5c9a      	ldrb	r2, [r3, r2]
 8007600:	9214      	str	r2, [sp, #80]	@ 0x50
    dt[ 9] = s_box(st[8]) ^ gfm2_sb(st[13]) ^ gfm3_sb(st[2]) ^ s_box(st[7]);
 8007602:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8007604:	5c9a      	ldrb	r2, [r3, r2]
 8007606:	9215      	str	r2, [sp, #84]	@ 0x54
    dt[10] = s_box(st[8]) ^ s_box(st[13]) ^ gfm2_sb(st[2]) ^ gfm3_sb(st[7]);
 8007608:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 800760a:	5c9a      	ldrb	r2, [r3, r2]
 800760c:	9216      	str	r2, [sp, #88]	@ 0x58
    dt[12] = gfm2_sb(st[12]) ^ gfm3_sb(st[1]) ^ s_box(st[6]) ^ s_box(st[11]);
 800760e:	aa22      	add	r2, sp, #136	@ 0x88
 8007610:	7b12      	ldrb	r2, [r2, #12]
 8007612:	9217      	str	r2, [sp, #92]	@ 0x5c
 8007614:	aa22      	add	r2, sp, #136	@ 0x88
 8007616:	7852      	ldrb	r2, [r2, #1]
 8007618:	9218      	str	r2, [sp, #96]	@ 0x60
 800761a:	aa22      	add	r2, sp, #136	@ 0x88
 800761c:	7992      	ldrb	r2, [r2, #6]
 800761e:	9219      	str	r2, [sp, #100]	@ 0x64
 8007620:	5c9a      	ldrb	r2, [r3, r2]
 8007622:	921a      	str	r2, [sp, #104]	@ 0x68
 8007624:	aa22      	add	r2, sp, #136	@ 0x88
 8007626:	7ad2      	ldrb	r2, [r2, #11]
 8007628:	921b      	str	r2, [sp, #108]	@ 0x6c
 800762a:	5c9a      	ldrb	r2, [r3, r2]
 800762c:	921c      	str	r2, [sp, #112]	@ 0x70
    dt[13] = s_box(st[12]) ^ gfm2_sb(st[1]) ^ gfm3_sb(st[6]) ^ s_box(st[11]);
 800762e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8007630:	5c9a      	ldrb	r2, [r3, r2]
 8007632:	921d      	str	r2, [sp, #116]	@ 0x74
    dt[14] = s_box(st[12]) ^ s_box(st[1]) ^ gfm2_sb(st[6]) ^ gfm3_sb(st[11]);
 8007634:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8007636:	5c9b      	ldrb	r3, [r3, r2]
 8007638:	931e      	str	r3, [sp, #120]	@ 0x78
        for( r = 1 ; r < ctx->rnd ; ++r )
 800763a:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 800763c:	42bb      	cmp	r3, r7
 800763e:	d128      	bne.n	8007692 <lorawan_aes_encrypt+0x13a>
    st[ 0] = s_box(st[ 0]); st[ 4] = s_box(st[ 4]);
 8007640:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007642:	ab22      	add	r3, sp, #136	@ 0x88
 8007644:	711a      	strb	r2, [r3, #4]
    st[ 8] = s_box(st[ 8]); st[12] = s_box(st[12]);
 8007646:	9a15      	ldr	r2, [sp, #84]	@ 0x54
    tt = st[1]; st[ 1] = s_box(st[ 5]); st[ 5] = s_box(st[ 9]);
 8007648:	7058      	strb	r0, [r3, #1]
    st[ 8] = s_box(st[ 8]); st[12] = s_box(st[12]);
 800764a:	721a      	strb	r2, [r3, #8]
 800764c:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
    st[ 0] = s_box(st[ 0]); st[ 4] = s_box(st[ 4]);
 800764e:	701c      	strb	r4, [r3, #0]
    st[ 8] = s_box(st[ 8]); st[12] = s_box(st[12]);
 8007650:	731a      	strb	r2, [r3, #12]
    tt = st[1]; st[ 1] = s_box(st[ 5]); st[ 5] = s_box(st[ 9]);
 8007652:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 8007654:	9821      	ldr	r0, [sp, #132]	@ 0x84
    tt = st[1]; st[ 1] = s_box(st[ 5]); st[ 5] = s_box(st[ 9]);
 8007656:	715a      	strb	r2, [r3, #5]
    st[ 9] = s_box(st[13]); st[13] = s_box( tt );
 8007658:	9a16      	ldr	r2, [sp, #88]	@ 0x58
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 800765a:	a922      	add	r1, sp, #136	@ 0x88
    st[ 9] = s_box(st[13]); st[13] = s_box( tt );
 800765c:	725a      	strb	r2, [r3, #9]
 800765e:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 8007660:	735a      	strb	r2, [r3, #13]
    tt = st[2]; st[ 2] = s_box(st[10]); st[10] = s_box( tt );
 8007662:	9a05      	ldr	r2, [sp, #20]
 8007664:	709a      	strb	r2, [r3, #2]
 8007666:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8007668:	729a      	strb	r2, [r3, #10]
    tt = st[6]; st[ 6] = s_box(st[14]); st[14] = s_box( tt );
 800766a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800766c:	719a      	strb	r2, [r3, #6]
 800766e:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8007670:	739a      	strb	r2, [r3, #14]
    tt = st[15]; st[15] = s_box(st[11]); st[11] = s_box(st[ 7]);
 8007672:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8007674:	73da      	strb	r2, [r3, #15]
 8007676:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8007678:	72da      	strb	r2, [r3, #11]
    st[ 7] = s_box(st[ 3]); st[ 3] = s_box( tt );
 800767a:	4662      	mov	r2, ip
 800767c:	71da      	strb	r2, [r3, #7]
 800767e:	9a07      	ldr	r2, [sp, #28]
 8007680:	70da      	strb	r2, [r3, #3]
            add_round_key( s1, ctx->ksch + r * N_BLOCK);
 8007682:	9b01      	ldr	r3, [sp, #4]
 8007684:	011a      	lsls	r2, r3, #4
 8007686:	18b2      	adds	r2, r6, r2
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 8007688:	f7ff fea1 	bl	80073ce <copy_and_key>
    return 0;
 800768c:	2000      	movs	r0, #0
}
 800768e:	b027      	add	sp, #156	@ 0x9c
 8007690:	bdf0      	pop	{r4, r5, r6, r7, pc}
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 8007692:	4b54      	ldr	r3, [pc, #336]	@ (80077e4 <lorawan_aes_encrypt+0x28c>)
 8007694:	9d02      	ldr	r5, [sp, #8]
 8007696:	9907      	ldr	r1, [sp, #28]
 8007698:	9a05      	ldr	r2, [sp, #20]
 800769a:	5d5d      	ldrb	r5, [r3, r5]
 800769c:	404a      	eors	r2, r1
 800769e:	4055      	eors	r5, r2
 80076a0:	9903      	ldr	r1, [sp, #12]
 80076a2:	4a51      	ldr	r2, [pc, #324]	@ (80077e8 <lorawan_aes_encrypt+0x290>)
 80076a4:	5c51      	ldrb	r1, [r2, r1]
 80076a6:	404d      	eors	r5, r1
 80076a8:	a922      	add	r1, sp, #136	@ 0x88
 80076aa:	700d      	strb	r5, [r1, #0]
    dt[ 1] = s_box(st[0]) ^ gfm2_sb(st[5]) ^ gfm3_sb(st[10]) ^ s_box(st[15]);
 80076ac:	9d03      	ldr	r5, [sp, #12]
 80076ae:	9907      	ldr	r1, [sp, #28]
 80076b0:	5d5d      	ldrb	r5, [r3, r5]
 80076b2:	4061      	eors	r1, r4
 80076b4:	4069      	eors	r1, r5
 80076b6:	9d04      	ldr	r5, [sp, #16]
 80076b8:	5d55      	ldrb	r5, [r2, r5]
 80076ba:	4069      	eors	r1, r5
 80076bc:	ad22      	add	r5, sp, #136	@ 0x88
 80076be:	7069      	strb	r1, [r5, #1]
    dt[ 2] = s_box(st[0]) ^ s_box(st[5]) ^ gfm2_sb(st[10]) ^ gfm3_sb(st[15]);
 80076c0:	0021      	movs	r1, r4
 80076c2:	9c04      	ldr	r4, [sp, #16]
 80076c4:	4041      	eors	r1, r0
 80076c6:	5d1c      	ldrb	r4, [r3, r4]
 80076c8:	404c      	eors	r4, r1
 80076ca:	9906      	ldr	r1, [sp, #24]
 80076cc:	5c51      	ldrb	r1, [r2, r1]
 80076ce:	404c      	eors	r4, r1
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
 80076d0:	9905      	ldr	r1, [sp, #20]
    dt[ 2] = s_box(st[0]) ^ s_box(st[5]) ^ gfm2_sb(st[10]) ^ gfm3_sb(st[15]);
 80076d2:	70ac      	strb	r4, [r5, #2]
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
 80076d4:	4041      	eors	r1, r0
 80076d6:	0008      	movs	r0, r1
 80076d8:	9902      	ldr	r1, [sp, #8]
 80076da:	5c51      	ldrb	r1, [r2, r1]
 80076dc:	4041      	eors	r1, r0
 80076de:	9806      	ldr	r0, [sp, #24]
 80076e0:	5c18      	ldrb	r0, [r3, r0]
 80076e2:	4041      	eors	r1, r0
    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 80076e4:	4660      	mov	r0, ip
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
 80076e6:	70e9      	strb	r1, [r5, #3]
    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 80076e8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80076ea:	4041      	eors	r1, r0
 80076ec:	9808      	ldr	r0, [sp, #32]
 80076ee:	5c18      	ldrb	r0, [r3, r0]
 80076f0:	4041      	eors	r1, r0
 80076f2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80076f4:	5c10      	ldrb	r0, [r2, r0]
 80076f6:	4041      	eors	r1, r0
    dt[ 5] = s_box(st[4]) ^ gfm2_sb(st[9]) ^ gfm3_sb(st[14]) ^ s_box(st[3]);
 80076f8:	4660      	mov	r0, ip
    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 80076fa:	7129      	strb	r1, [r5, #4]
    dt[ 5] = s_box(st[4]) ^ gfm2_sb(st[9]) ^ gfm3_sb(st[14]) ^ s_box(st[3]);
 80076fc:	990d      	ldr	r1, [sp, #52]	@ 0x34
 80076fe:	4048      	eors	r0, r1
 8007700:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007702:	5c59      	ldrb	r1, [r3, r1]
 8007704:	4041      	eors	r1, r0
 8007706:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8007708:	5c10      	ldrb	r0, [r2, r0]
 800770a:	4041      	eors	r1, r0
 800770c:	7169      	strb	r1, [r5, #5]
    dt[ 6] = s_box(st[4]) ^ s_box(st[9]) ^ gfm2_sb(st[14]) ^ gfm3_sb(st[3]);
 800770e:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8007710:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8007712:	4048      	eors	r0, r1
 8007714:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007716:	5c59      	ldrb	r1, [r3, r1]
 8007718:	4041      	eors	r1, r0
 800771a:	980c      	ldr	r0, [sp, #48]	@ 0x30
 800771c:	5c10      	ldrb	r0, [r2, r0]
 800771e:	4041      	eors	r1, r0
 8007720:	71a9      	strb	r1, [r5, #6]
    dt[ 7] = gfm3_sb(st[4]) ^ s_box(st[9]) ^ s_box(st[14]) ^ gfm2_sb(st[3]);
 8007722:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8007724:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007726:	4041      	eors	r1, r0
 8007728:	9808      	ldr	r0, [sp, #32]
 800772a:	5c10      	ldrb	r0, [r2, r0]
 800772c:	4048      	eors	r0, r1
 800772e:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8007730:	5c59      	ldrb	r1, [r3, r1]
 8007732:	4048      	eors	r0, r1
 8007734:	71e8      	strb	r0, [r5, #7]
    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
 8007736:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8007738:	9814      	ldr	r0, [sp, #80]	@ 0x50
 800773a:	4041      	eors	r1, r0
 800773c:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 800773e:	5c18      	ldrb	r0, [r3, r0]
 8007740:	4041      	eors	r1, r0
 8007742:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8007744:	5c10      	ldrb	r0, [r2, r0]
 8007746:	4041      	eors	r1, r0
 8007748:	7229      	strb	r1, [r5, #8]
    dt[ 9] = s_box(st[8]) ^ gfm2_sb(st[13]) ^ gfm3_sb(st[2]) ^ s_box(st[7]);
 800774a:	9814      	ldr	r0, [sp, #80]	@ 0x50
 800774c:	9915      	ldr	r1, [sp, #84]	@ 0x54
 800774e:	4048      	eors	r0, r1
 8007750:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8007752:	5c59      	ldrb	r1, [r3, r1]
 8007754:	4041      	eors	r1, r0
 8007756:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8007758:	5c10      	ldrb	r0, [r2, r0]
 800775a:	4041      	eors	r1, r0
 800775c:	7269      	strb	r1, [r5, #9]
    dt[10] = s_box(st[8]) ^ s_box(st[13]) ^ gfm2_sb(st[2]) ^ gfm3_sb(st[7]);
 800775e:	9815      	ldr	r0, [sp, #84]	@ 0x54
 8007760:	9916      	ldr	r1, [sp, #88]	@ 0x58
 8007762:	4048      	eors	r0, r1
 8007764:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8007766:	5c59      	ldrb	r1, [r3, r1]
 8007768:	4041      	eors	r1, r0
 800776a:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 800776c:	5c10      	ldrb	r0, [r2, r0]
 800776e:	4041      	eors	r1, r0
 8007770:	72a9      	strb	r1, [r5, #10]
    dt[11] = gfm3_sb(st[8]) ^ s_box(st[13]) ^ s_box(st[2]) ^ gfm2_sb(st[7]);
 8007772:	9816      	ldr	r0, [sp, #88]	@ 0x58
 8007774:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8007776:	4041      	eors	r1, r0
 8007778:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 800777a:	5c10      	ldrb	r0, [r2, r0]
 800777c:	4048      	eors	r0, r1
 800777e:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8007780:	5c59      	ldrb	r1, [r3, r1]
 8007782:	4048      	eors	r0, r1
 8007784:	72e8      	strb	r0, [r5, #11]
    dt[12] = gfm2_sb(st[12]) ^ gfm3_sb(st[1]) ^ s_box(st[6]) ^ s_box(st[11]);
 8007786:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007788:	981c      	ldr	r0, [sp, #112]	@ 0x70
 800778a:	4041      	eors	r1, r0
 800778c:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 800778e:	5c18      	ldrb	r0, [r3, r0]
 8007790:	4041      	eors	r1, r0
 8007792:	9818      	ldr	r0, [sp, #96]	@ 0x60
 8007794:	5c10      	ldrb	r0, [r2, r0]
 8007796:	4041      	eors	r1, r0
 8007798:	7329      	strb	r1, [r5, #12]
    dt[13] = s_box(st[12]) ^ gfm2_sb(st[1]) ^ gfm3_sb(st[6]) ^ s_box(st[11]);
 800779a:	981c      	ldr	r0, [sp, #112]	@ 0x70
 800779c:	991d      	ldr	r1, [sp, #116]	@ 0x74
 800779e:	4048      	eors	r0, r1
 80077a0:	9918      	ldr	r1, [sp, #96]	@ 0x60
 80077a2:	5c59      	ldrb	r1, [r3, r1]
 80077a4:	4041      	eors	r1, r0
 80077a6:	9819      	ldr	r0, [sp, #100]	@ 0x64
 80077a8:	5c10      	ldrb	r0, [r2, r0]
 80077aa:	4041      	eors	r1, r0
 80077ac:	7369      	strb	r1, [r5, #13]
    dt[14] = s_box(st[12]) ^ s_box(st[1]) ^ gfm2_sb(st[6]) ^ gfm3_sb(st[11]);
 80077ae:	981d      	ldr	r0, [sp, #116]	@ 0x74
 80077b0:	991e      	ldr	r1, [sp, #120]	@ 0x78
 80077b2:	4048      	eors	r0, r1
 80077b4:	9919      	ldr	r1, [sp, #100]	@ 0x64
 80077b6:	5c59      	ldrb	r1, [r3, r1]
 80077b8:	4041      	eors	r1, r0
 80077ba:	981b      	ldr	r0, [sp, #108]	@ 0x6c
 80077bc:	5c10      	ldrb	r0, [r2, r0]
 80077be:	4041      	eors	r1, r0
 80077c0:	73a9      	strb	r1, [r5, #14]
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 80077c2:	981e      	ldr	r0, [sp, #120]	@ 0x78
 80077c4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80077c6:	4041      	eors	r1, r0
 80077c8:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 80077ca:	5c12      	ldrb	r2, [r2, r0]
    xor_block(d, k);
 80077cc:	0028      	movs	r0, r5
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 80077ce:	4051      	eors	r1, r2
 80077d0:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80077d2:	5c9b      	ldrb	r3, [r3, r2]
 80077d4:	4059      	eors	r1, r3
 80077d6:	73e9      	strb	r1, [r5, #15]
    xor_block(d, k);
 80077d8:	9920      	ldr	r1, [sp, #128]	@ 0x80
 80077da:	f7ff fdb7 	bl	800734c <xor_block>
        for( r = 1 ; r < ctx->rnd ; ++r )
 80077de:	e6d2      	b.n	8007586 <lorawan_aes_encrypt+0x2e>
 80077e0:	08010645 	.word	0x08010645
 80077e4:	08010545 	.word	0x08010545
 80077e8:	08010445 	.word	0x08010445

080077ec <SecureElementGetKeyByID>:
{
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
#if (defined (KEY_EXTRACTABLE) && (KEY_EXTRACTABLE == 1))
    for (uint8_t i = 0; i < NUM_OF_KEYS; i++)
    {
        if (SeNvm->KeyList[i].KeyID == keyID)
 80077ec:	4b0a      	ldr	r3, [pc, #40]	@ (8007818 <SecureElementGetKeyByID+0x2c>)
{
 80077ee:	b5f0      	push	{r4, r5, r6, r7, lr}
        if (SeNvm->KeyList[i].KeyID == keyID)
 80077f0:	681a      	ldr	r2, [r3, #0]
 80077f2:	2511      	movs	r5, #17
 80077f4:	0016      	movs	r6, r2
 80077f6:	2300      	movs	r3, #0
 80077f8:	3610      	adds	r6, #16
 80077fa:	002c      	movs	r4, r5
 80077fc:	435c      	muls	r4, r3
 80077fe:	5d37      	ldrb	r7, [r6, r4]
 8007800:	4287      	cmp	r7, r0
 8007802:	d104      	bne.n	800780e <SecureElementGetKeyByID+0x22>
        {
            *keyItem = &(SeNvm->KeyList[i]);
            return SECURE_ELEMENT_SUCCESS;
 8007804:	2000      	movs	r0, #0
            *keyItem = &(SeNvm->KeyList[i]);
 8007806:	3410      	adds	r4, #16
 8007808:	1912      	adds	r2, r2, r4
 800780a:	600a      	str	r2, [r1, #0]
        return SECURE_ELEMENT_ERROR;
    }
    return SECURE_ELEMENT_SUCCESS;

#endif /* LORAWAN_KMS == 1 */
}
 800780c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    for (uint8_t i = 0; i < NUM_OF_KEYS; i++)
 800780e:	3301      	adds	r3, #1
 8007810:	2b0a      	cmp	r3, #10
 8007812:	d1f2      	bne.n	80077fa <SecureElementGetKeyByID+0xe>
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 8007814:	2003      	movs	r0, #3
 8007816:	e7f9      	b.n	800780c <SecureElementGetKeyByID+0x20>
 8007818:	20000844 	.word	0x20000844

0800781c <ComputeCmac>:
{
 800781c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800781e:	b0cf      	sub	sp, #316	@ 0x13c
 8007820:	0006      	movs	r6, r0
 8007822:	000d      	movs	r5, r1
 8007824:	0017      	movs	r7, r2
        return SECURE_ELEMENT_ERROR_NPE;
 8007826:	2402      	movs	r4, #2
{
 8007828:	9301      	str	r3, [sp, #4]
    if( ( buffer == NULL ) || ( cmac == NULL ) )
 800782a:	2900      	cmp	r1, #0
 800782c:	d023      	beq.n	8007876 <ComputeCmac+0x5a>
 800782e:	9b54      	ldr	r3, [sp, #336]	@ 0x150
 8007830:	2b00      	cmp	r3, #0
 8007832:	d020      	beq.n	8007876 <ComputeCmac+0x5a>
    AES_CMAC_Init( aesCmacCtx );
 8007834:	a808      	add	r0, sp, #32
 8007836:	f7ff fc57 	bl	80070e8 <AES_CMAC_Init>
    SecureElementStatus_t retval = GetKeyByID( keyID, &keyItem );
 800783a:	9801      	ldr	r0, [sp, #4]
 800783c:	a903      	add	r1, sp, #12
 800783e:	f7ff ffd5 	bl	80077ec <SecureElementGetKeyByID>
 8007842:	1e04      	subs	r4, r0, #0
    if( retval == SECURE_ELEMENT_SUCCESS )
 8007844:	d117      	bne.n	8007876 <ComputeCmac+0x5a>
        AES_CMAC_SetKey( aesCmacCtx, keyItem->KeyValue );
 8007846:	9903      	ldr	r1, [sp, #12]
 8007848:	a808      	add	r0, sp, #32
 800784a:	3101      	adds	r1, #1
 800784c:	f7ff fc5c 	bl	8007108 <AES_CMAC_SetKey>
        if( micBxBuffer != NULL )
 8007850:	2e00      	cmp	r6, #0
 8007852:	d004      	beq.n	800785e <ComputeCmac+0x42>
            AES_CMAC_Update( aesCmacCtx, micBxBuffer, 16 );
 8007854:	2210      	movs	r2, #16
 8007856:	0031      	movs	r1, r6
 8007858:	a808      	add	r0, sp, #32
 800785a:	f7ff fc5c 	bl	8007116 <AES_CMAC_Update>
        AES_CMAC_Update( aesCmacCtx, buffer, size );
 800785e:	003a      	movs	r2, r7
 8007860:	0029      	movs	r1, r5
 8007862:	a808      	add	r0, sp, #32
 8007864:	f7ff fc57 	bl	8007116 <AES_CMAC_Update>
        AES_CMAC_Final( Cmac, aesCmacCtx );
 8007868:	a908      	add	r1, sp, #32
 800786a:	a804      	add	r0, sp, #16
 800786c:	f7ff fcc3 	bl	80071f6 <AES_CMAC_Final>
        *cmac = ( uint32_t )( ( uint32_t ) Cmac[3] << 24 | ( uint32_t ) Cmac[2] << 16 | ( uint32_t ) Cmac[1] << 8 |
 8007870:	9b04      	ldr	r3, [sp, #16]
 8007872:	9a54      	ldr	r2, [sp, #336]	@ 0x150
 8007874:	6013      	str	r3, [r2, #0]
}
 8007876:	0020      	movs	r0, r4
 8007878:	b04f      	add	sp, #316	@ 0x13c
 800787a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800787c <PrintKey>:
{
 800787c:	b510      	push	{r4, lr}
 800787e:	b092      	sub	sp, #72	@ 0x48
    retval = SecureElementGetKeyByID(key, &keyItem);
 8007880:	a911      	add	r1, sp, #68	@ 0x44
{
 8007882:	0004      	movs	r4, r0
    retval = SecureElementGetKeyByID(key, &keyItem);
 8007884:	f7ff ffb2 	bl	80077ec <SecureElementGetKeyByID>
 8007888:	1e01      	subs	r1, r0, #0
    if (retval == SECURE_ELEMENT_SUCCESS)
 800788a:	d133      	bne.n	80078f4 <PrintKey+0x78>
        if (key == APP_KEY)
 800788c:	2c02      	cmp	r4, #2
 800788e:	d033      	beq.n	80078f8 <PrintKey+0x7c>
            MW_LOG(TS_OFF, VLEVEL_M, "###### AppSKey:     ");
 8007890:	4b1b      	ldr	r3, [pc, #108]	@ (8007900 <PrintKey+0x84>)
 8007892:	2c03      	cmp	r4, #3
 8007894:	d003      	beq.n	800789e <PrintKey+0x22>
            MW_LOG(TS_OFF, VLEVEL_M, "###### AppKey:      ");
 8007896:	4b1b      	ldr	r3, [pc, #108]	@ (8007904 <PrintKey+0x88>)
 8007898:	2c01      	cmp	r4, #1
 800789a:	d100      	bne.n	800789e <PrintKey+0x22>
            MW_LOG(TS_OFF, VLEVEL_M, "###### NwkKey:      ");
 800789c:	4b1a      	ldr	r3, [pc, #104]	@ (8007908 <PrintKey+0x8c>)
            MW_LOG(TS_OFF, VLEVEL_M, "###### AppSKey:     ");
 800789e:	000a      	movs	r2, r1
 80078a0:	2002      	movs	r0, #2
            MW_LOG(TS_OFF, VLEVEL_M, "###### NwkSKey:     ");
 80078a2:	f007 fb37 	bl	800ef14 <UTIL_ADV_TRACE_COND_FSend>
        MW_LOG(TS_OFF, VLEVEL_M, "%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 80078a6:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80078a8:	4b18      	ldr	r3, [pc, #96]	@ (800790c <PrintKey+0x90>)
 80078aa:	7c11      	ldrb	r1, [r2, #16]
 80078ac:	2002      	movs	r0, #2
 80078ae:	910f      	str	r1, [sp, #60]	@ 0x3c
 80078b0:	7bd1      	ldrb	r1, [r2, #15]
 80078b2:	910e      	str	r1, [sp, #56]	@ 0x38
 80078b4:	7b91      	ldrb	r1, [r2, #14]
 80078b6:	910d      	str	r1, [sp, #52]	@ 0x34
 80078b8:	7b51      	ldrb	r1, [r2, #13]
 80078ba:	910c      	str	r1, [sp, #48]	@ 0x30
 80078bc:	7b11      	ldrb	r1, [r2, #12]
 80078be:	910b      	str	r1, [sp, #44]	@ 0x2c
 80078c0:	7ad1      	ldrb	r1, [r2, #11]
 80078c2:	910a      	str	r1, [sp, #40]	@ 0x28
 80078c4:	7a91      	ldrb	r1, [r2, #10]
 80078c6:	9109      	str	r1, [sp, #36]	@ 0x24
 80078c8:	7a51      	ldrb	r1, [r2, #9]
 80078ca:	9108      	str	r1, [sp, #32]
 80078cc:	7a11      	ldrb	r1, [r2, #8]
 80078ce:	9107      	str	r1, [sp, #28]
 80078d0:	79d1      	ldrb	r1, [r2, #7]
 80078d2:	9106      	str	r1, [sp, #24]
 80078d4:	7991      	ldrb	r1, [r2, #6]
 80078d6:	9105      	str	r1, [sp, #20]
 80078d8:	7951      	ldrb	r1, [r2, #5]
 80078da:	9104      	str	r1, [sp, #16]
 80078dc:	7911      	ldrb	r1, [r2, #4]
 80078de:	9103      	str	r1, [sp, #12]
 80078e0:	78d1      	ldrb	r1, [r2, #3]
 80078e2:	9102      	str	r1, [sp, #8]
 80078e4:	7891      	ldrb	r1, [r2, #2]
 80078e6:	9101      	str	r1, [sp, #4]
 80078e8:	7852      	ldrb	r2, [r2, #1]
 80078ea:	9200      	str	r2, [sp, #0]
 80078ec:	2200      	movs	r2, #0
 80078ee:	0011      	movs	r1, r2
 80078f0:	f007 fb10 	bl	800ef14 <UTIL_ADV_TRACE_COND_FSend>
}
 80078f4:	b012      	add	sp, #72	@ 0x48
 80078f6:	bd10      	pop	{r4, pc}
            MW_LOG(TS_OFF, VLEVEL_M, "###### NwkSKey:     ");
 80078f8:	0002      	movs	r2, r0
 80078fa:	4b05      	ldr	r3, [pc, #20]	@ (8007910 <PrintKey+0x94>)
 80078fc:	0020      	movs	r0, r4
 80078fe:	e7d0      	b.n	80078a2 <PrintKey+0x26>
 8007900:	08011ff5 	.word	0x08011ff5
 8007904:	08011fcb 	.word	0x08011fcb
 8007908:	08011fe0 	.word	0x08011fe0
 800790c:	08010a0d 	.word	0x08010a0d
 8007910:	0801200a 	.word	0x0801200a

08007914 <SecureElementInit>:
{
 8007914:	b570      	push	{r4, r5, r6, lr}
 8007916:	b0b0      	sub	sp, #192	@ 0xc0
    SecureElementNvmData_t seNvmInit =
 8007918:	22b0      	movs	r2, #176	@ 0xb0
{
 800791a:	0004      	movs	r4, r0
 800791c:	000d      	movs	r5, r1
    SecureElementNvmData_t seNvmInit =
 800791e:	a804      	add	r0, sp, #16
 8007920:	2100      	movs	r1, #0
 8007922:	f008 fa45 	bl	800fdb0 <memset>
 8007926:	2210      	movs	r2, #16
 8007928:	4923      	ldr	r1, [pc, #140]	@ (80079b8 <SecureElementInit+0xa4>)
 800792a:	4668      	mov	r0, sp
 800792c:	f008 fa7e 	bl	800fe2c <memcpy>
 8007930:	2011      	movs	r0, #17
 8007932:	2244      	movs	r2, #68	@ 0x44
 8007934:	4921      	ldr	r1, [pc, #132]	@ (80079bc <SecureElementInit+0xa8>)
 8007936:	4468      	add	r0, sp
 8007938:	f008 fa78 	bl	800fe2c <memcpy>
 800793c:	2365      	movs	r3, #101	@ 0x65
 800793e:	227f      	movs	r2, #127	@ 0x7f
 8007940:	446b      	add	r3, sp
 8007942:	701a      	strb	r2, [r3, #0]
 8007944:	2376      	movs	r3, #118	@ 0x76
 8007946:	3201      	adds	r2, #1
 8007948:	446b      	add	r3, sp
 800794a:	701a      	strb	r2, [r3, #0]
 800794c:	2387      	movs	r3, #135	@ 0x87
 800794e:	3201      	adds	r2, #1
 8007950:	446b      	add	r3, sp
 8007952:	701a      	strb	r2, [r3, #0]
 8007954:	ab26      	add	r3, sp, #152	@ 0x98
 8007956:	3201      	adds	r2, #1
 8007958:	701a      	strb	r2, [r3, #0]
 800795a:	23a9      	movs	r3, #169	@ 0xa9
 800795c:	3201      	adds	r2, #1
 800795e:	446b      	add	r3, sp
        return SECURE_ELEMENT_ERROR_NPE;
 8007960:	2002      	movs	r0, #2
    SecureElementNvmData_t seNvmInit =
 8007962:	701a      	strb	r2, [r3, #0]
    if( nvm == NULL )
 8007964:	2c00      	cmp	r4, #0
 8007966:	d021      	beq.n	80079ac <SecureElementInit+0x98>
    SeNvm = nvm;
 8007968:	4e15      	ldr	r6, [pc, #84]	@ (80079c0 <SecureElementInit+0xac>)
    memcpy1( ( uint8_t* )SeNvm, ( uint8_t* )&seNvmInit, sizeof( seNvmInit ) );
 800796a:	4669      	mov	r1, sp
 800796c:	0020      	movs	r0, r4
 800796e:	323d      	adds	r2, #61	@ 0x3d
    SeNvm = nvm;
 8007970:	6034      	str	r4, [r6, #0]
    memcpy1( ( uint8_t* )SeNvm, ( uint8_t* )&seNvmInit, sizeof( seNvmInit ) );
 8007972:	f005 ff07 	bl	800d784 <memcpy1>
    MW_LOG(TS_OFF, VLEVEL_M, "###### OTAA ######\r\n");
 8007976:	2200      	movs	r2, #0
 8007978:	4b12      	ldr	r3, [pc, #72]	@ (80079c4 <SecureElementInit+0xb0>)
 800797a:	0011      	movs	r1, r2
 800797c:	2002      	movs	r0, #2
 800797e:	f007 fac9 	bl	800ef14 <UTIL_ADV_TRACE_COND_FSend>
    PrintKey(APP_KEY);
 8007982:	2000      	movs	r0, #0
 8007984:	f7ff ff7a 	bl	800787c <PrintKey>
    PrintKey(NWK_KEY);
 8007988:	2001      	movs	r0, #1
 800798a:	f7ff ff77 	bl	800787c <PrintKey>
    MW_LOG(TS_OFF, VLEVEL_M, "###### ABP  ######\r\n");
 800798e:	2200      	movs	r2, #0
 8007990:	4b0d      	ldr	r3, [pc, #52]	@ (80079c8 <SecureElementInit+0xb4>)
 8007992:	0011      	movs	r1, r2
 8007994:	2002      	movs	r0, #2
 8007996:	f007 fabd 	bl	800ef14 <UTIL_ADV_TRACE_COND_FSend>
    PrintKey(APP_S_KEY);
 800799a:	2003      	movs	r0, #3
 800799c:	f7ff ff6e 	bl	800787c <PrintKey>
    PrintKey(NWK_S_KEY);
 80079a0:	2002      	movs	r0, #2
 80079a2:	f7ff ff6b 	bl	800787c <PrintKey>
    if (seGetUniqueId != NULL)
 80079a6:	2d00      	cmp	r5, #0
 80079a8:	d102      	bne.n	80079b0 <SecureElementInit+0x9c>
    return SECURE_ELEMENT_SUCCESS;
 80079aa:	2000      	movs	r0, #0
}
 80079ac:	b030      	add	sp, #192	@ 0xc0
 80079ae:	bd70      	pop	{r4, r5, r6, pc}
        seGetUniqueId(SeNvm->DevEui);
 80079b0:	6830      	ldr	r0, [r6, #0]
 80079b2:	47a8      	blx	r5
 80079b4:	e7f9      	b.n	80079aa <SecureElementInit+0x96>
 80079b6:	46c0      	nop			@ (mov r8, r8)
 80079b8:	08010745 	.word	0x08010745
 80079bc:	08012049 	.word	0x08012049
 80079c0:	20000844 	.word	0x20000844
 80079c4:	0801201f 	.word	0x0801201f
 80079c8:	08012034 	.word	0x08012034

080079cc <SecureElementComputeAesCmac>:
#endif /* LORAWAN_KMS */
}

SecureElementStatus_t SecureElementComputeAesCmac( uint8_t* micBxBuffer, uint8_t* buffer, uint16_t size,
                                                   KeyIdentifier_t keyID, uint32_t* cmac )
{
 80079cc:	b513      	push	{r0, r1, r4, lr}
 80079ce:	0004      	movs	r4, r0
    if( keyID >= LORAMAC_CRYPTO_MULTICAST_KEYS )
    {
        // Never accept multicast key identifier for cmac computation
        return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 80079d0:	2003      	movs	r0, #3
    if( keyID >= LORAMAC_CRYPTO_MULTICAST_KEYS )
 80079d2:	2b7e      	cmp	r3, #126	@ 0x7e
 80079d4:	d804      	bhi.n	80079e0 <SecureElementComputeAesCmac+0x14>
    }

    return ComputeCmac( micBxBuffer, buffer, size, keyID, cmac );
 80079d6:	9804      	ldr	r0, [sp, #16]
 80079d8:	9000      	str	r0, [sp, #0]
 80079da:	0020      	movs	r0, r4
 80079dc:	f7ff ff1e 	bl	800781c <ComputeCmac>
}
 80079e0:	bd16      	pop	{r1, r2, r4, pc}

080079e2 <SecureElementVerifyAesCmac>:

SecureElementStatus_t SecureElementVerifyAesCmac( uint8_t* buffer, uint16_t size, uint32_t expectedCmac,
                                                  KeyIdentifier_t keyID )
{
 80079e2:	b530      	push	{r4, r5, lr}
 80079e4:	0005      	movs	r5, r0
 80079e6:	0014      	movs	r4, r2
    if( buffer == NULL )
    {
        return SECURE_ELEMENT_ERROR_NPE;
 80079e8:	2002      	movs	r0, #2
{
 80079ea:	b085      	sub	sp, #20
    if( buffer == NULL )
 80079ec:	2d00      	cmp	r5, #0
 80079ee:	d00e      	beq.n	8007a0e <SecureElementVerifyAesCmac+0x2c>
    }

    SecureElementStatus_t retval   = SECURE_ELEMENT_ERROR;
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    uint32_t              compCmac = 0;
 80079f0:	2000      	movs	r0, #0
    retval                         = ComputeCmac( NULL, buffer, size, keyID, &compCmac );
 80079f2:	aa03      	add	r2, sp, #12
 80079f4:	9200      	str	r2, [sp, #0]
 80079f6:	000a      	movs	r2, r1
 80079f8:	0029      	movs	r1, r5
    uint32_t              compCmac = 0;
 80079fa:	9003      	str	r0, [sp, #12]
    retval                         = ComputeCmac( NULL, buffer, size, keyID, &compCmac );
 80079fc:	f7ff ff0e 	bl	800781c <ComputeCmac>
    if( retval != SECURE_ELEMENT_SUCCESS )
 8007a00:	2800      	cmp	r0, #0
 8007a02:	d104      	bne.n	8007a0e <SecureElementVerifyAesCmac+0x2c>
    {
        return retval;
    }

    if( expectedCmac != compCmac )
 8007a04:	9803      	ldr	r0, [sp, #12]
 8007a06:	1b00      	subs	r0, r0, r4
 8007a08:	1e43      	subs	r3, r0, #1
 8007a0a:	4198      	sbcs	r0, r3
 8007a0c:	b2c0      	uxtb	r0, r0
    }

#endif /* LORAWAN_KMS */

    return retval;
}
 8007a0e:	b005      	add	sp, #20
 8007a10:	bd30      	pop	{r4, r5, pc}

08007a12 <SecureElementAesEncrypt>:

SecureElementStatus_t SecureElementAesEncrypt( uint8_t* buffer, uint16_t size, KeyIdentifier_t keyID,
                                               uint8_t* encBuffer )
{
 8007a12:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007a14:	b0c1      	sub	sp, #260	@ 0x104
 8007a16:	000e      	movs	r6, r1
 8007a18:	0015      	movs	r5, r2
 8007a1a:	001f      	movs	r7, r3
    if( buffer == NULL || encBuffer == NULL )
    {
        return SECURE_ELEMENT_ERROR_NPE;
 8007a1c:	2402      	movs	r4, #2
{
 8007a1e:	9001      	str	r0, [sp, #4]
    if( buffer == NULL || encBuffer == NULL )
 8007a20:	2800      	cmp	r0, #0
 8007a22:	d01b      	beq.n	8007a5c <SecureElementAesEncrypt+0x4a>
 8007a24:	2f00      	cmp	r7, #0
 8007a26:	d019      	beq.n	8007a5c <SecureElementAesEncrypt+0x4a>
    }

    // Check if the size is divisible by 16,
    if( ( size % 16 ) != 0 )
 8007a28:	230f      	movs	r3, #15
    {
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 8007a2a:	3403      	adds	r4, #3
    if( ( size % 16 ) != 0 )
 8007a2c:	4019      	ands	r1, r3
 8007a2e:	421e      	tst	r6, r3
 8007a30:	d114      	bne.n	8007a5c <SecureElementAesEncrypt+0x4a>
    }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    lorawan_aes_context aesContext;
    memset1( aesContext.ksch, '\0', 240 );
 8007a32:	22f0      	movs	r2, #240	@ 0xf0
 8007a34:	a803      	add	r0, sp, #12
 8007a36:	f005 feba 	bl	800d7ae <memset1>

    Key_t*                pItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &pItem );
 8007a3a:	0028      	movs	r0, r5
 8007a3c:	a902      	add	r1, sp, #8
 8007a3e:	f7ff fed5 	bl	80077ec <SecureElementGetKeyByID>
 8007a42:	1e04      	subs	r4, r0, #0

    if( retval == SECURE_ELEMENT_SUCCESS )
 8007a44:	d10a      	bne.n	8007a5c <SecureElementAesEncrypt+0x4a>
    {
        lorawan_aes_set_key(pItem->KeyValue, 16, &aesContext);
 8007a46:	9802      	ldr	r0, [sp, #8]
 8007a48:	2110      	movs	r1, #16
 8007a4a:	3001      	adds	r0, #1
 8007a4c:	aa03      	add	r2, sp, #12
 8007a4e:	f7ff fd01 	bl	8007454 <lorawan_aes_set_key>

        uint8_t block = 0;

        while( size != 0 )
 8007a52:	0035      	movs	r5, r6
 8007a54:	1b70      	subs	r0, r6, r5
 8007a56:	b2c0      	uxtb	r0, r0
 8007a58:	2d00      	cmp	r5, #0
 8007a5a:	d102      	bne.n	8007a62 <SecureElementAesEncrypt+0x50>
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */

    return retval;
}
 8007a5c:	0020      	movs	r0, r4
 8007a5e:	b041      	add	sp, #260	@ 0x104
 8007a60:	bdf0      	pop	{r4, r5, r6, r7, pc}
            lorawan_aes_encrypt(&buffer[block], &encBuffer[block], &aesContext);
 8007a62:	9b01      	ldr	r3, [sp, #4]
 8007a64:	1839      	adds	r1, r7, r0
 8007a66:	aa03      	add	r2, sp, #12
 8007a68:	1818      	adds	r0, r3, r0
            size  = size - 16;
 8007a6a:	3d10      	subs	r5, #16
            lorawan_aes_encrypt(&buffer[block], &encBuffer[block], &aesContext);
 8007a6c:	f7ff fd74 	bl	8007558 <lorawan_aes_encrypt>
            size  = size - 16;
 8007a70:	b2ad      	uxth	r5, r5
 8007a72:	e7ef      	b.n	8007a54 <SecureElementAesEncrypt+0x42>

08007a74 <SecureElementSetKey.part.0>:
SecureElementStatus_t SecureElementSetKey( KeyIdentifier_t keyID, uint8_t* key )
 8007a74:	b5f0      	push	{r4, r5, r6, r7, lr}
        if( SeNvm->KeyList[i].KeyID == keyID )
 8007a76:	4e19      	ldr	r6, [pc, #100]	@ (8007adc <SecureElementSetKey.part.0+0x68>)
SecureElementStatus_t SecureElementSetKey( KeyIdentifier_t keyID, uint8_t* key )
 8007a78:	000d      	movs	r5, r1
        if( SeNvm->KeyList[i].KeyID == keyID )
 8007a7a:	6832      	ldr	r2, [r6, #0]
 8007a7c:	2300      	movs	r3, #0
 8007a7e:	0014      	movs	r4, r2
 8007a80:	2111      	movs	r1, #17
SecureElementStatus_t SecureElementSetKey( KeyIdentifier_t keyID, uint8_t* key )
 8007a82:	b085      	sub	sp, #20
        if( SeNvm->KeyList[i].KeyID == keyID )
 8007a84:	3410      	adds	r4, #16
 8007a86:	000f      	movs	r7, r1
 8007a88:	435f      	muls	r7, r3
 8007a8a:	5de7      	ldrb	r7, [r4, r7]
 8007a8c:	3301      	adds	r3, #1
 8007a8e:	4287      	cmp	r7, r0
 8007a90:	d120      	bne.n	8007ad4 <SecureElementSetKey.part.0+0x60>
            if ( keyID == MC_KEY_0 )
 8007a92:	4359      	muls	r1, r3
 8007a94:	000c      	movs	r4, r1
 8007a96:	2880      	cmp	r0, #128	@ 0x80
 8007a98:	d115      	bne.n	8007ac6 <SecureElementSetKey.part.0+0x52>
                uint8_t               decryptedKey[16] = { 0 };
 8007a9a:	2100      	movs	r1, #0
 8007a9c:	220c      	movs	r2, #12
 8007a9e:	a801      	add	r0, sp, #4
 8007aa0:	9100      	str	r1, [sp, #0]
 8007aa2:	f008 f985 	bl	800fdb0 <memset>
                retval = SecureElementAesEncrypt( key, 16, MC_KE_KEY, decryptedKey );
 8007aa6:	227f      	movs	r2, #127	@ 0x7f
 8007aa8:	2110      	movs	r1, #16
 8007aaa:	0028      	movs	r0, r5
 8007aac:	466b      	mov	r3, sp
 8007aae:	f7ff ffb0 	bl	8007a12 <SecureElementAesEncrypt>
 8007ab2:	0005      	movs	r5, r0
                memcpy1( SeNvm->KeyList[i].KeyValue, decryptedKey, SE_KEY_SIZE );
 8007ab4:	6830      	ldr	r0, [r6, #0]
 8007ab6:	2210      	movs	r2, #16
 8007ab8:	4669      	mov	r1, sp
 8007aba:	1900      	adds	r0, r0, r4
 8007abc:	f005 fe62 	bl	800d784 <memcpy1>
}
 8007ac0:	0028      	movs	r0, r5
 8007ac2:	b005      	add	sp, #20
 8007ac4:	bdf0      	pop	{r4, r5, r6, r7, pc}
                memcpy1( SeNvm->KeyList[i].KeyValue, key, SE_KEY_SIZE );
 8007ac6:	1850      	adds	r0, r2, r1
 8007ac8:	0029      	movs	r1, r5
 8007aca:	2210      	movs	r2, #16
 8007acc:	f005 fe5a 	bl	800d784 <memcpy1>
                return SECURE_ELEMENT_SUCCESS;
 8007ad0:	2500      	movs	r5, #0
 8007ad2:	e7f5      	b.n	8007ac0 <SecureElementSetKey.part.0+0x4c>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 8007ad4:	2b0a      	cmp	r3, #10
 8007ad6:	d1d6      	bne.n	8007a86 <SecureElementSetKey.part.0+0x12>
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 8007ad8:	2503      	movs	r5, #3
 8007ada:	e7f1      	b.n	8007ac0 <SecureElementSetKey.part.0+0x4c>
 8007adc:	20000844 	.word	0x20000844

08007ae0 <SecureElementSetKey>:
        return SECURE_ELEMENT_ERROR_NPE;
 8007ae0:	2302      	movs	r3, #2
{
 8007ae2:	b510      	push	{r4, lr}
    if( key == NULL )
 8007ae4:	2900      	cmp	r1, #0
 8007ae6:	d002      	beq.n	8007aee <SecureElementSetKey+0xe>
 8007ae8:	f7ff ffc4 	bl	8007a74 <SecureElementSetKey.part.0>
 8007aec:	0003      	movs	r3, r0
}
 8007aee:	0018      	movs	r0, r3
 8007af0:	bd10      	pop	{r4, pc}

08007af2 <SecureElementDeriveAndStoreKey>:

SecureElementStatus_t SecureElementDeriveAndStoreKey( uint8_t* input, KeyIdentifier_t rootKeyID,
                                                      KeyIdentifier_t targetKeyID )
{
 8007af2:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8007af4:	0005      	movs	r5, r0
 8007af6:	000e      	movs	r6, r1
 8007af8:	0014      	movs	r4, r2
    if( input == NULL )
    {
        return SECURE_ELEMENT_ERROR_NPE;
 8007afa:	2002      	movs	r0, #2
    if( input == NULL )
 8007afc:	2d00      	cmp	r5, #0
 8007afe:	d016      	beq.n	8007b2e <SecureElementDeriveAndStoreKey+0x3c>
    }

    SecureElementStatus_t retval  = SECURE_ELEMENT_ERROR;

    // In case of MC_KE_KEY, only McRootKey can be used as root key
    if( targetKeyID == MC_KE_KEY )
 8007b00:	2a7f      	cmp	r2, #127	@ 0x7f
 8007b02:	d102      	bne.n	8007b0a <SecureElementDeriveAndStoreKey+0x18>
    {
        if( rootKeyID != MC_ROOT_KEY )
        {
            return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 8007b04:	3001      	adds	r0, #1
        if( rootKeyID != MC_ROOT_KEY )
 8007b06:	2904      	cmp	r1, #4
 8007b08:	d111      	bne.n	8007b2e <SecureElementDeriveAndStoreKey+0x3c>
        }
    }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    uint8_t key[16] = { 0 };
 8007b0a:	2100      	movs	r1, #0
 8007b0c:	220c      	movs	r2, #12
 8007b0e:	a801      	add	r0, sp, #4
 8007b10:	9100      	str	r1, [sp, #0]
 8007b12:	f008 f94d 	bl	800fdb0 <memset>
    // Derive key
    retval = SecureElementAesEncrypt( input, 16, rootKeyID, key );
 8007b16:	466b      	mov	r3, sp
 8007b18:	0032      	movs	r2, r6
 8007b1a:	2110      	movs	r1, #16
 8007b1c:	0028      	movs	r0, r5
 8007b1e:	f7ff ff78 	bl	8007a12 <SecureElementAesEncrypt>
    if( retval != SECURE_ELEMENT_SUCCESS )
 8007b22:	2800      	cmp	r0, #0
 8007b24:	d103      	bne.n	8007b2e <SecureElementDeriveAndStoreKey+0x3c>
    if( key == NULL )
 8007b26:	4669      	mov	r1, sp
 8007b28:	0020      	movs	r0, r4
 8007b2a:	f7ff ffa3 	bl	8007a74 <SecureElementSetKey.part.0>
    {
        retval = SECURE_ELEMENT_ERROR;
    }
    return retval;
#endif /* LORAWAN_KMS */
}
 8007b2e:	b004      	add	sp, #16
 8007b30:	bd70      	pop	{r4, r5, r6, pc}

08007b32 <SecureElementProcessJoinAccept>:

SecureElementStatus_t SecureElementProcessJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t* joinEui,
                                                      uint16_t devNonce, uint8_t* encJoinAccept,
                                                      uint8_t encJoinAcceptSize, uint8_t* decJoinAccept,
                                                      uint8_t* versionMinor )
{
 8007b32:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b34:	001d      	movs	r5, r3
 8007b36:	ab06      	add	r3, sp, #24
    if( ( encJoinAccept == NULL ) || ( decJoinAccept == NULL ) || ( versionMinor == NULL ) )
    {
        return SECURE_ELEMENT_ERROR_NPE;
 8007b38:	2002      	movs	r0, #2
{
 8007b3a:	781c      	ldrb	r4, [r3, #0]
 8007b3c:	9e07      	ldr	r6, [sp, #28]
 8007b3e:	9f08      	ldr	r7, [sp, #32]
    if( ( encJoinAccept == NULL ) || ( decJoinAccept == NULL ) || ( versionMinor == NULL ) )
 8007b40:	2d00      	cmp	r5, #0
 8007b42:	d034      	beq.n	8007bae <SecureElementProcessJoinAccept+0x7c>
 8007b44:	2e00      	cmp	r6, #0
 8007b46:	d032      	beq.n	8007bae <SecureElementProcessJoinAccept+0x7c>
 8007b48:	2f00      	cmp	r7, #0
 8007b4a:	d030      	beq.n	8007bae <SecureElementProcessJoinAccept+0x7c>
    }

    // Check that frame size isn't bigger than a JoinAccept with CFList size
    if( encJoinAcceptSize > LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE )
    {
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 8007b4c:	3003      	adds	r0, #3
    if( encJoinAcceptSize > LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE )
 8007b4e:	2c21      	cmp	r4, #33	@ 0x21
 8007b50:	d82d      	bhi.n	8007bae <SecureElementProcessJoinAccept+0x7c>
    {
        encKeyID = J_S_ENC_KEY;
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

    memcpy1( decJoinAccept, encJoinAccept, encJoinAcceptSize );
 8007b52:	0022      	movs	r2, r4
 8007b54:	0029      	movs	r1, r5
 8007b56:	0030      	movs	r0, r6
 8007b58:	f005 fe14 	bl	800d784 <memcpy1>

    // Decrypt JoinAccept, skip MHDR
    if( SecureElementAesEncrypt( encJoinAccept + LORAMAC_MHDR_FIELD_SIZE, encJoinAcceptSize - LORAMAC_MHDR_FIELD_SIZE,
 8007b5c:	1e61      	subs	r1, r4, #1
 8007b5e:	1c73      	adds	r3, r6, #1
 8007b60:	2201      	movs	r2, #1
 8007b62:	b289      	uxth	r1, r1
 8007b64:	1c68      	adds	r0, r5, #1
 8007b66:	f7ff ff54 	bl	8007a12 <SecureElementAesEncrypt>
 8007b6a:	0003      	movs	r3, r0
                                 encKeyID, decJoinAccept + LORAMAC_MHDR_FIELD_SIZE ) != SECURE_ELEMENT_SUCCESS )
    {
        return SECURE_ELEMENT_FAIL_ENCRYPT;
 8007b6c:	2007      	movs	r0, #7
    if( SecureElementAesEncrypt( encJoinAccept + LORAMAC_MHDR_FIELD_SIZE, encJoinAcceptSize - LORAMAC_MHDR_FIELD_SIZE,
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d11d      	bne.n	8007bae <SecureElementProcessJoinAccept+0x7c>
    }

    *versionMinor = ( ( decJoinAccept[11] & 0x80 ) == 0x80 ) ? 1 : 0;
 8007b72:	7af3      	ldrb	r3, [r6, #11]
 8007b74:	40c3      	lsrs	r3, r0
        }
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */
    else
    {
        return SECURE_ELEMENT_ERROR_INVALID_LORAWAM_SPEC_VERSION;
 8007b76:	3803      	subs	r0, #3
    *versionMinor = ( ( decJoinAccept[11] & 0x80 ) == 0x80 ) ? 1 : 0;
 8007b78:	703b      	strb	r3, [r7, #0]
    if( *versionMinor == 0 )
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d117      	bne.n	8007bae <SecureElementProcessJoinAccept+0x7c>
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 2] << 16 );
 8007b7e:	1932      	adds	r2, r6, r4
 8007b80:	1e93      	subs	r3, r2, #2
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 3] << 24 );
 8007b82:	1e51      	subs	r1, r2, #1
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 2] << 16 );
 8007b84:	781b      	ldrb	r3, [r3, #0]
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 3] << 24 );
 8007b86:	7809      	ldrb	r1, [r1, #0]
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 2] << 16 );
 8007b88:	041b      	lsls	r3, r3, #16
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 3] << 24 );
 8007b8a:	0609      	lsls	r1, r1, #24
 8007b8c:	430b      	orrs	r3, r1
    mic = ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE] << 0 );
 8007b8e:	1f11      	subs	r1, r2, #4
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 1] << 8 );
 8007b90:	3a03      	subs	r2, #3
    mic = ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE] << 0 );
 8007b92:	7809      	ldrb	r1, [r1, #0]
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 1] << 8 );
 8007b94:	7812      	ldrb	r2, [r2, #0]
 8007b96:	430b      	orrs	r3, r1
 8007b98:	0212      	lsls	r2, r2, #8
        if( SecureElementVerifyAesCmac( decJoinAccept, ( encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE ), mic, NWK_KEY ) !=
 8007b9a:	3c04      	subs	r4, #4
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 3] << 24 );
 8007b9c:	431a      	orrs	r2, r3
        if( SecureElementVerifyAesCmac( decJoinAccept, ( encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE ), mic, NWK_KEY ) !=
 8007b9e:	0030      	movs	r0, r6
 8007ba0:	2301      	movs	r3, #1
 8007ba2:	b2a1      	uxth	r1, r4
 8007ba4:	f7ff ff1d 	bl	80079e2 <SecureElementVerifyAesCmac>
 8007ba8:	1e43      	subs	r3, r0, #1
 8007baa:	4198      	sbcs	r0, r3
 8007bac:	b2c0      	uxtb	r0, r0
    }

    return SECURE_ELEMENT_SUCCESS;
}
 8007bae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007bb0 <SecureElementRandomNumber>:

SecureElementStatus_t SecureElementRandomNumber( uint32_t* randomNum )
{
 8007bb0:	b510      	push	{r4, lr}
 8007bb2:	0004      	movs	r4, r0
    if( randomNum == NULL )
    {
        return SECURE_ELEMENT_ERROR_NPE;
 8007bb4:	2002      	movs	r0, #2
    if( randomNum == NULL )
 8007bb6:	2c00      	cmp	r4, #0
 8007bb8:	d004      	beq.n	8007bc4 <SecureElementRandomNumber+0x14>
    }
    *randomNum = Radio.Random();
 8007bba:	4b03      	ldr	r3, [pc, #12]	@ (8007bc8 <SecureElementRandomNumber+0x18>)
 8007bbc:	695b      	ldr	r3, [r3, #20]
 8007bbe:	4798      	blx	r3
 8007bc0:	6020      	str	r0, [r4, #0]
    return SECURE_ELEMENT_SUCCESS;
 8007bc2:	2000      	movs	r0, #0
}
 8007bc4:	bd10      	pop	{r4, pc}
 8007bc6:	46c0      	nop			@ (mov r8, r8)
 8007bc8:	080108d8 	.word	0x080108d8

08007bcc <SecureElementSetDevEui>:

SecureElementStatus_t SecureElementSetDevEui( uint8_t* devEui )
{
 8007bcc:	0001      	movs	r1, r0
 8007bce:	b510      	push	{r4, lr}
    if( devEui == NULL )
    {
        return SECURE_ELEMENT_ERROR_NPE;
 8007bd0:	2002      	movs	r0, #2
    if( devEui == NULL )
 8007bd2:	2900      	cmp	r1, #0
 8007bd4:	d005      	beq.n	8007be2 <SecureElementSetDevEui+0x16>
    }
    memcpy1( SeNvm->DevEui, devEui, SE_EUI_SIZE );
 8007bd6:	4b03      	ldr	r3, [pc, #12]	@ (8007be4 <SecureElementSetDevEui+0x18>)
 8007bd8:	2208      	movs	r2, #8
 8007bda:	6818      	ldr	r0, [r3, #0]
 8007bdc:	f005 fdd2 	bl	800d784 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 8007be0:	2000      	movs	r0, #0
}
 8007be2:	bd10      	pop	{r4, pc}
 8007be4:	20000844 	.word	0x20000844

08007be8 <SecureElementGetDevEui>:

uint8_t* SecureElementGetDevEui( void )
{
    return SeNvm->DevEui;
 8007be8:	4b01      	ldr	r3, [pc, #4]	@ (8007bf0 <SecureElementGetDevEui+0x8>)
 8007bea:	6818      	ldr	r0, [r3, #0]
}
 8007bec:	4770      	bx	lr
 8007bee:	46c0      	nop			@ (mov r8, r8)
 8007bf0:	20000844 	.word	0x20000844

08007bf4 <SecureElementSetJoinEui>:

SecureElementStatus_t SecureElementSetJoinEui( uint8_t* joinEui )
{
 8007bf4:	0001      	movs	r1, r0
 8007bf6:	b510      	push	{r4, lr}
    if( joinEui == NULL )
    {
        return SECURE_ELEMENT_ERROR_NPE;
 8007bf8:	2002      	movs	r0, #2
    if( joinEui == NULL )
 8007bfa:	2900      	cmp	r1, #0
 8007bfc:	d006      	beq.n	8007c0c <SecureElementSetJoinEui+0x18>
    }
    memcpy1( SeNvm->JoinEui, joinEui, SE_EUI_SIZE );
 8007bfe:	4b04      	ldr	r3, [pc, #16]	@ (8007c10 <SecureElementSetJoinEui+0x1c>)
 8007c00:	2208      	movs	r2, #8
 8007c02:	6818      	ldr	r0, [r3, #0]
 8007c04:	3008      	adds	r0, #8
 8007c06:	f005 fdbd 	bl	800d784 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 8007c0a:	2000      	movs	r0, #0
}
 8007c0c:	bd10      	pop	{r4, pc}
 8007c0e:	46c0      	nop			@ (mov r8, r8)
 8007c10:	20000844 	.word	0x20000844

08007c14 <SecureElementGetJoinEui>:

uint8_t* SecureElementGetJoinEui( void )
{
    return SeNvm->JoinEui;
 8007c14:	4b01      	ldr	r3, [pc, #4]	@ (8007c1c <SecureElementGetJoinEui+0x8>)
 8007c16:	6818      	ldr	r0, [r3, #0]
 8007c18:	3008      	adds	r0, #8
}
 8007c1a:	4770      	bx	lr
 8007c1c:	20000844 	.word	0x20000844

08007c20 <LmHandlerDeviceTimeReq>:
        return LORAMAC_HANDLER_ERROR;
    }
}

LmHandlerErrorStatus_t LmHandlerDeviceTimeReq( void )
{
 8007c20:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    LoRaMacStatus_t status;
    MlmeReq_t mlmeReq;

    mlmeReq.Type = MLME_DEVICE_TIME;
 8007c22:	230a      	movs	r3, #10
 8007c24:	a801      	add	r0, sp, #4
 8007c26:	7003      	strb	r3, [r0, #0]

    status = LoRaMacMlmeRequest( &mlmeReq );
 8007c28:	f003 fa6e 	bl	800b108 <LoRaMacMlmeRequest>

    if( status == LORAMAC_STATUS_OK )
 8007c2c:	1e43      	subs	r3, r0, #1
 8007c2e:	4198      	sbcs	r0, r3
    }
    else
    {
        return LORAMAC_HANDLER_ERROR;
    }
}
 8007c30:	4240      	negs	r0, r0
 8007c32:	b007      	add	sp, #28
 8007c34:	bd00      	pop	{pc}
	...

08007c38 <McpsConfirm>:
 *=============================================================================
 */

static void McpsConfirm( McpsConfirm_t *mcpsConfirm )
{
    TxParams.IsMcpsConfirm = 1;
 8007c38:	2301      	movs	r3, #1
{
 8007c3a:	b570      	push	{r4, r5, r6, lr}
    TxParams.IsMcpsConfirm = 1;
 8007c3c:	4c10      	ldr	r4, [pc, #64]	@ (8007c80 <McpsConfirm+0x48>)
{
 8007c3e:	0005      	movs	r5, r0
    TxParams.IsMcpsConfirm = 1;
 8007c40:	7023      	strb	r3, [r4, #0]
    TxParams.Status = mcpsConfirm->Status;
 8007c42:	7843      	ldrb	r3, [r0, #1]
 8007c44:	0026      	movs	r6, r4
 8007c46:	7063      	strb	r3, [r4, #1]
    TxParams.Datarate = mcpsConfirm->Datarate;
 8007c48:	7883      	ldrb	r3, [r0, #2]
 8007c4a:	361c      	adds	r6, #28
 8007c4c:	7123      	strb	r3, [r4, #4]
    TxParams.UplinkCounter = mcpsConfirm->UpLinkCounter;
 8007c4e:	68c3      	ldr	r3, [r0, #12]
 8007c50:	60a3      	str	r3, [r4, #8]
    TxParams.TxPower = mcpsConfirm->TxPower;
 8007c52:	78c3      	ldrb	r3, [r0, #3]
 8007c54:	7523      	strb	r3, [r4, #20]
    TxParams.Channel = mcpsConfirm->Channel;
 8007c56:	6903      	ldr	r3, [r0, #16]
 8007c58:	7563      	strb	r3, [r4, #21]
    TxParams.AckReceived = mcpsConfirm->AckReceived;
 8007c5a:	7903      	ldrb	r3, [r0, #4]

    LmHandlerCallbacks->OnTxData( &TxParams );
 8007c5c:	0020      	movs	r0, r4
    TxParams.AckReceived = mcpsConfirm->AckReceived;
 8007c5e:	70e3      	strb	r3, [r4, #3]
    LmHandlerCallbacks->OnTxData( &TxParams );
 8007c60:	69a3      	ldr	r3, [r4, #24]
 8007c62:	3430      	adds	r4, #48	@ 0x30
 8007c64:	6a1b      	ldr	r3, [r3, #32]
 8007c66:	4798      	blx	r3

static void LmHandlerPackagesNotify( PackageNotifyTypes_t notifyType, void *params )
{
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
    {
        if( LmHandlerPackages[i] != NULL )
 8007c68:	6833      	ldr	r3, [r6, #0]
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d004      	beq.n	8007c78 <McpsConfirm+0x40>
        {
            switch( notifyType )
            {
                case PACKAGE_MCPS_CONFIRM:
                {
                    if( LmHandlerPackages[i]->OnMcpsConfirmProcess != NULL )
 8007c6e:	699b      	ldr	r3, [r3, #24]
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d001      	beq.n	8007c78 <McpsConfirm+0x40>
                    {
                        LmHandlerPackages[i]->OnMcpsConfirmProcess( ( McpsConfirm_t* ) params );
 8007c74:	0028      	movs	r0, r5
 8007c76:	4798      	blx	r3
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 8007c78:	3604      	adds	r6, #4
 8007c7a:	42b4      	cmp	r4, r6
 8007c7c:	d1f4      	bne.n	8007c68 <McpsConfirm+0x30>
}
 8007c7e:	bd70      	pop	{r4, r5, r6, pc}
 8007c80:	20000848 	.word	0x20000848

08007c84 <LmHandlerConfigure>:
{
 8007c84:	b5f0      	push	{r4, r5, r6, r7, lr}
    UTIL_MEM_cpy_8((void *)&LmHandlerParams, (const void *)handlerParams, sizeof(LmHandlerParams_t));
 8007c86:	4f5b      	ldr	r7, [pc, #364]	@ (8007df4 <LmHandlerConfigure+0x170>)
 8007c88:	4b5b      	ldr	r3, [pc, #364]	@ (8007df8 <LmHandlerConfigure+0x174>)
{
 8007c8a:	0001      	movs	r1, r0
    UTIL_MEM_cpy_8((void *)&LmHandlerParams, (const void *)handlerParams, sizeof(LmHandlerParams_t));
 8007c8c:	2210      	movs	r2, #16
{
 8007c8e:	b0a1      	sub	sp, #132	@ 0x84
    UTIL_MEM_cpy_8((void *)&LmHandlerParams, (const void *)handlerParams, sizeof(LmHandlerParams_t));
 8007c90:	0038      	movs	r0, r7
 8007c92:	9309      	str	r3, [sp, #36]	@ 0x24
 8007c94:	f007 fa52 	bl	800f13c <UTIL_MEM_cpy_8>
    loraInfo = LoraInfo_GetPtr();
 8007c98:	f7fa ff24 	bl	8002ae4 <LoraInfo_GetPtr>
    if (0U != ((1 << (LmHandlerParams.ActiveRegion)) & (loraInfo->Region)))
 8007c9c:	2301      	movs	r3, #1
 8007c9e:	783a      	ldrb	r2, [r7, #0]
 8007ca0:	6841      	ldr	r1, [r0, #4]
 8007ca2:	4093      	lsls	r3, r2
 8007ca4:	0008      	movs	r0, r1
 8007ca6:	4018      	ands	r0, r3
 8007ca8:	4219      	tst	r1, r3
 8007caa:	d00a      	beq.n	8007cc2 <LmHandlerConfigure+0x3e>
        if (LoRaMacInitialization(&LoRaMacPrimitives, &LoRaMacCallbacks, LmHandlerParams.ActiveRegion) != LORAMAC_STATUS_OK)
 8007cac:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007cae:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007cb0:	3140      	adds	r1, #64	@ 0x40
 8007cb2:	3054      	adds	r0, #84	@ 0x54
 8007cb4:	f002 fd08 	bl	800a6c8 <LoRaMacInitialization>
 8007cb8:	1e06      	subs	r6, r0, #0
 8007cba:	d008      	beq.n	8007cce <LmHandlerConfigure+0x4a>
            return LORAMAC_HANDLER_ERROR;
 8007cbc:	2001      	movs	r0, #1
 8007cbe:	4240      	negs	r0, r0
 8007cc0:	e095      	b.n	8007dee <LmHandlerConfigure+0x16a>
        MW_LOG(TS_ON, VLEVEL_ALWAYS, "error: Region is not defined in the MW: set lorawan_conf.h accordingly\r\n");
 8007cc2:	2201      	movs	r2, #1
 8007cc4:	0001      	movs	r1, r0
 8007cc6:	4b4d      	ldr	r3, [pc, #308]	@ (8007dfc <LmHandlerConfigure+0x178>)
 8007cc8:	f007 f924 	bl	800ef14 <UTIL_ADV_TRACE_COND_FSend>
        while (1) {}  /* error: Region is not defined in the MW */
 8007ccc:	e7fe      	b.n	8007ccc <LmHandlerConfigure+0x48>
    nbNvmData = NvmDataMgmtRestore( );
 8007cce:	f000 ff6a 	bl	8008ba6 <NvmDataMgmtRestore>
    if( nbNvmData > 0 )
 8007cd2:	1e42      	subs	r2, r0, #1
 8007cd4:	4190      	sbcs	r0, r2
 8007cd6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
    mibReq.Type = MIB_DEV_EUI;
 8007cd8:	ad0e      	add	r5, sp, #56	@ 0x38
 8007cda:	3364      	adds	r3, #100	@ 0x64
    if( nbNvmData > 0 )
 8007cdc:	7018      	strb	r0, [r3, #0]
    mibReq.Type = MIB_DEV_EUI;
 8007cde:	2302      	movs	r3, #2
    LoRaMacMibGetRequestConfirm( &mibReq );
 8007ce0:	0028      	movs	r0, r5
    mibReq.Type = MIB_DEV_EUI;
 8007ce2:	702b      	strb	r3, [r5, #0]
    LoRaMacMibGetRequestConfirm( &mibReq );
 8007ce4:	f002 ff1c 	bl	800ab20 <LoRaMacMibGetRequestConfirm>
    memcpy1( CommissioningParams.DevEui, mibReq.Param.DevEui, 8 );
 8007ce8:	4c45      	ldr	r4, [pc, #276]	@ (8007e00 <LmHandlerConfigure+0x17c>)
 8007cea:	2208      	movs	r2, #8
 8007cec:	0020      	movs	r0, r4
 8007cee:	6869      	ldr	r1, [r5, #4]
 8007cf0:	f005 fd48 	bl	800d784 <memcpy1>
    mibReq.Type = MIB_JOIN_EUI;
 8007cf4:	2303      	movs	r3, #3
    LoRaMacMibGetRequestConfirm( &mibReq );
 8007cf6:	0028      	movs	r0, r5
    mibReq.Type = MIB_JOIN_EUI;
 8007cf8:	702b      	strb	r3, [r5, #0]
    LoRaMacMibGetRequestConfirm( &mibReq );
 8007cfa:	f002 ff11 	bl	800ab20 <LoRaMacMibGetRequestConfirm>
    memcpy1( CommissioningParams.JoinEui, mibReq.Param.JoinEui, 8 );
 8007cfe:	0020      	movs	r0, r4
 8007d00:	2208      	movs	r2, #8
 8007d02:	6869      	ldr	r1, [r5, #4]
 8007d04:	3008      	adds	r0, #8
 8007d06:	f005 fd3d 	bl	800d784 <memcpy1>
    CommissioningParams.DevAddr = LmHandlerCallbacks->GetDevAddr();
 8007d0a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007d0c:	699b      	ldr	r3, [r3, #24]
 8007d0e:	68db      	ldr	r3, [r3, #12]
 8007d10:	4798      	blx	r3
    mibReq.Type = MIB_DEV_ADDR;
 8007d12:	2306      	movs	r3, #6
    CommissioningParams.DevAddr = LmHandlerCallbacks->GetDevAddr();
 8007d14:	6160      	str	r0, [r4, #20]
    mibReq.Param.DevAddr = CommissioningParams.DevAddr;
 8007d16:	6068      	str	r0, [r5, #4]
    LoRaMacMibSetRequestConfirm(&mibReq);
 8007d18:	0028      	movs	r0, r5
    mibReq.Type = MIB_DEV_ADDR;
 8007d1a:	702b      	strb	r3, [r5, #0]
    LoRaMacMibSetRequestConfirm(&mibReq);
 8007d1c:	f002 ffb2 	bl	800ac84 <LoRaMacMibSetRequestConfirm>
    MW_LOG(TS_OFF, VLEVEL_M, "###### DevEui:  %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 8007d20:	79e2      	ldrb	r2, [r4, #7]
 8007d22:	0031      	movs	r1, r6
 8007d24:	9207      	str	r2, [sp, #28]
 8007d26:	79a2      	ldrb	r2, [r4, #6]
 8007d28:	4b36      	ldr	r3, [pc, #216]	@ (8007e04 <LmHandlerConfigure+0x180>)
 8007d2a:	9206      	str	r2, [sp, #24]
 8007d2c:	7962      	ldrb	r2, [r4, #5]
 8007d2e:	2002      	movs	r0, #2
 8007d30:	9205      	str	r2, [sp, #20]
 8007d32:	7922      	ldrb	r2, [r4, #4]
 8007d34:	9204      	str	r2, [sp, #16]
 8007d36:	78e2      	ldrb	r2, [r4, #3]
 8007d38:	9203      	str	r2, [sp, #12]
 8007d3a:	78a2      	ldrb	r2, [r4, #2]
 8007d3c:	9202      	str	r2, [sp, #8]
 8007d3e:	7862      	ldrb	r2, [r4, #1]
 8007d40:	9201      	str	r2, [sp, #4]
 8007d42:	7822      	ldrb	r2, [r4, #0]
 8007d44:	9200      	str	r2, [sp, #0]
 8007d46:	0032      	movs	r2, r6
 8007d48:	f007 f8e4 	bl	800ef14 <UTIL_ADV_TRACE_COND_FSend>
    MW_LOG(TS_OFF, VLEVEL_M, "###### AppEui:  %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 8007d4c:	7be2      	ldrb	r2, [r4, #15]
 8007d4e:	0031      	movs	r1, r6
 8007d50:	9207      	str	r2, [sp, #28]
 8007d52:	7ba2      	ldrb	r2, [r4, #14]
 8007d54:	4b2c      	ldr	r3, [pc, #176]	@ (8007e08 <LmHandlerConfigure+0x184>)
 8007d56:	9206      	str	r2, [sp, #24]
 8007d58:	7b62      	ldrb	r2, [r4, #13]
 8007d5a:	2002      	movs	r0, #2
 8007d5c:	9205      	str	r2, [sp, #20]
 8007d5e:	7b22      	ldrb	r2, [r4, #12]
 8007d60:	9204      	str	r2, [sp, #16]
 8007d62:	7ae2      	ldrb	r2, [r4, #11]
 8007d64:	9203      	str	r2, [sp, #12]
 8007d66:	7aa2      	ldrb	r2, [r4, #10]
 8007d68:	9202      	str	r2, [sp, #8]
 8007d6a:	7a62      	ldrb	r2, [r4, #9]
 8007d6c:	9201      	str	r2, [sp, #4]
 8007d6e:	7a22      	ldrb	r2, [r4, #8]
 8007d70:	9200      	str	r2, [sp, #0]
 8007d72:	0032      	movs	r2, r6
 8007d74:	f007 f8ce 	bl	800ef14 <UTIL_ADV_TRACE_COND_FSend>
    MW_LOG(TS_OFF, VLEVEL_M, "###### DevAddr: %02X:%02X:%02X:%02X\r\n",
 8007d78:	7d22      	ldrb	r2, [r4, #20]
 8007d7a:	0031      	movs	r1, r6
 8007d7c:	9203      	str	r2, [sp, #12]
 8007d7e:	7d62      	ldrb	r2, [r4, #21]
 8007d80:	4b22      	ldr	r3, [pc, #136]	@ (8007e0c <LmHandlerConfigure+0x188>)
 8007d82:	9202      	str	r2, [sp, #8]
 8007d84:	7da2      	ldrb	r2, [r4, #22]
 8007d86:	2002      	movs	r0, #2
 8007d88:	9201      	str	r2, [sp, #4]
 8007d8a:	7de2      	ldrb	r2, [r4, #23]
    mibReq.Type = MIB_PUBLIC_NETWORK;
 8007d8c:	240f      	movs	r4, #15
    MW_LOG(TS_OFF, VLEVEL_M, "###### DevAddr: %02X:%02X:%02X:%02X\r\n",
 8007d8e:	9200      	str	r2, [sp, #0]
 8007d90:	0032      	movs	r2, r6
 8007d92:	f007 f8bf 	bl	800ef14 <UTIL_ADV_TRACE_COND_FSend>
    mibReq.Param.EnablePublicNetwork = LORAWAN_PUBLIC_NETWORK;
 8007d96:	2301      	movs	r3, #1
    LoRaMacMibSetRequestConfirm(&mibReq);
 8007d98:	0028      	movs	r0, r5
    mibReq.Param.EnablePublicNetwork = LORAWAN_PUBLIC_NETWORK;
 8007d9a:	712b      	strb	r3, [r5, #4]
    mibReq.Type = MIB_PUBLIC_NETWORK;
 8007d9c:	702c      	strb	r4, [r5, #0]
    LoRaMacMibSetRequestConfirm(&mibReq);
 8007d9e:	f002 ff71 	bl	800ac84 <LoRaMacMibSetRequestConfirm>
    mibReq.Type = MIB_NET_ID;
 8007da2:	2305      	movs	r3, #5
    LoRaMacMibSetRequestConfirm(&mibReq);
 8007da4:	0028      	movs	r0, r5
    mibReq.Type = MIB_NET_ID;
 8007da6:	702b      	strb	r3, [r5, #0]
    mibReq.Param.NetID = LORAWAN_NETWORK_ID;
 8007da8:	606e      	str	r6, [r5, #4]
    LoRaMacMibSetRequestConfirm(&mibReq);
 8007daa:	f002 ff6b 	bl	800ac84 <LoRaMacMibSetRequestConfirm>
    mibReq.Type = MIB_REPEATER_SUPPORT;
 8007dae:	2310      	movs	r3, #16
    LoRaMacMibSetRequestConfirm( &mibReq );
 8007db0:	0028      	movs	r0, r5
    mibReq.Type = MIB_REPEATER_SUPPORT;
 8007db2:	702b      	strb	r3, [r5, #0]
    mibReq.Param.EnableRepeaterSupport = LORAWAN_REPEATER_SUPPORT;
 8007db4:	712e      	strb	r6, [r5, #4]
    LoRaMacMibSetRequestConfirm( &mibReq );
 8007db6:	f002 ff65 	bl	800ac84 <LoRaMacMibSetRequestConfirm>
    mibReq.Type = MIB_ADR;
 8007dba:	2304      	movs	r3, #4
 8007dbc:	702b      	strb	r3, [r5, #0]
    mibReq.Param.AdrEnable = LmHandlerParams.AdrEnable;
 8007dbe:	78bb      	ldrb	r3, [r7, #2]
    LoRaMacMibSetRequestConfirm( &mibReq );
 8007dc0:	0028      	movs	r0, r5
    mibReq.Param.AdrEnable = LmHandlerParams.AdrEnable;
 8007dc2:	712b      	strb	r3, [r5, #4]
    LoRaMacMibSetRequestConfirm( &mibReq );
 8007dc4:	f002 ff5e 	bl	800ac84 <LoRaMacMibSetRequestConfirm>
    getPhy.Attribute = PHY_DUTY_CYCLE;
 8007dc8:	a90c      	add	r1, sp, #48	@ 0x30
    phyParam = RegionGetPhyParam( LmHandlerParams.ActiveRegion, &getPhy );
 8007dca:	7838      	ldrb	r0, [r7, #0]
    getPhy.Attribute = PHY_DUTY_CYCLE;
 8007dcc:	700c      	strb	r4, [r1, #0]
    phyParam = RegionGetPhyParam( LmHandlerParams.ActiveRegion, &getPhy );
 8007dce:	f004 fb3a 	bl	800c446 <RegionGetPhyParam>
    LmHandlerParams.DutyCycleEnabled = (bool) phyParam.Value;
 8007dd2:	1e43      	subs	r3, r0, #1
 8007dd4:	4198      	sbcs	r0, r3
    mibReq.Type = MIB_SYSTEM_MAX_RX_ERROR;
 8007dd6:	2322      	movs	r3, #34	@ 0x22
    LmHandlerParams.DutyCycleEnabled = (bool) phyParam.Value;
 8007dd8:	7178      	strb	r0, [r7, #5]
    mibReq.Type = MIB_SYSTEM_MAX_RX_ERROR;
 8007dda:	a817      	add	r0, sp, #92	@ 0x5c
 8007ddc:	7003      	strb	r3, [r0, #0]
    mibReq.Param.SystemMaxRxError = maxErrorInMs;
 8007dde:	3b0e      	subs	r3, #14
 8007de0:	6043      	str	r3, [r0, #4]
    if( LoRaMacMibSetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 8007de2:	f002 ff4f 	bl	800ac84 <LoRaMacMibSetRequestConfirm>
    LoRaMacTestSetDutyCycleOn( LmHandlerParams.DutyCycleEnabled );
 8007de6:	7978      	ldrb	r0, [r7, #5]
 8007de8:	f003 fc46 	bl	800b678 <LoRaMacTestSetDutyCycleOn>
    return LORAMAC_HANDLER_SUCCESS;
 8007dec:	0030      	movs	r0, r6
}
 8007dee:	b021      	add	sp, #132	@ 0x84
 8007df0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007df2:	46c0      	nop			@ (mov r8, r8)
 8007df4:	20000878 	.word	0x20000878
 8007df8:	20000848 	.word	0x20000848
 8007dfc:	0801208e 	.word	0x0801208e
 8007e00:	2000009c 	.word	0x2000009c
 8007e04:	080120d7 	.word	0x080120d7
 8007e08:	08012111 	.word	0x08012111
 8007e0c:	0801214b 	.word	0x0801214b

08007e10 <LmHandlerProcess>:
{
 8007e10:	b570      	push	{r4, r5, r6, lr}
    LoRaMacProcess( );
 8007e12:	f001 feed 	bl	8009bf0 <LoRaMacProcess>
    }
}

static void LmHandlerPackagesProcess( void )
{
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 8007e16:	4c0b      	ldr	r4, [pc, #44]	@ (8007e44 <LmHandlerProcess+0x34>)
 8007e18:	4d0b      	ldr	r5, [pc, #44]	@ (8007e48 <LmHandlerProcess+0x38>)
    {
        if( ( LmHandlerPackages[i] != NULL ) &&
 8007e1a:	6823      	ldr	r3, [r4, #0]
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d00b      	beq.n	8007e38 <LmHandlerProcess+0x28>
 8007e20:	691a      	ldr	r2, [r3, #16]
 8007e22:	2a00      	cmp	r2, #0
 8007e24:	d008      	beq.n	8007e38 <LmHandlerProcess+0x28>
    if (( id < PKG_MAX_NUMBER ) && ( LmHandlerPackages[id]->IsInitialized != NULL ))
 8007e26:	689b      	ldr	r3, [r3, #8]
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d005      	beq.n	8007e38 <LmHandlerProcess+0x28>
        return LmHandlerPackages[id]->IsInitialized( );
 8007e2c:	4798      	blx	r3
            ( LmHandlerPackages[i]->Process != NULL ) &&
 8007e2e:	2800      	cmp	r0, #0
 8007e30:	d002      	beq.n	8007e38 <LmHandlerProcess+0x28>
            ( LmHandlerPackageIsInitialized( i ) != false ) )
        {
            LmHandlerPackages[i]->Process( );
 8007e32:	6823      	ldr	r3, [r4, #0]
 8007e34:	691b      	ldr	r3, [r3, #16]
 8007e36:	4798      	blx	r3
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 8007e38:	3404      	adds	r4, #4
 8007e3a:	42ac      	cmp	r4, r5
 8007e3c:	d1ed      	bne.n	8007e1a <LmHandlerProcess+0xa>
    NvmDataMgmtStore( );
 8007e3e:	f000 feb0 	bl	8008ba2 <NvmDataMgmtStore>
}
 8007e42:	bd70      	pop	{r4, r5, r6, pc}
 8007e44:	20000864 	.word	0x20000864
 8007e48:	20000878 	.word	0x20000878

08007e4c <LmHandlerJoinStatus>:
{
 8007e4c:	b500      	push	{lr}
 8007e4e:	b08b      	sub	sp, #44	@ 0x2c
    mibReq.Type = MIB_NETWORK_ACTIVATION;
 8007e50:	2301      	movs	r3, #1
 8007e52:	466a      	mov	r2, sp
    status = LoRaMacMibGetRequestConfirm( &mibReq );
 8007e54:	a801      	add	r0, sp, #4
    mibReq.Type = MIB_NETWORK_ACTIVATION;
 8007e56:	7113      	strb	r3, [r2, #4]
    status = LoRaMacMibGetRequestConfirm( &mibReq );
 8007e58:	f002 fe62 	bl	800ab20 <LoRaMacMibGetRequestConfirm>
 8007e5c:	0003      	movs	r3, r0
            return LORAMAC_HANDLER_RESET;
 8007e5e:	2000      	movs	r0, #0
    if( status == LORAMAC_STATUS_OK )
 8007e60:	4283      	cmp	r3, r0
 8007e62:	d104      	bne.n	8007e6e <LmHandlerJoinStatus+0x22>
        if( mibReq.Param.NetworkActivation == ACTIVATION_TYPE_NONE )
 8007e64:	466b      	mov	r3, sp
 8007e66:	7a18      	ldrb	r0, [r3, #8]
 8007e68:	1e43      	subs	r3, r0, #1
 8007e6a:	4198      	sbcs	r0, r3
 8007e6c:	b2c0      	uxtb	r0, r0
}
 8007e6e:	b00b      	add	sp, #44	@ 0x2c
 8007e70:	bd00      	pop	{pc}

08007e72 <LmHandlerLinkCheckReq>:
{
 8007e72:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    mlmeReq.Type = MLME_LINK_CHECK;
 8007e74:	2304      	movs	r3, #4
 8007e76:	a801      	add	r0, sp, #4
 8007e78:	7003      	strb	r3, [r0, #0]
    status = LoRaMacMlmeRequest( &mlmeReq );
 8007e7a:	f003 f945 	bl	800b108 <LoRaMacMlmeRequest>
    if( status == LORAMAC_STATUS_OK )
 8007e7e:	1e43      	subs	r3, r0, #1
 8007e80:	4198      	sbcs	r0, r3
}
 8007e82:	4240      	negs	r0, r0
 8007e84:	b007      	add	sp, #28
 8007e86:	bd00      	pop	{pc}

08007e88 <LmHandlerRequestClass>:
{
 8007e88:	b570      	push	{r4, r5, r6, lr}
 8007e8a:	b08c      	sub	sp, #48	@ 0x30
 8007e8c:	0004      	movs	r4, r0
    if (LoRaMacIsBusy() == true)
 8007e8e:	f001 fe9d 	bl	8009bcc <LoRaMacIsBusy>
 8007e92:	1e06      	subs	r6, r0, #0
 8007e94:	d146      	bne.n	8007f24 <LmHandlerRequestClass+0x9c>
    if (LmHandlerJoinStatus() != LORAMAC_HANDLER_SET)
 8007e96:	f7ff ffd9 	bl	8007e4c <LmHandlerJoinStatus>
 8007e9a:	2801      	cmp	r0, #1
 8007e9c:	d144      	bne.n	8007f28 <LmHandlerRequestClass+0xa0>
    mibReq.Type = MIB_DEVICE_CLASS;
 8007e9e:	ad03      	add	r5, sp, #12
    if ( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 8007ea0:	0028      	movs	r0, r5
    mibReq.Type = MIB_DEVICE_CLASS;
 8007ea2:	702e      	strb	r6, [r5, #0]
    if ( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 8007ea4:	f002 fe3c 	bl	800ab20 <LoRaMacMibGetRequestConfirm>
 8007ea8:	2800      	cmp	r0, #0
 8007eaa:	d138      	bne.n	8007f1e <LmHandlerRequestClass+0x96>
    currentClass = mibReq.Param.Class;
 8007eac:	792b      	ldrb	r3, [r5, #4]
    if( currentClass != newClass )
 8007eae:	42a3      	cmp	r3, r4
 8007eb0:	d005      	beq.n	8007ebe <LmHandlerRequestClass+0x36>
        switch( newClass )
 8007eb2:	2c01      	cmp	r4, #1
 8007eb4:	d033      	beq.n	8007f1e <LmHandlerRequestClass+0x96>
 8007eb6:	2c02      	cmp	r4, #2
 8007eb8:	d01b      	beq.n	8007ef2 <LmHandlerRequestClass+0x6a>
 8007eba:	2c00      	cmp	r4, #0
 8007ebc:	d002      	beq.n	8007ec4 <LmHandlerRequestClass+0x3c>
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 8007ebe:	2000      	movs	r0, #0
}
 8007ec0:	b00c      	add	sp, #48	@ 0x30
 8007ec2:	bd70      	pop	{r4, r5, r6, pc}
                if( currentClass != CLASS_A )
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d0fa      	beq.n	8007ebe <LmHandlerRequestClass+0x36>
                    if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 8007ec8:	0028      	movs	r0, r5
                    mibReq.Param.Class = newClass;
 8007eca:	712c      	strb	r4, [r5, #4]
                    if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 8007ecc:	f002 feda 	bl	800ac84 <LoRaMacMibSetRequestConfirm>
 8007ed0:	1e01      	subs	r1, r0, #0
 8007ed2:	d124      	bne.n	8007f1e <LmHandlerRequestClass+0x96>
    }
}

static void DisplayClassUpdate(DeviceClass_t deviceClass)
{
    MW_LOG(TS_OFF, VLEVEL_M, "Switch to Class %c done\r\n", "ABC"[deviceClass]);
 8007ed4:	2241      	movs	r2, #65	@ 0x41
 8007ed6:	4b15      	ldr	r3, [pc, #84]	@ (8007f2c <LmHandlerRequestClass+0xa4>)
 8007ed8:	9200      	str	r2, [sp, #0]
 8007eda:	0002      	movs	r2, r0
 8007edc:	2002      	movs	r0, #2
 8007ede:	f007 f819 	bl	800ef14 <UTIL_ADV_TRACE_COND_FSend>
                        if (LmHandlerCallbacks->OnClassChange != NULL)
 8007ee2:	4b13      	ldr	r3, [pc, #76]	@ (8007f30 <LmHandlerRequestClass+0xa8>)
                            LmHandlerCallbacks->OnClassChange( newClass );
 8007ee4:	2000      	movs	r0, #0
                        if (LmHandlerCallbacks->OnClassChange != NULL)
 8007ee6:	699b      	ldr	r3, [r3, #24]
 8007ee8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d0e7      	beq.n	8007ebe <LmHandlerRequestClass+0x36>
                            LmHandlerCallbacks->OnClassChange( newClass );
 8007eee:	4798      	blx	r3
 8007ef0:	e7e5      	b.n	8007ebe <LmHandlerRequestClass+0x36>
                if( currentClass != CLASS_A )
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d113      	bne.n	8007f1e <LmHandlerRequestClass+0x96>
                    if (LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK)
 8007ef6:	0028      	movs	r0, r5
                    mibReq.Param.Class = newClass;
 8007ef8:	712c      	strb	r4, [r5, #4]
                    if (LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK)
 8007efa:	f002 fec3 	bl	800ac84 <LoRaMacMibSetRequestConfirm>
 8007efe:	1e01      	subs	r1, r0, #0
 8007f00:	d10d      	bne.n	8007f1e <LmHandlerRequestClass+0x96>
    MW_LOG(TS_OFF, VLEVEL_M, "Switch to Class %c done\r\n", "ABC"[deviceClass]);
 8007f02:	2243      	movs	r2, #67	@ 0x43
 8007f04:	4b09      	ldr	r3, [pc, #36]	@ (8007f2c <LmHandlerRequestClass+0xa4>)
 8007f06:	9200      	str	r2, [sp, #0]
 8007f08:	0002      	movs	r2, r0
 8007f0a:	0020      	movs	r0, r4
 8007f0c:	f007 f802 	bl	800ef14 <UTIL_ADV_TRACE_COND_FSend>
                        if (LmHandlerCallbacks->OnClassChange != NULL)
 8007f10:	4b07      	ldr	r3, [pc, #28]	@ (8007f30 <LmHandlerRequestClass+0xa8>)
 8007f12:	699b      	ldr	r3, [r3, #24]
 8007f14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d0d1      	beq.n	8007ebe <LmHandlerRequestClass+0x36>
                            LmHandlerCallbacks->OnClassChange( newClass );
 8007f1a:	0020      	movs	r0, r4
 8007f1c:	e7e7      	b.n	8007eee <LmHandlerRequestClass+0x66>
        return LORAMAC_HANDLER_ERROR;
 8007f1e:	2001      	movs	r0, #1
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 8007f20:	4240      	negs	r0, r0
 8007f22:	e7cd      	b.n	8007ec0 <LmHandlerRequestClass+0x38>
        return LORAMAC_HANDLER_BUSY_ERROR;
 8007f24:	2002      	movs	r0, #2
 8007f26:	e7fb      	b.n	8007f20 <LmHandlerRequestClass+0x98>
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 8007f28:	2003      	movs	r0, #3
 8007f2a:	e7f9      	b.n	8007f20 <LmHandlerRequestClass+0x98>
 8007f2c:	08012171 	.word	0x08012171
 8007f30:	20000848 	.word	0x20000848

08007f34 <LmHandlerJoin>:
{
 8007f34:	b570      	push	{r4, r5, r6, lr}
 8007f36:	b08a      	sub	sp, #40	@ 0x28
 8007f38:	4e1b      	ldr	r6, [pc, #108]	@ (8007fa8 <LmHandlerJoin+0x74>)
 8007f3a:	4c1c      	ldr	r4, [pc, #112]	@ (8007fac <LmHandlerJoin+0x78>)
 8007f3c:	ad01      	add	r5, sp, #4
    if ( mode == ACTIVATION_TYPE_OTAA )
 8007f3e:	2802      	cmp	r0, #2
 8007f40:	d10c      	bne.n	8007f5c <LmHandlerJoin+0x28>
        JoinParams.Mode = ACTIVATION_TYPE_OTAA;
 8007f42:	76b0      	strb	r0, [r6, #26]
        LoRaMacStart();
 8007f44:	f002 fd8a 	bl	800aa5c <LoRaMacStart>
        mlmeReq.Type = MLME_JOIN;
 8007f48:	2301      	movs	r3, #1
        mlmeReq.Req.Join.Datarate = LmHandlerParams.TxDatarate;
 8007f4a:	3430      	adds	r4, #48	@ 0x30
        mlmeReq.Type = MLME_JOIN;
 8007f4c:	702b      	strb	r3, [r5, #0]
        mlmeReq.Req.Join.Datarate = LmHandlerParams.TxDatarate;
 8007f4e:	78e3      	ldrb	r3, [r4, #3]
        LoRaMacMlmeRequest( &mlmeReq );
 8007f50:	0028      	movs	r0, r5
        mlmeReq.Req.Join.Datarate = LmHandlerParams.TxDatarate;
 8007f52:	712b      	strb	r3, [r5, #4]
        LoRaMacMlmeRequest( &mlmeReq );
 8007f54:	f003 f8d8 	bl	800b108 <LoRaMacMlmeRequest>
}
 8007f58:	b00a      	add	sp, #40	@ 0x28
 8007f5a:	bd70      	pop	{r4, r5, r6, pc}
        JoinParams.Mode = ACTIVATION_TYPE_ABP;
 8007f5c:	2301      	movs	r3, #1
 8007f5e:	76b3      	strb	r3, [r6, #26]
        JoinParams.Datarate = LmHandlerParams.TxDatarate;
 8007f60:	0023      	movs	r3, r4
 8007f62:	3330      	adds	r3, #48	@ 0x30
 8007f64:	78db      	ldrb	r3, [r3, #3]
 8007f66:	7633      	strb	r3, [r6, #24]
        JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 8007f68:	2300      	movs	r3, #0
 8007f6a:	7673      	strb	r3, [r6, #25]
        if (CtxRestoreDone == false)
 8007f6c:	0023      	movs	r3, r4
 8007f6e:	3364      	adds	r3, #100	@ 0x64
 8007f70:	781b      	ldrb	r3, [r3, #0]
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d106      	bne.n	8007f84 <LmHandlerJoin+0x50>
            mibReq.Type = MIB_ABP_LORAWAN_VERSION;
 8007f76:	3327      	adds	r3, #39	@ 0x27
 8007f78:	702b      	strb	r3, [r5, #0]
            mibReq.Param.AbpLrWanVersion.Value = ABP_ACTIVATION_LRWAN_VERSION;
 8007f7a:	4b0d      	ldr	r3, [pc, #52]	@ (8007fb0 <LmHandlerJoin+0x7c>)
            LoRaMacMibSetRequestConfirm(&mibReq);
 8007f7c:	0028      	movs	r0, r5
            mibReq.Param.AbpLrWanVersion.Value = ABP_ACTIVATION_LRWAN_VERSION;
 8007f7e:	606b      	str	r3, [r5, #4]
            LoRaMacMibSetRequestConfirm(&mibReq);
 8007f80:	f002 fe80 	bl	800ac84 <LoRaMacMibSetRequestConfirm>
        LoRaMacStart();
 8007f84:	f002 fd6a 	bl	800aa5c <LoRaMacStart>
        mibReq.Type = MIB_NETWORK_ACTIVATION;
 8007f88:	2301      	movs	r3, #1
        LoRaMacMibSetRequestConfirm( &mibReq );
 8007f8a:	0028      	movs	r0, r5
        mibReq.Type = MIB_NETWORK_ACTIVATION;
 8007f8c:	702b      	strb	r3, [r5, #0]
        mibReq.Param.NetworkActivation = ACTIVATION_TYPE_ABP;
 8007f8e:	712b      	strb	r3, [r5, #4]
        LoRaMacMibSetRequestConfirm( &mibReq );
 8007f90:	f002 fe78 	bl	800ac84 <LoRaMacMibSetRequestConfirm>
        LmHandlerCallbacks->OnJoinRequest( &JoinParams );
 8007f94:	0030      	movs	r0, r6
 8007f96:	69a3      	ldr	r3, [r4, #24]
 8007f98:	3018      	adds	r0, #24
 8007f9a:	69db      	ldr	r3, [r3, #28]
        LmHandlerRequestClass(LmHandlerParams.DefaultClass);
 8007f9c:	3430      	adds	r4, #48	@ 0x30
        LmHandlerCallbacks->OnJoinRequest( &JoinParams );
 8007f9e:	4798      	blx	r3
        LmHandlerRequestClass(LmHandlerParams.DefaultClass);
 8007fa0:	7860      	ldrb	r0, [r4, #1]
 8007fa2:	f7ff ff71 	bl	8007e88 <LmHandlerRequestClass>
}
 8007fa6:	e7d7      	b.n	8007f58 <LmHandlerJoin+0x24>
 8007fa8:	2000009c 	.word	0x2000009c
 8007fac:	20000848 	.word	0x20000848
 8007fb0:	01000300 	.word	0x01000300

08007fb4 <LmHandlerSend>:
{
 8007fb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007fb6:	b089      	sub	sp, #36	@ 0x24
 8007fb8:	0005      	movs	r5, r0
 8007fba:	000f      	movs	r7, r1
 8007fbc:	9200      	str	r2, [sp, #0]
 8007fbe:	9301      	str	r3, [sp, #4]
    if (LoRaMacIsBusy() == true)
 8007fc0:	f001 fe04 	bl	8009bcc <LoRaMacIsBusy>
 8007fc4:	2800      	cmp	r0, #0
 8007fc6:	d159      	bne.n	800807c <LmHandlerSend+0xc8>
    if( LmHandlerJoinStatus( ) != LORAMAC_HANDLER_SET )
 8007fc8:	f7ff ff40 	bl	8007e4c <LmHandlerJoinStatus>
 8007fcc:	2801      	cmp	r0, #1
 8007fce:	d007      	beq.n	8007fe0 <LmHandlerSend+0x2c>
        LmHandlerJoin(JoinParams.Mode);
 8007fd0:	4b2f      	ldr	r3, [pc, #188]	@ (8008090 <LmHandlerSend+0xdc>)
 8007fd2:	7e98      	ldrb	r0, [r3, #26]
 8007fd4:	f7ff ffae 	bl	8007f34 <LmHandlerJoin>
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 8007fd8:	2003      	movs	r0, #3
            lmhStatus = LORAMAC_HANDLER_ERROR;
 8007fda:	4240      	negs	r0, r0
}
 8007fdc:	b009      	add	sp, #36	@ 0x24
 8007fde:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if( ( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning( ) == true ) && ( appData->Port != LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->Port ) && ( appData->Port != 0 ) )
 8007fe0:	4e2c      	ldr	r6, [pc, #176]	@ (8008094 <LmHandlerSend+0xe0>)
 8007fe2:	69f3      	ldr	r3, [r6, #28]
 8007fe4:	68db      	ldr	r3, [r3, #12]
 8007fe6:	4798      	blx	r3
 8007fe8:	2800      	cmp	r0, #0
 8007fea:	d006      	beq.n	8007ffa <LmHandlerSend+0x46>
 8007fec:	69f2      	ldr	r2, [r6, #28]
 8007fee:	782b      	ldrb	r3, [r5, #0]
 8007ff0:	7812      	ldrb	r2, [r2, #0]
 8007ff2:	429a      	cmp	r2, r3
 8007ff4:	d001      	beq.n	8007ffa <LmHandlerSend+0x46>
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d146      	bne.n	8008088 <LmHandlerSend+0xd4>
    mcpsReq.Req.Unconfirmed.Datarate = LmHandlerParams.TxDatarate;
 8007ffa:	0033      	movs	r3, r6
 8007ffc:	3330      	adds	r3, #48	@ 0x30
 8007ffe:	78db      	ldrb	r3, [r3, #3]
 8008000:	ac03      	add	r4, sp, #12
 8008002:	73a3      	strb	r3, [r4, #14]
    if( LoRaMacQueryTxPossible( appData->BufferSize, &txInfo ) != LORAMAC_STATUS_OK )
 8008004:	7868      	ldrb	r0, [r5, #1]
 8008006:	a902      	add	r1, sp, #8
 8008008:	f002 fd30 	bl	800aa6c <LoRaMacQueryTxPossible>
 800800c:	2800      	cmp	r0, #0
 800800e:	d023      	beq.n	8008058 <LmHandlerSend+0xa4>
        TxParams.MsgType = LORAMAC_HANDLER_UNCONFIRMED_MSG;
 8008010:	2300      	movs	r3, #0
 8008012:	70b3      	strb	r3, [r6, #2]
        mcpsReq.Type = MCPS_UNCONFIRMED;
 8008014:	7023      	strb	r3, [r4, #0]
        mcpsReq.Req.Unconfirmed.fBuffer = NULL;
 8008016:	60a3      	str	r3, [r4, #8]
        mcpsReq.Req.Unconfirmed.fBufferSize = 0;
 8008018:	81a3      	strh	r3, [r4, #12]
    TxParams.AppData = *appData;
 800801a:	0033      	movs	r3, r6
 800801c:	330c      	adds	r3, #12
 800801e:	cd06      	ldmia	r5!, {r1, r2}
 8008020:	c306      	stmia	r3!, {r1, r2}
    TxParams.Datarate = LmHandlerParams.TxDatarate;
 8008022:	0033      	movs	r3, r6
 8008024:	3330      	adds	r3, #48	@ 0x30
 8008026:	78db      	ldrb	r3, [r3, #3]
    status = LoRaMacMcpsRequest(&mcpsReq, allowDelayedTx);
 8008028:	0020      	movs	r0, r4
 800802a:	9901      	ldr	r1, [sp, #4]
    TxParams.Datarate = LmHandlerParams.TxDatarate;
 800802c:	7133      	strb	r3, [r6, #4]
    status = LoRaMacMcpsRequest(&mcpsReq, allowDelayedTx);
 800802e:	f003 f971 	bl	800b314 <LoRaMacMcpsRequest>
    if (nextTxIn != NULL)
 8008032:	9b00      	ldr	r3, [sp, #0]
 8008034:	2b00      	cmp	r3, #0
 8008036:	d002      	beq.n	800803e <LmHandlerSend+0x8a>
        *nextTxIn = mcpsReq.ReqReturn.DutyCycleWaitTime;
 8008038:	6923      	ldr	r3, [r4, #16]
 800803a:	9a00      	ldr	r2, [sp, #0]
 800803c:	6013      	str	r3, [r2, #0]
    switch (status)
 800803e:	2811      	cmp	r0, #17
 8008040:	d820      	bhi.n	8008084 <LmHandlerSend+0xd0>
 8008042:	f7f8 f869 	bl	8000118 <__gnu_thumb1_case_sqi>
 8008046:	1b23      	.short	0x1b23
 8008048:	1f1f1f1f 	.word	0x1f1f1f1f
 800804c:	1f1fc91f 	.word	0x1f1fc91f
 8008050:	1f1f1d1f 	.word	0x1f1f1d1f
 8008054:	191b1b1b 	.word	0x191b1b1b
        TxParams.MsgType = isTxConfirmed;
 8008058:	70b7      	strb	r7, [r6, #2]
        mcpsReq.Req.Unconfirmed.fPort = appData->Port;
 800805a:	782b      	ldrb	r3, [r5, #0]
 800805c:	7123      	strb	r3, [r4, #4]
        mcpsReq.Req.Unconfirmed.fBufferSize = appData->BufferSize;
 800805e:	786b      	ldrb	r3, [r5, #1]
 8008060:	81a3      	strh	r3, [r4, #12]
        mcpsReq.Req.Unconfirmed.fBuffer = appData->Buffer;
 8008062:	686b      	ldr	r3, [r5, #4]
 8008064:	60a3      	str	r3, [r4, #8]
        if( isTxConfirmed == LORAMAC_HANDLER_UNCONFIRMED_MSG )
 8008066:	2f00      	cmp	r7, #0
 8008068:	d101      	bne.n	800806e <LmHandlerSend+0xba>
            mcpsReq.Type = MCPS_UNCONFIRMED;
 800806a:	7027      	strb	r7, [r4, #0]
 800806c:	e7d5      	b.n	800801a <LmHandlerSend+0x66>
            mcpsReq.Type = MCPS_CONFIRMED;
 800806e:	2301      	movs	r3, #1
 8008070:	7023      	strb	r3, [r4, #0]
            mcpsReq.Req.Confirmed.NbTrials = 8;
 8008072:	3307      	adds	r3, #7
 8008074:	73e3      	strb	r3, [r4, #15]
 8008076:	e7d0      	b.n	800801a <LmHandlerSend+0x66>
            lmhStatus = LORAMAC_HANDLER_CRYPTO_ERROR;
 8008078:	2005      	movs	r0, #5
 800807a:	e7ae      	b.n	8007fda <LmHandlerSend+0x26>
{
 800807c:	2002      	movs	r0, #2
 800807e:	e7ac      	b.n	8007fda <LmHandlerSend+0x26>
            lmhStatus = LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED;
 8008080:	2006      	movs	r0, #6
 8008082:	e7aa      	b.n	8007fda <LmHandlerSend+0x26>
            lmhStatus = LORAMAC_HANDLER_ERROR;
 8008084:	2001      	movs	r0, #1
 8008086:	e7a8      	b.n	8007fda <LmHandlerSend+0x26>
        return LORAMAC_HANDLER_COMPLIANCE_RUNNING;
 8008088:	2004      	movs	r0, #4
 800808a:	e7a6      	b.n	8007fda <LmHandlerSend+0x26>
            lmhStatus = LORAMAC_HANDLER_SUCCESS;
 800808c:	2000      	movs	r0, #0
 800808e:	e7a5      	b.n	8007fdc <LmHandlerSend+0x28>
 8008090:	2000009c 	.word	0x2000009c
 8008094:	20000848 	.word	0x20000848

08008098 <MlmeIndication>:
{
 8008098:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800809a:	0004      	movs	r4, r0
    RxParams.IsMcpsIndication = 0;
 800809c:	2000      	movs	r0, #0
 800809e:	4b14      	ldr	r3, [pc, #80]	@ (80080f0 <MlmeIndication+0x58>)
 80080a0:	7718      	strb	r0, [r3, #28]
    RxParams.Status = mlmeIndication->Status;
 80080a2:	7862      	ldrb	r2, [r4, #1]
 80080a4:	775a      	strb	r2, [r3, #29]
    RxParams.Rssi = RxStatus->Rssi;
 80080a6:	880d      	ldrh	r5, [r1, #0]
 80080a8:	77dd      	strb	r5, [r3, #31]
    RxParams.Snr = RxStatus->Snr;
 80080aa:	788e      	ldrb	r6, [r1, #2]
 80080ac:	1c5d      	adds	r5, r3, #1
 80080ae:	77ee      	strb	r6, [r5, #31]
    RxParams.RxSlot = RxStatus->RxSlot;
 80080b0:	001d      	movs	r5, r3
 80080b2:	78c9      	ldrb	r1, [r1, #3]
 80080b4:	3528      	adds	r5, #40	@ 0x28
 80080b6:	7029      	strb	r1, [r5, #0]
    if( RxParams.Status != LORAMAC_EVENT_INFO_STATUS_BEACON_LOCKED )
 80080b8:	2a0e      	cmp	r2, #14
 80080ba:	d005      	beq.n	80080c8 <MlmeIndication+0x30>
        LmHandlerCallbacks->OnRxData( NULL, &RxParams );
 80080bc:	331c      	adds	r3, #28
 80080be:	0019      	movs	r1, r3
 80080c0:	4b0c      	ldr	r3, [pc, #48]	@ (80080f4 <MlmeIndication+0x5c>)
 80080c2:	699b      	ldr	r3, [r3, #24]
 80080c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80080c6:	4798      	blx	r3
    switch( mlmeIndication->MlmeIndication )
 80080c8:	7823      	ldrb	r3, [r4, #0]
 80080ca:	2b07      	cmp	r3, #7
 80080cc:	d10e      	bne.n	80080ec <MlmeIndication+0x54>
            LmHandlerAppData_t appData =
 80080ce:	2300      	movs	r3, #0
 80080d0:	466a      	mov	r2, sp
 80080d2:	9301      	str	r3, [sp, #4]
 80080d4:	8013      	strh	r3, [r2, #0]
            if( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning( ) == false )
 80080d6:	4b07      	ldr	r3, [pc, #28]	@ (80080f4 <MlmeIndication+0x5c>)
 80080d8:	69db      	ldr	r3, [r3, #28]
 80080da:	68db      	ldr	r3, [r3, #12]
 80080dc:	4798      	blx	r3
 80080de:	1e01      	subs	r1, r0, #0
 80080e0:	d104      	bne.n	80080ec <MlmeIndication+0x54>
                LmHandlerSend( &appData, LORAMAC_HANDLER_UNCONFIRMED_MSG, NULL, true );
 80080e2:	0002      	movs	r2, r0
 80080e4:	2301      	movs	r3, #1
 80080e6:	4668      	mov	r0, sp
 80080e8:	f7ff ff64 	bl	8007fb4 <LmHandlerSend>
}
 80080ec:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
 80080ee:	46c0      	nop			@ (mov r8, r8)
 80080f0:	2000009c 	.word	0x2000009c
 80080f4:	20000848 	.word	0x20000848

080080f8 <LmHandlerGetCurrentClass>:
{
 80080f8:	b510      	push	{r4, lr}
 80080fa:	0004      	movs	r4, r0
 80080fc:	b08a      	sub	sp, #40	@ 0x28
    if (deviceClass == NULL)
 80080fe:	2800      	cmp	r0, #0
 8008100:	d103      	bne.n	800810a <LmHandlerGetCurrentClass+0x12>
        return LORAMAC_HANDLER_ERROR;
 8008102:	2001      	movs	r0, #1
 8008104:	4240      	negs	r0, r0
}
 8008106:	b00a      	add	sp, #40	@ 0x28
 8008108:	bd10      	pop	{r4, pc}
    mibReq.Type = MIB_DEVICE_CLASS;
 800810a:	2300      	movs	r3, #0
 800810c:	466a      	mov	r2, sp
    if (LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK)
 800810e:	a801      	add	r0, sp, #4
    mibReq.Type = MIB_DEVICE_CLASS;
 8008110:	7113      	strb	r3, [r2, #4]
    if (LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK)
 8008112:	f002 fd05 	bl	800ab20 <LoRaMacMibGetRequestConfirm>
 8008116:	2800      	cmp	r0, #0
 8008118:	d1f3      	bne.n	8008102 <LmHandlerGetCurrentClass+0xa>
    *deviceClass = mibReq.Param.Class;
 800811a:	466b      	mov	r3, sp
 800811c:	7a1b      	ldrb	r3, [r3, #8]
 800811e:	7023      	strb	r3, [r4, #0]
    return LORAMAC_HANDLER_SUCCESS;
 8008120:	e7f1      	b.n	8008106 <LmHandlerGetCurrentClass+0xe>
	...

08008124 <McpsIndication>:
{
 8008124:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008126:	b087      	sub	sp, #28
    DeviceClass_t deviceClass = CLASS_A;
 8008128:	2200      	movs	r2, #0
{
 800812a:	000b      	movs	r3, r1
    DeviceClass_t deviceClass = CLASS_A;
 800812c:	4669      	mov	r1, sp
 800812e:	71ca      	strb	r2, [r1, #7]
    RxParams.IsMcpsIndication = 1;
 8008130:	492d      	ldr	r1, [pc, #180]	@ (80081e8 <McpsIndication+0xc4>)
 8008132:	3201      	adds	r2, #1
 8008134:	770a      	strb	r2, [r1, #28]
    RxParams.Status = mcpsIndication->Status;
 8008136:	7842      	ldrb	r2, [r0, #1]
{
 8008138:	0004      	movs	r4, r0
    RxParams.Status = mcpsIndication->Status;
 800813a:	774a      	strb	r2, [r1, #29]
    if( RxParams.Status != LORAMAC_EVENT_INFO_STATUS_OK )
 800813c:	2a00      	cmp	r2, #0
 800813e:	d149      	bne.n	80081d4 <McpsIndication+0xb0>
    RxParams.Datarate = mcpsIndication->RxDatarate;
 8008140:	7902      	ldrb	r2, [r0, #4]
    LmHandlerCallbacks->OnRxData(&appData, &RxParams);
 8008142:	4e2a      	ldr	r6, [pc, #168]	@ (80081ec <McpsIndication+0xc8>)
    RxParams.Datarate = mcpsIndication->RxDatarate;
 8008144:	778a      	strb	r2, [r1, #30]
    RxParams.Rssi = RxStatus->Rssi;
 8008146:	881a      	ldrh	r2, [r3, #0]
 8008148:	77ca      	strb	r2, [r1, #31]
    RxParams.Snr = RxStatus->Snr;
 800814a:	7898      	ldrb	r0, [r3, #2]
 800814c:	1c4a      	adds	r2, r1, #1
 800814e:	77d0      	strb	r0, [r2, #31]
    RxParams.RxSlot = RxStatus->RxSlot;
 8008150:	000a      	movs	r2, r1
 8008152:	78db      	ldrb	r3, [r3, #3]
 8008154:	3228      	adds	r2, #40	@ 0x28
 8008156:	7013      	strb	r3, [r2, #0]
    appData.Port = mcpsIndication->Port;
 8008158:	466a      	mov	r2, sp
    RxParams.DownlinkCounter = mcpsIndication->DownLinkCounter;
 800815a:	6923      	ldr	r3, [r4, #16]
    LmHandlerCallbacks->OnRxData(&appData, &RxParams);
 800815c:	311c      	adds	r1, #28
    RxParams.DownlinkCounter = mcpsIndication->DownLinkCounter;
 800815e:	608b      	str	r3, [r1, #8]
    appData.Port = mcpsIndication->Port;
 8008160:	78e3      	ldrb	r3, [r4, #3]
    LmHandlerCallbacks->OnRxData(&appData, &RxParams);
 8008162:	a802      	add	r0, sp, #8
    appData.Port = mcpsIndication->Port;
 8008164:	7213      	strb	r3, [r2, #8]
    appData.BufferSize = mcpsIndication->BufferSize;
 8008166:	7b23      	ldrb	r3, [r4, #12]
 8008168:	7253      	strb	r3, [r2, #9]
    appData.Buffer = mcpsIndication->Buffer;
 800816a:	68a3      	ldr	r3, [r4, #8]
 800816c:	9303      	str	r3, [sp, #12]
    LmHandlerCallbacks->OnRxData(&appData, &RxParams);
 800816e:	69b3      	ldr	r3, [r6, #24]
 8008170:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008172:	4798      	blx	r3
    if ((LmHandlerCallbacks->OnSysTimeUpdate != NULL) && (mcpsIndication->DeviceTimeAnsReceived == true))
 8008174:	69b3      	ldr	r3, [r6, #24]
 8008176:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008178:	2b00      	cmp	r3, #0
 800817a:	d003      	beq.n	8008184 <McpsIndication+0x60>
 800817c:	7e22      	ldrb	r2, [r4, #24]
 800817e:	2a00      	cmp	r2, #0
 8008180:	d000      	beq.n	8008184 <McpsIndication+0x60>
        LmHandlerCallbacks->OnSysTimeUpdate( );
 8008182:	4798      	blx	r3
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 8008184:	0037      	movs	r7, r6
{
 8008186:	2500      	movs	r5, #0
 8008188:	371c      	adds	r7, #28
        if( LmHandlerPackages[i] != NULL )
 800818a:	683b      	ldr	r3, [r7, #0]
 800818c:	2b00      	cmp	r3, #0
 800818e:	d00a      	beq.n	80081a6 <McpsIndication+0x82>
                    if( ( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL ) &&
 8008190:	69da      	ldr	r2, [r3, #28]
 8008192:	2a00      	cmp	r2, #0
 8008194:	d007      	beq.n	80081a6 <McpsIndication+0x82>
 8008196:	781a      	ldrb	r2, [r3, #0]
 8008198:	78e3      	ldrb	r3, [r4, #3]
 800819a:	429a      	cmp	r2, r3
 800819c:	d11c      	bne.n	80081d8 <McpsIndication+0xb4>
                        LmHandlerPackages[i]->OnMcpsIndicationProcess( ( McpsIndication_t* )params );
 800819e:	683b      	ldr	r3, [r7, #0]
 80081a0:	0020      	movs	r0, r4
 80081a2:	69db      	ldr	r3, [r3, #28]
 80081a4:	4798      	blx	r3
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 80081a6:	3501      	adds	r5, #1
 80081a8:	b2eb      	uxtb	r3, r5
 80081aa:	3704      	adds	r7, #4
 80081ac:	b26d      	sxtb	r5, r5
 80081ae:	2b05      	cmp	r3, #5
 80081b0:	d1eb      	bne.n	800818a <McpsIndication+0x66>
    LmHandlerGetCurrentClass(&deviceClass);
 80081b2:	466b      	mov	r3, sp
 80081b4:	1dd8      	adds	r0, r3, #7
 80081b6:	f7ff ff9f 	bl	80080f8 <LmHandlerGetCurrentClass>
    if ((mcpsIndication->FramePending == true) && (deviceClass == CLASS_A))
 80081ba:	7963      	ldrb	r3, [r4, #5]
 80081bc:	2b01      	cmp	r3, #1
 80081be:	d109      	bne.n	80081d4 <McpsIndication+0xb0>
 80081c0:	466a      	mov	r2, sp
 80081c2:	79d1      	ldrb	r1, [r2, #7]
 80081c4:	2900      	cmp	r1, #0
 80081c6:	d105      	bne.n	80081d4 <McpsIndication+0xb0>
        LmHandlerAppData_t appData =
 80081c8:	a804      	add	r0, sp, #16
        LmHandlerSend(&appData, LORAMAC_HANDLER_UNCONFIRMED_MSG, NULL, true);
 80081ca:	000a      	movs	r2, r1
        LmHandlerAppData_t appData =
 80081cc:	8001      	strh	r1, [r0, #0]
 80081ce:	6041      	str	r1, [r0, #4]
        LmHandlerSend(&appData, LORAMAC_HANDLER_UNCONFIRMED_MSG, NULL, true);
 80081d0:	f7ff fef0 	bl	8007fb4 <LmHandlerSend>
}
 80081d4:	b007      	add	sp, #28
 80081d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
                        ( ( LmHandlerPackages[i]->Port == ((McpsIndication_t* )params)->Port ) ||
 80081d8:	2d00      	cmp	r5, #0
 80081da:	d1e4      	bne.n	80081a6 <McpsIndication+0x82>
                          ( ( i == PACKAGE_ID_COMPLIANCE ) && ( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning() ))))
 80081dc:	69f3      	ldr	r3, [r6, #28]
 80081de:	68db      	ldr	r3, [r3, #12]
 80081e0:	4798      	blx	r3
 80081e2:	2800      	cmp	r0, #0
 80081e4:	d1db      	bne.n	800819e <McpsIndication+0x7a>
 80081e6:	e7de      	b.n	80081a6 <McpsIndication+0x82>
 80081e8:	2000009c 	.word	0x2000009c
 80081ec:	20000848 	.word	0x20000848

080081f0 <LmHandlerGetTxDatarate>:
{
 80081f0:	b510      	push	{r4, lr}
 80081f2:	0004      	movs	r4, r0
 80081f4:	b08a      	sub	sp, #40	@ 0x28
    if (txDatarate == NULL)
 80081f6:	2800      	cmp	r0, #0
 80081f8:	d103      	bne.n	8008202 <LmHandlerGetTxDatarate+0x12>
        return LORAMAC_HANDLER_ERROR;
 80081fa:	2001      	movs	r0, #1
 80081fc:	4240      	negs	r0, r0
}
 80081fe:	b00a      	add	sp, #40	@ 0x28
 8008200:	bd10      	pop	{r4, pc}
    mibGet.Type = MIB_CHANNELS_DATARATE;
 8008202:	231f      	movs	r3, #31
 8008204:	466a      	mov	r2, sp
    if (LoRaMacMibGetRequestConfirm( &mibGet ) != LORAMAC_STATUS_OK)
 8008206:	a801      	add	r0, sp, #4
    mibGet.Type = MIB_CHANNELS_DATARATE;
 8008208:	7113      	strb	r3, [r2, #4]
    if (LoRaMacMibGetRequestConfirm( &mibGet ) != LORAMAC_STATUS_OK)
 800820a:	f002 fc89 	bl	800ab20 <LoRaMacMibGetRequestConfirm>
 800820e:	2800      	cmp	r0, #0
 8008210:	d1f3      	bne.n	80081fa <LmHandlerGetTxDatarate+0xa>
    *txDatarate = mibGet.Param.ChannelsDatarate;
 8008212:	466b      	mov	r3, sp
 8008214:	7a1b      	ldrb	r3, [r3, #8]
    LmHandlerParams.TxDatarate = *txDatarate;
 8008216:	4a02      	ldr	r2, [pc, #8]	@ (8008220 <LmHandlerGetTxDatarate+0x30>)
    *txDatarate = mibGet.Param.ChannelsDatarate;
 8008218:	b25b      	sxtb	r3, r3
 800821a:	7023      	strb	r3, [r4, #0]
    LmHandlerParams.TxDatarate = *txDatarate;
 800821c:	70d3      	strb	r3, [r2, #3]
    return LORAMAC_HANDLER_SUCCESS;
 800821e:	e7ee      	b.n	80081fe <LmHandlerGetTxDatarate+0xe>
 8008220:	20000878 	.word	0x20000878

08008224 <MlmeConfirm>:
    TxParams.IsMcpsConfirm = 0;
 8008224:	2300      	movs	r3, #0
{
 8008226:	b5f0      	push	{r4, r5, r6, r7, lr}
    TxParams.IsMcpsConfirm = 0;
 8008228:	4d25      	ldr	r5, [pc, #148]	@ (80082c0 <MlmeConfirm+0x9c>)
{
 800822a:	0004      	movs	r4, r0
    TxParams.IsMcpsConfirm = 0;
 800822c:	702b      	strb	r3, [r5, #0]
    TxParams.Status = mlmeConfirm->Status;
 800822e:	7843      	ldrb	r3, [r0, #1]
 8008230:	002e      	movs	r6, r5
 8008232:	706b      	strb	r3, [r5, #1]
    LmHandlerCallbacks->OnTxData( &TxParams );
 8008234:	69ab      	ldr	r3, [r5, #24]
 8008236:	0028      	movs	r0, r5
 8008238:	002f      	movs	r7, r5
 800823a:	6a1b      	ldr	r3, [r3, #32]
{
 800823c:	b08b      	sub	sp, #44	@ 0x2c
    LmHandlerCallbacks->OnTxData( &TxParams );
 800823e:	4798      	blx	r3
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 8008240:	361c      	adds	r6, #28
 8008242:	3730      	adds	r7, #48	@ 0x30
        if( LmHandlerPackages[i] != NULL )
 8008244:	6833      	ldr	r3, [r6, #0]
 8008246:	2b00      	cmp	r3, #0
 8008248:	d004      	beq.n	8008254 <MlmeConfirm+0x30>
                    if( LmHandlerPackages[i]->OnMlmeConfirmProcess != NULL )
 800824a:	6a1b      	ldr	r3, [r3, #32]
 800824c:	2b00      	cmp	r3, #0
 800824e:	d001      	beq.n	8008254 <MlmeConfirm+0x30>
                        LmHandlerPackages[i]->OnMlmeConfirmProcess( ( MlmeConfirm_t* )params );
 8008250:	0020      	movs	r0, r4
 8008252:	4798      	blx	r3
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 8008254:	3604      	adds	r6, #4
 8008256:	42b7      	cmp	r7, r6
 8008258:	d1f4      	bne.n	8008244 <MlmeConfirm+0x20>
    switch( mlmeConfirm->MlmeRequest )
 800825a:	7823      	ldrb	r3, [r4, #0]
 800825c:	2b01      	cmp	r3, #1
 800825e:	d003      	beq.n	8008268 <MlmeConfirm+0x44>
 8008260:	2b04      	cmp	r3, #4
 8008262:	d020      	beq.n	80082a6 <MlmeConfirm+0x82>
}
 8008264:	b00b      	add	sp, #44	@ 0x2c
 8008266:	bdf0      	pop	{r4, r5, r6, r7, pc}
            mibReq.Type = MIB_DEV_ADDR;
 8008268:	2306      	movs	r3, #6
 800826a:	af01      	add	r7, sp, #4
            LoRaMacMibGetRequestConfirm( &mibReq );
 800826c:	0038      	movs	r0, r7
            mibReq.Type = MIB_DEV_ADDR;
 800826e:	703b      	strb	r3, [r7, #0]
            LoRaMacMibGetRequestConfirm( &mibReq );
 8008270:	f002 fc56 	bl	800ab20 <LoRaMacMibGetRequestConfirm>
            CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 8008274:	4e13      	ldr	r6, [pc, #76]	@ (80082c4 <MlmeConfirm+0xa0>)
 8008276:	9b02      	ldr	r3, [sp, #8]
            LmHandlerGetTxDatarate( &JoinParams.Datarate );
 8008278:	0030      	movs	r0, r6
 800827a:	3018      	adds	r0, #24
            CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 800827c:	6173      	str	r3, [r6, #20]
            LmHandlerGetTxDatarate( &JoinParams.Datarate );
 800827e:	f7ff ffb7 	bl	80081f0 <LmHandlerGetTxDatarate>
            if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 8008282:	7863      	ldrb	r3, [r4, #1]
 8008284:	2b00      	cmp	r3, #0
 8008286:	d10b      	bne.n	80082a0 <MlmeConfirm+0x7c>
                JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 8008288:	7673      	strb	r3, [r6, #25]
                LmHandlerRequestClass(LmHandlerParams.DefaultClass);
 800828a:	002b      	movs	r3, r5
 800828c:	3330      	adds	r3, #48	@ 0x30
 800828e:	7858      	ldrb	r0, [r3, #1]
 8008290:	f7ff fdfa 	bl	8007e88 <LmHandlerRequestClass>
            LmHandlerCallbacks->OnJoinRequest( &JoinParams );
 8008294:	0030      	movs	r0, r6
 8008296:	69ab      	ldr	r3, [r5, #24]
 8008298:	3018      	adds	r0, #24
 800829a:	69db      	ldr	r3, [r3, #28]
 800829c:	4798      	blx	r3
        break;
 800829e:	e7e1      	b.n	8008264 <MlmeConfirm+0x40>
                JoinParams.Status = LORAMAC_HANDLER_ERROR;
 80082a0:	23ff      	movs	r3, #255	@ 0xff
 80082a2:	7673      	strb	r3, [r6, #25]
 80082a4:	e7f6      	b.n	8008294 <MlmeConfirm+0x70>
            RxParams.LinkCheck = true;
 80082a6:	2101      	movs	r1, #1
 80082a8:	4b06      	ldr	r3, [pc, #24]	@ (80082c4 <MlmeConfirm+0xa0>)
 80082aa:	4a07      	ldr	r2, [pc, #28]	@ (80082c8 <MlmeConfirm+0xa4>)
 80082ac:	7011      	strb	r1, [r2, #0]
            RxParams.DemodMargin = mlmeConfirm->DemodMargin;
 80082ae:	001a      	movs	r2, r3
 80082b0:	7a21      	ldrb	r1, [r4, #8]
 80082b2:	322a      	adds	r2, #42	@ 0x2a
 80082b4:	7011      	strb	r1, [r2, #0]
            RxParams.NbGateways = mlmeConfirm->NbGateways;
 80082b6:	7a62      	ldrb	r2, [r4, #9]
 80082b8:	332b      	adds	r3, #43	@ 0x2b
 80082ba:	701a      	strb	r2, [r3, #0]
}
 80082bc:	e7d2      	b.n	8008264 <MlmeConfirm+0x40>
 80082be:	46c0      	nop			@ (mov r8, r8)
 80082c0:	20000848 	.word	0x20000848
 80082c4:	2000009c 	.word	0x2000009c
 80082c8:	200000c5 	.word	0x200000c5

080082cc <LmHandlerGetActiveRegion>:
    if (region == NULL)
 80082cc:	2800      	cmp	r0, #0
 80082ce:	d004      	beq.n	80082da <LmHandlerGetActiveRegion+0xe>
    *region = LmHandlerParams.ActiveRegion;
 80082d0:	4b03      	ldr	r3, [pc, #12]	@ (80082e0 <LmHandlerGetActiveRegion+0x14>)
 80082d2:	781b      	ldrb	r3, [r3, #0]
 80082d4:	7003      	strb	r3, [r0, #0]
    return LORAMAC_HANDLER_SUCCESS;
 80082d6:	2000      	movs	r0, #0
}
 80082d8:	4770      	bx	lr
        return LORAMAC_HANDLER_ERROR;
 80082da:	2001      	movs	r0, #1
 80082dc:	4240      	negs	r0, r0
 80082de:	e7fb      	b.n	80082d8 <LmHandlerGetActiveRegion+0xc>
 80082e0:	20000878 	.word	0x20000878

080082e4 <LmHandlerPackageRegister>:
{
 80082e4:	b570      	push	{r4, r5, r6, lr}
 80082e6:	0004      	movs	r4, r0
 80082e8:	000d      	movs	r5, r1
    switch( id )
 80082ea:	2800      	cmp	r0, #0
 80082ec:	d002      	beq.n	80082f4 <LmHandlerPackageRegister+0x10>
        return LORAMAC_HANDLER_ERROR;
 80082ee:	2001      	movs	r0, #1
 80082f0:	4240      	negs	r0, r0
}
 80082f2:	bd70      	pop	{r4, r5, r6, pc}
            package = LmhpCompliancePackageFactory( );
 80082f4:	f000 fc50 	bl	8008b98 <LmhpCompliancePackageFactory>
    if( package != NULL )
 80082f8:	2800      	cmp	r0, #0
 80082fa:	d0f8      	beq.n	80082ee <LmHandlerPackageRegister+0xa>
        LmHandlerPackages[id] = package;
 80082fc:	4a08      	ldr	r2, [pc, #32]	@ (8008320 <LmHandlerPackageRegister+0x3c>)
        LmHandlerPackages[id]->OnJoinRequest = LmHandlerJoin;
 80082fe:	4909      	ldr	r1, [pc, #36]	@ (8008324 <LmHandlerPackageRegister+0x40>)
        LmHandlerPackages[id] = package;
 8008300:	61d0      	str	r0, [r2, #28]
        LmHandlerPackages[id]->OnJoinRequest = LmHandlerJoin;
 8008302:	6241      	str	r1, [r0, #36]	@ 0x24
        LmHandlerPackages[id]->OnPackageProcessEvent = LmHandlerCallbacks->OnMacProcess;
 8008304:	6992      	ldr	r2, [r2, #24]
        LmHandlerPackages[id]->OnSendRequest = LmHandlerSend;
 8008306:	4908      	ldr	r1, [pc, #32]	@ (8008328 <LmHandlerPackageRegister+0x44>)
        LmHandlerPackages[id]->OnPackageProcessEvent = LmHandlerCallbacks->OnMacProcess;
 8008308:	6912      	ldr	r2, [r2, #16]
        LmHandlerPackages[id]->OnSendRequest = LmHandlerSend;
 800830a:	6281      	str	r1, [r0, #40]	@ 0x28
        LmHandlerPackages[id]->OnDeviceTimeRequest = LmHandlerDeviceTimeReq;
 800830c:	4907      	ldr	r1, [pc, #28]	@ (800832c <LmHandlerPackageRegister+0x48>)
        LmHandlerPackages[id]->OnPackageProcessEvent = LmHandlerCallbacks->OnMacProcess;
 800830e:	6142      	str	r2, [r0, #20]
        LmHandlerPackages[id]->OnDeviceTimeRequest = LmHandlerDeviceTimeReq;
 8008310:	62c1      	str	r1, [r0, #44]	@ 0x2c
        LmHandlerPackages[id]->Init( params, AppData.Buffer, AppData.BufferSize );
 8008312:	6843      	ldr	r3, [r0, #4]
 8008314:	22f2      	movs	r2, #242	@ 0xf2
 8008316:	0028      	movs	r0, r5
 8008318:	4905      	ldr	r1, [pc, #20]	@ (8008330 <LmHandlerPackageRegister+0x4c>)
 800831a:	4798      	blx	r3
        return LORAMAC_HANDLER_SUCCESS;
 800831c:	0020      	movs	r0, r4
 800831e:	e7e8      	b.n	80082f2 <LmHandlerPackageRegister+0xe>
 8008320:	20000848 	.word	0x20000848
 8008324:	08007f35 	.word	0x08007f35
 8008328:	08007fb5 	.word	0x08007fb5
 800832c:	08007c21 	.word	0x08007c21
 8008330:	200008ad 	.word	0x200008ad

08008334 <LmHandlerInit>:
    LmHandlerCallbacks = handlerCallbacks;
 8008334:	4b0e      	ldr	r3, [pc, #56]	@ (8008370 <LmHandlerInit+0x3c>)
    LoRaMacPrimitives.MacMcpsConfirm = McpsConfirm;
 8008336:	4a0f      	ldr	r2, [pc, #60]	@ (8008374 <LmHandlerInit+0x40>)
{
 8008338:	b510      	push	{r4, lr}
    LoRaMacPrimitives.MacMcpsConfirm = McpsConfirm;
 800833a:	655a      	str	r2, [r3, #84]	@ 0x54
    LoRaMacPrimitives.MacMcpsIndication = McpsIndication;
 800833c:	4a0e      	ldr	r2, [pc, #56]	@ (8008378 <LmHandlerInit+0x44>)
    LmHandlerCallbacks = handlerCallbacks;
 800833e:	6198      	str	r0, [r3, #24]
    LoRaMacPrimitives.MacMcpsIndication = McpsIndication;
 8008340:	659a      	str	r2, [r3, #88]	@ 0x58
    LoRaMacPrimitives.MacMlmeConfirm = MlmeConfirm;
 8008342:	4a0e      	ldr	r2, [pc, #56]	@ (800837c <LmHandlerInit+0x48>)
    if (LmHandlerPackageRegister(PACKAGE_ID_COMPLIANCE, &LmhpComplianceParams) != LORAMAC_HANDLER_SUCCESS)
 8008344:	490e      	ldr	r1, [pc, #56]	@ (8008380 <LmHandlerInit+0x4c>)
    LoRaMacPrimitives.MacMlmeConfirm = MlmeConfirm;
 8008346:	65da      	str	r2, [r3, #92]	@ 0x5c
    LoRaMacPrimitives.MacMlmeIndication = MlmeIndication;
 8008348:	4a0e      	ldr	r2, [pc, #56]	@ (8008384 <LmHandlerInit+0x50>)
 800834a:	661a      	str	r2, [r3, #96]	@ 0x60
    LoRaMacCallbacks.GetBatteryLevel = LmHandlerCallbacks->GetBatteryLevel;
 800834c:	6802      	ldr	r2, [r0, #0]
 800834e:	641a      	str	r2, [r3, #64]	@ 0x40
    LoRaMacCallbacks.GetTemperatureLevel = LmHandlerCallbacks->GetTemperature;
 8008350:	6842      	ldr	r2, [r0, #4]
 8008352:	645a      	str	r2, [r3, #68]	@ 0x44
    LoRaMacCallbacks.GetUniqueId = LmHandlerCallbacks->GetUniqueId;
 8008354:	6882      	ldr	r2, [r0, #8]
 8008356:	649a      	str	r2, [r3, #72]	@ 0x48
    LoRaMacCallbacks.NvmDataChange  = NvmDataMgmtEvent;
 8008358:	4a0b      	ldr	r2, [pc, #44]	@ (8008388 <LmHandlerInit+0x54>)
 800835a:	64da      	str	r2, [r3, #76]	@ 0x4c
    LoRaMacCallbacks.MacProcessNotify = LmHandlerCallbacks->OnMacProcess;
 800835c:	6902      	ldr	r2, [r0, #16]
    if (LmHandlerPackageRegister(PACKAGE_ID_COMPLIANCE, &LmhpComplianceParams) != LORAMAC_HANDLER_SUCCESS)
 800835e:	2000      	movs	r0, #0
    LoRaMacCallbacks.MacProcessNotify = LmHandlerCallbacks->OnMacProcess;
 8008360:	651a      	str	r2, [r3, #80]	@ 0x50
    if (LmHandlerPackageRegister(PACKAGE_ID_COMPLIANCE, &LmhpComplianceParams) != LORAMAC_HANDLER_SUCCESS)
 8008362:	f7ff ffbf 	bl	80082e4 <LmHandlerPackageRegister>
 8008366:	1e43      	subs	r3, r0, #1
 8008368:	4198      	sbcs	r0, r3
}
 800836a:	4240      	negs	r0, r0
 800836c:	bd10      	pop	{r4, pc}
 800836e:	46c0      	nop			@ (mov r8, r8)
 8008370:	20000848 	.word	0x20000848
 8008374:	08007c39 	.word	0x08007c39
 8008378:	08008125 	.word	0x08008125
 800837c:	08008225 	.word	0x08008225
 8008380:	200000c8 	.word	0x200000c8
 8008384:	08008099 	.word	0x08008099
 8008388:	08008ba1 	.word	0x08008ba1

0800838c <LmHandlerGetDevEUI>:
{
 800838c:	b570      	push	{r4, r5, r6, lr}
 800838e:	0005      	movs	r5, r0
 8008390:	b08a      	sub	sp, #40	@ 0x28
    if (devEUI == NULL)
 8008392:	2800      	cmp	r0, #0
 8008394:	d103      	bne.n	800839e <LmHandlerGetDevEUI+0x12>
        return LORAMAC_HANDLER_ERROR;
 8008396:	2001      	movs	r0, #1
 8008398:	4240      	negs	r0, r0
}
 800839a:	b00a      	add	sp, #40	@ 0x28
 800839c:	bd70      	pop	{r4, r5, r6, pc}
    mibReq.Type = MIB_DEV_EUI;
 800839e:	2302      	movs	r3, #2
 80083a0:	ae01      	add	r6, sp, #4
    if (LoRaMacMibGetRequestConfirm(&mibReq) != LORAMAC_STATUS_OK)
 80083a2:	0030      	movs	r0, r6
    mibReq.Type = MIB_DEV_EUI;
 80083a4:	7033      	strb	r3, [r6, #0]
    if (LoRaMacMibGetRequestConfirm(&mibReq) != LORAMAC_STATUS_OK)
 80083a6:	f002 fbbb 	bl	800ab20 <LoRaMacMibGetRequestConfirm>
 80083aa:	1e04      	subs	r4, r0, #0
 80083ac:	d1f3      	bne.n	8008396 <LmHandlerGetDevEUI+0xa>
    UTIL_MEM_cpy_8(devEUI, mibReq.Param.DevEui, SE_EUI_SIZE);
 80083ae:	0028      	movs	r0, r5
 80083b0:	2208      	movs	r2, #8
 80083b2:	9902      	ldr	r1, [sp, #8]
 80083b4:	f006 fec2 	bl	800f13c <UTIL_MEM_cpy_8>
    return LORAMAC_HANDLER_SUCCESS;
 80083b8:	0020      	movs	r0, r4
 80083ba:	e7ee      	b.n	800839a <LmHandlerGetDevEUI+0xe>

080083bc <LmHandlerSetDevEUI>:
{
 80083bc:	b510      	push	{r4, lr}
 80083be:	b08a      	sub	sp, #40	@ 0x28
 80083c0:	0004      	movs	r4, r0
    if (LmHandlerJoinStatus() != LORAMAC_HANDLER_SET)
 80083c2:	f7ff fd43 	bl	8007e4c <LmHandlerJoinStatus>
 80083c6:	2801      	cmp	r0, #1
 80083c8:	d00a      	beq.n	80083e0 <LmHandlerSetDevEUI+0x24>
        mibReq.Type = MIB_DEV_EUI;
 80083ca:	2302      	movs	r3, #2
 80083cc:	a801      	add	r0, sp, #4
 80083ce:	7003      	strb	r3, [r0, #0]
        mibReq.Param.DevEui = devEUI;
 80083d0:	6044      	str	r4, [r0, #4]
        if (LoRaMacMibSetRequestConfirm(&mibReq) != LORAMAC_STATUS_OK)
 80083d2:	f002 fc57 	bl	800ac84 <LoRaMacMibSetRequestConfirm>
 80083d6:	1e43      	subs	r3, r0, #1
 80083d8:	4198      	sbcs	r0, r3
            return LORAMAC_HANDLER_ERROR;
 80083da:	4240      	negs	r0, r0
}
 80083dc:	b00a      	add	sp, #40	@ 0x28
 80083de:	bd10      	pop	{r4, pc}
            return LORAMAC_HANDLER_ERROR;
 80083e0:	2001      	movs	r0, #1
 80083e2:	e7fa      	b.n	80083da <LmHandlerSetDevEUI+0x1e>

080083e4 <LmHandlerGetAppEUI>:
{
 80083e4:	b570      	push	{r4, r5, r6, lr}
 80083e6:	0005      	movs	r5, r0
 80083e8:	b08a      	sub	sp, #40	@ 0x28
    if (appEUI == NULL)
 80083ea:	2800      	cmp	r0, #0
 80083ec:	d103      	bne.n	80083f6 <LmHandlerGetAppEUI+0x12>
        return LORAMAC_HANDLER_ERROR;
 80083ee:	2001      	movs	r0, #1
 80083f0:	4240      	negs	r0, r0
}
 80083f2:	b00a      	add	sp, #40	@ 0x28
 80083f4:	bd70      	pop	{r4, r5, r6, pc}
    mibReq.Type = MIB_JOIN_EUI;
 80083f6:	2303      	movs	r3, #3
 80083f8:	ae01      	add	r6, sp, #4
    if (LoRaMacMibGetRequestConfirm(&mibReq) != LORAMAC_STATUS_OK)
 80083fa:	0030      	movs	r0, r6
    mibReq.Type = MIB_JOIN_EUI;
 80083fc:	7033      	strb	r3, [r6, #0]
    if (LoRaMacMibGetRequestConfirm(&mibReq) != LORAMAC_STATUS_OK)
 80083fe:	f002 fb8f 	bl	800ab20 <LoRaMacMibGetRequestConfirm>
 8008402:	1e04      	subs	r4, r0, #0
 8008404:	d1f3      	bne.n	80083ee <LmHandlerGetAppEUI+0xa>
    UTIL_MEM_cpy_8(appEUI, mibReq.Param.JoinEui, SE_EUI_SIZE);
 8008406:	0028      	movs	r0, r5
 8008408:	2208      	movs	r2, #8
 800840a:	9902      	ldr	r1, [sp, #8]
 800840c:	f006 fe96 	bl	800f13c <UTIL_MEM_cpy_8>
    return LORAMAC_HANDLER_SUCCESS;
 8008410:	0020      	movs	r0, r4
 8008412:	e7ee      	b.n	80083f2 <LmHandlerGetAppEUI+0xe>

08008414 <LmHandlerSetAppEUI>:
{
 8008414:	b510      	push	{r4, lr}
 8008416:	b08a      	sub	sp, #40	@ 0x28
 8008418:	0004      	movs	r4, r0
    if (LmHandlerJoinStatus() != LORAMAC_HANDLER_SET)
 800841a:	f7ff fd17 	bl	8007e4c <LmHandlerJoinStatus>
 800841e:	2801      	cmp	r0, #1
 8008420:	d00a      	beq.n	8008438 <LmHandlerSetAppEUI+0x24>
        mibReq.Type = MIB_JOIN_EUI;
 8008422:	2303      	movs	r3, #3
 8008424:	a801      	add	r0, sp, #4
 8008426:	7003      	strb	r3, [r0, #0]
        mibReq.Param.JoinEui = appEUI;
 8008428:	6044      	str	r4, [r0, #4]
        if (LoRaMacMibSetRequestConfirm(&mibReq) != LORAMAC_STATUS_OK)
 800842a:	f002 fc2b 	bl	800ac84 <LoRaMacMibSetRequestConfirm>
 800842e:	1e43      	subs	r3, r0, #1
 8008430:	4198      	sbcs	r0, r3
            return LORAMAC_HANDLER_ERROR;
 8008432:	4240      	negs	r0, r0
}
 8008434:	b00a      	add	sp, #40	@ 0x28
 8008436:	bd10      	pop	{r4, pc}
            return LORAMAC_HANDLER_ERROR;
 8008438:	2001      	movs	r0, #1
 800843a:	e7fa      	b.n	8008432 <LmHandlerSetAppEUI+0x1e>

0800843c <LmHandlerGetNetworkID>:
{
 800843c:	b530      	push	{r4, r5, lr}
 800843e:	0004      	movs	r4, r0
 8008440:	b08b      	sub	sp, #44	@ 0x2c
    if (networkId == NULL)
 8008442:	2800      	cmp	r0, #0
 8008444:	d103      	bne.n	800844e <LmHandlerGetNetworkID+0x12>
        return LORAMAC_HANDLER_ERROR;
 8008446:	2001      	movs	r0, #1
 8008448:	4240      	negs	r0, r0
}
 800844a:	b00b      	add	sp, #44	@ 0x2c
 800844c:	bd30      	pop	{r4, r5, pc}
    mibReq.Type = MIB_NET_ID;
 800844e:	2305      	movs	r3, #5
 8008450:	ad01      	add	r5, sp, #4
    if (LoRaMacMibGetRequestConfirm(&mibReq) != LORAMAC_STATUS_OK)
 8008452:	0028      	movs	r0, r5
    mibReq.Type = MIB_NET_ID;
 8008454:	702b      	strb	r3, [r5, #0]
    if (LoRaMacMibGetRequestConfirm(&mibReq) != LORAMAC_STATUS_OK)
 8008456:	f002 fb63 	bl	800ab20 <LoRaMacMibGetRequestConfirm>
 800845a:	2800      	cmp	r0, #0
 800845c:	d1f3      	bne.n	8008446 <LmHandlerGetNetworkID+0xa>
    *networkId = mibReq.Param.NetID;
 800845e:	9b02      	ldr	r3, [sp, #8]
 8008460:	6023      	str	r3, [r4, #0]
    return LORAMAC_HANDLER_SUCCESS;
 8008462:	e7f2      	b.n	800844a <LmHandlerGetNetworkID+0xe>

08008464 <LmHandlerSetNetworkID>:
{
 8008464:	b510      	push	{r4, lr}
 8008466:	b08a      	sub	sp, #40	@ 0x28
 8008468:	0004      	movs	r4, r0
    if (LmHandlerJoinStatus() != LORAMAC_HANDLER_SET)
 800846a:	f7ff fcef 	bl	8007e4c <LmHandlerJoinStatus>
 800846e:	2801      	cmp	r0, #1
 8008470:	d00a      	beq.n	8008488 <LmHandlerSetNetworkID+0x24>
        mibReq.Type = MIB_NET_ID;
 8008472:	2305      	movs	r3, #5
 8008474:	a801      	add	r0, sp, #4
 8008476:	7003      	strb	r3, [r0, #0]
        mibReq.Param.NetID = networkId;
 8008478:	6044      	str	r4, [r0, #4]
        if (LoRaMacMibSetRequestConfirm(&mibReq) != LORAMAC_STATUS_OK)
 800847a:	f002 fc03 	bl	800ac84 <LoRaMacMibSetRequestConfirm>
 800847e:	1e43      	subs	r3, r0, #1
 8008480:	4198      	sbcs	r0, r3
            return LORAMAC_HANDLER_ERROR;
 8008482:	4240      	negs	r0, r0
}
 8008484:	b00a      	add	sp, #40	@ 0x28
 8008486:	bd10      	pop	{r4, pc}
            return LORAMAC_HANDLER_ERROR;
 8008488:	2001      	movs	r0, #1
 800848a:	e7fa      	b.n	8008482 <LmHandlerSetNetworkID+0x1e>

0800848c <LmHandlerGetDevAddr>:
{
 800848c:	b530      	push	{r4, r5, lr}
 800848e:	0004      	movs	r4, r0
 8008490:	b08b      	sub	sp, #44	@ 0x2c
    if (devAddr == NULL)
 8008492:	2800      	cmp	r0, #0
 8008494:	d103      	bne.n	800849e <LmHandlerGetDevAddr+0x12>
        return LORAMAC_HANDLER_ERROR;
 8008496:	2001      	movs	r0, #1
 8008498:	4240      	negs	r0, r0
}
 800849a:	b00b      	add	sp, #44	@ 0x2c
 800849c:	bd30      	pop	{r4, r5, pc}
    mibReq.Type = MIB_DEV_ADDR;
 800849e:	2306      	movs	r3, #6
 80084a0:	ad01      	add	r5, sp, #4
    if (LoRaMacMibGetRequestConfirm(&mibReq) != LORAMAC_STATUS_OK)
 80084a2:	0028      	movs	r0, r5
    mibReq.Type = MIB_DEV_ADDR;
 80084a4:	702b      	strb	r3, [r5, #0]
    if (LoRaMacMibGetRequestConfirm(&mibReq) != LORAMAC_STATUS_OK)
 80084a6:	f002 fb3b 	bl	800ab20 <LoRaMacMibGetRequestConfirm>
 80084aa:	2800      	cmp	r0, #0
 80084ac:	d1f3      	bne.n	8008496 <LmHandlerGetDevAddr+0xa>
    *devAddr = mibReq.Param.DevAddr;
 80084ae:	9b02      	ldr	r3, [sp, #8]
 80084b0:	6023      	str	r3, [r4, #0]
    return LORAMAC_HANDLER_SUCCESS;
 80084b2:	e7f2      	b.n	800849a <LmHandlerGetDevAddr+0xe>

080084b4 <LmHandlerSetDevAddr>:
{
 80084b4:	b510      	push	{r4, lr}
 80084b6:	b08a      	sub	sp, #40	@ 0x28
 80084b8:	0004      	movs	r4, r0
    if (LmHandlerJoinStatus() != LORAMAC_HANDLER_SET)
 80084ba:	f7ff fcc7 	bl	8007e4c <LmHandlerJoinStatus>
 80084be:	2801      	cmp	r0, #1
 80084c0:	d00a      	beq.n	80084d8 <LmHandlerSetDevAddr+0x24>
        mibReq.Type = MIB_DEV_ADDR;
 80084c2:	2306      	movs	r3, #6
 80084c4:	a801      	add	r0, sp, #4
 80084c6:	7003      	strb	r3, [r0, #0]
        mibReq.Param.DevAddr = devAddr;
 80084c8:	6044      	str	r4, [r0, #4]
        if (LoRaMacMibSetRequestConfirm(&mibReq) != LORAMAC_STATUS_OK)
 80084ca:	f002 fbdb 	bl	800ac84 <LoRaMacMibSetRequestConfirm>
 80084ce:	1e43      	subs	r3, r0, #1
 80084d0:	4198      	sbcs	r0, r3
            return LORAMAC_HANDLER_ERROR;
 80084d2:	4240      	negs	r0, r0
}
 80084d4:	b00a      	add	sp, #40	@ 0x28
 80084d6:	bd10      	pop	{r4, pc}
            return LORAMAC_HANDLER_ERROR;
 80084d8:	2001      	movs	r0, #1
 80084da:	e7fa      	b.n	80084d2 <LmHandlerSetDevAddr+0x1e>

080084dc <LmHandlerSetActiveRegion>:
{
 80084dc:	b510      	push	{r4, lr}
 80084de:	0004      	movs	r4, r0
    if (LmHandlerJoinStatus() != LORAMAC_HANDLER_SET)
 80084e0:	f7ff fcb4 	bl	8007e4c <LmHandlerJoinStatus>
 80084e4:	2801      	cmp	r0, #1
 80084e6:	d004      	beq.n	80084f2 <LmHandlerSetActiveRegion+0x16>
        LmHandlerParams.ActiveRegion = region;
 80084e8:	4803      	ldr	r0, [pc, #12]	@ (80084f8 <LmHandlerSetActiveRegion+0x1c>)
 80084ea:	7004      	strb	r4, [r0, #0]
        return LmHandlerConfigure( &LmHandlerParams );
 80084ec:	f7ff fbca 	bl	8007c84 <LmHandlerConfigure>
}
 80084f0:	bd10      	pop	{r4, pc}
        return LORAMAC_HANDLER_ERROR;
 80084f2:	2001      	movs	r0, #1
 80084f4:	4240      	negs	r0, r0
 80084f6:	e7fb      	b.n	80084f0 <LmHandlerSetActiveRegion+0x14>
 80084f8:	20000878 	.word	0x20000878

080084fc <LmHandlerGetAdrEnable>:
    if (adrEnable == NULL)
 80084fc:	2800      	cmp	r0, #0
 80084fe:	d004      	beq.n	800850a <LmHandlerGetAdrEnable+0xe>
    *adrEnable = LmHandlerParams.AdrEnable;
 8008500:	4b03      	ldr	r3, [pc, #12]	@ (8008510 <LmHandlerGetAdrEnable+0x14>)
 8008502:	789b      	ldrb	r3, [r3, #2]
 8008504:	7003      	strb	r3, [r0, #0]
    return LORAMAC_HANDLER_SUCCESS;
 8008506:	2000      	movs	r0, #0
}
 8008508:	4770      	bx	lr
        return LORAMAC_HANDLER_ERROR;
 800850a:	2001      	movs	r0, #1
 800850c:	4240      	negs	r0, r0
 800850e:	e7fb      	b.n	8008508 <LmHandlerGetAdrEnable+0xc>
 8008510:	20000878 	.word	0x20000878

08008514 <LmHandlerSetAdrEnable>:
{
 8008514:	b510      	push	{r4, lr}
 8008516:	b08a      	sub	sp, #40	@ 0x28
    mibReq.Type = MIB_ADR;
 8008518:	466a      	mov	r2, sp
 800851a:	2304      	movs	r3, #4
{
 800851c:	0004      	movs	r4, r0
    mibReq.Param.AdrEnable = adrEnable;
 800851e:	7210      	strb	r0, [r2, #8]
    if (LoRaMacMibSetRequestConfirm(&mibReq) != LORAMAC_STATUS_OK)
 8008520:	a801      	add	r0, sp, #4
    mibReq.Type = MIB_ADR;
 8008522:	7113      	strb	r3, [r2, #4]
    if (LoRaMacMibSetRequestConfirm(&mibReq) != LORAMAC_STATUS_OK)
 8008524:	f002 fbae 	bl	800ac84 <LoRaMacMibSetRequestConfirm>
 8008528:	2800      	cmp	r0, #0
 800852a:	d103      	bne.n	8008534 <LmHandlerSetAdrEnable+0x20>
    LmHandlerParams.AdrEnable = adrEnable;
 800852c:	4b03      	ldr	r3, [pc, #12]	@ (800853c <LmHandlerSetAdrEnable+0x28>)
 800852e:	709c      	strb	r4, [r3, #2]
}
 8008530:	b00a      	add	sp, #40	@ 0x28
 8008532:	bd10      	pop	{r4, pc}
        return LORAMAC_HANDLER_ERROR;
 8008534:	2001      	movs	r0, #1
 8008536:	4240      	negs	r0, r0
 8008538:	e7fa      	b.n	8008530 <LmHandlerSetAdrEnable+0x1c>
 800853a:	46c0      	nop			@ (mov r8, r8)
 800853c:	20000878 	.word	0x20000878

08008540 <LmHandlerSetTxDatarate>:
{
 8008540:	b530      	push	{r4, r5, lr}
    if (LmHandlerParams.AdrEnable == true)
 8008542:	4d0a      	ldr	r5, [pc, #40]	@ (800856c <LmHandlerSetTxDatarate+0x2c>)
{
 8008544:	0004      	movs	r4, r0
    if (LmHandlerParams.AdrEnable == true)
 8008546:	78ab      	ldrb	r3, [r5, #2]
{
 8008548:	b08b      	sub	sp, #44	@ 0x2c
    if (LmHandlerParams.AdrEnable == true)
 800854a:	2b00      	cmp	r3, #0
 800854c:	d003      	beq.n	8008556 <LmHandlerSetTxDatarate+0x16>
        return LORAMAC_HANDLER_ERROR;
 800854e:	2001      	movs	r0, #1
 8008550:	4240      	negs	r0, r0
}
 8008552:	b00b      	add	sp, #44	@ 0x2c
 8008554:	bd30      	pop	{r4, r5, pc}
    mibReq.Type = MIB_CHANNELS_DATARATE;
 8008556:	466a      	mov	r2, sp
 8008558:	231f      	movs	r3, #31
    mibReq.Param.ChannelsDatarate = txDatarate;
 800855a:	7210      	strb	r0, [r2, #8]
    if (LoRaMacMibSetRequestConfirm(&mibReq) != LORAMAC_STATUS_OK)
 800855c:	a801      	add	r0, sp, #4
    mibReq.Type = MIB_CHANNELS_DATARATE;
 800855e:	7113      	strb	r3, [r2, #4]
    if (LoRaMacMibSetRequestConfirm(&mibReq) != LORAMAC_STATUS_OK)
 8008560:	f002 fb90 	bl	800ac84 <LoRaMacMibSetRequestConfirm>
 8008564:	2800      	cmp	r0, #0
 8008566:	d1f2      	bne.n	800854e <LmHandlerSetTxDatarate+0xe>
    LmHandlerParams.TxDatarate = txDatarate;
 8008568:	70ec      	strb	r4, [r5, #3]
    return LORAMAC_HANDLER_SUCCESS;
 800856a:	e7f2      	b.n	8008552 <LmHandlerSetTxDatarate+0x12>
 800856c:	20000878 	.word	0x20000878

08008570 <LmHandlerGetDutyCycleEnable>:
    if (dutyCycleEnable == NULL)
 8008570:	2800      	cmp	r0, #0
 8008572:	d004      	beq.n	800857e <LmHandlerGetDutyCycleEnable+0xe>
    *dutyCycleEnable = LmHandlerParams.DutyCycleEnabled;
 8008574:	4b03      	ldr	r3, [pc, #12]	@ (8008584 <LmHandlerGetDutyCycleEnable+0x14>)
 8008576:	795b      	ldrb	r3, [r3, #5]
 8008578:	7003      	strb	r3, [r0, #0]
    return LORAMAC_HANDLER_SUCCESS;
 800857a:	2000      	movs	r0, #0
}
 800857c:	4770      	bx	lr
        return LORAMAC_HANDLER_ERROR;
 800857e:	2001      	movs	r0, #1
 8008580:	4240      	negs	r0, r0
 8008582:	e7fb      	b.n	800857c <LmHandlerGetDutyCycleEnable+0xc>
 8008584:	20000878 	.word	0x20000878

08008588 <LmHandlerSetDutyCycleEnable>:
{
 8008588:	b510      	push	{r4, lr}
    LmHandlerParams.DutyCycleEnabled = dutyCycleEnable;
 800858a:	4b03      	ldr	r3, [pc, #12]	@ (8008598 <LmHandlerSetDutyCycleEnable+0x10>)
 800858c:	7158      	strb	r0, [r3, #5]
    LoRaMacTestSetDutyCycleOn(dutyCycleEnable);
 800858e:	f003 f873 	bl	800b678 <LoRaMacTestSetDutyCycleOn>
}
 8008592:	2000      	movs	r0, #0
 8008594:	bd10      	pop	{r4, pc}
 8008596:	46c0      	nop			@ (mov r8, r8)
 8008598:	20000878 	.word	0x20000878

0800859c <LmHandlerGetRX2Params>:
{
 800859c:	b510      	push	{r4, lr}
 800859e:	0004      	movs	r4, r0
 80085a0:	b08a      	sub	sp, #40	@ 0x28
    if (rxParams == NULL)
 80085a2:	2800      	cmp	r0, #0
 80085a4:	d103      	bne.n	80085ae <LmHandlerGetRX2Params+0x12>
        return LORAMAC_HANDLER_ERROR;
 80085a6:	2001      	movs	r0, #1
 80085a8:	4240      	negs	r0, r0
}
 80085aa:	b00a      	add	sp, #40	@ 0x28
 80085ac:	bd10      	pop	{r4, pc}
    mibReq.Type = MIB_RX2_CHANNEL;
 80085ae:	2312      	movs	r3, #18
 80085b0:	466a      	mov	r2, sp
    if (LoRaMacMibGetRequestConfirm(&mibReq) != LORAMAC_STATUS_OK)
 80085b2:	a801      	add	r0, sp, #4
    mibReq.Type = MIB_RX2_CHANNEL;
 80085b4:	7113      	strb	r3, [r2, #4]
    if (LoRaMacMibGetRequestConfirm(&mibReq) != LORAMAC_STATUS_OK)
 80085b6:	f002 fab3 	bl	800ab20 <LoRaMacMibGetRequestConfirm>
 80085ba:	2800      	cmp	r0, #0
 80085bc:	d1f3      	bne.n	80085a6 <LmHandlerGetRX2Params+0xa>
    rxParams->Frequency = mibReq.Param.Rx2Channel.Frequency;
 80085be:	9b02      	ldr	r3, [sp, #8]
 80085c0:	6023      	str	r3, [r4, #0]
    rxParams->Datarate = mibReq.Param.Rx2Channel.Datarate;
 80085c2:	466b      	mov	r3, sp
 80085c4:	7b1b      	ldrb	r3, [r3, #12]
 80085c6:	7123      	strb	r3, [r4, #4]
    return LORAMAC_HANDLER_SUCCESS;
 80085c8:	e7ef      	b.n	80085aa <LmHandlerGetRX2Params+0xe>

080085ca <LmHandlerGetTxPower>:
{
 80085ca:	b510      	push	{r4, lr}
 80085cc:	0004      	movs	r4, r0
 80085ce:	b08a      	sub	sp, #40	@ 0x28
    if (txPower == NULL)
 80085d0:	2800      	cmp	r0, #0
 80085d2:	d103      	bne.n	80085dc <LmHandlerGetTxPower+0x12>
        return LORAMAC_HANDLER_ERROR;
 80085d4:	2001      	movs	r0, #1
 80085d6:	4240      	negs	r0, r0
}
 80085d8:	b00a      	add	sp, #40	@ 0x28
 80085da:	bd10      	pop	{r4, pc}
    mibReq.Type = MIB_CHANNELS_TX_POWER;
 80085dc:	2320      	movs	r3, #32
 80085de:	466a      	mov	r2, sp
    if (LoRaMacMibGetRequestConfirm(&mibReq) != LORAMAC_STATUS_OK)
 80085e0:	a801      	add	r0, sp, #4
    mibReq.Type = MIB_CHANNELS_TX_POWER;
 80085e2:	7113      	strb	r3, [r2, #4]
    if (LoRaMacMibGetRequestConfirm(&mibReq) != LORAMAC_STATUS_OK)
 80085e4:	f002 fa9c 	bl	800ab20 <LoRaMacMibGetRequestConfirm>
 80085e8:	2800      	cmp	r0, #0
 80085ea:	d1f3      	bne.n	80085d4 <LmHandlerGetTxPower+0xa>
    *txPower = mibReq.Param.ChannelsTxPower;
 80085ec:	466b      	mov	r3, sp
 80085ee:	7a1b      	ldrb	r3, [r3, #8]
 80085f0:	7023      	strb	r3, [r4, #0]
    return LORAMAC_HANDLER_SUCCESS;
 80085f2:	e7f1      	b.n	80085d8 <LmHandlerGetTxPower+0xe>

080085f4 <LmHandlerGetRx1Delay>:
{
 80085f4:	b530      	push	{r4, r5, lr}
 80085f6:	0004      	movs	r4, r0
 80085f8:	b08b      	sub	sp, #44	@ 0x2c
    if (rxDelay == NULL)
 80085fa:	2800      	cmp	r0, #0
 80085fc:	d103      	bne.n	8008606 <LmHandlerGetRx1Delay+0x12>
        return LORAMAC_HANDLER_ERROR;
 80085fe:	2001      	movs	r0, #1
 8008600:	4240      	negs	r0, r0
}
 8008602:	b00b      	add	sp, #44	@ 0x2c
 8008604:	bd30      	pop	{r4, r5, pc}
    mibReq.Type = MIB_RECEIVE_DELAY_1;
 8008606:	231a      	movs	r3, #26
 8008608:	ad01      	add	r5, sp, #4
    if (LoRaMacMibGetRequestConfirm(&mibReq) != LORAMAC_STATUS_OK)
 800860a:	0028      	movs	r0, r5
    mibReq.Type = MIB_RECEIVE_DELAY_1;
 800860c:	702b      	strb	r3, [r5, #0]
    if (LoRaMacMibGetRequestConfirm(&mibReq) != LORAMAC_STATUS_OK)
 800860e:	f002 fa87 	bl	800ab20 <LoRaMacMibGetRequestConfirm>
 8008612:	2800      	cmp	r0, #0
 8008614:	d1f3      	bne.n	80085fe <LmHandlerGetRx1Delay+0xa>
    *rxDelay = mibReq.Param.ReceiveDelay1;
 8008616:	9b02      	ldr	r3, [sp, #8]
 8008618:	6023      	str	r3, [r4, #0]
    return LORAMAC_HANDLER_SUCCESS;
 800861a:	e7f2      	b.n	8008602 <LmHandlerGetRx1Delay+0xe>

0800861c <LmHandlerGetRx2Delay>:
{
 800861c:	b530      	push	{r4, r5, lr}
 800861e:	0004      	movs	r4, r0
 8008620:	b08b      	sub	sp, #44	@ 0x2c
    if (rxDelay == NULL)
 8008622:	2800      	cmp	r0, #0
 8008624:	d103      	bne.n	800862e <LmHandlerGetRx2Delay+0x12>
        return LORAMAC_HANDLER_ERROR;
 8008626:	2001      	movs	r0, #1
 8008628:	4240      	negs	r0, r0
}
 800862a:	b00b      	add	sp, #44	@ 0x2c
 800862c:	bd30      	pop	{r4, r5, pc}
    mibReq.Type = MIB_RECEIVE_DELAY_2;
 800862e:	231b      	movs	r3, #27
 8008630:	ad01      	add	r5, sp, #4
    if (LoRaMacMibGetRequestConfirm(&mibReq) != LORAMAC_STATUS_OK)
 8008632:	0028      	movs	r0, r5
    mibReq.Type = MIB_RECEIVE_DELAY_2;
 8008634:	702b      	strb	r3, [r5, #0]
    if (LoRaMacMibGetRequestConfirm(&mibReq) != LORAMAC_STATUS_OK)
 8008636:	f002 fa73 	bl	800ab20 <LoRaMacMibGetRequestConfirm>
 800863a:	2800      	cmp	r0, #0
 800863c:	d1f3      	bne.n	8008626 <LmHandlerGetRx2Delay+0xa>
    *rxDelay = mibReq.Param.ReceiveDelay2;
 800863e:	9b02      	ldr	r3, [sp, #8]
 8008640:	6023      	str	r3, [r4, #0]
    return LORAMAC_HANDLER_SUCCESS;
 8008642:	e7f2      	b.n	800862a <LmHandlerGetRx2Delay+0xe>

08008644 <LmHandlerGetJoinRx1Delay>:
{
 8008644:	b530      	push	{r4, r5, lr}
 8008646:	0004      	movs	r4, r0
 8008648:	b08b      	sub	sp, #44	@ 0x2c
    if (rxDelay == NULL)
 800864a:	2800      	cmp	r0, #0
 800864c:	d103      	bne.n	8008656 <LmHandlerGetJoinRx1Delay+0x12>
        return LORAMAC_HANDLER_ERROR;
 800864e:	2001      	movs	r0, #1
 8008650:	4240      	negs	r0, r0
}
 8008652:	b00b      	add	sp, #44	@ 0x2c
 8008654:	bd30      	pop	{r4, r5, pc}
    mibReq.Type = MIB_JOIN_ACCEPT_DELAY_1;
 8008656:	231c      	movs	r3, #28
 8008658:	ad01      	add	r5, sp, #4
    if (LoRaMacMibGetRequestConfirm(&mibReq) != LORAMAC_STATUS_OK)
 800865a:	0028      	movs	r0, r5
    mibReq.Type = MIB_JOIN_ACCEPT_DELAY_1;
 800865c:	702b      	strb	r3, [r5, #0]
    if (LoRaMacMibGetRequestConfirm(&mibReq) != LORAMAC_STATUS_OK)
 800865e:	f002 fa5f 	bl	800ab20 <LoRaMacMibGetRequestConfirm>
 8008662:	2800      	cmp	r0, #0
 8008664:	d1f3      	bne.n	800864e <LmHandlerGetJoinRx1Delay+0xa>
    *rxDelay = mibReq.Param.JoinAcceptDelay1;
 8008666:	9b02      	ldr	r3, [sp, #8]
 8008668:	6023      	str	r3, [r4, #0]
    return LORAMAC_HANDLER_SUCCESS;
 800866a:	e7f2      	b.n	8008652 <LmHandlerGetJoinRx1Delay+0xe>

0800866c <LmHandlerGetJoinRx2Delay>:
{
 800866c:	b530      	push	{r4, r5, lr}
 800866e:	0004      	movs	r4, r0
 8008670:	b08b      	sub	sp, #44	@ 0x2c
    if (rxDelay == NULL)
 8008672:	2800      	cmp	r0, #0
 8008674:	d103      	bne.n	800867e <LmHandlerGetJoinRx2Delay+0x12>
        return LORAMAC_HANDLER_ERROR;
 8008676:	2001      	movs	r0, #1
 8008678:	4240      	negs	r0, r0
}
 800867a:	b00b      	add	sp, #44	@ 0x2c
 800867c:	bd30      	pop	{r4, r5, pc}
    mibReq.Type = MIB_JOIN_ACCEPT_DELAY_2;
 800867e:	231d      	movs	r3, #29
 8008680:	ad01      	add	r5, sp, #4
    if (LoRaMacMibGetRequestConfirm(&mibReq) != LORAMAC_STATUS_OK)
 8008682:	0028      	movs	r0, r5
    mibReq.Type = MIB_JOIN_ACCEPT_DELAY_2;
 8008684:	702b      	strb	r3, [r5, #0]
    if (LoRaMacMibGetRequestConfirm(&mibReq) != LORAMAC_STATUS_OK)
 8008686:	f002 fa4b 	bl	800ab20 <LoRaMacMibGetRequestConfirm>
 800868a:	2800      	cmp	r0, #0
 800868c:	d1f3      	bne.n	8008676 <LmHandlerGetJoinRx2Delay+0xa>
    *rxDelay = mibReq.Param.JoinAcceptDelay2;
 800868e:	9b02      	ldr	r3, [sp, #8]
 8008690:	6023      	str	r3, [r4, #0]
    return LORAMAC_HANDLER_SUCCESS;
 8008692:	e7f2      	b.n	800867a <LmHandlerGetJoinRx2Delay+0xe>

08008694 <LmHandlerSetTxPower>:
{
 8008694:	b500      	push	{lr}
 8008696:	b08b      	sub	sp, #44	@ 0x2c
    mibReq.Type = MIB_CHANNELS_TX_POWER;
 8008698:	466a      	mov	r2, sp
 800869a:	2320      	movs	r3, #32
    mibReq.Param.ChannelsTxPower = txPower;
 800869c:	7210      	strb	r0, [r2, #8]
    if (LoRaMacMibSetRequestConfirm(&mibReq) != LORAMAC_STATUS_OK)
 800869e:	a801      	add	r0, sp, #4
    mibReq.Type = MIB_CHANNELS_TX_POWER;
 80086a0:	7113      	strb	r3, [r2, #4]
    if (LoRaMacMibSetRequestConfirm(&mibReq) != LORAMAC_STATUS_OK)
 80086a2:	f002 faef 	bl	800ac84 <LoRaMacMibSetRequestConfirm>
 80086a6:	1e43      	subs	r3, r0, #1
 80086a8:	4198      	sbcs	r0, r3
}
 80086aa:	4240      	negs	r0, r0
 80086ac:	b00b      	add	sp, #44	@ 0x2c
 80086ae:	bd00      	pop	{pc}

080086b0 <LmHandlerSetRX2Params>:
{
 80086b0:	b500      	push	{lr}
 80086b2:	b08b      	sub	sp, #44	@ 0x2c
    mibReq.Type = MIB_RX2_CHANNEL;
 80086b4:	466a      	mov	r2, sp
 80086b6:	2312      	movs	r3, #18
 80086b8:	7113      	strb	r3, [r2, #4]
    mibReq.Param.Rx2Channel.Frequency = rxParams->Frequency;
 80086ba:	6803      	ldr	r3, [r0, #0]
 80086bc:	9302      	str	r3, [sp, #8]
    mibReq.Param.Rx2Channel.Datarate = rxParams->Datarate;
 80086be:	7903      	ldrb	r3, [r0, #4]
    if (LoRaMacMibSetRequestConfirm(&mibReq) != LORAMAC_STATUS_OK)
 80086c0:	a801      	add	r0, sp, #4
    mibReq.Param.Rx2Channel.Datarate = rxParams->Datarate;
 80086c2:	7313      	strb	r3, [r2, #12]
    if (LoRaMacMibSetRequestConfirm(&mibReq) != LORAMAC_STATUS_OK)
 80086c4:	f002 fade 	bl	800ac84 <LoRaMacMibSetRequestConfirm>
 80086c8:	1e43      	subs	r3, r0, #1
 80086ca:	4198      	sbcs	r0, r3
}
 80086cc:	4240      	negs	r0, r0
 80086ce:	b00b      	add	sp, #44	@ 0x2c
 80086d0:	bd00      	pop	{pc}

080086d2 <LmHandlerSetRx1Delay>:
    mibReq.Type = MIB_RECEIVE_DELAY_1;
 80086d2:	221a      	movs	r2, #26
{
 80086d4:	b500      	push	{lr}
 80086d6:	b08b      	sub	sp, #44	@ 0x2c
    mibReq.Type = MIB_RECEIVE_DELAY_1;
 80086d8:	ab01      	add	r3, sp, #4
    mibReq.Param.ReceiveDelay1 = rxDelay;
 80086da:	9002      	str	r0, [sp, #8]
    if (LoRaMacMibSetRequestConfirm(&mibReq) != LORAMAC_STATUS_OK)
 80086dc:	0018      	movs	r0, r3
    mibReq.Type = MIB_RECEIVE_DELAY_1;
 80086de:	701a      	strb	r2, [r3, #0]
    if (LoRaMacMibSetRequestConfirm(&mibReq) != LORAMAC_STATUS_OK)
 80086e0:	f002 fad0 	bl	800ac84 <LoRaMacMibSetRequestConfirm>
 80086e4:	1e43      	subs	r3, r0, #1
 80086e6:	4198      	sbcs	r0, r3
}
 80086e8:	4240      	negs	r0, r0
 80086ea:	b00b      	add	sp, #44	@ 0x2c
 80086ec:	bd00      	pop	{pc}

080086ee <LmHandlerSetRx2Delay>:
    mibReq.Type = MIB_RECEIVE_DELAY_2;
 80086ee:	221b      	movs	r2, #27
{
 80086f0:	b500      	push	{lr}
 80086f2:	b08b      	sub	sp, #44	@ 0x2c
    mibReq.Type = MIB_RECEIVE_DELAY_2;
 80086f4:	ab01      	add	r3, sp, #4
    mibReq.Param.ReceiveDelay2 = rxDelay;
 80086f6:	9002      	str	r0, [sp, #8]
    if (LoRaMacMibSetRequestConfirm(&mibReq) != LORAMAC_STATUS_OK)
 80086f8:	0018      	movs	r0, r3
    mibReq.Type = MIB_RECEIVE_DELAY_2;
 80086fa:	701a      	strb	r2, [r3, #0]
    if (LoRaMacMibSetRequestConfirm(&mibReq) != LORAMAC_STATUS_OK)
 80086fc:	f002 fac2 	bl	800ac84 <LoRaMacMibSetRequestConfirm>
 8008700:	1e43      	subs	r3, r0, #1
 8008702:	4198      	sbcs	r0, r3
}
 8008704:	4240      	negs	r0, r0
 8008706:	b00b      	add	sp, #44	@ 0x2c
 8008708:	bd00      	pop	{pc}

0800870a <LmHandlerSetJoinRx1Delay>:
    mibReq.Type = MIB_JOIN_ACCEPT_DELAY_1;
 800870a:	221c      	movs	r2, #28
{
 800870c:	b500      	push	{lr}
 800870e:	b08b      	sub	sp, #44	@ 0x2c
    mibReq.Type = MIB_JOIN_ACCEPT_DELAY_1;
 8008710:	ab01      	add	r3, sp, #4
    mibReq.Param.JoinAcceptDelay1 = rxDelay;
 8008712:	9002      	str	r0, [sp, #8]
    if (LoRaMacMibSetRequestConfirm(&mibReq) != LORAMAC_STATUS_OK)
 8008714:	0018      	movs	r0, r3
    mibReq.Type = MIB_JOIN_ACCEPT_DELAY_1;
 8008716:	701a      	strb	r2, [r3, #0]
    if (LoRaMacMibSetRequestConfirm(&mibReq) != LORAMAC_STATUS_OK)
 8008718:	f002 fab4 	bl	800ac84 <LoRaMacMibSetRequestConfirm>
 800871c:	1e43      	subs	r3, r0, #1
 800871e:	4198      	sbcs	r0, r3
}
 8008720:	4240      	negs	r0, r0
 8008722:	b00b      	add	sp, #44	@ 0x2c
 8008724:	bd00      	pop	{pc}

08008726 <LmHandlerSetJoinRx2Delay>:
    mibReq.Type = MIB_JOIN_ACCEPT_DELAY_2;
 8008726:	221d      	movs	r2, #29
{
 8008728:	b500      	push	{lr}
 800872a:	b08b      	sub	sp, #44	@ 0x2c
    mibReq.Type = MIB_JOIN_ACCEPT_DELAY_2;
 800872c:	ab01      	add	r3, sp, #4
    mibReq.Param.JoinAcceptDelay2 = rxDelay;
 800872e:	9002      	str	r0, [sp, #8]
    if (LoRaMacMibSetRequestConfirm(&mibReq) != LORAMAC_STATUS_OK)
 8008730:	0018      	movs	r0, r3
    mibReq.Type = MIB_JOIN_ACCEPT_DELAY_2;
 8008732:	701a      	strb	r2, [r3, #0]
    if (LoRaMacMibSetRequestConfirm(&mibReq) != LORAMAC_STATUS_OK)
 8008734:	f002 faa6 	bl	800ac84 <LoRaMacMibSetRequestConfirm>
 8008738:	1e43      	subs	r3, r0, #1
 800873a:	4198      	sbcs	r0, r3
}
 800873c:	4240      	negs	r0, r0
 800873e:	b00b      	add	sp, #44	@ 0x2c
 8008740:	bd00      	pop	{pc}

08008742 <LmHandlerGetPingPeriodicity>:
    return LORAMAC_HANDLER_ERROR;
 8008742:	2001      	movs	r0, #1
}
 8008744:	4240      	negs	r0, r0
 8008746:	4770      	bx	lr

08008748 <LmHandlerSetPingPeriodicity>:
    return LORAMAC_HANDLER_ERROR;
 8008748:	2001      	movs	r0, #1
}
 800874a:	4240      	negs	r0, r0
 800874c:	4770      	bx	lr

0800874e <LmHandlerGetBeaconState>:
LmHandlerErrorStatus_t LmHandlerGetBeaconState(BeaconState_t *beaconState)
 800874e:	2001      	movs	r0, #1
 8008750:	4240      	negs	r0, r0
 8008752:	4770      	bx	lr

08008754 <LmHandlerGetNwkKey>:
{
 8008754:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008756:	1e05      	subs	r5, r0, #0
    if (nwkKey == NULL)
 8008758:	d102      	bne.n	8008760 <LmHandlerGetNwkKey+0xc>
        return LORAMAC_HANDLER_ERROR;
 800875a:	2001      	movs	r0, #1
 800875c:	4240      	negs	r0, r0
}
 800875e:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    if (SECURE_ELEMENT_SUCCESS != SecureElementGetKeyByID(NWK_KEY, &keyItem))
 8008760:	2001      	movs	r0, #1
 8008762:	a901      	add	r1, sp, #4
 8008764:	f7ff f842 	bl	80077ec <SecureElementGetKeyByID>
 8008768:	1e04      	subs	r4, r0, #0
 800876a:	d1f6      	bne.n	800875a <LmHandlerGetNwkKey+0x6>
    UTIL_MEM_cpy_8( nwkKey, keyItem->KeyValue, 16 );
 800876c:	9901      	ldr	r1, [sp, #4]
 800876e:	0028      	movs	r0, r5
 8008770:	2210      	movs	r2, #16
 8008772:	3101      	adds	r1, #1
 8008774:	f006 fce2 	bl	800f13c <UTIL_MEM_cpy_8>
    return LORAMAC_HANDLER_SUCCESS;
 8008778:	0020      	movs	r0, r4
 800877a:	e7f0      	b.n	800875e <LmHandlerGetNwkKey+0xa>

0800877c <LmHandlerSetNwkKey>:
{
 800877c:	b510      	push	{r4, lr}
 800877e:	b08a      	sub	sp, #40	@ 0x28
 8008780:	0004      	movs	r4, r0
    if( LmHandlerJoinStatus( ) != LORAMAC_HANDLER_SET )
 8008782:	f7ff fb63 	bl	8007e4c <LmHandlerJoinStatus>
 8008786:	2801      	cmp	r0, #1
 8008788:	d00a      	beq.n	80087a0 <LmHandlerSetNwkKey+0x24>
        mibReq.Type = MIB_NWK_KEY;
 800878a:	2308      	movs	r3, #8
 800878c:	a801      	add	r0, sp, #4
 800878e:	7003      	strb	r3, [r0, #0]
        mibReq.Param.NwkKey = nwkKey;
 8008790:	6044      	str	r4, [r0, #4]
        if (LoRaMacMibSetRequestConfirm(&mibReq) != LORAMAC_STATUS_OK)
 8008792:	f002 fa77 	bl	800ac84 <LoRaMacMibSetRequestConfirm>
 8008796:	1e43      	subs	r3, r0, #1
 8008798:	4198      	sbcs	r0, r3
        return LORAMAC_HANDLER_ERROR;
 800879a:	4240      	negs	r0, r0
}
 800879c:	b00a      	add	sp, #40	@ 0x28
 800879e:	bd10      	pop	{r4, pc}
        return LORAMAC_HANDLER_ERROR;
 80087a0:	2001      	movs	r0, #1
 80087a2:	e7fa      	b.n	800879a <LmHandlerSetNwkKey+0x1e>

080087a4 <LmHandlerGetAppKey>:
{
 80087a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80087a6:	1e05      	subs	r5, r0, #0
    if (appKey == NULL)
 80087a8:	d102      	bne.n	80087b0 <LmHandlerGetAppKey+0xc>
        return LORAMAC_HANDLER_ERROR;
 80087aa:	2001      	movs	r0, #1
 80087ac:	4240      	negs	r0, r0
}
 80087ae:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    if (SECURE_ELEMENT_SUCCESS != SecureElementGetKeyByID(APP_KEY, &keyItem))
 80087b0:	2000      	movs	r0, #0
 80087b2:	a901      	add	r1, sp, #4
 80087b4:	f7ff f81a 	bl	80077ec <SecureElementGetKeyByID>
 80087b8:	1e04      	subs	r4, r0, #0
 80087ba:	d1f6      	bne.n	80087aa <LmHandlerGetAppKey+0x6>
    UTIL_MEM_cpy_8( appKey, keyItem->KeyValue, 16 );
 80087bc:	9901      	ldr	r1, [sp, #4]
 80087be:	0028      	movs	r0, r5
 80087c0:	2210      	movs	r2, #16
 80087c2:	3101      	adds	r1, #1
 80087c4:	f006 fcba 	bl	800f13c <UTIL_MEM_cpy_8>
    return LORAMAC_HANDLER_SUCCESS;
 80087c8:	0020      	movs	r0, r4
 80087ca:	e7f0      	b.n	80087ae <LmHandlerGetAppKey+0xa>

080087cc <LmHandlerSetAppKey>:
{
 80087cc:	b510      	push	{r4, lr}
 80087ce:	b08a      	sub	sp, #40	@ 0x28
 80087d0:	0004      	movs	r4, r0
    if( LmHandlerJoinStatus( ) != LORAMAC_HANDLER_SET )
 80087d2:	f7ff fb3b 	bl	8007e4c <LmHandlerJoinStatus>
 80087d6:	2801      	cmp	r0, #1
 80087d8:	d00a      	beq.n	80087f0 <LmHandlerSetAppKey+0x24>
        mibReq.Type = MIB_APP_KEY;
 80087da:	2307      	movs	r3, #7
 80087dc:	a801      	add	r0, sp, #4
 80087de:	7003      	strb	r3, [r0, #0]
        mibReq.Param.AppKey = appKey;
 80087e0:	6044      	str	r4, [r0, #4]
        if (LoRaMacMibSetRequestConfirm(&mibReq) != LORAMAC_STATUS_OK)
 80087e2:	f002 fa4f 	bl	800ac84 <LoRaMacMibSetRequestConfirm>
 80087e6:	1e43      	subs	r3, r0, #1
 80087e8:	4198      	sbcs	r0, r3
        return LORAMAC_HANDLER_ERROR;
 80087ea:	4240      	negs	r0, r0
}
 80087ec:	b00a      	add	sp, #40	@ 0x28
 80087ee:	bd10      	pop	{r4, pc}
        return LORAMAC_HANDLER_ERROR;
 80087f0:	2001      	movs	r0, #1
 80087f2:	e7fa      	b.n	80087ea <LmHandlerSetAppKey+0x1e>

080087f4 <LmHandlerGetNwkSKey>:
{
 80087f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80087f6:	1e05      	subs	r5, r0, #0
    if (nwkSKey == NULL)
 80087f8:	d102      	bne.n	8008800 <LmHandlerGetNwkSKey+0xc>
        return LORAMAC_HANDLER_ERROR;
 80087fa:	2001      	movs	r0, #1
 80087fc:	4240      	negs	r0, r0
}
 80087fe:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    if (SECURE_ELEMENT_SUCCESS != SecureElementGetKeyByID(NWK_S_KEY, &keyItem))
 8008800:	2002      	movs	r0, #2
 8008802:	a901      	add	r1, sp, #4
 8008804:	f7fe fff2 	bl	80077ec <SecureElementGetKeyByID>
 8008808:	1e04      	subs	r4, r0, #0
 800880a:	d1f6      	bne.n	80087fa <LmHandlerGetNwkSKey+0x6>
    UTIL_MEM_cpy_8( nwkSKey, keyItem->KeyValue, 16 );
 800880c:	9901      	ldr	r1, [sp, #4]
 800880e:	0028      	movs	r0, r5
 8008810:	2210      	movs	r2, #16
 8008812:	3101      	adds	r1, #1
 8008814:	f006 fc92 	bl	800f13c <UTIL_MEM_cpy_8>
    return LORAMAC_HANDLER_SUCCESS;
 8008818:	0020      	movs	r0, r4
 800881a:	e7f0      	b.n	80087fe <LmHandlerGetNwkSKey+0xa>

0800881c <LmHandlerSetNwkSKey>:
{
 800881c:	b510      	push	{r4, lr}
 800881e:	b08a      	sub	sp, #40	@ 0x28
 8008820:	0004      	movs	r4, r0
    if( LmHandlerJoinStatus( ) != LORAMAC_HANDLER_SET )
 8008822:	f7ff fb13 	bl	8007e4c <LmHandlerJoinStatus>
 8008826:	2801      	cmp	r0, #1
 8008828:	d00a      	beq.n	8008840 <LmHandlerSetNwkSKey+0x24>
        mibReq.Type = MIB_NWK_S_KEY;
 800882a:	2309      	movs	r3, #9
 800882c:	a801      	add	r0, sp, #4
 800882e:	7003      	strb	r3, [r0, #0]
        mibReq.Param.NwkSKey = nwkSKey;
 8008830:	6044      	str	r4, [r0, #4]
        if (LoRaMacMibSetRequestConfirm(&mibReq) != LORAMAC_STATUS_OK)
 8008832:	f002 fa27 	bl	800ac84 <LoRaMacMibSetRequestConfirm>
 8008836:	1e43      	subs	r3, r0, #1
 8008838:	4198      	sbcs	r0, r3
        return LORAMAC_HANDLER_ERROR;
 800883a:	4240      	negs	r0, r0
}
 800883c:	b00a      	add	sp, #40	@ 0x28
 800883e:	bd10      	pop	{r4, pc}
        return LORAMAC_HANDLER_ERROR;
 8008840:	2001      	movs	r0, #1
 8008842:	e7fa      	b.n	800883a <LmHandlerSetNwkSKey+0x1e>

08008844 <LmHandlerGetAppSKey>:
{
 8008844:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008846:	1e05      	subs	r5, r0, #0
    if (appSKey == NULL)
 8008848:	d102      	bne.n	8008850 <LmHandlerGetAppSKey+0xc>
        return LORAMAC_HANDLER_ERROR;
 800884a:	2001      	movs	r0, #1
 800884c:	4240      	negs	r0, r0
}
 800884e:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    if (SECURE_ELEMENT_SUCCESS != SecureElementGetKeyByID(APP_S_KEY, &keyItem))
 8008850:	2003      	movs	r0, #3
 8008852:	a901      	add	r1, sp, #4
 8008854:	f7fe ffca 	bl	80077ec <SecureElementGetKeyByID>
 8008858:	1e04      	subs	r4, r0, #0
 800885a:	d1f6      	bne.n	800884a <LmHandlerGetAppSKey+0x6>
    UTIL_MEM_cpy_8( appSKey, keyItem->KeyValue, 16 );
 800885c:	9901      	ldr	r1, [sp, #4]
 800885e:	0028      	movs	r0, r5
 8008860:	2210      	movs	r2, #16
 8008862:	3101      	adds	r1, #1
 8008864:	f006 fc6a 	bl	800f13c <UTIL_MEM_cpy_8>
    return LORAMAC_HANDLER_SUCCESS;
 8008868:	0020      	movs	r0, r4
 800886a:	e7f0      	b.n	800884e <LmHandlerGetAppSKey+0xa>

0800886c <LmHandlerSetAppSKey>:
{
 800886c:	b510      	push	{r4, lr}
 800886e:	b08a      	sub	sp, #40	@ 0x28
 8008870:	0004      	movs	r4, r0
    if( LmHandlerJoinStatus( ) != LORAMAC_HANDLER_SET )
 8008872:	f7ff faeb 	bl	8007e4c <LmHandlerJoinStatus>
 8008876:	2801      	cmp	r0, #1
 8008878:	d00a      	beq.n	8008890 <LmHandlerSetAppSKey+0x24>
        mibReq.Type = MIB_APP_S_KEY;
 800887a:	230a      	movs	r3, #10
 800887c:	a801      	add	r0, sp, #4
 800887e:	7003      	strb	r3, [r0, #0]
        mibReq.Param.AppSKey = appSKey;
 8008880:	6044      	str	r4, [r0, #4]
        if (LoRaMacMibSetRequestConfirm(&mibReq) != LORAMAC_STATUS_OK)
 8008882:	f002 f9ff 	bl	800ac84 <LoRaMacMibSetRequestConfirm>
 8008886:	1e43      	subs	r3, r0, #1
 8008888:	4198      	sbcs	r0, r3
        return LORAMAC_HANDLER_ERROR;
 800888a:	4240      	negs	r0, r0
}
 800888c:	b00a      	add	sp, #40	@ 0x28
 800888e:	bd10      	pop	{r4, pc}
        return LORAMAC_HANDLER_ERROR;
 8008890:	2001      	movs	r0, #1
 8008892:	e7fa      	b.n	800888a <LmHandlerSetAppSKey+0x1e>

08008894 <LmhpComplianceIsInitialized>:
    }
}

static bool LmhpComplianceIsInitialized( void )
{
    return ComplianceTestState.Initialized;
 8008894:	4b01      	ldr	r3, [pc, #4]	@ (800889c <LmhpComplianceIsInitialized+0x8>)
 8008896:	7818      	ldrb	r0, [r3, #0]
}
 8008898:	4770      	bx	lr
 800889a:	46c0      	nop			@ (mov r8, r8)
 800889c:	200009a0 	.word	0x200009a0

080088a0 <LmhpComplianceIsRunning>:

static bool LmhpComplianceIsRunning( void )
{
    if( ComplianceTestState.Initialized == false )
 80088a0:	4b02      	ldr	r3, [pc, #8]	@ (80088ac <LmhpComplianceIsRunning+0xc>)
 80088a2:	7818      	ldrb	r0, [r3, #0]
 80088a4:	2800      	cmp	r0, #0
 80088a6:	d000      	beq.n	80088aa <LmhpComplianceIsRunning+0xa>
    {
        return false;
    }

    return ComplianceTestState.IsRunning;
 80088a8:	7858      	ldrb	r0, [r3, #1]
}
 80088aa:	4770      	bx	lr
 80088ac:	200009a0 	.word	0x200009a0

080088b0 <LmhpComplianceProcess>:
}

static void LmhpComplianceProcess( void )
{
    /* Nothing to process */
}
 80088b0:	4770      	bx	lr
	...

080088b4 <LmhpComplianceInit>:
    if( ( params != NULL ) && ( dataBuffer != NULL ) )
 80088b4:	4b06      	ldr	r3, [pc, #24]	@ (80088d0 <LmhpComplianceInit+0x1c>)
 80088b6:	2800      	cmp	r0, #0
 80088b8:	d007      	beq.n	80088ca <LmhpComplianceInit+0x16>
 80088ba:	2900      	cmp	r1, #0
 80088bc:	d005      	beq.n	80088ca <LmhpComplianceInit+0x16>
        ComplianceTestState.DataBufferMaxSize = dataBufferMaxSize;
 80088be:	715a      	strb	r2, [r3, #5]
        ComplianceTestState.Initialized = true;
 80088c0:	2201      	movs	r2, #1
        LmhpComplianceParams = ( LmhpComplianceParams_t* )params;
 80088c2:	6158      	str	r0, [r3, #20]
        ComplianceTestState.DataBuffer = dataBuffer;
 80088c4:	6099      	str	r1, [r3, #8]
        ComplianceTestState.Initialized = true;
 80088c6:	701a      	strb	r2, [r3, #0]
}
 80088c8:	4770      	bx	lr
        LmhpComplianceParams = NULL;
 80088ca:	2200      	movs	r2, #0
 80088cc:	615a      	str	r2, [r3, #20]
}
 80088ce:	e7fa      	b.n	80088c6 <LmhpComplianceInit+0x12>
 80088d0:	200009a0 	.word	0x200009a0

080088d4 <LmhpComplianceOnMcpsConfirm>:
    if (ComplianceTestState.Initialized == false)
 80088d4:	4b08      	ldr	r3, [pc, #32]	@ (80088f8 <LmhpComplianceOnMcpsConfirm+0x24>)
 80088d6:	781a      	ldrb	r2, [r3, #0]
 80088d8:	2a00      	cmp	r2, #0
 80088da:	d00b      	beq.n	80088f4 <LmhpComplianceOnMcpsConfirm+0x20>
    if ((ComplianceTestState.IsRunning == true) &&
 80088dc:	785a      	ldrb	r2, [r3, #1]
 80088de:	2a00      	cmp	r2, #0
 80088e0:	d008      	beq.n	80088f4 <LmhpComplianceOnMcpsConfirm+0x20>
 80088e2:	7802      	ldrb	r2, [r0, #0]
 80088e4:	2a01      	cmp	r2, #1
 80088e6:	d105      	bne.n	80088f4 <LmhpComplianceOnMcpsConfirm+0x20>
        (mcpsConfirm->McpsRequest == MCPS_CONFIRMED) &&
 80088e8:	7902      	ldrb	r2, [r0, #4]
 80088ea:	2a00      	cmp	r2, #0
 80088ec:	d002      	beq.n	80088f4 <LmhpComplianceOnMcpsConfirm+0x20>
        ComplianceTestState.DownLinkCounter++;
 80088ee:	899a      	ldrh	r2, [r3, #12]
 80088f0:	3201      	adds	r2, #1
 80088f2:	819a      	strh	r2, [r3, #12]
}
 80088f4:	4770      	bx	lr
 80088f6:	46c0      	nop			@ (mov r8, r8)
 80088f8:	200009a0 	.word	0x200009a0

080088fc <LmhpComplianceOnMlmeConfirm>:
    if( ComplianceTestState.Initialized == false )
 80088fc:	4b08      	ldr	r3, [pc, #32]	@ (8008920 <LmhpComplianceOnMlmeConfirm+0x24>)
 80088fe:	781a      	ldrb	r2, [r3, #0]
 8008900:	2a00      	cmp	r2, #0
 8008902:	d00b      	beq.n	800891c <LmhpComplianceOnMlmeConfirm+0x20>
    if( ComplianceTestState.IsRunning == false )
 8008904:	785a      	ldrb	r2, [r3, #1]
 8008906:	2a00      	cmp	r2, #0
 8008908:	d008      	beq.n	800891c <LmhpComplianceOnMlmeConfirm+0x20>
    if( mlmeConfirm->MlmeRequest == MLME_LINK_CHECK )
 800890a:	7802      	ldrb	r2, [r0, #0]
 800890c:	2a04      	cmp	r2, #4
 800890e:	d105      	bne.n	800891c <LmhpComplianceOnMlmeConfirm+0x20>
 8008910:	7a01      	ldrb	r1, [r0, #8]
 8008912:	7a42      	ldrb	r2, [r0, #9]
        ComplianceTestState.LinkCheck = true;
 8008914:	2001      	movs	r0, #1
        ComplianceTestState.DemodMargin = mlmeConfirm->DemodMargin;
 8008916:	73d9      	strb	r1, [r3, #15]
        ComplianceTestState.LinkCheck = true;
 8008918:	7398      	strb	r0, [r3, #14]
        ComplianceTestState.NbGateways = mlmeConfirm->NbGateways;
 800891a:	741a      	strb	r2, [r3, #16]
}
 800891c:	4770      	bx	lr
 800891e:	46c0      	nop			@ (mov r8, r8)
 8008920:	200009a0 	.word	0x200009a0

08008924 <LmhpComplianceTxProcess.isra.0>:
static LmHandlerErrorStatus_t LmhpComplianceTxProcess( void )
 8008924:	b513      	push	{r0, r1, r4, lr}
    if( ComplianceTestState.Initialized == false )
 8008926:	4c1b      	ldr	r4, [pc, #108]	@ (8008994 <LmhpComplianceTxProcess.isra.0+0x70>)
 8008928:	7823      	ldrb	r3, [r4, #0]
 800892a:	2b00      	cmp	r3, #0
 800892c:	d023      	beq.n	8008976 <LmhpComplianceTxProcess.isra.0+0x52>
    if( ComplianceTestState.IsRunning == false )
 800892e:	7863      	ldrb	r3, [r4, #1]
 8008930:	2b00      	cmp	r3, #0
 8008932:	d020      	beq.n	8008976 <LmhpComplianceTxProcess.isra.0+0x52>
    if( ComplianceTestState.LinkCheck == true )
 8008934:	7ba2      	ldrb	r2, [r4, #14]
        ComplianceTestState.DataBuffer[0] = 5;
 8008936:	68a3      	ldr	r3, [r4, #8]
    if( ComplianceTestState.LinkCheck == true )
 8008938:	2a00      	cmp	r2, #0
 800893a:	d01d      	beq.n	8008978 <LmhpComplianceTxProcess.isra.0+0x54>
        ComplianceTestState.LinkCheck = false;
 800893c:	2200      	movs	r2, #0
 800893e:	73a2      	strb	r2, [r4, #14]
        ComplianceTestState.DataBufferSize = 3;
 8008940:	3203      	adds	r2, #3
 8008942:	71a2      	strb	r2, [r4, #6]
        ComplianceTestState.DataBuffer[0] = 5;
 8008944:	3202      	adds	r2, #2
 8008946:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[1] = ComplianceTestState.DemodMargin;
 8008948:	7be2      	ldrb	r2, [r4, #15]
 800894a:	705a      	strb	r2, [r3, #1]
        ComplianceTestState.DataBuffer[2] = ComplianceTestState.NbGateways;
 800894c:	7c22      	ldrb	r2, [r4, #16]
 800894e:	709a      	strb	r2, [r3, #2]
        ComplianceTestState.State = 1;
 8008950:	2201      	movs	r2, #1
 8008952:	70a2      	strb	r2, [r4, #2]
    LmHandlerAppData_t appData =
 8008954:	4669      	mov	r1, sp
 8008956:	22e0      	movs	r2, #224	@ 0xe0
    TimerStart( &ComplianceTxNextPacketTimer );
 8008958:	0020      	movs	r0, r4
    LmHandlerAppData_t appData =
 800895a:	700a      	strb	r2, [r1, #0]
 800895c:	79a2      	ldrb	r2, [r4, #6]
    TimerStart( &ComplianceTxNextPacketTimer );
 800895e:	3018      	adds	r0, #24
    LmHandlerAppData_t appData =
 8008960:	704a      	strb	r2, [r1, #1]
 8008962:	9301      	str	r3, [sp, #4]
    TimerStart( &ComplianceTxNextPacketTimer );
 8008964:	f006 ff32 	bl	800f7cc <UTIL_TIMER_Start>
    return LmhpCompliancePackage.OnSendRequest( &appData, ( LmHandlerMsgTypes_t )ComplianceTestState.IsTxConfirmed, NULL, true );
 8008968:	4b0b      	ldr	r3, [pc, #44]	@ (8008998 <LmhpComplianceTxProcess.isra.0+0x74>)
 800896a:	78e1      	ldrb	r1, [r4, #3]
 800896c:	2200      	movs	r2, #0
 800896e:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
 8008970:	4668      	mov	r0, sp
 8008972:	2301      	movs	r3, #1
 8008974:	47a0      	blx	r4
}
 8008976:	bd13      	pop	{r0, r1, r4, pc}
        switch( ComplianceTestState.State )
 8008978:	78a2      	ldrb	r2, [r4, #2]
 800897a:	2a01      	cmp	r2, #1
 800897c:	d002      	beq.n	8008984 <LmhpComplianceTxProcess.isra.0+0x60>
 800897e:	2a04      	cmp	r2, #4
 8008980:	d1e8      	bne.n	8008954 <LmhpComplianceTxProcess.isra.0+0x30>
 8008982:	e7e5      	b.n	8008950 <LmhpComplianceTxProcess.isra.0+0x2c>
            ComplianceTestState.DataBufferSize = 2;
 8008984:	2202      	movs	r2, #2
 8008986:	71a2      	strb	r2, [r4, #6]
            ComplianceTestState.DataBuffer[0] = ComplianceTestState.DownLinkCounter >> 8;
 8008988:	89a2      	ldrh	r2, [r4, #12]
 800898a:	0a11      	lsrs	r1, r2, #8
 800898c:	7019      	strb	r1, [r3, #0]
            ComplianceTestState.DataBuffer[1] = ComplianceTestState.DownLinkCounter;
 800898e:	705a      	strb	r2, [r3, #1]
            break;
 8008990:	e7e0      	b.n	8008954 <LmhpComplianceTxProcess.isra.0+0x30>
 8008992:	46c0      	nop			@ (mov r8, r8)
 8008994:	200009a0 	.word	0x200009a0
 8008998:	200000d4 	.word	0x200000d4

0800899c <OnComplianceTxNextPacketTimerEvent>:

static void OnComplianceTxNextPacketTimerEvent( void* context )
{
 800899c:	b510      	push	{r4, lr}
    LmhpComplianceTxProcess( );
 800899e:	f7ff ffc1 	bl	8008924 <LmhpComplianceTxProcess.isra.0>
}
 80089a2:	bd10      	pop	{r4, pc}

080089a4 <LmhpComplianceOnMcpsIndication>:
{
 80089a4:	b530      	push	{r4, r5, lr}
    if( ComplianceTestState.Initialized == false )
 80089a6:	4c78      	ldr	r4, [pc, #480]	@ (8008b88 <LmhpComplianceOnMcpsIndication+0x1e4>)
{
 80089a8:	0002      	movs	r2, r0
    if( ComplianceTestState.Initialized == false )
 80089aa:	7823      	ldrb	r3, [r4, #0]
{
 80089ac:	b08d      	sub	sp, #52	@ 0x34
    if( ComplianceTestState.Initialized == false )
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d044      	beq.n	8008a3c <LmhpComplianceOnMcpsIndication+0x98>
    if( mcpsIndication->RxData == false )
 80089b2:	7b43      	ldrb	r3, [r0, #13]
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d041      	beq.n	8008a3c <LmhpComplianceOnMcpsIndication+0x98>
    if ((ComplianceTestState.IsRunning == true) &&
 80089b8:	7865      	ldrb	r5, [r4, #1]
 80089ba:	2d00      	cmp	r5, #0
 80089bc:	d005      	beq.n	80089ca <LmhpComplianceOnMcpsIndication+0x26>
 80089be:	7b83      	ldrb	r3, [r0, #14]
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d102      	bne.n	80089ca <LmhpComplianceOnMcpsIndication+0x26>
        ComplianceTestState.DownLinkCounter++;
 80089c4:	89a3      	ldrh	r3, [r4, #12]
 80089c6:	3301      	adds	r3, #1
 80089c8:	81a3      	strh	r3, [r4, #12]
    if( mcpsIndication->Port != COMPLIANCE_PORT )
 80089ca:	78d0      	ldrb	r0, [r2, #3]
 80089cc:	28e0      	cmp	r0, #224	@ 0xe0
 80089ce:	d135      	bne.n	8008a3c <LmhpComplianceOnMcpsIndication+0x98>
    if( ComplianceTestState.IsRunning == false )
 80089d0:	2d00      	cmp	r5, #0
 80089d2:	d135      	bne.n	8008a40 <LmhpComplianceOnMcpsIndication+0x9c>
        if( ( mcpsIndication->BufferSize == 4 ) &&
 80089d4:	7b11      	ldrb	r1, [r2, #12]
 80089d6:	2904      	cmp	r1, #4
 80089d8:	d130      	bne.n	8008a3c <LmhpComplianceOnMcpsIndication+0x98>
            ( mcpsIndication->Buffer[0] == 0x01 ) &&
 80089da:	6893      	ldr	r3, [r2, #8]
        if( ( mcpsIndication->BufferSize == 4 ) &&
 80089dc:	781a      	ldrb	r2, [r3, #0]
 80089de:	2a01      	cmp	r2, #1
 80089e0:	d12c      	bne.n	8008a3c <LmhpComplianceOnMcpsIndication+0x98>
            ( mcpsIndication->Buffer[0] == 0x01 ) &&
 80089e2:	785a      	ldrb	r2, [r3, #1]
 80089e4:	2a01      	cmp	r2, #1
 80089e6:	d129      	bne.n	8008a3c <LmhpComplianceOnMcpsIndication+0x98>
            ( mcpsIndication->Buffer[1] == 0x01 ) &&
 80089e8:	789a      	ldrb	r2, [r3, #2]
 80089ea:	2a01      	cmp	r2, #1
 80089ec:	d126      	bne.n	8008a3c <LmhpComplianceOnMcpsIndication+0x98>
            ( mcpsIndication->Buffer[2] == 0x01 ) &&
 80089ee:	78db      	ldrb	r3, [r3, #3]
 80089f0:	2b01      	cmp	r3, #1
 80089f2:	d123      	bne.n	8008a3c <LmhpComplianceOnMcpsIndication+0x98>
            ComplianceTestState.DataBufferSize = 2;
 80089f4:	3201      	adds	r2, #1
 80089f6:	71a2      	strb	r2, [r4, #6]
            mibReq.Type = MIB_ADR;
 80089f8:	466a      	mov	r2, sp
            ComplianceTestState.Port = 224;
 80089fa:	7120      	strb	r0, [r4, #4]
            mibReq.Param.AdrEnable = true;
 80089fc:	7413      	strb	r3, [r2, #16]
            mibReq.Type = MIB_ADR;
 80089fe:	7311      	strb	r1, [r2, #12]
            LoRaMacMibSetRequestConfirm( &mibReq );
 8008a00:	a803      	add	r0, sp, #12
            ComplianceTestState.IsRunning = true;
 8008a02:	7063      	strb	r3, [r4, #1]
            ComplianceTestState.State = 1;
 8008a04:	8063      	strh	r3, [r4, #2]
            ComplianceTestState.DownLinkCounter = 0;
 8008a06:	60e5      	str	r5, [r4, #12]
            ComplianceTestState.NbGateways = 0;
 8008a08:	7425      	strb	r5, [r4, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 8008a0a:	f002 f93b 	bl	800ac84 <LoRaMacMibSetRequestConfirm>
            LoRaMacTestSetDutyCycleOn( false );
 8008a0e:	0028      	movs	r0, r5
 8008a10:	f002 fe32 	bl	800b678 <LoRaMacTestSetDutyCycleOn>
            if( LmhpComplianceParams->StopPeripherals != NULL )
 8008a14:	6963      	ldr	r3, [r4, #20]
 8008a16:	685b      	ldr	r3, [r3, #4]
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d000      	beq.n	8008a1e <LmhpComplianceOnMcpsIndication+0x7a>
                LmhpComplianceParams->StopPeripherals( );
 8008a1c:	4798      	blx	r3
            TimerInit( &ComplianceTxNextPacketTimer, OnComplianceTxNextPacketTimerEvent );
 8008a1e:	2200      	movs	r2, #0
 8008a20:	2101      	movs	r1, #1
 8008a22:	3418      	adds	r4, #24
 8008a24:	4b59      	ldr	r3, [pc, #356]	@ (8008b8c <LmhpComplianceOnMcpsIndication+0x1e8>)
 8008a26:	9200      	str	r2, [sp, #0]
 8008a28:	4249      	negs	r1, r1
 8008a2a:	0020      	movs	r0, r4
 8008a2c:	f006 fe1c 	bl	800f668 <UTIL_TIMER_Create>
            TimerSetValue( &ComplianceTxNextPacketTimer, COMPLIANCE_TX_DUTYCYCLE );
 8008a30:	4957      	ldr	r1, [pc, #348]	@ (8008b90 <LmhpComplianceOnMcpsIndication+0x1ec>)
 8008a32:	0020      	movs	r0, r4
 8008a34:	f006 ff08 	bl	800f848 <UTIL_TIMER_SetPeriod>
            LmhpComplianceTxProcess( );
 8008a38:	f7ff ff74 	bl	8008924 <LmhpComplianceTxProcess.isra.0>
}
 8008a3c:	b00d      	add	sp, #52	@ 0x34
 8008a3e:	bd30      	pop	{r4, r5, pc}
        ComplianceTestState.State = mcpsIndication->Buffer[0];
 8008a40:	6893      	ldr	r3, [r2, #8]
 8008a42:	7818      	ldrb	r0, [r3, #0]
 8008a44:	70a0      	strb	r0, [r4, #2]
        switch( ComplianceTestState.State )
 8008a46:	280a      	cmp	r0, #10
 8008a48:	d8f8      	bhi.n	8008a3c <LmhpComplianceOnMcpsIndication+0x98>
 8008a4a:	f7f7 fb6f 	bl	800012c <__gnu_thumb1_case_uqi>
 8008a4e:	2006      	.short	0x2006
 8008a50:	3e292723 	.word	0x3e292723
 8008a54:	8d8a6244 	.word	0x8d8a6244
 8008a58:	96          	.byte	0x96
 8008a59:	00          	.byte	0x00
                TimerStop( &ComplianceTxNextPacketTimer );
 8008a5a:	0020      	movs	r0, r4
 8008a5c:	3018      	adds	r0, #24
 8008a5e:	f006 fe61 	bl	800f724 <UTIL_TIMER_Stop>
                ComplianceTestState.DownLinkCounter = 0;
 8008a62:	2300      	movs	r3, #0
                mibReq.Type = MIB_ADR;
 8008a64:	466a      	mov	r2, sp
                ComplianceTestState.DownLinkCounter = 0;
 8008a66:	81a3      	strh	r3, [r4, #12]
                ComplianceTestState.IsRunning = false;
 8008a68:	7063      	strb	r3, [r4, #1]
                mibReq.Type = MIB_ADR;
 8008a6a:	3304      	adds	r3, #4
 8008a6c:	7313      	strb	r3, [r2, #12]
                mibReq.Param.AdrEnable = LmhpComplianceParams->AdrEnabled;
 8008a6e:	6963      	ldr	r3, [r4, #20]
                LoRaMacMibSetRequestConfirm( &mibReq );
 8008a70:	a803      	add	r0, sp, #12
                mibReq.Param.AdrEnable = LmhpComplianceParams->AdrEnabled;
 8008a72:	781b      	ldrb	r3, [r3, #0]
 8008a74:	7413      	strb	r3, [r2, #16]
                LoRaMacMibSetRequestConfirm( &mibReq );
 8008a76:	f002 f905 	bl	800ac84 <LoRaMacMibSetRequestConfirm>
                LoRaMacTestSetDutyCycleOn( LmhpComplianceParams->DutyCycleEnabled );
 8008a7a:	6963      	ldr	r3, [r4, #20]
 8008a7c:	7858      	ldrb	r0, [r3, #1]
 8008a7e:	f002 fdfb 	bl	800b678 <LoRaMacTestSetDutyCycleOn>
                if( LmhpComplianceParams->StartPeripherals != NULL )
 8008a82:	6963      	ldr	r3, [r4, #20]
 8008a84:	689b      	ldr	r3, [r3, #8]
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d0d8      	beq.n	8008a3c <LmhpComplianceOnMcpsIndication+0x98>
                    LmhpComplianceParams->StartPeripherals( );
 8008a8a:	4798      	blx	r3
            break;
 8008a8c:	e7d6      	b.n	8008a3c <LmhpComplianceOnMcpsIndication+0x98>
            ComplianceTestState.DataBufferSize = 2;
 8008a8e:	2302      	movs	r3, #2
 8008a90:	71a3      	strb	r3, [r4, #6]
            break;
 8008a92:	e7d3      	b.n	8008a3c <LmhpComplianceOnMcpsIndication+0x98>
            ComplianceTestState.State = 1;
 8008a94:	2302      	movs	r3, #2
 8008a96:	33ff      	adds	r3, #255	@ 0xff
            ComplianceTestState.State = 1;
 8008a98:	8063      	strh	r3, [r4, #2]
            break;
 8008a9a:	e7cf      	b.n	8008a3c <LmhpComplianceOnMcpsIndication+0x98>
            ComplianceTestState.State = 1;
 8008a9c:	2301      	movs	r3, #1
 8008a9e:	e7fb      	b.n	8008a98 <LmhpComplianceOnMcpsIndication+0xf4>
            ComplianceTestState.DataBuffer[0] = 4;
 8008aa0:	2304      	movs	r3, #4
 8008aa2:	68a5      	ldr	r5, [r4, #8]
            ComplianceTestState.DataBufferSize = mcpsIndication->BufferSize;
 8008aa4:	7b11      	ldrb	r1, [r2, #12]
            ComplianceTestState.DataBuffer[0] = 4;
 8008aa6:	702b      	strb	r3, [r5, #0]
            for( uint8_t i = 1; i < MIN( ComplianceTestState.DataBufferSize, ComplianceTestState.DataBufferMaxSize ); i++ )
 8008aa8:	7960      	ldrb	r0, [r4, #5]
            ComplianceTestState.DataBufferSize = mcpsIndication->BufferSize;
 8008aaa:	71a1      	strb	r1, [r4, #6]
            for( uint8_t i = 1; i < MIN( ComplianceTestState.DataBufferSize, ComplianceTestState.DataBufferMaxSize ); i++ )
 8008aac:	1c03      	adds	r3, r0, #0
 8008aae:	4288      	cmp	r0, r1
 8008ab0:	d900      	bls.n	8008ab4 <LmhpComplianceOnMcpsIndication+0x110>
 8008ab2:	1c0b      	adds	r3, r1, #0
 8008ab4:	b2d9      	uxtb	r1, r3
 8008ab6:	2300      	movs	r3, #0
 8008ab8:	3301      	adds	r3, #1
 8008aba:	b2d8      	uxtb	r0, r3
 8008abc:	4281      	cmp	r1, r0
 8008abe:	d9bd      	bls.n	8008a3c <LmhpComplianceOnMcpsIndication+0x98>
                ComplianceTestState.DataBuffer[i] = mcpsIndication->Buffer[i] + 1;
 8008ac0:	6890      	ldr	r0, [r2, #8]
 8008ac2:	5cc0      	ldrb	r0, [r0, r3]
 8008ac4:	3001      	adds	r0, #1
 8008ac6:	54e8      	strb	r0, [r5, r3]
            for( uint8_t i = 1; i < MIN( ComplianceTestState.DataBufferSize, ComplianceTestState.DataBufferMaxSize ); i++ )
 8008ac8:	e7f6      	b.n	8008ab8 <LmhpComplianceOnMcpsIndication+0x114>
                mlmeReq.Type = MLME_LINK_CHECK;
 8008aca:	2304      	movs	r3, #4
 8008acc:	a803      	add	r0, sp, #12
                mlmeReq.Type = MLME_DEVICE_TIME;
 8008ace:	7003      	strb	r3, [r0, #0]
                LoRaMacMlmeRequest( &mlmeReq );
 8008ad0:	f002 fb1a 	bl	800b108 <LoRaMacMlmeRequest>
            break;
 8008ad4:	e7b2      	b.n	8008a3c <LmhpComplianceOnMcpsIndication+0x98>
                TimerStop(&ComplianceTxNextPacketTimer);
 8008ad6:	0020      	movs	r0, r4
 8008ad8:	3018      	adds	r0, #24
 8008ada:	f006 fe23 	bl	800f724 <UTIL_TIMER_Stop>
                ComplianceTestState.DownLinkCounter = 0;
 8008ade:	2300      	movs	r3, #0
                mibReq.Type = MIB_ADR;
 8008ae0:	466a      	mov	r2, sp
                ComplianceTestState.DownLinkCounter = 0;
 8008ae2:	81a3      	strh	r3, [r4, #12]
                ComplianceTestState.IsRunning = false;
 8008ae4:	7063      	strb	r3, [r4, #1]
                mibReq.Type = MIB_ADR;
 8008ae6:	3304      	adds	r3, #4
 8008ae8:	7313      	strb	r3, [r2, #12]
                mibReq.Param.AdrEnable = LmhpComplianceParams->AdrEnabled;
 8008aea:	6963      	ldr	r3, [r4, #20]
                LoRaMacMibSetRequestConfirm( &mibReq );
 8008aec:	a803      	add	r0, sp, #12
                mibReq.Param.AdrEnable = LmhpComplianceParams->AdrEnabled;
 8008aee:	781b      	ldrb	r3, [r3, #0]
 8008af0:	7413      	strb	r3, [r2, #16]
                LoRaMacMibSetRequestConfirm( &mibReq );
 8008af2:	f002 f8c7 	bl	800ac84 <LoRaMacMibSetRequestConfirm>
                LoRaMacTestSetDutyCycleOn( LmhpComplianceParams->DutyCycleEnabled );
 8008af6:	6963      	ldr	r3, [r4, #20]
 8008af8:	7858      	ldrb	r0, [r3, #1]
 8008afa:	f002 fdbd 	bl	800b678 <LoRaMacTestSetDutyCycleOn>
                if( LmhpComplianceParams->StartPeripherals != NULL )
 8008afe:	6963      	ldr	r3, [r4, #20]
 8008b00:	689b      	ldr	r3, [r3, #8]
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d000      	beq.n	8008b08 <LmhpComplianceOnMcpsIndication+0x164>
                    LmhpComplianceParams->StartPeripherals( );
 8008b06:	4798      	blx	r3
                LmhpCompliancePackage.OnJoinRequest( ACTIVATION_TYPE_OTAA );
 8008b08:	4b22      	ldr	r3, [pc, #136]	@ (8008b94 <LmhpComplianceOnMcpsIndication+0x1f0>)
 8008b0a:	2002      	movs	r0, #2
 8008b0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b0e:	4798      	blx	r3
            break;
 8008b10:	e794      	b.n	8008a3c <LmhpComplianceOnMcpsIndication+0x98>
                if( mcpsIndication->BufferSize == 3 )
 8008b12:	7b12      	ldrb	r2, [r2, #12]
 8008b14:	a803      	add	r0, sp, #12
 8008b16:	2a03      	cmp	r2, #3
 8008b18:	d10c      	bne.n	8008b34 <LmhpComplianceOnMcpsIndication+0x190>
                    mlmeReq.Type = MLME_TXCW;
 8008b1a:	3202      	adds	r2, #2
 8008b1c:	7002      	strb	r2, [r0, #0]
                    mlmeReq.Req.TxCw.Timeout = ( uint16_t )( ( mcpsIndication->Buffer[1] << 8 ) | mcpsIndication->Buffer[2] );
 8008b1e:	785a      	ldrb	r2, [r3, #1]
 8008b20:	789b      	ldrb	r3, [r3, #2]
 8008b22:	021b      	lsls	r3, r3, #8
 8008b24:	4313      	orrs	r3, r2
 8008b26:	ba5b      	rev16	r3, r3
 8008b28:	8083      	strh	r3, [r0, #4]
                LoRaMacMlmeRequest( &mlmeReq );
 8008b2a:	f002 faed 	bl	800b108 <LoRaMacMlmeRequest>
                ComplianceTestState.State = 1;
 8008b2e:	2301      	movs	r3, #1
 8008b30:	70a3      	strb	r3, [r4, #2]
            break;
 8008b32:	e783      	b.n	8008a3c <LmhpComplianceOnMcpsIndication+0x98>
                else if( mcpsIndication->BufferSize == 7 )
 8008b34:	2a07      	cmp	r2, #7
 8008b36:	d1f8      	bne.n	8008b2a <LmhpComplianceOnMcpsIndication+0x186>
                    mlmeReq.Type = MLME_TXCW_1;
 8008b38:	3a01      	subs	r2, #1
 8008b3a:	7002      	strb	r2, [r0, #0]
                    mlmeReq.Req.TxCw.Timeout = ( uint16_t )( ( mcpsIndication->Buffer[1] << 8 ) | mcpsIndication->Buffer[2] );
 8008b3c:	789a      	ldrb	r2, [r3, #2]
 8008b3e:	7859      	ldrb	r1, [r3, #1]
 8008b40:	0212      	lsls	r2, r2, #8
 8008b42:	430a      	orrs	r2, r1
 8008b44:	ba52      	rev16	r2, r2
 8008b46:	8082      	strh	r2, [r0, #4]
                    mlmeReq.Req.TxCw.Frequency = ( uint32_t )( ( mcpsIndication->Buffer[3] << 16 ) | ( mcpsIndication->Buffer[4] << 8 ) | mcpsIndication->Buffer[5] ) * 100;
 8008b48:	78da      	ldrb	r2, [r3, #3]
 8008b4a:	7919      	ldrb	r1, [r3, #4]
 8008b4c:	0412      	lsls	r2, r2, #16
 8008b4e:	0209      	lsls	r1, r1, #8
 8008b50:	430a      	orrs	r2, r1
 8008b52:	7959      	ldrb	r1, [r3, #5]
 8008b54:	430a      	orrs	r2, r1
 8008b56:	2164      	movs	r1, #100	@ 0x64
 8008b58:	434a      	muls	r2, r1
 8008b5a:	6082      	str	r2, [r0, #8]
                    mlmeReq.Req.TxCw.Power = mcpsIndication->Buffer[6];
 8008b5c:	799b      	ldrb	r3, [r3, #6]
 8008b5e:	7303      	strb	r3, [r0, #12]
 8008b60:	e7e3      	b.n	8008b2a <LmhpComplianceOnMcpsIndication+0x186>
                mlmeReq.Type = MLME_DEVICE_TIME;
 8008b62:	230a      	movs	r3, #10
 8008b64:	a803      	add	r0, sp, #12
 8008b66:	e7b2      	b.n	8008ace <LmhpComplianceOnMcpsIndication+0x12a>
                mibReq.Type = MIB_DEVICE_CLASS;
 8008b68:	4669      	mov	r1, sp
 8008b6a:	2200      	movs	r2, #0
 8008b6c:	730a      	strb	r2, [r1, #12]
                mibReq.Param.Class = ( DeviceClass_t )mcpsIndication->Buffer[1];;
 8008b6e:	785b      	ldrb	r3, [r3, #1]
                LoRaMacMibSetRequestConfirm( &mibReq );
 8008b70:	a803      	add	r0, sp, #12
                mibReq.Param.Class = ( DeviceClass_t )mcpsIndication->Buffer[1];;
 8008b72:	740b      	strb	r3, [r1, #16]
                LoRaMacMibSetRequestConfirm( &mibReq );
 8008b74:	f002 f886 	bl	800ac84 <LoRaMacMibSetRequestConfirm>
            break;
 8008b78:	e760      	b.n	8008a3c <LmhpComplianceOnMcpsIndication+0x98>
                mlmeReq.Type = MLME_PING_SLOT_INFO;
 8008b7a:	4669      	mov	r1, sp
 8008b7c:	220d      	movs	r2, #13
 8008b7e:	730a      	strb	r2, [r1, #12]
                mlmeReq.Req.PingSlotInfo.PingSlot.Value = mcpsIndication->Buffer[1];
 8008b80:	785b      	ldrb	r3, [r3, #1]
                LoRaMacMlmeRequest( &mlmeReq );
 8008b82:	a803      	add	r0, sp, #12
                mlmeReq.Req.PingSlotInfo.PingSlot.Value = mcpsIndication->Buffer[1];
 8008b84:	740b      	strb	r3, [r1, #16]
                LoRaMacMlmeRequest( &mlmeReq );
 8008b86:	e7a3      	b.n	8008ad0 <LmhpComplianceOnMcpsIndication+0x12c>
 8008b88:	200009a0 	.word	0x200009a0
 8008b8c:	0800899d 	.word	0x0800899d
 8008b90:	00001388 	.word	0x00001388
 8008b94:	200000d4 	.word	0x200000d4

08008b98 <LmhpCompliancePackageFactory>:
    return &LmhpCompliancePackage;
 8008b98:	4800      	ldr	r0, [pc, #0]	@ (8008b9c <LmhpCompliancePackageFactory+0x4>)
}
 8008b9a:	4770      	bx	lr
 8008b9c:	200000d4 	.word	0x200000d4

08008ba0 <NvmDataMgmtEvent>:
void NvmDataMgmtEvent( uint16_t notifyFlags )
{
#if( CONTEXT_MANAGEMENT_ENABLED == 1 )
    NvmNotifyFlags = notifyFlags;
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */
}
 8008ba0:	4770      	bx	lr

08008ba2 <NvmDataMgmtStore>:
    LoRaMacStart( );
    return dataSize;
#else
    return 0;
#endif
}
 8008ba2:	2000      	movs	r0, #0
 8008ba4:	4770      	bx	lr

08008ba6 <NvmDataMgmtRestore>:

uint16_t NvmDataMgmtRestore( void )
 8008ba6:	2000      	movs	r0, #0
 8008ba8:	4770      	bx	lr
	...

08008bac <OnRadioRxError>:
    MW_LOG(TS_ON, VLEVEL_M, "MAC txTimeOut\r\n" );
}

static void OnRadioRxError( void )
{
    LoRaMacRadioEvents.Events.RxError = 1;
 8008bac:	2302      	movs	r3, #2
 8008bae:	4a08      	ldr	r2, [pc, #32]	@ (8008bd0 <OnRadioRxError+0x24>)
{
 8008bb0:	b510      	push	{r4, lr}
    LoRaMacRadioEvents.Events.RxError = 1;
 8008bb2:	7811      	ldrb	r1, [r2, #0]
 8008bb4:	430b      	orrs	r3, r1
 8008bb6:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 8008bb8:	22d2      	movs	r2, #210	@ 0xd2
 8008bba:	4b06      	ldr	r3, [pc, #24]	@ (8008bd4 <OnRadioRxError+0x28>)
 8008bbc:	0092      	lsls	r2, r2, #2
 8008bbe:	589b      	ldr	r3, [r3, r2]
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d003      	beq.n	8008bcc <OnRadioRxError+0x20>
 8008bc4:	691b      	ldr	r3, [r3, #16]
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d000      	beq.n	8008bcc <OnRadioRxError+0x20>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 8008bca:	4798      	blx	r3
    }
}
 8008bcc:	bd10      	pop	{r4, pc}
 8008bce:	46c0      	nop			@ (mov r8, r8)
 8008bd0:	200009d0 	.word	0x200009d0
 8008bd4:	20000d34 	.word	0x20000d34

08008bd8 <UpdateRxSlotIdleState>:
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxTimeOut\r\n" );
}

static void UpdateRxSlotIdleState( void )
{
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 8008bd8:	4b04      	ldr	r3, [pc, #16]	@ (8008bec <UpdateRxSlotIdleState+0x14>)
 8008bda:	781a      	ldrb	r2, [r3, #0]
 8008bdc:	2a02      	cmp	r2, #2
 8008bde:	d000      	beq.n	8008be2 <UpdateRxSlotIdleState+0xa>
    {
        MacCtx.RxSlot = RX_SLOT_NONE;
 8008be0:	2206      	movs	r2, #6
    }
    else
    {
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
    }
}
 8008be2:	2190      	movs	r1, #144	@ 0x90
 8008be4:	4b02      	ldr	r3, [pc, #8]	@ (8008bf0 <UpdateRxSlotIdleState+0x18>)
 8008be6:	00c9      	lsls	r1, r1, #3
 8008be8:	545a      	strb	r2, [r3, r1]
 8008bea:	4770      	bx	lr
 8008bec:	20000ae4 	.word	0x20000ae4
 8008bf0:	20000d34 	.word	0x20000d34

08008bf4 <GetMaxAppPayloadWithoutFOptsLength>:

    return status;
}

static uint8_t GetMaxAppPayloadWithoutFOptsLength( int8_t datarate )
{
 8008bf4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Setup PHY request
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8008bf6:	4a09      	ldr	r2, [pc, #36]	@ (8008c1c <GetMaxAppPayloadWithoutFOptsLength+0x28>)
 8008bf8:	4b09      	ldr	r3, [pc, #36]	@ (8008c20 <GetMaxAppPayloadWithoutFOptsLength+0x2c>)
 8008bfa:	7812      	ldrb	r2, [r2, #0]
 8008bfc:	a902      	add	r1, sp, #8
 8008bfe:	708a      	strb	r2, [r1, #2]
    getPhy.Datarate = datarate;
    getPhy.Attribute = PHY_MAX_PAYLOAD;
    /* ST_WORKAROUND_BEGIN: Keep repeater feature */
    // Get the maximum payload length
    if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 8008c00:	001a      	movs	r2, r3
    getPhy.Datarate = datarate;
 8008c02:	7048      	strb	r0, [r1, #1]
    if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 8008c04:	3280      	adds	r2, #128	@ 0x80
 8008c06:	7812      	ldrb	r2, [r2, #0]
    {
        getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
    }
    /* ST_WORKAROUND_END */
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8008c08:	3340      	adds	r3, #64	@ 0x40
 8008c0a:	320d      	adds	r2, #13
 8008c0c:	700a      	strb	r2, [r1, #0]
 8008c0e:	7818      	ldrb	r0, [r3, #0]
 8008c10:	f003 fc19 	bl	800c446 <RegionGetPhyParam>

    return phyParam.Value;
 8008c14:	b2c0      	uxtb	r0, r0
}
 8008c16:	b005      	add	sp, #20
 8008c18:	bd00      	pop	{pc}
 8008c1a:	46c0      	nop			@ (mov r8, r8)
 8008c1c:	20000a5c 	.word	0x20000a5c
 8008c20:	200009e8 	.word	0x200009e8

08008c24 <OnAckTimeoutTimerEvent>:
{
 8008c24:	b510      	push	{r4, lr}
    TimerStop( &MacCtx.AckTimeoutTimer );
 8008c26:	480f      	ldr	r0, [pc, #60]	@ (8008c64 <OnAckTimeoutTimerEvent+0x40>)
 8008c28:	f006 fd7c 	bl	800f724 <UTIL_TIMER_Stop>
    if( MacCtx.NodeAckRequested == true )
 8008c2c:	4b0e      	ldr	r3, [pc, #56]	@ (8008c68 <OnAckTimeoutTimerEvent+0x44>)
 8008c2e:	4a0f      	ldr	r2, [pc, #60]	@ (8008c6c <OnAckTimeoutTimerEvent+0x48>)
 8008c30:	5c9a      	ldrb	r2, [r3, r2]
 8008c32:	2a00      	cmp	r2, #0
 8008c34:	d002      	beq.n	8008c3c <OnAckTimeoutTimerEvent+0x18>
        MacCtx.AckTimeoutRetry = true;
 8008c36:	2101      	movs	r1, #1
 8008c38:	4a0d      	ldr	r2, [pc, #52]	@ (8008c70 <OnAckTimeoutTimerEvent+0x4c>)
 8008c3a:	5499      	strb	r1, [r3, r2]
    if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 8008c3c:	4a0d      	ldr	r2, [pc, #52]	@ (8008c74 <OnAckTimeoutTimerEvent+0x50>)
 8008c3e:	7812      	ldrb	r2, [r2, #0]
 8008c40:	2a02      	cmp	r2, #2
 8008c42:	d104      	bne.n	8008c4e <OnAckTimeoutTimerEvent+0x2a>
        MacCtx.MacFlags.Bits.MacDone = 1;
 8008c44:	490c      	ldr	r1, [pc, #48]	@ (8008c78 <OnAckTimeoutTimerEvent+0x54>)
 8008c46:	321e      	adds	r2, #30
 8008c48:	5c58      	ldrb	r0, [r3, r1]
 8008c4a:	4302      	orrs	r2, r0
 8008c4c:	545a      	strb	r2, [r3, r1]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 8008c4e:	22d2      	movs	r2, #210	@ 0xd2
 8008c50:	0092      	lsls	r2, r2, #2
 8008c52:	589b      	ldr	r3, [r3, r2]
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d003      	beq.n	8008c60 <OnAckTimeoutTimerEvent+0x3c>
 8008c58:	691b      	ldr	r3, [r3, #16]
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d000      	beq.n	8008c60 <OnAckTimeoutTimerEvent+0x3c>
        MacCtx.MacCallbacks->MacProcessNotify( );
 8008c5e:	4798      	blx	r3
}
 8008c60:	bd10      	pop	{r4, pc}
 8008c62:	46c0      	nop			@ (mov r8, r8)
 8008c64:	2000112c 	.word	0x2000112c
 8008c68:	20000d34 	.word	0x20000d34
 8008c6c:	00000414 	.word	0x00000414
 8008c70:	00000413 	.word	0x00000413
 8008c74:	20000ae4 	.word	0x20000ae4
 8008c78:	00000481 	.word	0x00000481

08008c7c <PrepareRxDoneAbort>:
    MacCtx.MacState |= LORAMAC_RX_ABORT;
 8008c7c:	22d0      	movs	r2, #208	@ 0xd0
 8008c7e:	2380      	movs	r3, #128	@ 0x80
{
 8008c80:	b510      	push	{r4, lr}
    MacCtx.MacState |= LORAMAC_RX_ABORT;
 8008c82:	4c0a      	ldr	r4, [pc, #40]	@ (8008cac <PrepareRxDoneAbort+0x30>)
 8008c84:	0092      	lsls	r2, r2, #2
 8008c86:	58a1      	ldr	r1, [r4, r2]
 8008c88:	430b      	orrs	r3, r1
 8008c8a:	50a3      	str	r3, [r4, r2]
    if( MacCtx.NodeAckRequested == true )
 8008c8c:	4b08      	ldr	r3, [pc, #32]	@ (8008cb0 <PrepareRxDoneAbort+0x34>)
 8008c8e:	5ce3      	ldrb	r3, [r4, r3]
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d002      	beq.n	8008c9a <PrepareRxDoneAbort+0x1e>
        OnAckTimeoutTimerEvent( NULL );
 8008c94:	2000      	movs	r0, #0
 8008c96:	f7ff ffc5 	bl	8008c24 <OnAckTimeoutTimerEvent>
    MacCtx.MacFlags.Bits.McpsInd = 1;
 8008c9a:	2322      	movs	r3, #34	@ 0x22
 8008c9c:	4905      	ldr	r1, [pc, #20]	@ (8008cb4 <PrepareRxDoneAbort+0x38>)
 8008c9e:	5c62      	ldrb	r2, [r4, r1]
 8008ca0:	439a      	bics	r2, r3
 8008ca2:	4313      	orrs	r3, r2
 8008ca4:	5463      	strb	r3, [r4, r1]
    UpdateRxSlotIdleState( );
 8008ca6:	f7ff ff97 	bl	8008bd8 <UpdateRxSlotIdleState>
}
 8008caa:	bd10      	pop	{r4, pc}
 8008cac:	20000d34 	.word	0x20000d34
 8008cb0:	00000414 	.word	0x00000414
 8008cb4:	00000481 	.word	0x00000481

08008cb8 <HandleRadioRxErrorTimeout>:
{
 8008cb8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 8008cba:	4b30      	ldr	r3, [pc, #192]	@ (8008d7c <HandleRadioRxErrorTimeout+0xc4>)
{
 8008cbc:	9101      	str	r1, [sp, #4]
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 8008cbe:	781b      	ldrb	r3, [r3, #0]
{
 8008cc0:	0006      	movs	r6, r0
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 8008cc2:	4c2f      	ldr	r4, [pc, #188]	@ (8008d80 <HandleRadioRxErrorTimeout+0xc8>)
 8008cc4:	2b02      	cmp	r3, #2
 8008cc6:	d002      	beq.n	8008cce <HandleRadioRxErrorTimeout+0x16>
        Radio.Sleep( );
 8008cc8:	4b2e      	ldr	r3, [pc, #184]	@ (8008d84 <HandleRadioRxErrorTimeout+0xcc>)
 8008cca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ccc:	4798      	blx	r3
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 8008cce:	f002 fd5a 	bl	800b786 <LoRaMacClassBIsBeaconExpected>
 8008cd2:	1e05      	subs	r5, r0, #0
 8008cd4:	d005      	beq.n	8008ce2 <HandleRadioRxErrorTimeout+0x2a>
        LoRaMacClassBSetBeaconState( BEACON_STATE_TIMEOUT );
 8008cd6:	2002      	movs	r0, #2
 8008cd8:	f002 fd4b 	bl	800b772 <LoRaMacClassBSetBeaconState>
        LoRaMacClassBBeaconTimerEvent( NULL );
 8008cdc:	2000      	movs	r0, #0
 8008cde:	f002 fd4d 	bl	800b77c <LoRaMacClassBBeaconTimerEvent>
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8008ce2:	0023      	movs	r3, r4
 8008ce4:	33fc      	adds	r3, #252	@ 0xfc
 8008ce6:	781b      	ldrb	r3, [r3, #0]
 8008ce8:	2b01      	cmp	r3, #1
 8008cea:	d117      	bne.n	8008d1c <HandleRadioRxErrorTimeout+0x64>
        if( LoRaMacClassBIsPingExpected( ) == true )
 8008cec:	f002 fd4d 	bl	800b78a <LoRaMacClassBIsPingExpected>
 8008cf0:	1e07      	subs	r7, r0, #0
 8008cf2:	d006      	beq.n	8008d02 <HandleRadioRxErrorTimeout+0x4a>
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 8008cf4:	2000      	movs	r0, #0
 8008cf6:	f002 fd3d 	bl	800b774 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 8008cfa:	2000      	movs	r0, #0
 8008cfc:	f002 fd3f 	bl	800b77e <LoRaMacClassBPingSlotTimerEvent>
            classBRx = true;
 8008d00:	003d      	movs	r5, r7
        if( LoRaMacClassBIsMulticastExpected( ) == true )
 8008d02:	f002 fd44 	bl	800b78e <LoRaMacClassBIsMulticastExpected>
 8008d06:	2800      	cmp	r0, #0
 8008d08:	d008      	beq.n	8008d1c <HandleRadioRxErrorTimeout+0x64>
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 8008d0a:	2000      	movs	r0, #0
 8008d0c:	f002 fd33 	bl	800b776 <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 8008d10:	2000      	movs	r0, #0
 8008d12:	f002 fd35 	bl	800b780 <LoRaMacClassBMulticastSlotTimerEvent>
    UpdateRxSlotIdleState( );
 8008d16:	f7ff ff5f 	bl	8008bd8 <UpdateRxSlotIdleState>
}
 8008d1a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    if( classBRx == false )
 8008d1c:	2d00      	cmp	r5, #0
 8008d1e:	d1fa      	bne.n	8008d16 <HandleRadioRxErrorTimeout+0x5e>
        if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 8008d20:	2290      	movs	r2, #144	@ 0x90
            if( MacCtx.NodeAckRequested == true )
 8008d22:	4d19      	ldr	r5, [pc, #100]	@ (8008d88 <HandleRadioRxErrorTimeout+0xd0>)
        if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 8008d24:	00d2      	lsls	r2, r2, #3
            if( MacCtx.NodeAckRequested == true )
 8008d26:	4b19      	ldr	r3, [pc, #100]	@ (8008d8c <HandleRadioRxErrorTimeout+0xd4>)
        if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 8008d28:	5caa      	ldrb	r2, [r5, r2]
            if( MacCtx.NodeAckRequested == true )
 8008d2a:	5ceb      	ldrb	r3, [r5, r3]
        if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 8008d2c:	2a00      	cmp	r2, #0
 8008d2e:	d117      	bne.n	8008d60 <HandleRadioRxErrorTimeout+0xa8>
            if( MacCtx.NodeAckRequested == true )
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d001      	beq.n	8008d38 <HandleRadioRxErrorTimeout+0x80>
                MacCtx.McpsConfirm.Status = rx1EventInfoStatus;
 8008d34:	4b16      	ldr	r3, [pc, #88]	@ (8008d90 <HandleRadioRxErrorTimeout+0xd8>)
 8008d36:	54ee      	strb	r6, [r5, r3]
            LoRaMacConfirmQueueSetStatusCmn( rx1EventInfoStatus );
 8008d38:	0030      	movs	r0, r6
 8008d3a:	f002 fed5 	bl	800bae8 <LoRaMacConfirmQueueSetStatusCmn>
            if( TimerGetElapsedTime( Nvm.MacGroup1.LastTxDoneTime ) >= MacCtx.RxWindow2Delay )
 8008d3e:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8008d40:	f006 fcb8 	bl	800f6b4 <UTIL_TIMER_GetElapsedTime>
 8008d44:	23ed      	movs	r3, #237	@ 0xed
 8008d46:	009b      	lsls	r3, r3, #2
 8008d48:	58eb      	ldr	r3, [r5, r3]
 8008d4a:	4298      	cmp	r0, r3
 8008d4c:	d3e3      	bcc.n	8008d16 <HandleRadioRxErrorTimeout+0x5e>
                TimerStop( &MacCtx.RxWindowTimer2 );
 8008d4e:	4811      	ldr	r0, [pc, #68]	@ (8008d94 <HandleRadioRxErrorTimeout+0xdc>)
 8008d50:	f006 fce8 	bl	800f724 <UTIL_TIMER_Stop>
                MacCtx.MacFlags.Bits.MacDone = 1;
 8008d54:	2320      	movs	r3, #32
 8008d56:	4a10      	ldr	r2, [pc, #64]	@ (8008d98 <HandleRadioRxErrorTimeout+0xe0>)
 8008d58:	5ca9      	ldrb	r1, [r5, r2]
 8008d5a:	430b      	orrs	r3, r1
 8008d5c:	54ab      	strb	r3, [r5, r2]
 8008d5e:	e7da      	b.n	8008d16 <HandleRadioRxErrorTimeout+0x5e>
            if( MacCtx.NodeAckRequested == true )
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d002      	beq.n	8008d6a <HandleRadioRxErrorTimeout+0xb2>
                MacCtx.McpsConfirm.Status = rx2EventInfoStatus;
 8008d64:	4b0a      	ldr	r3, [pc, #40]	@ (8008d90 <HandleRadioRxErrorTimeout+0xd8>)
 8008d66:	9a01      	ldr	r2, [sp, #4]
 8008d68:	54ea      	strb	r2, [r5, r3]
            LoRaMacConfirmQueueSetStatusCmn( rx2EventInfoStatus );
 8008d6a:	9801      	ldr	r0, [sp, #4]
            if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 8008d6c:	34fc      	adds	r4, #252	@ 0xfc
            LoRaMacConfirmQueueSetStatusCmn( rx2EventInfoStatus );
 8008d6e:	f002 febb 	bl	800bae8 <LoRaMacConfirmQueueSetStatusCmn>
            if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 8008d72:	7823      	ldrb	r3, [r4, #0]
 8008d74:	2b02      	cmp	r3, #2
 8008d76:	d1ed      	bne.n	8008d54 <HandleRadioRxErrorTimeout+0x9c>
 8008d78:	e7cd      	b.n	8008d16 <HandleRadioRxErrorTimeout+0x5e>
 8008d7a:	46c0      	nop			@ (mov r8, r8)
 8008d7c:	20000ae4 	.word	0x20000ae4
 8008d80:	200009e8 	.word	0x200009e8
 8008d84:	080108d8 	.word	0x080108d8
 8008d88:	20000d34 	.word	0x20000d34
 8008d8c:	00000414 	.word	0x00000414
 8008d90:	00000439 	.word	0x00000439
 8008d94:	200010cc 	.word	0x200010cc
 8008d98:	00000481 	.word	0x00000481

08008d9c <OnRadioRxTimeout>:
    LoRaMacRadioEvents.Events.RxTimeout = 1;
 8008d9c:	2301      	movs	r3, #1
 8008d9e:	4a0b      	ldr	r2, [pc, #44]	@ (8008dcc <OnRadioRxTimeout+0x30>)
{
 8008da0:	b510      	push	{r4, lr}
    LoRaMacRadioEvents.Events.RxTimeout = 1;
 8008da2:	7811      	ldrb	r1, [r2, #0]
 8008da4:	430b      	orrs	r3, r1
 8008da6:	7013      	strb	r3, [r2, #0]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 8008da8:	22d2      	movs	r2, #210	@ 0xd2
 8008daa:	4b09      	ldr	r3, [pc, #36]	@ (8008dd0 <OnRadioRxTimeout+0x34>)
 8008dac:	0092      	lsls	r2, r2, #2
 8008dae:	589b      	ldr	r3, [r3, r2]
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d003      	beq.n	8008dbc <OnRadioRxTimeout+0x20>
 8008db4:	691b      	ldr	r3, [r3, #16]
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d000      	beq.n	8008dbc <OnRadioRxTimeout+0x20>
        MacCtx.MacCallbacks->MacProcessNotify( );
 8008dba:	4798      	blx	r3
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxTimeOut\r\n" );
 8008dbc:	2201      	movs	r2, #1
 8008dbe:	2100      	movs	r1, #0
 8008dc0:	2002      	movs	r0, #2
 8008dc2:	4b04      	ldr	r3, [pc, #16]	@ (8008dd4 <OnRadioRxTimeout+0x38>)
 8008dc4:	f006 f8a6 	bl	800ef14 <UTIL_ADV_TRACE_COND_FSend>
}
 8008dc8:	bd10      	pop	{r4, pc}
 8008dca:	46c0      	nop			@ (mov r8, r8)
 8008dcc:	200009d0 	.word	0x200009d0
 8008dd0:	20000d34 	.word	0x20000d34
 8008dd4:	0801218b 	.word	0x0801218b

08008dd8 <OnRadioTxTimeout>:
    LoRaMacRadioEvents.Events.TxTimeout = 1;
 8008dd8:	2304      	movs	r3, #4
 8008dda:	4a0b      	ldr	r2, [pc, #44]	@ (8008e08 <OnRadioTxTimeout+0x30>)
{
 8008ddc:	b510      	push	{r4, lr}
    LoRaMacRadioEvents.Events.TxTimeout = 1;
 8008dde:	7811      	ldrb	r1, [r2, #0]
 8008de0:	430b      	orrs	r3, r1
 8008de2:	7013      	strb	r3, [r2, #0]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 8008de4:	22d2      	movs	r2, #210	@ 0xd2
 8008de6:	4b09      	ldr	r3, [pc, #36]	@ (8008e0c <OnRadioTxTimeout+0x34>)
 8008de8:	0092      	lsls	r2, r2, #2
 8008dea:	589b      	ldr	r3, [r3, r2]
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d003      	beq.n	8008df8 <OnRadioTxTimeout+0x20>
 8008df0:	691b      	ldr	r3, [r3, #16]
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d000      	beq.n	8008df8 <OnRadioTxTimeout+0x20>
        MacCtx.MacCallbacks->MacProcessNotify( );
 8008df6:	4798      	blx	r3
    MW_LOG(TS_ON, VLEVEL_M, "MAC txTimeOut\r\n" );
 8008df8:	2201      	movs	r2, #1
 8008dfa:	2100      	movs	r1, #0
 8008dfc:	2002      	movs	r0, #2
 8008dfe:	4b04      	ldr	r3, [pc, #16]	@ (8008e10 <OnRadioTxTimeout+0x38>)
 8008e00:	f006 f888 	bl	800ef14 <UTIL_ADV_TRACE_COND_FSend>
}
 8008e04:	bd10      	pop	{r4, pc}
 8008e06:	46c0      	nop			@ (mov r8, r8)
 8008e08:	200009d0 	.word	0x200009d0
 8008e0c:	20000d34 	.word	0x20000d34
 8008e10:	0801219b 	.word	0x0801219b

08008e14 <OnRadioRxDone>:
{
 8008e14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e16:	000e      	movs	r6, r1
 8008e18:	0015      	movs	r5, r2
 8008e1a:	001c      	movs	r4, r3
 8008e1c:	0007      	movs	r7, r0
    RxDoneParams.LastRxDone = TimerGetCurrentTime( );
 8008e1e:	f006 fc3f 	bl	800f6a0 <UTIL_TIMER_GetCurrentTime>
    LoRaMacRadioEvents.Events.RxDone = 1;
 8008e22:	2208      	movs	r2, #8
    RxDoneParams.LastRxDone = TimerGetCurrentTime( );
 8008e24:	4b0c      	ldr	r3, [pc, #48]	@ (8008e58 <OnRadioRxDone+0x44>)
    LoRaMacRadioEvents.Events.RxDone = 1;
 8008e26:	7819      	ldrb	r1, [r3, #0]
    RxDoneParams.LastRxDone = TimerGetCurrentTime( );
 8008e28:	6058      	str	r0, [r3, #4]
    LoRaMacRadioEvents.Events.RxDone = 1;
 8008e2a:	430a      	orrs	r2, r1
 8008e2c:	701a      	strb	r2, [r3, #0]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 8008e2e:	22d2      	movs	r2, #210	@ 0xd2
    RxDoneParams.Payload = payload;
 8008e30:	609f      	str	r7, [r3, #8]
    RxDoneParams.Size = size;
 8008e32:	819e      	strh	r6, [r3, #12]
    RxDoneParams.Rssi = rssi;
 8008e34:	81dd      	strh	r5, [r3, #14]
    RxDoneParams.Snr = snr;
 8008e36:	741c      	strb	r4, [r3, #16]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 8008e38:	4b08      	ldr	r3, [pc, #32]	@ (8008e5c <OnRadioRxDone+0x48>)
 8008e3a:	0092      	lsls	r2, r2, #2
 8008e3c:	589b      	ldr	r3, [r3, r2]
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d003      	beq.n	8008e4a <OnRadioRxDone+0x36>
 8008e42:	691b      	ldr	r3, [r3, #16]
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d000      	beq.n	8008e4a <OnRadioRxDone+0x36>
        MacCtx.MacCallbacks->MacProcessNotify( );
 8008e48:	4798      	blx	r3
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxDone\r\n" );
 8008e4a:	2201      	movs	r2, #1
 8008e4c:	2100      	movs	r1, #0
 8008e4e:	4b04      	ldr	r3, [pc, #16]	@ (8008e60 <OnRadioRxDone+0x4c>)
 8008e50:	2002      	movs	r0, #2
 8008e52:	f006 f85f 	bl	800ef14 <UTIL_ADV_TRACE_COND_FSend>
}
 8008e56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008e58:	200009d0 	.word	0x200009d0
 8008e5c:	20000d34 	.word	0x20000d34
 8008e60:	080121ab 	.word	0x080121ab

08008e64 <OnRadioTxDone>:
{
 8008e64:	b573      	push	{r0, r1, r4, r5, r6, lr}
    TxDoneParams.CurTime = TimerGetCurrentTime( );
 8008e66:	f006 fc1b 	bl	800f6a0 <UTIL_TIMER_GetCurrentTime>
    MacCtx.LastTxSysTime = SysTimeGet( );
 8008e6a:	466c      	mov	r4, sp
    TxDoneParams.CurTime = TimerGetCurrentTime( );
 8008e6c:	4e0e      	ldr	r6, [pc, #56]	@ (8008ea8 <OnRadioTxDone+0x44>)
    MacCtx.LastTxSysTime = SysTimeGet( );
 8008e6e:	4d0f      	ldr	r5, [pc, #60]	@ (8008eac <OnRadioTxDone+0x48>)
    TxDoneParams.CurTime = TimerGetCurrentTime( );
 8008e70:	6170      	str	r0, [r6, #20]
    MacCtx.LastTxSysTime = SysTimeGet( );
 8008e72:	0020      	movs	r0, r4
 8008e74:	f006 fad0 	bl	800f418 <SysTimeGet>
 8008e78:	4b0d      	ldr	r3, [pc, #52]	@ (8008eb0 <OnRadioTxDone+0x4c>)
 8008e7a:	cc06      	ldmia	r4!, {r1, r2}
 8008e7c:	c306      	stmia	r3!, {r1, r2}
    LoRaMacRadioEvents.Events.TxDone = 1;
 8008e7e:	2310      	movs	r3, #16
 8008e80:	7832      	ldrb	r2, [r6, #0]
 8008e82:	4313      	orrs	r3, r2
 8008e84:	7033      	strb	r3, [r6, #0]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 8008e86:	23d2      	movs	r3, #210	@ 0xd2
 8008e88:	009b      	lsls	r3, r3, #2
 8008e8a:	58eb      	ldr	r3, [r5, r3]
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d003      	beq.n	8008e98 <OnRadioTxDone+0x34>
 8008e90:	691b      	ldr	r3, [r3, #16]
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d000      	beq.n	8008e98 <OnRadioTxDone+0x34>
        MacCtx.MacCallbacks->MacProcessNotify( );
 8008e96:	4798      	blx	r3
    MW_LOG(TS_ON, VLEVEL_M, "MAC txDone\r\n" );
 8008e98:	2201      	movs	r2, #1
 8008e9a:	2100      	movs	r1, #0
 8008e9c:	4b05      	ldr	r3, [pc, #20]	@ (8008eb4 <OnRadioTxDone+0x50>)
 8008e9e:	2002      	movs	r0, #2
 8008ea0:	f006 f838 	bl	800ef14 <UTIL_ADV_TRACE_COND_FSend>
}
 8008ea4:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
 8008ea6:	46c0      	nop			@ (mov r8, r8)
 8008ea8:	200009d0 	.word	0x200009d0
 8008eac:	20000d34 	.word	0x20000d34
 8008eb0:	2000106c 	.word	0x2000106c
 8008eb4:	080121b8 	.word	0x080121b8

08008eb8 <ResetMacParameters>:
    }
}


static void ResetMacParameters( void )
{
 8008eb8:	b570      	push	{r4, r5, r6, lr}
    LoRaMacClassBCallback_t classBCallbacks;
    LoRaMacClassBParams_t classBParams;

    Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_NONE;
 8008eba:	2600      	movs	r6, #0
 8008ebc:	4c42      	ldr	r4, [pc, #264]	@ (8008fc8 <ResetMacParameters+0x110>)
 8008ebe:	4b43      	ldr	r3, [pc, #268]	@ (8008fcc <ResetMacParameters+0x114>)
    MacCtx.AckTimeoutRetries = 1;
    MacCtx.AckTimeoutRetriesCounter = 1;
    MacCtx.AckTimeoutRetry = false;

    Nvm.MacGroup2.MaxDCycle = 0;
    Nvm.MacGroup2.AggregatedDCycle = 1;
 8008ec0:	2001      	movs	r0, #1
    Nvm.MacGroup2.MaxDCycle = 0;
 8008ec2:	701e      	strb	r6, [r3, #0]
    Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_NONE;
 8008ec4:	745e      	strb	r6, [r3, #17]
    Nvm.MacGroup2.AggregatedDCycle = 1;
 8008ec6:	0023      	movs	r3, r4
 8008ec8:	33fe      	adds	r3, #254	@ 0xfe
 8008eca:	8098      	strh	r0, [r3, #4]

    Nvm.MacGroup1.ChannelsTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 8008ecc:	0023      	movs	r3, r4
 8008ece:	33c4      	adds	r3, #196	@ 0xc4
 8008ed0:	881b      	ldrh	r3, [r3, #0]
    Nvm.MacGroup1.ChannelsDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
    Nvm.MacGroup2.MacParams.Rx1DrOffset = Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset;
 8008ed2:	0022      	movs	r2, r4
    Nvm.MacGroup1.ChannelsTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 8008ed4:	8723      	strh	r3, [r4, #56]	@ 0x38
    Nvm.MacGroup2.MacParams.Rx1DrOffset = Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset;
 8008ed6:	0023      	movs	r3, r4
    Nvm.MacGroup1.AdrAckCounter = 0;
 8008ed8:	62a6      	str	r6, [r4, #40]	@ 0x28
    Nvm.MacGroup2.MacParams.Rx1DrOffset = Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset;
 8008eda:	32a1      	adds	r2, #161	@ 0xa1
 8008edc:	7812      	ldrb	r2, [r2, #0]
 8008ede:	3361      	adds	r3, #97	@ 0x61
 8008ee0:	701a      	strb	r2, [r3, #0]
    Nvm.MacGroup2.MacParams.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 8008ee2:	0022      	movs	r2, r4
 8008ee4:	0023      	movs	r3, r4
 8008ee6:	32a4      	adds	r2, #164	@ 0xa4
 8008ee8:	3364      	adds	r3, #100	@ 0x64
 8008eea:	ca22      	ldmia	r2!, {r1, r5}
 8008eec:	c322      	stmia	r3!, {r1, r5}
    Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 8008eee:	0022      	movs	r2, r4
 8008ef0:	0023      	movs	r3, r4
 8008ef2:	32ac      	adds	r2, #172	@ 0xac
 8008ef4:	336c      	adds	r3, #108	@ 0x6c
 8008ef6:	ca22      	ldmia	r2!, {r1, r5}
 8008ef8:	c322      	stmia	r3!, {r1, r5}
    Nvm.MacGroup2.MacParams.UplinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime;
 8008efa:	0022      	movs	r2, r4
 8008efc:	0023      	movs	r3, r4
 8008efe:	32b4      	adds	r2, #180	@ 0xb4
 8008f00:	8812      	ldrh	r2, [r2, #0]
 8008f02:	3374      	adds	r3, #116	@ 0x74
 8008f04:	801a      	strh	r2, [r3, #0]
    Nvm.MacGroup2.MacParams.DownlinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime;
    Nvm.MacGroup2.MacParams.MaxEirp = Nvm.MacGroup2.MacParamsDefaults.MaxEirp;
 8008f06:	0023      	movs	r3, r4
 8008f08:	33b8      	adds	r3, #184	@ 0xb8
 8008f0a:	681b      	ldr	r3, [r3, #0]
    MacCtx.ChannelsNbTransCounter = 0;
 8008f0c:	4d30      	ldr	r5, [pc, #192]	@ (8008fd0 <ResetMacParameters+0x118>)
    Nvm.MacGroup2.MacParams.MaxEirp = Nvm.MacGroup2.MacParamsDefaults.MaxEirp;
 8008f0e:	67a3      	str	r3, [r4, #120]	@ 0x78
    Nvm.MacGroup2.MacParams.AntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 8008f10:	0023      	movs	r3, r4
 8008f12:	33bc      	adds	r3, #188	@ 0xbc
 8008f14:	681b      	ldr	r3, [r3, #0]
    MacCtx.ChannelsNbTransCounter = 0;
 8008f16:	4a2f      	ldr	r2, [pc, #188]	@ (8008fd4 <ResetMacParameters+0x11c>)
    Nvm.MacGroup2.MacParams.AntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 8008f18:	67e3      	str	r3, [r4, #124]	@ 0x7c
    MacCtx.ChannelsNbTransCounter = 0;
 8008f1a:	2382      	movs	r3, #130	@ 0x82
 8008f1c:	00db      	lsls	r3, r3, #3
 8008f1e:	50ea      	str	r2, [r5, r3]

    MacCtx.NodeAckRequested = false;
 8008f20:	4b2d      	ldr	r3, [pc, #180]	@ (8008fd8 <ResetMacParameters+0x120>)
{
 8008f22:	b08e      	sub	sp, #56	@ 0x38
    MacCtx.NodeAckRequested = false;
 8008f24:	54ee      	strb	r6, [r5, r3]
    Nvm.MacGroup1.SrvAckRequested = false;
 8008f26:	0023      	movs	r3, r4
 8008f28:	333a      	adds	r3, #58	@ 0x3a
 8008f2a:	701e      	strb	r6, [r3, #0]

    // Reset to application defaults
    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_RESET_TO_DEFAULT_CHANNELS;
    params.NvmGroup1 = &Nvm.RegionGroup1;
 8008f2c:	4b2b      	ldr	r3, [pc, #172]	@ (8008fdc <ResetMacParameters+0x124>)
    params.Type = INIT_TYPE_RESET_TO_DEFAULT_CHANNELS;
 8008f2e:	a903      	add	r1, sp, #12
 8008f30:	7208      	strb	r0, [r1, #8]
    params.NvmGroup1 = &Nvm.RegionGroup1;
 8008f32:	9303      	str	r3, [sp, #12]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 8008f34:	4b2a      	ldr	r3, [pc, #168]	@ (8008fe0 <ResetMacParameters+0x128>)
 8008f36:	604b      	str	r3, [r1, #4]
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 8008f38:	0023      	movs	r3, r4
 8008f3a:	3340      	adds	r3, #64	@ 0x40
 8008f3c:	7818      	ldrb	r0, [r3, #0]
 8008f3e:	f003 fa95 	bl	800c46c <RegionInitDefaults>

    // Initialize channel index.
    MacCtx.Channel = 0;
 8008f42:	4b28      	ldr	r3, [pc, #160]	@ (8008fe4 <ResetMacParameters+0x12c>)

    // Initialize Rx2 config parameters.
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 8008f44:	6e62      	ldr	r2, [r4, #100]	@ 0x64
    MacCtx.Channel = 0;
 8008f46:	54ee      	strb	r6, [r5, r3]
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 8008f48:	3b49      	subs	r3, #73	@ 0x49
 8008f4a:	54ee      	strb	r6, [r5, r3]
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 8008f4c:	3304      	adds	r3, #4
 8008f4e:	50ea      	str	r2, [r5, r3]
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8008f50:	0023      	movs	r3, r4
 8008f52:	3375      	adds	r3, #117	@ 0x75
 8008f54:	781a      	ldrb	r2, [r3, #0]
 8008f56:	23f7      	movs	r3, #247	@ 0xf7
 8008f58:	009b      	lsls	r3, r3, #2
 8008f5a:	54ea      	strb	r2, [r5, r3]
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 8008f5c:	3480      	adds	r4, #128	@ 0x80
 8008f5e:	7822      	ldrb	r2, [r4, #0]
 8008f60:	4b21      	ldr	r3, [pc, #132]	@ (8008fe8 <ResetMacParameters+0x130>)
 8008f62:	54ea      	strb	r2, [r5, r3]
    MacCtx.RxWindow2Config.RxContinuous = false;
 8008f64:	2280      	movs	r2, #128	@ 0x80
 8008f66:	4b21      	ldr	r3, [pc, #132]	@ (8008fec <ResetMacParameters+0x134>)
 8008f68:	0052      	lsls	r2, r2, #1
 8008f6a:	52ea      	strh	r2, [r5, r3]
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;

    // Initialize RxC config parameters.
    MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 8008f6c:	22f3      	movs	r2, #243	@ 0xf3
 8008f6e:	3302      	adds	r3, #2
 8008f70:	0092      	lsls	r2, r2, #2
 8008f72:	18eb      	adds	r3, r5, r3
 8008f74:	18aa      	adds	r2, r5, r2
 8008f76:	ca13      	ldmia	r2!, {r0, r1, r4}
 8008f78:	c313      	stmia	r3!, {r0, r1, r4}
 8008f7a:	ca03      	ldmia	r2!, {r0, r1}
 8008f7c:	c303      	stmia	r3!, {r0, r1}
    MacCtx.RxWindowCConfig.RxContinuous = true;
 8008f7e:	4b1c      	ldr	r3, [pc, #112]	@ (8008ff0 <ResetMacParameters+0x138>)
 8008f80:	4a1c      	ldr	r2, [pc, #112]	@ (8008ff4 <ResetMacParameters+0x13c>)
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;

    // Initialize class b
    // Apply callback
    classBCallbacks.GetTemperatureLevel = NULL;
 8008f82:	9601      	str	r6, [sp, #4]
    MacCtx.RxWindowCConfig.RxContinuous = true;
 8008f84:	52ea      	strh	r2, [r5, r3]
    classBCallbacks.MacProcessNotify = NULL;

    if( MacCtx.MacCallbacks != NULL )
 8008f86:	3baa      	subs	r3, #170	@ 0xaa
 8008f88:	58eb      	ldr	r3, [r5, r3]
    classBCallbacks.MacProcessNotify = NULL;
 8008f8a:	9602      	str	r6, [sp, #8]
    if( MacCtx.MacCallbacks != NULL )
 8008f8c:	42b3      	cmp	r3, r6
 8008f8e:	d003      	beq.n	8008f98 <ResetMacParameters+0xe0>
    {
        classBCallbacks.GetTemperatureLevel = MacCtx.MacCallbacks->GetTemperatureLevel;
 8008f90:	685a      	ldr	r2, [r3, #4]
        classBCallbacks.MacProcessNotify = MacCtx.MacCallbacks->MacProcessNotify;
 8008f92:	691b      	ldr	r3, [r3, #16]
        classBCallbacks.GetTemperatureLevel = MacCtx.MacCallbacks->GetTemperatureLevel;
 8008f94:	9201      	str	r2, [sp, #4]
        classBCallbacks.MacProcessNotify = MacCtx.MacCallbacks->MacProcessNotify;
 8008f96:	9302      	str	r3, [sp, #8]
    }

    // Must all be static. Don't use local references.
    classBParams.MlmeIndication = &MacCtx.MlmeIndication;
 8008f98:	4b17      	ldr	r3, [pc, #92]	@ (8008ff8 <ResetMacParameters+0x140>)
    classBParams.LoRaMacDevAddr = &Nvm.MacGroup2.DevAddr;
    classBParams.LoRaMacRegion = &Nvm.MacGroup2.Region;
    classBParams.LoRaMacParams = &Nvm.MacGroup2.MacParams;
    classBParams.MulticastChannels = &Nvm.MacGroup2.MulticastChannelList[0];

    LoRaMacClassBInit( &classBParams, &classBCallbacks, &Nvm.ClassB );
 8008f9a:	4a18      	ldr	r2, [pc, #96]	@ (8008ffc <ResetMacParameters+0x144>)
    classBParams.MlmeIndication = &MacCtx.MlmeIndication;
 8008f9c:	9306      	str	r3, [sp, #24]
    classBParams.McpsIndication = &MacCtx.McpsIndication;
 8008f9e:	4b18      	ldr	r3, [pc, #96]	@ (8009000 <ResetMacParameters+0x148>)
    LoRaMacClassBInit( &classBParams, &classBCallbacks, &Nvm.ClassB );
 8008fa0:	a901      	add	r1, sp, #4
    classBParams.McpsIndication = &MacCtx.McpsIndication;
 8008fa2:	9307      	str	r3, [sp, #28]
    classBParams.MlmeConfirm = &MacCtx.MlmeConfirm;
 8008fa4:	4b17      	ldr	r3, [pc, #92]	@ (8009004 <ResetMacParameters+0x14c>)
    LoRaMacClassBInit( &classBParams, &classBCallbacks, &Nvm.ClassB );
 8008fa6:	a806      	add	r0, sp, #24
    classBParams.MlmeConfirm = &MacCtx.MlmeConfirm;
 8008fa8:	9308      	str	r3, [sp, #32]
    classBParams.LoRaMacFlags = &MacCtx.MacFlags;
 8008faa:	4b17      	ldr	r3, [pc, #92]	@ (8009008 <ResetMacParameters+0x150>)
 8008fac:	9309      	str	r3, [sp, #36]	@ 0x24
    classBParams.LoRaMacDevAddr = &Nvm.MacGroup2.DevAddr;
 8008fae:	4b17      	ldr	r3, [pc, #92]	@ (800900c <ResetMacParameters+0x154>)
 8008fb0:	930a      	str	r3, [sp, #40]	@ 0x28
    classBParams.LoRaMacRegion = &Nvm.MacGroup2.Region;
 8008fb2:	4b17      	ldr	r3, [pc, #92]	@ (8009010 <ResetMacParameters+0x158>)
 8008fb4:	930b      	str	r3, [sp, #44]	@ 0x2c
    classBParams.LoRaMacParams = &Nvm.MacGroup2.MacParams;
 8008fb6:	4b17      	ldr	r3, [pc, #92]	@ (8009014 <ResetMacParameters+0x15c>)
 8008fb8:	930c      	str	r3, [sp, #48]	@ 0x30
    classBParams.MulticastChannels = &Nvm.MacGroup2.MulticastChannelList[0];
 8008fba:	4b17      	ldr	r3, [pc, #92]	@ (8009018 <ResetMacParameters+0x160>)
 8008fbc:	930d      	str	r3, [sp, #52]	@ 0x34
    LoRaMacClassBInit( &classBParams, &classBCallbacks, &Nvm.ClassB );
 8008fbe:	f002 fbd7 	bl	800b770 <LoRaMacClassBInit>
}
 8008fc2:	b00e      	add	sp, #56	@ 0x38
 8008fc4:	bd70      	pop	{r4, r5, r6, pc}
 8008fc6:	46c0      	nop			@ (mov r8, r8)
 8008fc8:	200009e8 	.word	0x200009e8
 8008fcc:	20000ae7 	.word	0x20000ae7
 8008fd0:	20000d34 	.word	0x20000d34
 8008fd4:	00010100 	.word	0x00010100
 8008fd8:	00000414 	.word	0x00000414
 8008fdc:	20000bc0 	.word	0x20000bc0
 8008fe0:	20000c54 	.word	0x20000c54
 8008fe4:	00000415 	.word	0x00000415
 8008fe8:	000003dd 	.word	0x000003dd
 8008fec:	000003de 	.word	0x000003de
 8008ff0:	000003f2 	.word	0x000003f2
 8008ff4:	00000201 	.word	0x00000201
 8008ff8:	20001194 	.word	0x20001194
 8008ffc:	20000d1c 	.word	0x20000d1c
 8009000:	20001150 	.word	0x20001150
 8009004:	20001180 	.word	0x20001180
 8009008:	200011b5 	.word	0x200011b5
 800900c:	20000ab4 	.word	0x20000ab4
 8009010:	20000a28 	.word	0x20000a28
 8009014:	20000a2c 	.word	0x20000a2c
 8009018:	20000ab8 	.word	0x20000ab8

0800901c <ScheduleTx>:
{
 800901c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800901e:	b095      	sub	sp, #84	@ 0x54
 8009020:	9003      	str	r0, [sp, #12]
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 8009022:	f002 fbb0 	bl	800b786 <LoRaMacClassBIsBeaconExpected>
        return LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME;
 8009026:	240e      	movs	r4, #14
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 8009028:	2800      	cmp	r0, #0
 800902a:	d117      	bne.n	800905c <ScheduleTx+0x40>
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800902c:	4bb9      	ldr	r3, [pc, #740]	@ (8009314 <ScheduleTx+0x2f8>)
 800902e:	4dba      	ldr	r5, [pc, #744]	@ (8009318 <ScheduleTx+0x2fc>)
 8009030:	781b      	ldrb	r3, [r3, #0]
 8009032:	2b01      	cmp	r3, #1
 8009034:	d00d      	beq.n	8009052 <ScheduleTx+0x36>
    if( Nvm.MacGroup1.AggregatedTimeOff == 0 )
 8009036:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8009038:	4eb8      	ldr	r6, [pc, #736]	@ (800931c <ScheduleTx+0x300>)
 800903a:	2b00      	cmp	r3, #0
 800903c:	d016      	beq.n	800906c <ScheduleTx+0x50>
    switch( MacCtx.TxMsg.Type )
 800903e:	0034      	movs	r4, r6
 8009040:	34ff      	adds	r4, #255	@ 0xff
 8009042:	7963      	ldrb	r3, [r4, #5]
 8009044:	2b00      	cmp	r3, #0
 8009046:	d01b      	beq.n	8009080 <ScheduleTx+0x64>
 8009048:	2b04      	cmp	r3, #4
 800904a:	d100      	bne.n	800904e <ScheduleTx+0x32>
 800904c:	e071      	b.n	8009132 <ScheduleTx+0x116>
            return LORAMAC_STATUS_PARAMETER_INVALID;
 800904e:	2403      	movs	r4, #3
 8009050:	e004      	b.n	800905c <ScheduleTx+0x40>
        if( LoRaMacClassBIsPingExpected( ) == true )
 8009052:	f002 fb9a 	bl	800b78a <LoRaMacClassBIsPingExpected>
 8009056:	2800      	cmp	r0, #0
 8009058:	d003      	beq.n	8009062 <ScheduleTx+0x46>
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 800905a:	240f      	movs	r4, #15
}
 800905c:	0020      	movs	r0, r4
 800905e:	b015      	add	sp, #84	@ 0x54
 8009060:	bdf0      	pop	{r4, r5, r6, r7, pc}
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 8009062:	f002 fb94 	bl	800b78e <LoRaMacClassBIsMulticastExpected>
 8009066:	2800      	cmp	r0, #0
 8009068:	d0e5      	beq.n	8009036 <ScheduleTx+0x1a>
 800906a:	e7f6      	b.n	800905a <ScheduleTx+0x3e>
        Nvm.MacGroup1.AggregatedTimeOff = ( MacCtx.TxTimeOnAir * Nvm.MacGroup2.AggregatedDCycle - MacCtx.TxTimeOnAir );
 800906c:	002b      	movs	r3, r5
 800906e:	33fe      	adds	r3, #254	@ 0xfe
 8009070:	889a      	ldrh	r2, [r3, #4]
 8009072:	2383      	movs	r3, #131	@ 0x83
 8009074:	00db      	lsls	r3, r3, #3
 8009076:	58f3      	ldr	r3, [r6, r3]
 8009078:	3a01      	subs	r2, #1
 800907a:	4353      	muls	r3, r2
 800907c:	632b      	str	r3, [r5, #48]	@ 0x30
 800907e:	e7de      	b.n	800903e <ScheduleTx+0x22>
            serializeStatus = LoRaMacSerializerJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 8009080:	48a7      	ldr	r0, [pc, #668]	@ (8009320 <ScheduleTx+0x304>)
 8009082:	f003 f937 	bl	800c2f4 <LoRaMacSerializerJoinRequest>
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 8009086:	2800      	cmp	r0, #0
 8009088:	d000      	beq.n	800908c <ScheduleTx+0x70>
 800908a:	e128      	b.n	80092de <ScheduleTx+0x2c2>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 800908c:	7b63      	ldrb	r3, [r4, #13]
    nextChan.DutyCycleEnabled = Nvm.MacGroup2.DutyCycleOn;
 800908e:	002f      	movs	r7, r5
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 8009090:	8033      	strh	r3, [r6, #0]
    nextChan.AggrTimeOff = Nvm.MacGroup1.AggregatedTimeOff;
 8009092:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8009094:	ac0e      	add	r4, sp, #56	@ 0x38
 8009096:	930e      	str	r3, [sp, #56]	@ 0x38
    nextChan.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8009098:	002b      	movs	r3, r5
 800909a:	3339      	adds	r3, #57	@ 0x39
 800909c:	781b      	ldrb	r3, [r3, #0]
    nextChan.DutyCycleEnabled = Nvm.MacGroup2.DutyCycleOn;
 800909e:	37ff      	adds	r7, #255	@ 0xff
    nextChan.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 80090a0:	7223      	strb	r3, [r4, #8]
    nextChan.DutyCycleEnabled = Nvm.MacGroup2.DutyCycleOn;
 80090a2:	787b      	ldrb	r3, [r7, #1]
    nextChan.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 80090a4:	a808      	add	r0, sp, #32
    nextChan.DutyCycleEnabled = Nvm.MacGroup2.DutyCycleOn;
 80090a6:	72a3      	strb	r3, [r4, #10]
    nextChan.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 80090a8:	f006 f9de 	bl	800f468 <SysTimeGetMcuTime>
 80090ac:	002b      	movs	r3, r5
 80090ae:	3309      	adds	r3, #9
 80090b0:	33ff      	adds	r3, #255	@ 0xff
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	9908      	ldr	r1, [sp, #32]
 80090b6:	9300      	str	r3, [sp, #0]
 80090b8:	2382      	movs	r3, #130	@ 0x82
 80090ba:	005b      	lsls	r3, r3, #1
 80090bc:	58eb      	ldr	r3, [r5, r3]
 80090be:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80090c0:	a804      	add	r0, sp, #16
 80090c2:	f006 f96d 	bl	800f3a0 <SysTimeSub>
 80090c6:	ab11      	add	r3, sp, #68	@ 0x44
 80090c8:	aa04      	add	r2, sp, #16
 80090ca:	ca03      	ldmia	r2!, {r0, r1}
 80090cc:	c303      	stmia	r3!, {r0, r1}
    nextChan.LastAggrTx = Nvm.MacGroup1.LastTxDoneTime;
 80090ce:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
    nextChan.Joined = true;
 80090d0:	2201      	movs	r2, #1
    nextChan.LastAggrTx = Nvm.MacGroup1.LastTxDoneTime;
 80090d2:	6063      	str	r3, [r4, #4]
    nextChan.LastTxIsJoinRequest = false;
 80090d4:	2300      	movs	r3, #0
 80090d6:	7523      	strb	r3, [r4, #20]
    nextChan.PktLen = MacCtx.PktBufferLen;
 80090d8:	8833      	ldrh	r3, [r6, #0]
    nextChan.Joined = true;
 80090da:	7262      	strb	r2, [r4, #9]
    nextChan.PktLen = MacCtx.PktBufferLen;
 80090dc:	82e3      	strh	r3, [r4, #22]
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 80090de:	7c7b      	ldrb	r3, [r7, #17]
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d101      	bne.n	80090e8 <ScheduleTx+0xcc>
        nextChan.LastTxIsJoinRequest = true;
 80090e4:	7522      	strb	r2, [r4, #20]
        nextChan.Joined = false;
 80090e6:	7263      	strb	r3, [r4, #9]
    status = RegionNextChannel( Nvm.MacGroup2.Region, &nextChan, &MacCtx.Channel, &MacCtx.DutyCycleWaitTime, &Nvm.MacGroup1.AggregatedTimeOff );
 80090e8:	498e      	ldr	r1, [pc, #568]	@ (8009324 <ScheduleTx+0x308>)
 80090ea:	4f8f      	ldr	r7, [pc, #572]	@ (8009328 <ScheduleTx+0x30c>)
 80090ec:	4b8f      	ldr	r3, [pc, #572]	@ (800932c <ScheduleTx+0x310>)
 80090ee:	7838      	ldrb	r0, [r7, #0]
 80090f0:	4a8f      	ldr	r2, [pc, #572]	@ (8009330 <ScheduleTx+0x314>)
 80090f2:	9100      	str	r1, [sp, #0]
 80090f4:	0021      	movs	r1, r4
 80090f6:	4d88      	ldr	r5, [pc, #544]	@ (8009318 <ScheduleTx+0x2fc>)
 80090f8:	f003 fa44 	bl	800c584 <RegionNextChannel>
 80090fc:	1e04      	subs	r4, r0, #0
    if( status != LORAMAC_STATUS_OK )
 80090fe:	d01c      	beq.n	800913a <ScheduleTx+0x11e>
        if( ( status == LORAMAC_STATUS_DUTYCYCLE_RESTRICTED ) &&
 8009100:	280b      	cmp	r0, #11
 8009102:	d1ab      	bne.n	800905c <ScheduleTx+0x40>
 8009104:	9b03      	ldr	r3, [sp, #12]
 8009106:	2b00      	cmp	r3, #0
 8009108:	d0a8      	beq.n	800905c <ScheduleTx+0x40>
            if( MacCtx.DutyCycleWaitTime != 0 )
 800910a:	4b84      	ldr	r3, [pc, #528]	@ (800931c <ScheduleTx+0x300>)
 800910c:	4a89      	ldr	r2, [pc, #548]	@ (8009334 <ScheduleTx+0x318>)
 800910e:	5899      	ldr	r1, [r3, r2]
 8009110:	2900      	cmp	r1, #0
 8009112:	d00c      	beq.n	800912e <ScheduleTx+0x112>
                MacCtx.MacState |= LORAMAC_TX_DELAYED;
 8009114:	20d0      	movs	r0, #208	@ 0xd0
 8009116:	2220      	movs	r2, #32
 8009118:	0080      	lsls	r0, r0, #2
 800911a:	581c      	ldr	r4, [r3, r0]
 800911c:	4322      	orrs	r2, r4
                TimerSetValue( &MacCtx.TxDelayedTimer, MacCtx.DutyCycleWaitTime );
 800911e:	4c86      	ldr	r4, [pc, #536]	@ (8009338 <ScheduleTx+0x31c>)
                MacCtx.MacState |= LORAMAC_TX_DELAYED;
 8009120:	501a      	str	r2, [r3, r0]
                TimerSetValue( &MacCtx.TxDelayedTimer, MacCtx.DutyCycleWaitTime );
 8009122:	0020      	movs	r0, r4
 8009124:	f006 fb90 	bl	800f848 <UTIL_TIMER_SetPeriod>
                TimerStart( &MacCtx.TxDelayedTimer );
 8009128:	0020      	movs	r0, r4
 800912a:	f006 fb4f 	bl	800f7cc <UTIL_TIMER_Start>
            return LORAMAC_STATUS_OK;
 800912e:	2400      	movs	r4, #0
 8009130:	e794      	b.n	800905c <ScheduleTx+0x40>
            serializeStatus = LoRaMacSerializerData( &MacCtx.TxMsg.Message.Data );
 8009132:	487b      	ldr	r0, [pc, #492]	@ (8009320 <ScheduleTx+0x304>)
 8009134:	f003 f913 	bl	800c35e <LoRaMacSerializerData>
 8009138:	e7a5      	b.n	8009086 <ScheduleTx+0x6a>
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800913a:	783b      	ldrb	r3, [r7, #0]
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 800913c:	0029      	movs	r1, r5
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800913e:	9303      	str	r3, [sp, #12]
                                                          Nvm.MacGroup2.MacParams.Rx1DrOffset ),
 8009140:	002b      	movs	r3, r5
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 8009142:	4a7e      	ldr	r2, [pc, #504]	@ (800933c <ScheduleTx+0x320>)
                                                          Nvm.MacGroup2.MacParams.Rx1DrOffset ),
 8009144:	3361      	adds	r3, #97	@ 0x61
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 8009146:	781b      	ldrb	r3, [r3, #0]
 8009148:	7812      	ldrb	r2, [r2, #0]
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800914a:	002e      	movs	r6, r5
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 800914c:	3175      	adds	r1, #117	@ 0x75
 800914e:	7809      	ldrb	r1, [r1, #0]
 8009150:	b25b      	sxtb	r3, r3
 8009152:	b252      	sxtb	r2, r2
 8009154:	9803      	ldr	r0, [sp, #12]
 8009156:	f003 fa2a 	bl	800c5ae <RegionApplyDrOffset>
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800915a:	4b79      	ldr	r3, [pc, #484]	@ (8009340 <ScheduleTx+0x324>)
 800915c:	3648      	adds	r6, #72	@ 0x48
 800915e:	7832      	ldrb	r2, [r6, #0]
 8009160:	9300      	str	r3, [sp, #0]
 8009162:	b241      	sxtb	r1, r0
 8009164:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 8009166:	9803      	ldr	r0, [sp, #12]
 8009168:	f003 f9a4 	bl	800c4b4 <RegionComputeRxWindowParameters>
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800916c:	2168      	movs	r1, #104	@ 0x68
 800916e:	4b75      	ldr	r3, [pc, #468]	@ (8009344 <ScheduleTx+0x328>)
 8009170:	7832      	ldrb	r2, [r6, #0]
 8009172:	7838      	ldrb	r0, [r7, #0]
 8009174:	5669      	ldrsb	r1, [r5, r1]
 8009176:	9300      	str	r3, [sp, #0]
 8009178:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 800917a:	f003 f99b 	bl	800c4b4 <RegionComputeRxWindowParameters>
    MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.ReceiveDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 800917e:	23f1      	movs	r3, #241	@ 0xf1
 8009180:	20ec      	movs	r0, #236	@ 0xec
 8009182:	4e66      	ldr	r6, [pc, #408]	@ (800931c <ScheduleTx+0x300>)
 8009184:	009b      	lsls	r3, r3, #2
 8009186:	58f7      	ldr	r7, [r6, r3]
 8009188:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 800918a:	0080      	lsls	r0, r0, #2
 800918c:	19db      	adds	r3, r3, r7
 800918e:	5033      	str	r3, [r6, r0]
    MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.ReceiveDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 8009190:	23f6      	movs	r3, #246	@ 0xf6
 8009192:	22ed      	movs	r2, #237	@ 0xed
 8009194:	009b      	lsls	r3, r3, #2
 8009196:	58f1      	ldr	r1, [r6, r3]
 8009198:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
 800919a:	0092      	lsls	r2, r2, #2
 800919c:	185b      	adds	r3, r3, r1
 800919e:	50b3      	str	r3, [r6, r2]
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 80091a0:	002b      	movs	r3, r5
 80091a2:	33ff      	adds	r3, #255	@ 0xff
 80091a4:	7c5b      	ldrb	r3, [r3, #17]
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d176      	bne.n	8009298 <ScheduleTx+0x27c>
        MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 80091aa:	6dab      	ldr	r3, [r5, #88]	@ 0x58
 80091ac:	19db      	adds	r3, r3, r7
 80091ae:	5033      	str	r3, [r6, r0]
        MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 80091b0:	6deb      	ldr	r3, [r5, #92]	@ 0x5c
 80091b2:	185b      	adds	r3, r3, r1
 80091b4:	50b3      	str	r3, [r6, r2]
    return SendFrameOnChannel( MacCtx.Channel );
 80091b6:	4b64      	ldr	r3, [pc, #400]	@ (8009348 <ScheduleTx+0x32c>)

static LoRaMacStatus_t SendFrameOnChannel( uint8_t channel )
{
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
    TxConfigParams_t txConfig;
    int8_t txPower = 0;
 80091b8:	aa02      	add	r2, sp, #8
    return SendFrameOnChannel( MacCtx.Channel );
 80091ba:	5cf3      	ldrb	r3, [r6, r3]

    txConfig.Channel = channel;
 80091bc:	a90a      	add	r1, sp, #40	@ 0x28
    return SendFrameOnChannel( MacCtx.Channel );
 80091be:	9303      	str	r3, [sp, #12]
    int8_t txPower = 0;
 80091c0:	2300      	movs	r3, #0
 80091c2:	74d3      	strb	r3, [r2, #19]
    txConfig.Channel = channel;
 80091c4:	9b03      	ldr	r3, [sp, #12]
    txConfig.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 80091c6:	4f5d      	ldr	r7, [pc, #372]	@ (800933c <ScheduleTx+0x320>)
    txConfig.Channel = channel;
 80091c8:	700b      	strb	r3, [r1, #0]
    txConfig.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 80091ca:	783b      	ldrb	r3, [r7, #0]
 80091cc:	4d52      	ldr	r5, [pc, #328]	@ (8009318 <ScheduleTx+0x2fc>)
 80091ce:	704b      	strb	r3, [r1, #1]
    txConfig.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 80091d0:	002b      	movs	r3, r5
    txConfig.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
    txConfig.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
    txConfig.PktLen = MacCtx.PktBufferLen;

    RegionTxConfig( Nvm.MacGroup2.Region, &txConfig, &txPower, &MacCtx.TxTimeOnAir );
 80091d2:	002a      	movs	r2, r5
    txConfig.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 80091d4:	3338      	adds	r3, #56	@ 0x38
 80091d6:	781b      	ldrb	r3, [r3, #0]
    RegionTxConfig( Nvm.MacGroup2.Region, &txConfig, &txPower, &MacCtx.TxTimeOnAir );
 80091d8:	3240      	adds	r2, #64	@ 0x40
    txConfig.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 80091da:	708b      	strb	r3, [r1, #2]
    txConfig.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
 80091dc:	6fab      	ldr	r3, [r5, #120]	@ 0x78
    RegionTxConfig( Nvm.MacGroup2.Region, &txConfig, &txPower, &MacCtx.TxTimeOnAir );
 80091de:	a802      	add	r0, sp, #8
    txConfig.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
 80091e0:	604b      	str	r3, [r1, #4]
    txConfig.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 80091e2:	6feb      	ldr	r3, [r5, #124]	@ 0x7c
 80091e4:	608b      	str	r3, [r1, #8]
    txConfig.PktLen = MacCtx.PktBufferLen;
 80091e6:	8833      	ldrh	r3, [r6, #0]
 80091e8:	818b      	strh	r3, [r1, #12]
    RegionTxConfig( Nvm.MacGroup2.Region, &txConfig, &txPower, &MacCtx.TxTimeOnAir );
 80091ea:	7812      	ldrb	r2, [r2, #0]
 80091ec:	4b57      	ldr	r3, [pc, #348]	@ (800934c <ScheduleTx+0x330>)
 80091ee:	4694      	mov	ip, r2
 80091f0:	2213      	movs	r2, #19
 80091f2:	1812      	adds	r2, r2, r0
 80091f4:	4660      	mov	r0, ip
 80091f6:	f003 f974 	bl	800c4e2 <RegionTxConfig>

    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80091fa:	2201      	movs	r2, #1
 80091fc:	4b54      	ldr	r3, [pc, #336]	@ (8009350 <ScheduleTx+0x334>)
 80091fe:	54f2      	strb	r2, [r6, r3]
    MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8009200:	783a      	ldrb	r2, [r7, #0]
 8009202:	4b54      	ldr	r3, [pc, #336]	@ (8009354 <ScheduleTx+0x338>)
    MacCtx.McpsConfirm.TxPower = txPower;
    MacCtx.McpsConfirm.Channel = channel;

    // Store the time on air
    MacCtx.McpsConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 8009204:	2783      	movs	r7, #131	@ 0x83
    MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8009206:	54f2      	strb	r2, [r6, r3]
    MacCtx.McpsConfirm.TxPower = txPower;
 8009208:	ab02      	add	r3, sp, #8
 800920a:	7cda      	ldrb	r2, [r3, #19]
 800920c:	4b52      	ldr	r3, [pc, #328]	@ (8009358 <ScheduleTx+0x33c>)
    MacCtx.McpsConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 800920e:	00ff      	lsls	r7, r7, #3
    MacCtx.McpsConfirm.TxPower = txPower;
 8009210:	54f2      	strb	r2, [r6, r3]
    MacCtx.McpsConfirm.Channel = channel;
 8009212:	9a03      	ldr	r2, [sp, #12]
 8009214:	330d      	adds	r3, #13
 8009216:	50f2      	str	r2, [r6, r3]
    MacCtx.McpsConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 8009218:	2288      	movs	r2, #136	@ 0x88
 800921a:	59f3      	ldr	r3, [r6, r7]
 800921c:	00d2      	lsls	r2, r2, #3
 800921e:	50b3      	str	r3, [r6, r2]
    MacCtx.MlmeConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 8009220:	3210      	adds	r2, #16
 8009222:	50b3      	str	r3, [r6, r2]

    if( LoRaMacClassBIsBeaconModeActive( ) == true )
 8009224:	f002 fab5 	bl	800b792 <LoRaMacClassBIsBeaconModeActive>
 8009228:	2800      	cmp	r0, #0
 800922a:	d14c      	bne.n	80092c6 <ScheduleTx+0x2aa>
        {
            return LORAMAC_STATUS_BUSY_UPLINK_COLLISION;
        }
    }

    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800922c:	002b      	movs	r3, r5
 800922e:	33fc      	adds	r3, #252	@ 0xfc
 8009230:	781b      	ldrb	r3, [r3, #0]
 8009232:	2b01      	cmp	r3, #1
 8009234:	d101      	bne.n	800923a <ScheduleTx+0x21e>
    {
        // Stop slots for class b
        LoRaMacClassBStopRxSlots( );
 8009236:	f002 fac0 	bl	800b7ba <LoRaMacClassBStopRxSlots>
    }

    LoRaMacClassBHaltBeaconing( );

    // Secure frame
    status = SecureFrame( Nvm.MacGroup1.ChannelsDatarate, MacCtx.Channel );
 800923a:	2639      	movs	r6, #57	@ 0x39
    LoRaMacClassBHaltBeaconing( );
 800923c:	f002 faac 	bl	800b798 <LoRaMacClassBHaltBeaconing>
    status = SecureFrame( Nvm.MacGroup1.ChannelsDatarate, MacCtx.Channel );
 8009240:	57ae      	ldrsb	r6, [r5, r6]
 8009242:	4b41      	ldr	r3, [pc, #260]	@ (8009348 <ScheduleTx+0x32c>)
 8009244:	4d35      	ldr	r5, [pc, #212]	@ (800931c <ScheduleTx+0x300>)
 8009246:	5ceb      	ldrb	r3, [r5, r3]
    switch( MacCtx.TxMsg.Type )
 8009248:	002f      	movs	r7, r5
    status = SecureFrame( Nvm.MacGroup1.ChannelsDatarate, MacCtx.Channel );
 800924a:	9303      	str	r3, [sp, #12]
    uint32_t fCntUp = 0;
 800924c:	2300      	movs	r3, #0
    switch( MacCtx.TxMsg.Type )
 800924e:	37ff      	adds	r7, #255	@ 0xff
    uint32_t fCntUp = 0;
 8009250:	9307      	str	r3, [sp, #28]
    switch( MacCtx.TxMsg.Type )
 8009252:	797b      	ldrb	r3, [r7, #5]
 8009254:	2b00      	cmp	r3, #0
 8009256:	d03d      	beq.n	80092d4 <ScheduleTx+0x2b8>
 8009258:	2b04      	cmp	r3, #4
 800925a:	d000      	beq.n	800925e <ScheduleTx+0x242>
 800925c:	e6f7      	b.n	800904e <ScheduleTx+0x32>
            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 800925e:	a807      	add	r0, sp, #28
 8009260:	f002 fdb2 	bl	800bdc8 <LoRaMacCryptoGetFCntUp>
 8009264:	2800      	cmp	r0, #0
 8009266:	d152      	bne.n	800930e <ScheduleTx+0x2f2>
            if( ( MacCtx.ChannelsNbTransCounter >= 1 ) || ( MacCtx.AckTimeoutRetriesCounter > 1 ) )
 8009268:	2382      	movs	r3, #130	@ 0x82
 800926a:	00db      	lsls	r3, r3, #3
 800926c:	5ceb      	ldrb	r3, [r5, r3]
 800926e:	2b00      	cmp	r3, #0
 8009270:	d103      	bne.n	800927a <ScheduleTx+0x25e>
 8009272:	4b3a      	ldr	r3, [pc, #232]	@ (800935c <ScheduleTx+0x340>)
 8009274:	5ceb      	ldrb	r3, [r5, r3]
 8009276:	2b01      	cmp	r3, #1
 8009278:	d902      	bls.n	8009280 <ScheduleTx+0x264>
                fCntUp -= 1;
 800927a:	9b07      	ldr	r3, [sp, #28]
 800927c:	3b01      	subs	r3, #1
 800927e:	9307      	str	r3, [sp, #28]
            macCryptoStatus = LoRaMacCryptoSecureMessage( fCntUp, txDr, txCh, &MacCtx.TxMsg.Message.Data );
 8009280:	4b27      	ldr	r3, [pc, #156]	@ (8009320 <ScheduleTx+0x304>)
 8009282:	9a03      	ldr	r2, [sp, #12]
 8009284:	9807      	ldr	r0, [sp, #28]
 8009286:	b2f1      	uxtb	r1, r6
 8009288:	f002 fe22 	bl	800bed0 <LoRaMacCryptoSecureMessage>
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 800928c:	2800      	cmp	r0, #0
 800928e:	d126      	bne.n	80092de <ScheduleTx+0x2c2>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 8009290:	002b      	movs	r3, r5
 8009292:	33ff      	adds	r3, #255	@ 0xff
 8009294:	7b59      	ldrb	r1, [r3, #13]
    if( status != LORAMAC_STATUS_OK )
 8009296:	e025      	b.n	80092e4 <ScheduleTx+0x2c8>
        if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8009298:	a80a      	add	r0, sp, #40	@ 0x28
    size_t macCmdsSize = 0;
 800929a:	940a      	str	r4, [sp, #40]	@ 0x28
        if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 800929c:	f002 fb30 	bl	800b900 <LoRaMacCommandsGetSizeSerializedCmds>
 80092a0:	2800      	cmp	r0, #0
 80092a2:	d10e      	bne.n	80092c2 <ScheduleTx+0x2a6>
    maxN = GetMaxAppPayloadWithoutFOptsLength( datarate );
 80092a4:	2000      	movs	r0, #0
        if( ValidatePayloadLength( MacCtx.AppDataSize, Nvm.MacGroup1.ChannelsDatarate, macCmdsSize ) == false )
 80092a6:	4b2e      	ldr	r3, [pc, #184]	@ (8009360 <ScheduleTx+0x344>)
 80092a8:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 80092aa:	5cf5      	ldrb	r5, [r6, r3]
    maxN = GetMaxAppPayloadWithoutFOptsLength( datarate );
 80092ac:	4b23      	ldr	r3, [pc, #140]	@ (800933c <ScheduleTx+0x320>)
        if( ValidatePayloadLength( MacCtx.AppDataSize, Nvm.MacGroup1.ChannelsDatarate, macCmdsSize ) == false )
 80092ae:	b2ff      	uxtb	r7, r7
    maxN = GetMaxAppPayloadWithoutFOptsLength( datarate );
 80092b0:	5618      	ldrsb	r0, [r3, r0]
 80092b2:	f7ff fc9f 	bl	8008bf4 <GetMaxAppPayloadWithoutFOptsLength>
    if( ( payloadSize <= maxN ) && ( payloadSize <= LORAMAC_PHY_MAXPAYLOAD ) )
 80092b6:	19ed      	adds	r5, r5, r7
 80092b8:	42a8      	cmp	r0, r5
 80092ba:	d300      	bcc.n	80092be <ScheduleTx+0x2a2>
 80092bc:	e77b      	b.n	80091b6 <ScheduleTx+0x19a>
            return LORAMAC_STATUS_LENGTH_ERROR;
 80092be:	2408      	movs	r4, #8
 80092c0:	e6cc      	b.n	800905c <ScheduleTx+0x40>
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80092c2:	2413      	movs	r4, #19
 80092c4:	e6ca      	b.n	800905c <ScheduleTx+0x40>
        TimerTime_t collisionTime = LoRaMacClassBIsUplinkCollision( MacCtx.TxTimeOnAir );
 80092c6:	59f0      	ldr	r0, [r6, r7]
 80092c8:	f002 fa75 	bl	800b7b6 <LoRaMacClassBIsUplinkCollision>
        if( collisionTime > 0 )
 80092cc:	2800      	cmp	r0, #0
 80092ce:	d0ad      	beq.n	800922c <ScheduleTx+0x210>
            return LORAMAC_STATUS_BUSY_UPLINK_COLLISION;
 80092d0:	2410      	movs	r4, #16
    return SendFrameOnChannel( MacCtx.Channel );
 80092d2:	e6c3      	b.n	800905c <ScheduleTx+0x40>
            macCryptoStatus = LoRaMacCryptoPrepareJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 80092d4:	4812      	ldr	r0, [pc, #72]	@ (8009320 <ScheduleTx+0x304>)
 80092d6:	f002 fdcf 	bl	800be78 <LoRaMacCryptoPrepareJoinRequest>
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 80092da:	2800      	cmp	r0, #0
 80092dc:	d001      	beq.n	80092e2 <ScheduleTx+0x2c6>
                return LORAMAC_STATUS_CRYPTO_ERROR;
 80092de:	2411      	movs	r4, #17
 80092e0:	e6bc      	b.n	800905c <ScheduleTx+0x40>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 80092e2:	7b79      	ldrb	r1, [r7, #13]
    {
        return status;
    }

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 80092e4:	22d0      	movs	r2, #208	@ 0xd0
 80092e6:	2302      	movs	r3, #2
 80092e8:	0092      	lsls	r2, r2, #2
 80092ea:	58a8      	ldr	r0, [r5, r2]
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 80092ec:	8029      	strh	r1, [r5, #0]
    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 80092ee:	4303      	orrs	r3, r0
 80092f0:	50ab      	str	r3, [r5, r2]
    if( MacCtx.NodeAckRequested == false )
 80092f2:	4b1c      	ldr	r3, [pc, #112]	@ (8009364 <ScheduleTx+0x348>)
 80092f4:	5ceb      	ldrb	r3, [r5, r3]
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d103      	bne.n	8009302 <ScheduleTx+0x2e6>
    {
        MacCtx.ChannelsNbTransCounter++;
 80092fa:	32d0      	adds	r2, #208	@ 0xd0
 80092fc:	5cab      	ldrb	r3, [r5, r2]
 80092fe:	3301      	adds	r3, #1
 8009300:	54ab      	strb	r3, [r5, r2]
    }

    // Send now
    Radio.Send( MacCtx.PktBuffer, MacCtx.PktBufferLen );
 8009302:	4b19      	ldr	r3, [pc, #100]	@ (8009368 <ScheduleTx+0x34c>)
 8009304:	4819      	ldr	r0, [pc, #100]	@ (800936c <ScheduleTx+0x350>)
 8009306:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009308:	b2c9      	uxtb	r1, r1
 800930a:	4798      	blx	r3

    return LORAMAC_STATUS_OK;
 800930c:	e6a6      	b.n	800905c <ScheduleTx+0x40>
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 800930e:	2412      	movs	r4, #18
 8009310:	e6a4      	b.n	800905c <ScheduleTx+0x40>
 8009312:	46c0      	nop			@ (mov r8, r8)
 8009314:	20000ae4 	.word	0x20000ae4
 8009318:	200009e8 	.word	0x200009e8
 800931c:	20000d34 	.word	0x20000d34
 8009320:	20000e3c 	.word	0x20000e3c
 8009324:	20000a18 	.word	0x20000a18
 8009328:	20000a28 	.word	0x20000a28
 800932c:	200011b8 	.word	0x200011b8
 8009330:	20001149 	.word	0x20001149
 8009334:	00000484 	.word	0x00000484
 8009338:	2000109c 	.word	0x2000109c
 800933c:	20000a21 	.word	0x20000a21
 8009340:	200010ec 	.word	0x200010ec
 8009344:	20001100 	.word	0x20001100
 8009348:	00000415 	.word	0x00000415
 800934c:	2000114c 	.word	0x2000114c
 8009350:	00000439 	.word	0x00000439
 8009354:	0000043a 	.word	0x0000043a
 8009358:	0000043b 	.word	0x0000043b
 800935c:	00000412 	.word	0x00000412
 8009360:	00000237 	.word	0x00000237
 8009364:	00000414 	.word	0x00000414
 8009368:	080108d8 	.word	0x080108d8
 800936c:	20000d36 	.word	0x20000d36

08009370 <OpenContinuousRxCWindow>:
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8009370:	4b11      	ldr	r3, [pc, #68]	@ (80093b8 <OpenContinuousRxCWindow+0x48>)
{
 8009372:	b573      	push	{r0, r1, r4, r5, r6, lr}
                                     Nvm.MacGroup2.MacParams.RxCChannel.Datarate,
 8009374:	0019      	movs	r1, r3
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8009376:	001e      	movs	r6, r3
 8009378:	4d10      	ldr	r5, [pc, #64]	@ (80093bc <OpenContinuousRxCWindow+0x4c>)
 800937a:	4a11      	ldr	r2, [pc, #68]	@ (80093c0 <OpenContinuousRxCWindow+0x50>)
                                     Nvm.MacGroup2.MacParams.RxCChannel.Datarate,
 800937c:	3170      	adds	r1, #112	@ 0x70
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800937e:	7809      	ldrb	r1, [r1, #0]
 8009380:	3640      	adds	r6, #64	@ 0x40
 8009382:	7812      	ldrb	r2, [r2, #0]
 8009384:	7830      	ldrb	r0, [r6, #0]
 8009386:	9500      	str	r5, [sp, #0]
 8009388:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800938a:	b249      	sxtb	r1, r1
 800938c:	f003 f892 	bl	800c4b4 <RegionComputeRxWindowParameters>
    MacCtx.RxWindowCConfig.RxContinuous = true;
 8009390:	4a0c      	ldr	r2, [pc, #48]	@ (80093c4 <OpenContinuousRxCWindow+0x54>)
 8009392:	4c0d      	ldr	r4, [pc, #52]	@ (80093c8 <OpenContinuousRxCWindow+0x58>)
 8009394:	4b0d      	ldr	r3, [pc, #52]	@ (80093cc <OpenContinuousRxCWindow+0x5c>)
    if( RegionRxConfig( Nvm.MacGroup2.Region, &MacCtx.RxWindowCConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 8009396:	0029      	movs	r1, r5
    MacCtx.RxWindowCConfig.RxContinuous = true;
 8009398:	52e2      	strh	r2, [r4, r3]
    if( RegionRxConfig( Nvm.MacGroup2.Region, &MacCtx.RxWindowCConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 800939a:	7830      	ldrb	r0, [r6, #0]
 800939c:	4a0c      	ldr	r2, [pc, #48]	@ (80093d0 <OpenContinuousRxCWindow+0x60>)
 800939e:	f003 f894 	bl	800c4ca <RegionRxConfig>
 80093a2:	2800      	cmp	r0, #0
 80093a4:	d007      	beq.n	80093b6 <OpenContinuousRxCWindow+0x46>
        Radio.Rx( 0 ); // Continuous mode
 80093a6:	4b0b      	ldr	r3, [pc, #44]	@ (80093d4 <OpenContinuousRxCWindow+0x64>)
 80093a8:	2000      	movs	r0, #0
 80093aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80093ac:	4798      	blx	r3
        MacCtx.RxSlot = MacCtx.RxWindowCConfig.RxSlot;
 80093ae:	4b0a      	ldr	r3, [pc, #40]	@ (80093d8 <OpenContinuousRxCWindow+0x68>)
 80093b0:	5ce2      	ldrb	r2, [r4, r3]
 80093b2:	338d      	adds	r3, #141	@ 0x8d
 80093b4:	54e2      	strb	r2, [r4, r3]
}
 80093b6:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
 80093b8:	200009e8 	.word	0x200009e8
 80093bc:	20001114 	.word	0x20001114
 80093c0:	20000a30 	.word	0x20000a30
 80093c4:	00000201 	.word	0x00000201
 80093c8:	20000d34 	.word	0x20000d34
 80093cc:	000003f2 	.word	0x000003f2
 80093d0:	20001154 	.word	0x20001154
 80093d4:	080108d8 	.word	0x080108d8
 80093d8:	000003f3 	.word	0x000003f3

080093dc <SwitchClass>:
{
 80093dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    switch( Nvm.MacGroup2.DeviceClass )
 80093de:	4d2e      	ldr	r5, [pc, #184]	@ (8009498 <SwitchClass+0xbc>)
{
 80093e0:	0004      	movs	r4, r0
    switch( Nvm.MacGroup2.DeviceClass )
 80093e2:	782a      	ldrb	r2, [r5, #0]
 80093e4:	4b2d      	ldr	r3, [pc, #180]	@ (800949c <SwitchClass+0xc0>)
 80093e6:	2a01      	cmp	r2, #1
 80093e8:	d00e      	beq.n	8009408 <SwitchClass+0x2c>
 80093ea:	2a02      	cmp	r2, #2
 80093ec:	d04d      	beq.n	800948a <SwitchClass+0xae>
 80093ee:	2a00      	cmp	r2, #0
 80093f0:	d106      	bne.n	8009400 <SwitchClass+0x24>
            if( deviceClass == CLASS_A )
 80093f2:	2800      	cmp	r0, #0
 80093f4:	d106      	bne.n	8009404 <SwitchClass+0x28>
                Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParams.Rx2Channel;
 80093f6:	001a      	movs	r2, r3
 80093f8:	3364      	adds	r3, #100	@ 0x64
 80093fa:	326c      	adds	r2, #108	@ 0x6c
 80093fc:	cb03      	ldmia	r3!, {r0, r1}
 80093fe:	c203      	stmia	r2!, {r0, r1}
{
 8009400:	2003      	movs	r0, #3
 8009402:	e041      	b.n	8009488 <SwitchClass+0xac>
            if( deviceClass == CLASS_B )
 8009404:	2801      	cmp	r0, #1
 8009406:	d106      	bne.n	8009416 <SwitchClass+0x3a>
            status = LoRaMacClassBSwitchClass( deviceClass );
 8009408:	0020      	movs	r0, r4
 800940a:	f002 f9c7 	bl	800b79c <LoRaMacClassBSwitchClass>
            if( status == LORAMAC_STATUS_OK )
 800940e:	2800      	cmp	r0, #0
 8009410:	d13a      	bne.n	8009488 <SwitchClass+0xac>
                Nvm.MacGroup2.DeviceClass = deviceClass;
 8009412:	702c      	strb	r4, [r5, #0]
 8009414:	e038      	b.n	8009488 <SwitchClass+0xac>
            if( deviceClass == CLASS_C )
 8009416:	2802      	cmp	r0, #2
 8009418:	d1f2      	bne.n	8009400 <SwitchClass+0x24>
                MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 800941a:	21f3      	movs	r1, #243	@ 0xf3
                Nvm.MacGroup2.DeviceClass = deviceClass;
 800941c:	7028      	strb	r0, [r5, #0]
                MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 800941e:	4820      	ldr	r0, [pc, #128]	@ (80094a0 <SwitchClass+0xc4>)
 8009420:	4a20      	ldr	r2, [pc, #128]	@ (80094a4 <SwitchClass+0xc8>)
 8009422:	0089      	lsls	r1, r1, #2
 8009424:	1841      	adds	r1, r0, r1
 8009426:	c9e0      	ldmia	r1!, {r5, r6, r7}
 8009428:	c2e0      	stmia	r2!, {r5, r6, r7}
 800942a:	c960      	ldmia	r1!, {r5, r6}
 800942c:	c260      	stmia	r2!, {r5, r6}
                MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 800942e:	4a1e      	ldr	r2, [pc, #120]	@ (80094a8 <SwitchClass+0xcc>)
 8009430:	5484      	strb	r4, [r0, r2]
                    if( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true )
 8009432:	001a      	movs	r2, r3
 8009434:	32d2      	adds	r2, #210	@ 0xd2
 8009436:	7812      	ldrb	r2, [r2, #0]
 8009438:	2a00      	cmp	r2, #0
 800943a:	d01c      	beq.n	8009476 <SwitchClass+0x9a>
                        Nvm.MacGroup2.MacParams.RxCChannel.Frequency = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.ClassC.Frequency;
 800943c:	001a      	movs	r2, r3
                        Nvm.MacGroup2.MacParams.RxCChannel.Datarate = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.ClassC.Datarate;
 800943e:	001c      	movs	r4, r3
 8009440:	0019      	movs	r1, r3
                        Nvm.MacGroup2.MacParams.RxCChannel.Frequency = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.ClassC.Frequency;
 8009442:	32e8      	adds	r2, #232	@ 0xe8
 8009444:	6812      	ldr	r2, [r2, #0]
                        Nvm.MacGroup2.MacParams.RxCChannel.Datarate = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.ClassC.Datarate;
 8009446:	34ec      	adds	r4, #236	@ 0xec
                        Nvm.MacGroup2.MacParams.RxCChannel.Frequency = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.ClassC.Frequency;
 8009448:	66da      	str	r2, [r3, #108]	@ 0x6c
                        Nvm.MacGroup2.MacParams.RxCChannel.Datarate = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.ClassC.Datarate;
 800944a:	7824      	ldrb	r4, [r4, #0]
 800944c:	3170      	adds	r1, #112	@ 0x70
 800944e:	700c      	strb	r4, [r1, #0]
                        MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 8009450:	4916      	ldr	r1, [pc, #88]	@ (80094ac <SwitchClass+0xd0>)
 8009452:	5c44      	ldrb	r4, [r0, r1]
 8009454:	3935      	subs	r1, #53	@ 0x35
 8009456:	5444      	strb	r4, [r0, r1]
                        MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 8009458:	3104      	adds	r1, #4
 800945a:	5042      	str	r2, [r0, r1]
                        MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800945c:	001a      	movs	r2, r3
 800945e:	3275      	adds	r2, #117	@ 0x75
 8009460:	7811      	ldrb	r1, [r2, #0]
 8009462:	22fc      	movs	r2, #252	@ 0xfc
 8009464:	0092      	lsls	r2, r2, #2
                        MacCtx.RxWindowCConfig.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 8009466:	3380      	adds	r3, #128	@ 0x80
                        MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8009468:	5481      	strb	r1, [r0, r2]
                        MacCtx.RxWindowCConfig.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 800946a:	781a      	ldrb	r2, [r3, #0]
 800946c:	4b10      	ldr	r3, [pc, #64]	@ (80094b0 <SwitchClass+0xd4>)
 800946e:	54c2      	strb	r2, [r0, r3]
                        MacCtx.RxWindowCConfig.RxContinuous = true;
 8009470:	4b10      	ldr	r3, [pc, #64]	@ (80094b4 <SwitchClass+0xd8>)
 8009472:	4a11      	ldr	r2, [pc, #68]	@ (80094b8 <SwitchClass+0xdc>)
 8009474:	52c2      	strh	r2, [r0, r3]
                MacCtx.NodeAckRequested = false;
 8009476:	2200      	movs	r2, #0
 8009478:	4b10      	ldr	r3, [pc, #64]	@ (80094bc <SwitchClass+0xe0>)
 800947a:	54c2      	strb	r2, [r0, r3]
                Radio.Sleep( );
 800947c:	4b10      	ldr	r3, [pc, #64]	@ (80094c0 <SwitchClass+0xe4>)
 800947e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009480:	4798      	blx	r3
                OpenContinuousRxCWindow( );
 8009482:	f7ff ff75 	bl	8009370 <OpenContinuousRxCWindow>
                status = LORAMAC_STATUS_OK;
 8009486:	2000      	movs	r0, #0
}
 8009488:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            if( deviceClass == CLASS_A )
 800948a:	2800      	cmp	r0, #0
 800948c:	d1b8      	bne.n	8009400 <SwitchClass+0x24>
                Radio.Sleep( );
 800948e:	4b0c      	ldr	r3, [pc, #48]	@ (80094c0 <SwitchClass+0xe4>)
                Nvm.MacGroup2.DeviceClass = deviceClass;
 8009490:	7028      	strb	r0, [r5, #0]
                Radio.Sleep( );
 8009492:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009494:	4798      	blx	r3
                status = LORAMAC_STATUS_OK;
 8009496:	e7f6      	b.n	8009486 <SwitchClass+0xaa>
 8009498:	20000ae4 	.word	0x20000ae4
 800949c:	200009e8 	.word	0x200009e8
 80094a0:	20000d34 	.word	0x20000d34
 80094a4:	20001114 	.word	0x20001114
 80094a8:	000003f3 	.word	0x000003f3
 80094ac:	00000415 	.word	0x00000415
 80094b0:	000003f1 	.word	0x000003f1
 80094b4:	000003f2 	.word	0x000003f2
 80094b8:	00000301 	.word	0x00000301
 80094bc:	00000414 	.word	0x00000414
 80094c0:	080108d8 	.word	0x080108d8

080094c4 <RxWindowSetup.constprop.0>:
static void RxWindowSetup( TimerEvent_t* rxTimer, RxConfigParams_t* rxConfig )
 80094c4:	b570      	push	{r4, r5, r6, lr}
 80094c6:	000c      	movs	r4, r1
    TimerStop( rxTimer );
 80094c8:	f006 f92c 	bl	800f724 <UTIL_TIMER_Stop>
    Radio.Standby( );
 80094cc:	4d0a      	ldr	r5, [pc, #40]	@ (80094f8 <RxWindowSetup.constprop.0+0x34>)
 80094ce:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80094d0:	4798      	blx	r3
    if( RegionRxConfig( Nvm.MacGroup2.Region, rxConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 80094d2:	4b0a      	ldr	r3, [pc, #40]	@ (80094fc <RxWindowSetup.constprop.0+0x38>)
 80094d4:	0021      	movs	r1, r4
 80094d6:	4a0a      	ldr	r2, [pc, #40]	@ (8009500 <RxWindowSetup.constprop.0+0x3c>)
 80094d8:	7818      	ldrb	r0, [r3, #0]
 80094da:	4e0a      	ldr	r6, [pc, #40]	@ (8009504 <RxWindowSetup.constprop.0+0x40>)
 80094dc:	f002 fff5 	bl	800c4ca <RegionRxConfig>
 80094e0:	2800      	cmp	r0, #0
 80094e2:	d007      	beq.n	80094f4 <RxWindowSetup.constprop.0+0x30>
        Radio.Rx( Nvm.MacGroup2.MacParams.MaxRxWindow );
 80094e4:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 80094e6:	6cf0      	ldr	r0, [r6, #76]	@ 0x4c
 80094e8:	4798      	blx	r3
        MacCtx.RxSlot = rxConfig->RxSlot;
 80094ea:	2290      	movs	r2, #144	@ 0x90
 80094ec:	4b06      	ldr	r3, [pc, #24]	@ (8009508 <RxWindowSetup.constprop.0+0x44>)
 80094ee:	7ce1      	ldrb	r1, [r4, #19]
 80094f0:	00d2      	lsls	r2, r2, #3
 80094f2:	5499      	strb	r1, [r3, r2]
}
 80094f4:	bd70      	pop	{r4, r5, r6, pc}
 80094f6:	46c0      	nop			@ (mov r8, r8)
 80094f8:	080108d8 	.word	0x080108d8
 80094fc:	20000a28 	.word	0x20000a28
 8009500:	20001154 	.word	0x20001154
 8009504:	200009e8 	.word	0x200009e8
 8009508:	20000d34 	.word	0x20000d34

0800950c <OnRxWindow1TimerEvent>:
{
 800950c:	b510      	push	{r4, lr}
    MacCtx.RxWindow1Config.Channel = MacCtx.Channel;
 800950e:	4b0e      	ldr	r3, [pc, #56]	@ (8009548 <OnRxWindow1TimerEvent+0x3c>)
 8009510:	4a0e      	ldr	r2, [pc, #56]	@ (800954c <OnRxWindow1TimerEvent+0x40>)
 8009512:	5c99      	ldrb	r1, [r3, r2]
 8009514:	3a5d      	subs	r2, #93	@ 0x5d
 8009516:	5499      	strb	r1, [r3, r2]
    MacCtx.RxWindow1Config.DrOffset = Nvm.MacGroup2.MacParams.Rx1DrOffset;
 8009518:	490d      	ldr	r1, [pc, #52]	@ (8009550 <OnRxWindow1TimerEvent+0x44>)
 800951a:	4a0e      	ldr	r2, [pc, #56]	@ (8009554 <OnRxWindow1TimerEvent+0x48>)
 800951c:	7808      	ldrb	r0, [r1, #0]
 800951e:	490e      	ldr	r1, [pc, #56]	@ (8009558 <OnRxWindow1TimerEvent+0x4c>)
 8009520:	5458      	strb	r0, [r3, r1]
    MacCtx.RxWindow1Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8009522:	0011      	movs	r1, r2
 8009524:	3175      	adds	r1, #117	@ 0x75
 8009526:	7808      	ldrb	r0, [r1, #0]
 8009528:	21f2      	movs	r1, #242	@ 0xf2
 800952a:	0089      	lsls	r1, r1, #2
 800952c:	5458      	strb	r0, [r3, r1]
    MacCtx.RxWindow1Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 800952e:	3280      	adds	r2, #128	@ 0x80
 8009530:	7811      	ldrb	r1, [r2, #0]
 8009532:	4a0a      	ldr	r2, [pc, #40]	@ (800955c <OnRxWindow1TimerEvent+0x50>)
    RxWindowSetup( &MacCtx.RxWindowTimer1, &MacCtx.RxWindow1Config );
 8009534:	480a      	ldr	r0, [pc, #40]	@ (8009560 <OnRxWindow1TimerEvent+0x54>)
    MacCtx.RxWindow1Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 8009536:	5499      	strb	r1, [r3, r2]
    MacCtx.RxWindow1Config.RxContinuous = false;
 8009538:	2100      	movs	r1, #0
 800953a:	4a0a      	ldr	r2, [pc, #40]	@ (8009564 <OnRxWindow1TimerEvent+0x58>)
 800953c:	5299      	strh	r1, [r3, r2]
    RxWindowSetup( &MacCtx.RxWindowTimer1, &MacCtx.RxWindow1Config );
 800953e:	490a      	ldr	r1, [pc, #40]	@ (8009568 <OnRxWindow1TimerEvent+0x5c>)
 8009540:	f7ff ffc0 	bl	80094c4 <RxWindowSetup.constprop.0>
}
 8009544:	bd10      	pop	{r4, pc}
 8009546:	46c0      	nop			@ (mov r8, r8)
 8009548:	20000d34 	.word	0x20000d34
 800954c:	00000415 	.word	0x00000415
 8009550:	20000a49 	.word	0x20000a49
 8009554:	200009e8 	.word	0x200009e8
 8009558:	000003bb 	.word	0x000003bb
 800955c:	000003c9 	.word	0x000003c9
 8009560:	200010b4 	.word	0x200010b4
 8009564:	000003ca 	.word	0x000003ca
 8009568:	200010ec 	.word	0x200010ec

0800956c <OnRxWindow2TimerEvent>:
    if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 800956c:	2290      	movs	r2, #144	@ 0x90
{
 800956e:	b510      	push	{r4, lr}
    if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 8009570:	4b10      	ldr	r3, [pc, #64]	@ (80095b4 <OnRxWindow2TimerEvent+0x48>)
 8009572:	00d2      	lsls	r2, r2, #3
 8009574:	5c9a      	ldrb	r2, [r3, r2]
 8009576:	2a00      	cmp	r2, #0
 8009578:	d01a      	beq.n	80095b0 <OnRxWindow2TimerEvent+0x44>
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 800957a:	4a0f      	ldr	r2, [pc, #60]	@ (80095b8 <OnRxWindow2TimerEvent+0x4c>)
 800957c:	5c99      	ldrb	r1, [r3, r2]
 800957e:	3a49      	subs	r2, #73	@ 0x49
 8009580:	5499      	strb	r1, [r3, r2]
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 8009582:	21f4      	movs	r1, #244	@ 0xf4
 8009584:	4a0d      	ldr	r2, [pc, #52]	@ (80095bc <OnRxWindow2TimerEvent+0x50>)
 8009586:	0089      	lsls	r1, r1, #2
 8009588:	6e50      	ldr	r0, [r2, #100]	@ 0x64
 800958a:	5058      	str	r0, [r3, r1]
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800958c:	0011      	movs	r1, r2
 800958e:	3175      	adds	r1, #117	@ 0x75
 8009590:	7808      	ldrb	r0, [r1, #0]
 8009592:	21f7      	movs	r1, #247	@ 0xf7
 8009594:	0089      	lsls	r1, r1, #2
 8009596:	5458      	strb	r0, [r3, r1]
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 8009598:	3280      	adds	r2, #128	@ 0x80
 800959a:	7811      	ldrb	r1, [r2, #0]
 800959c:	4a08      	ldr	r2, [pc, #32]	@ (80095c0 <OnRxWindow2TimerEvent+0x54>)
    RxWindowSetup( &MacCtx.RxWindowTimer2, &MacCtx.RxWindow2Config );
 800959e:	4809      	ldr	r0, [pc, #36]	@ (80095c4 <OnRxWindow2TimerEvent+0x58>)
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 80095a0:	5499      	strb	r1, [r3, r2]
    MacCtx.RxWindow2Config.RxContinuous = false;
 80095a2:	2180      	movs	r1, #128	@ 0x80
 80095a4:	4a08      	ldr	r2, [pc, #32]	@ (80095c8 <OnRxWindow2TimerEvent+0x5c>)
 80095a6:	0049      	lsls	r1, r1, #1
 80095a8:	5299      	strh	r1, [r3, r2]
    RxWindowSetup( &MacCtx.RxWindowTimer2, &MacCtx.RxWindow2Config );
 80095aa:	4908      	ldr	r1, [pc, #32]	@ (80095cc <OnRxWindow2TimerEvent+0x60>)
 80095ac:	f7ff ff8a 	bl	80094c4 <RxWindowSetup.constprop.0>
}
 80095b0:	bd10      	pop	{r4, pc}
 80095b2:	46c0      	nop			@ (mov r8, r8)
 80095b4:	20000d34 	.word	0x20000d34
 80095b8:	00000415 	.word	0x00000415
 80095bc:	200009e8 	.word	0x200009e8
 80095c0:	000003dd 	.word	0x000003dd
 80095c4:	200010cc 	.word	0x200010cc
 80095c8:	000003de 	.word	0x000003de
 80095cc:	20001100 	.word	0x20001100

080095d0 <ProcessMacCommands.constprop.0>:
    uint8_t status = 0;
 80095d0:	2300      	movs	r3, #0
static void ProcessMacCommands( uint8_t *payload, uint8_t macIndex, uint8_t commandsSize, int8_t snr, LoRaMacRxSlot_t rxSlot )
 80095d2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80095d4:	b095      	sub	sp, #84	@ 0x54
 80095d6:	9207      	str	r2, [sp, #28]
    uint8_t status = 0;
 80095d8:	220d      	movs	r2, #13
static void ProcessMacCommands( uint8_t *payload, uint8_t macIndex, uint8_t commandsSize, int8_t snr, LoRaMacRxSlot_t rxSlot )
 80095da:	0007      	movs	r7, r0
    while( macIndex < commandsSize )
 80095dc:	001c      	movs	r4, r3
static void ProcessMacCommands( uint8_t *payload, uint8_t macIndex, uint8_t commandsSize, int8_t snr, LoRaMacRxSlot_t rxSlot )
 80095de:	9104      	str	r1, [sp, #16]
    uint8_t status = 0;
 80095e0:	a906      	add	r1, sp, #24
 80095e2:	1852      	adds	r2, r2, r1
 80095e4:	7013      	strb	r3, [r2, #0]
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 80095e6:	aa0a      	add	r2, sp, #40	@ 0x28
 80095e8:	8013      	strh	r3, [r2, #0]
    bool adrBlockFound = false;
 80095ea:	9303      	str	r3, [sp, #12]
    while( macIndex < commandsSize )
 80095ec:	9b04      	ldr	r3, [sp, #16]
 80095ee:	429c      	cmp	r4, r3
 80095f0:	d301      	bcc.n	80095f6 <ProcessMacCommands.constprop.0+0x26>
}
 80095f2:	b015      	add	sp, #84	@ 0x54
 80095f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if( ( LoRaMacCommandsGetCmdSize( payload[macIndex] ) + macIndex ) > commandsSize )
 80095f6:	5d38      	ldrb	r0, [r7, r4]
 80095f8:	f002 f9d6 	bl	800b9a8 <LoRaMacCommandsGetCmdSize>
 80095fc:	9b04      	ldr	r3, [sp, #16]
 80095fe:	1900      	adds	r0, r0, r4
 8009600:	193e      	adds	r6, r7, r4
 8009602:	4298      	cmp	r0, r3
 8009604:	dcf5      	bgt.n	80095f2 <ProcessMacCommands.constprop.0+0x22>
        switch( payload[macIndex++] )
 8009606:	7830      	ldrb	r0, [r6, #0]
 8009608:	1c65      	adds	r5, r4, #1
 800960a:	3802      	subs	r0, #2
 800960c:	b2ed      	uxtb	r5, r5
 800960e:	2811      	cmp	r0, #17
 8009610:	d8ef      	bhi.n	80095f2 <ProcessMacCommands.constprop.0+0x22>
 8009612:	f7f6 fd95 	bl	8000140 <__gnu_thumb1_case_shi>
 8009616:	0012      	.short	0x0012
 8009618:	00870028 	.word	0x00870028
 800961c:	00dd009a 	.word	0x00dd009a
 8009620:	012500f5 	.word	0x012500f5
 8009624:	01870144 	.word	0x01870144
 8009628:	ffeeffee 	.word	0xffeeffee
 800962c:	ffee01c5 	.word	0xffee01c5
 8009630:	0212ffee 	.word	0x0212ffee
 8009634:	02420227 	.word	0x02420227
 8009638:	025c      	.short	0x025c
                if( LoRaMacConfirmQueueIsCmdActive( MLME_LINK_CHECK ) == true )
 800963a:	2004      	movs	r0, #4
 800963c:	f002 fa72 	bl	800bb24 <LoRaMacConfirmQueueIsCmdActive>
 8009640:	2800      	cmp	r0, #0
 8009642:	d00e      	beq.n	8009662 <ProcessMacCommands.constprop.0+0x92>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_LINK_CHECK );
 8009644:	2104      	movs	r1, #4
 8009646:	2000      	movs	r0, #0
 8009648:	f002 fa24 	bl	800ba94 <LoRaMacConfirmQueueSetStatus>
                    MacCtx.MlmeConfirm.DemodMargin = payload[macIndex++];
 800964c:	5d79      	ldrb	r1, [r7, r5]
 800964e:	4bc9      	ldr	r3, [pc, #804]	@ (8009974 <ProcessMacCommands.constprop.0+0x3a4>)
 8009650:	4ac9      	ldr	r2, [pc, #804]	@ (8009978 <ProcessMacCommands.constprop.0+0x3a8>)
                    MacCtx.MlmeConfirm.NbGateways = payload[macIndex++];
 8009652:	1ce5      	adds	r5, r4, #3
                    MacCtx.MlmeConfirm.DemodMargin = payload[macIndex++];
 8009654:	3402      	adds	r4, #2
 8009656:	5499      	strb	r1, [r3, r2]
                    MacCtx.MlmeConfirm.NbGateways = payload[macIndex++];
 8009658:	b2e4      	uxtb	r4, r4
 800965a:	5d39      	ldrb	r1, [r7, r4]
 800965c:	4ac7      	ldr	r2, [pc, #796]	@ (800997c <ProcessMacCommands.constprop.0+0x3ac>)
 800965e:	b2ed      	uxtb	r5, r5
 8009660:	5499      	strb	r1, [r3, r2]
                uint8_t eirpDwellTime = payload[macIndex++];
 8009662:	002c      	movs	r4, r5
 8009664:	e7c2      	b.n	80095ec <ProcessMacCommands.constprop.0+0x1c>
                int8_t linkAdrDatarate = DR_0;
 8009666:	2300      	movs	r3, #0
 8009668:	aa06      	add	r2, sp, #24
 800966a:	7393      	strb	r3, [r2, #14]
                int8_t linkAdrTxPower = TX_POWER_0;
 800966c:	73d3      	strb	r3, [r2, #15]
                uint8_t linkAdrNbRep = 0;
 800966e:	ae0b      	add	r6, sp, #44	@ 0x2c
                uint8_t linkAdrNbBytesParsed = 0;
 8009670:	aa0c      	add	r2, sp, #48	@ 0x30
                uint8_t linkAdrNbRep = 0;
 8009672:	7033      	strb	r3, [r6, #0]
                uint8_t linkAdrNbBytesParsed = 0;
 8009674:	7013      	strb	r3, [r2, #0]
                if( adrBlockFound == false )
 8009676:	9b03      	ldr	r3, [sp, #12]
 8009678:	2b00      	cmp	r3, #0
 800967a:	d150      	bne.n	800971e <ProcessMacCommands.constprop.0+0x14e>
                    linkAdrReq.Payload = &payload[macIndex - 1];
 800967c:	1e6b      	subs	r3, r5, #1
 800967e:	a910      	add	r1, sp, #64	@ 0x40
 8009680:	18fb      	adds	r3, r7, r3
 8009682:	604b      	str	r3, [r1, #4]
                    linkAdrReq.PayloadSize = commandsSize - ( macIndex - 1 );
 8009684:	9b04      	ldr	r3, [sp, #16]
                    linkAdrReq.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 8009686:	48be      	ldr	r0, [pc, #760]	@ (8009980 <ProcessMacCommands.constprop.0+0x3b0>)
                    linkAdrReq.PayloadSize = commandsSize - ( macIndex - 1 );
 8009688:	1b1c      	subs	r4, r3, r4
 800968a:	720c      	strb	r4, [r1, #8]
                    linkAdrReq.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 800968c:	7800      	ldrb	r0, [r0, #0]
 800968e:	4bbd      	ldr	r3, [pc, #756]	@ (8009984 <ProcessMacCommands.constprop.0+0x3b4>)
 8009690:	7288      	strb	r0, [r1, #10]
                    linkAdrReq.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8009692:	0018      	movs	r0, r3
                    linkAdrReq.CurrentNbRep = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 8009694:	001c      	movs	r4, r3
                    linkAdrReq.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8009696:	3074      	adds	r0, #116	@ 0x74
 8009698:	7800      	ldrb	r0, [r0, #0]
                    linkAdrReq.CurrentNbRep = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 800969a:	3460      	adds	r4, #96	@ 0x60
                    linkAdrReq.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800969c:	7248      	strb	r0, [r1, #9]
                    linkAdrReq.CurrentDatarate = Nvm.MacGroup1.ChannelsDatarate;
 800969e:	48ba      	ldr	r0, [pc, #744]	@ (8009988 <ProcessMacCommands.constprop.0+0x3b8>)
 80096a0:	7800      	ldrb	r0, [r0, #0]
 80096a2:	72c8      	strb	r0, [r1, #11]
                    linkAdrReq.CurrentTxPower = Nvm.MacGroup1.ChannelsTxPower;
 80096a4:	48b9      	ldr	r0, [pc, #740]	@ (800998c <ProcessMacCommands.constprop.0+0x3bc>)
 80096a6:	7800      	ldrb	r0, [r0, #0]
 80096a8:	7308      	strb	r0, [r1, #12]
                    linkAdrReq.CurrentNbRep = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 80096aa:	7820      	ldrb	r0, [r4, #0]
 80096ac:	7348      	strb	r0, [r1, #13]
                    linkAdrReq.Version = Nvm.MacGroup2.Version;
 80096ae:	0018      	movs	r0, r3
 80096b0:	30fc      	adds	r0, #252	@ 0xfc
 80096b2:	6900      	ldr	r0, [r0, #16]
                    status = RegionLinkAdrReq( Nvm.MacGroup2.Region, &linkAdrReq, &linkAdrDatarate,
 80096b4:	3340      	adds	r3, #64	@ 0x40
                    linkAdrReq.Version = Nvm.MacGroup2.Version;
 80096b6:	9010      	str	r0, [sp, #64]	@ 0x40
                    status = RegionLinkAdrReq( Nvm.MacGroup2.Region, &linkAdrReq, &linkAdrDatarate,
 80096b8:	781b      	ldrb	r3, [r3, #0]
 80096ba:	9201      	str	r2, [sp, #4]
 80096bc:	469c      	mov	ip, r3
 80096be:	230f      	movs	r3, #15
 80096c0:	aa06      	add	r2, sp, #24
 80096c2:	189b      	adds	r3, r3, r2
 80096c4:	220e      	movs	r2, #14
 80096c6:	a806      	add	r0, sp, #24
 80096c8:	1812      	adds	r2, r2, r0
 80096ca:	9600      	str	r6, [sp, #0]
 80096cc:	4660      	mov	r0, ip
 80096ce:	f002 ff15 	bl	800c4fc <RegionLinkAdrReq>
 80096d2:	ab06      	add	r3, sp, #24
 80096d4:	7358      	strb	r0, [r3, #13]
                    if( ( status & 0x07 ) == 0x07 )
 80096d6:	43c0      	mvns	r0, r0
 80096d8:	0740      	lsls	r0, r0, #29
 80096da:	d108      	bne.n	80096ee <ProcessMacCommands.constprop.0+0x11e>
                        Nvm.MacGroup1.ChannelsDatarate = linkAdrDatarate;
 80096dc:	7b9b      	ldrb	r3, [r3, #14]
 80096de:	4aaa      	ldr	r2, [pc, #680]	@ (8009988 <ProcessMacCommands.constprop.0+0x3b8>)
 80096e0:	7013      	strb	r3, [r2, #0]
                        Nvm.MacGroup1.ChannelsTxPower = linkAdrTxPower;
 80096e2:	ab06      	add	r3, sp, #24
 80096e4:	7bdb      	ldrb	r3, [r3, #15]
 80096e6:	4aa9      	ldr	r2, [pc, #676]	@ (800998c <ProcessMacCommands.constprop.0+0x3bc>)
 80096e8:	7013      	strb	r3, [r2, #0]
                        Nvm.MacGroup2.MacParams.ChannelsNbTrans = linkAdrNbRep;
 80096ea:	7833      	ldrb	r3, [r6, #0]
 80096ec:	7023      	strb	r3, [r4, #0]
static void ProcessMacCommands( uint8_t *payload, uint8_t macIndex, uint8_t commandsSize, int8_t snr, LoRaMacRxSlot_t rxSlot )
 80096ee:	2600      	movs	r6, #0
 80096f0:	e009      	b.n	8009706 <ProcessMacCommands.constprop.0+0x136>
                        LoRaMacCommandsAddCmd( MOTE_MAC_LINK_ADR_ANS, &status, 1 );
 80096f2:	230d      	movs	r3, #13
 80096f4:	a906      	add	r1, sp, #24
 80096f6:	185b      	adds	r3, r3, r1
 80096f8:	2201      	movs	r2, #1
 80096fa:	0019      	movs	r1, r3
 80096fc:	2003      	movs	r0, #3
 80096fe:	f002 f86d 	bl	800b7dc <LoRaMacCommandsAddCmd>
                    for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 8009702:	3601      	adds	r6, #1
 8009704:	b2f6      	uxtb	r6, r6
 8009706:	ab0c      	add	r3, sp, #48	@ 0x30
 8009708:	781c      	ldrb	r4, [r3, #0]
 800970a:	2105      	movs	r1, #5
 800970c:	0020      	movs	r0, r4
 800970e:	f7f6 fd2b 	bl	8000168 <__udivsi3>
 8009712:	b2c0      	uxtb	r0, r0
 8009714:	4286      	cmp	r6, r0
 8009716:	d3ec      	bcc.n	80096f2 <ProcessMacCommands.constprop.0+0x122>
                    macIndex += linkAdrNbBytesParsed - 1;
 8009718:	3c01      	subs	r4, #1
 800971a:	192d      	adds	r5, r5, r4
 800971c:	b2ed      	uxtb	r5, r5
                break;
 800971e:	2301      	movs	r3, #1
 8009720:	9303      	str	r3, [sp, #12]
 8009722:	e79e      	b.n	8009662 <ProcessMacCommands.constprop.0+0x92>
                Nvm.MacGroup2.MaxDCycle = payload[macIndex++] & 0x0F;
 8009724:	220f      	movs	r2, #15
 8009726:	5d7b      	ldrb	r3, [r7, r5]
 8009728:	3402      	adds	r4, #2
 800972a:	4013      	ands	r3, r2
 800972c:	4a98      	ldr	r2, [pc, #608]	@ (8009990 <ProcessMacCommands.constprop.0+0x3c0>)
                LoRaMacCommandsAddCmd( MOTE_MAC_DUTY_CYCLE_ANS, macCmdPayload, 0 );
 800972e:	2004      	movs	r0, #4
                Nvm.MacGroup2.MaxDCycle = payload[macIndex++] & 0x0F;
 8009730:	7013      	strb	r3, [r2, #0]
                Nvm.MacGroup2.AggregatedDCycle = 1 << Nvm.MacGroup2.MaxDCycle;
 8009732:	2201      	movs	r2, #1
 8009734:	409a      	lsls	r2, r3
 8009736:	0013      	movs	r3, r2
 8009738:	4a91      	ldr	r2, [pc, #580]	@ (8009980 <ProcessMacCommands.constprop.0+0x3b0>)
                LoRaMacCommandsAddCmd( MOTE_MAC_DUTY_CYCLE_ANS, macCmdPayload, 0 );
 800973a:	a90a      	add	r1, sp, #40	@ 0x28
                Nvm.MacGroup2.AggregatedDCycle = 1 << Nvm.MacGroup2.MaxDCycle;
 800973c:	8093      	strh	r3, [r2, #4]
                LoRaMacCommandsAddCmd( MOTE_MAC_DUTY_CYCLE_ANS, macCmdPayload, 0 );
 800973e:	2200      	movs	r2, #0
                Nvm.MacGroup2.MaxDCycle = payload[macIndex++] & 0x0F;
 8009740:	b2e4      	uxtb	r4, r4
                LoRaMacCommandsAddCmd( MOTE_MAC_DUTY_CYCLE_ANS, macCmdPayload, 0 );
 8009742:	f002 f84b 	bl	800b7dc <LoRaMacCommandsAddCmd>
                uint8_t delay = payload[macIndex++] & 0x0F;
 8009746:	0025      	movs	r5, r4
}
 8009748:	e78b      	b.n	8009662 <ProcessMacCommands.constprop.0+0x92>
                status = 0x07;
 800974a:	2107      	movs	r1, #7
 800974c:	ab06      	add	r3, sp, #24
 800974e:	7359      	strb	r1, [r3, #13]
                rxParamSetupReq.DrOffset = ( payload[macIndex] >> 4 ) & 0x07;
 8009750:	5d7b      	ldrb	r3, [r7, r5]
 8009752:	ae10      	add	r6, sp, #64	@ 0x40
 8009754:	091a      	lsrs	r2, r3, #4
 8009756:	400a      	ands	r2, r1
 8009758:	7072      	strb	r2, [r6, #1]
                rxParamSetupReq.Datarate = payload[macIndex] & 0x0F;
 800975a:	220f      	movs	r2, #15
 800975c:	4013      	ands	r3, r2
 800975e:	7033      	strb	r3, [r6, #0]
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8009760:	1d22      	adds	r2, r4, #4
                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
 8009762:	1ce3      	adds	r3, r4, #3
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8009764:	b2db      	uxtb	r3, r3
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8009766:	b2d2      	uxtb	r2, r2
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8009768:	5cfb      	ldrb	r3, [r7, r3]
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800976a:	5cba      	ldrb	r2, [r7, r2]
 800976c:	1d65      	adds	r5, r4, #5
                macIndex++;
 800976e:	3402      	adds	r4, #2
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8009770:	0412      	lsls	r2, r2, #16
                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
 8009772:	b2e4      	uxtb	r4, r4
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8009774:	021b      	lsls	r3, r3, #8
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8009776:	4313      	orrs	r3, r2
                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
 8009778:	5d3a      	ldrb	r2, [r7, r4]
                status = RegionRxParamSetupReq( Nvm.MacGroup2.Region, &rxParamSetupReq );
 800977a:	0031      	movs	r1, r6
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800977c:	4313      	orrs	r3, r2
                rxParamSetupReq.Frequency *= 100;
 800977e:	2264      	movs	r2, #100	@ 0x64
 8009780:	4353      	muls	r3, r2
 8009782:	9311      	str	r3, [sp, #68]	@ 0x44
                status = RegionRxParamSetupReq( Nvm.MacGroup2.Region, &rxParamSetupReq );
 8009784:	4b83      	ldr	r3, [pc, #524]	@ (8009994 <ProcessMacCommands.constprop.0+0x3c4>)
 8009786:	4c7f      	ldr	r4, [pc, #508]	@ (8009984 <ProcessMacCommands.constprop.0+0x3b4>)
 8009788:	7818      	ldrb	r0, [r3, #0]
 800978a:	f002 fec7 	bl	800c51c <RegionRxParamSetupReq>
 800978e:	ab06      	add	r3, sp, #24
 8009790:	7358      	strb	r0, [r3, #13]
                if( ( status & 0x07 ) == 0x07 )
 8009792:	2307      	movs	r3, #7
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8009794:	b2ed      	uxtb	r5, r5
                if( ( status & 0x07 ) == 0x07 )
 8009796:	4003      	ands	r3, r0
 8009798:	2b07      	cmp	r3, #7
 800979a:	d10c      	bne.n	80097b6 <ProcessMacCommands.constprop.0+0x1e6>
                    Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = rxParamSetupReq.Datarate;
 800979c:	0022      	movs	r2, r4
 800979e:	7833      	ldrb	r3, [r6, #0]
 80097a0:	3268      	adds	r2, #104	@ 0x68
 80097a2:	7013      	strb	r3, [r2, #0]
                    Nvm.MacGroup2.MacParams.RxCChannel.Datarate = rxParamSetupReq.Datarate;
 80097a4:	0022      	movs	r2, r4
 80097a6:	3270      	adds	r2, #112	@ 0x70
 80097a8:	7013      	strb	r3, [r2, #0]
                    Nvm.MacGroup2.MacParams.Rx2Channel.Frequency = rxParamSetupReq.Frequency;
 80097aa:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80097ac:	6663      	str	r3, [r4, #100]	@ 0x64
                    Nvm.MacGroup2.MacParams.RxCChannel.Frequency = rxParamSetupReq.Frequency;
 80097ae:	66e3      	str	r3, [r4, #108]	@ 0x6c
                    Nvm.MacGroup2.MacParams.Rx1DrOffset = rxParamSetupReq.DrOffset;
 80097b0:	7873      	ldrb	r3, [r6, #1]
 80097b2:	3461      	adds	r4, #97	@ 0x61
 80097b4:	7023      	strb	r3, [r4, #0]
                macCmdPayload[0] = status;
 80097b6:	a90a      	add	r1, sp, #40	@ 0x28
 80097b8:	7008      	strb	r0, [r1, #0]
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_PARAM_SETUP_ANS, macCmdPayload, 1 );
 80097ba:	2201      	movs	r2, #1
 80097bc:	2005      	movs	r0, #5
                    LoRaMacCommandsAddCmd( MOTE_MAC_DL_CHANNEL_ANS, macCmdPayload, 1 );
 80097be:	f002 f80d 	bl	800b7dc <LoRaMacCommandsAddCmd>
    MacCtx.MacFlags.Bits.MlmeSchedUplinkInd = 1;
 80097c2:	2210      	movs	r2, #16
 80097c4:	4b6b      	ldr	r3, [pc, #428]	@ (8009974 <ProcessMacCommands.constprop.0+0x3a4>)
 80097c6:	4974      	ldr	r1, [pc, #464]	@ (8009998 <ProcessMacCommands.constprop.0+0x3c8>)
 80097c8:	5c58      	ldrb	r0, [r3, r1]
 80097ca:	4302      	orrs	r2, r0
 80097cc:	545a      	strb	r2, [r3, r1]
}
 80097ce:	e748      	b.n	8009662 <ProcessMacCommands.constprop.0+0x92>
                if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->GetBatteryLevel != NULL ) )
 80097d0:	22d2      	movs	r2, #210	@ 0xd2
 80097d2:	4b68      	ldr	r3, [pc, #416]	@ (8009974 <ProcessMacCommands.constprop.0+0x3a4>)
 80097d4:	0092      	lsls	r2, r2, #2
 80097d6:	589b      	ldr	r3, [r3, r2]
                uint8_t batteryLevel = BAT_LEVEL_NO_MEASURE;
 80097d8:	20ff      	movs	r0, #255	@ 0xff
                if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->GetBatteryLevel != NULL ) )
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d003      	beq.n	80097e6 <ProcessMacCommands.constprop.0+0x216>
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d000      	beq.n	80097e6 <ProcessMacCommands.constprop.0+0x216>
                    batteryLevel = MacCtx.MacCallbacks->GetBatteryLevel( );
 80097e4:	4798      	blx	r3
                macCmdPayload[0] = batteryLevel;
 80097e6:	ab06      	add	r3, sp, #24
 80097e8:	7418      	strb	r0, [r3, #16]
                macCmdPayload[1] = ( uint8_t )( snr & 0x3F );
 80097ea:	233f      	movs	r3, #63	@ 0x3f
 80097ec:	9a07      	ldr	r2, [sp, #28]
                LoRaMacCommandsAddCmd( MOTE_MAC_DEV_STATUS_ANS, macCmdPayload, 2 );
 80097ee:	2006      	movs	r0, #6
                macCmdPayload[1] = ( uint8_t )( snr & 0x3F );
 80097f0:	4013      	ands	r3, r2
 80097f2:	aa06      	add	r2, sp, #24
 80097f4:	7453      	strb	r3, [r2, #17]
                LoRaMacCommandsAddCmd( MOTE_MAC_DEV_STATUS_ANS, macCmdPayload, 2 );
 80097f6:	2202      	movs	r2, #2
 80097f8:	a90a      	add	r1, sp, #40	@ 0x28
                    LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_FREQ_ANS, macCmdPayload, 1 );
 80097fa:	f001 ffef 	bl	800b7dc <LoRaMacCommandsAddCmd>
                break;
 80097fe:	e730      	b.n	8009662 <ProcessMacCommands.constprop.0+0x92>
                chParam.Frequency = ( uint32_t ) payload[macIndex++];
 8009800:	1ce2      	adds	r2, r4, #3
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8009802:	1d20      	adds	r0, r4, #4
 8009804:	b2d2      	uxtb	r2, r2
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8009806:	b2c0      	uxtb	r0, r0
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8009808:	5cba      	ldrb	r2, [r7, r2]
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800980a:	5c38      	ldrb	r0, [r7, r0]
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800980c:	0212      	lsls	r2, r2, #8
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800980e:	0400      	lsls	r0, r0, #16
 8009810:	4310      	orrs	r0, r2
                newChannelReq.ChannelId = payload[macIndex++];
 8009812:	1ca2      	adds	r2, r4, #2
                chParam.Frequency = ( uint32_t ) payload[macIndex++];
 8009814:	b2d2      	uxtb	r2, r2
 8009816:	5cba      	ldrb	r2, [r7, r2]
                status = 0x03;
 8009818:	260d      	movs	r6, #13
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800981a:	4310      	orrs	r0, r2
                chParam.Frequency *= 100;
 800981c:	2264      	movs	r2, #100	@ 0x64
 800981e:	4342      	muls	r2, r0
                status = 0x03;
 8009820:	ab06      	add	r3, sp, #24
 8009822:	18f6      	adds	r6, r6, r3
 8009824:	2303      	movs	r3, #3
                chParam.Frequency *= 100;
 8009826:	9210      	str	r2, [sp, #64]	@ 0x40
                chParam.Rx1Frequency = 0;
 8009828:	2200      	movs	r2, #0
                status = 0x03;
 800982a:	7033      	strb	r3, [r6, #0]
                newChannelReq.ChannelId = payload[macIndex++];
 800982c:	5d7b      	ldrb	r3, [r7, r5]
                chParam.DrRange.Value = payload[macIndex++];
 800982e:	1da5      	adds	r5, r4, #6
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8009830:	3405      	adds	r4, #5
                chParam.DrRange.Value = payload[macIndex++];
 8009832:	b2e4      	uxtb	r4, r4
                chParam.Rx1Frequency = 0;
 8009834:	9211      	str	r2, [sp, #68]	@ 0x44
                newChannelReq.ChannelId = payload[macIndex++];
 8009836:	a90c      	add	r1, sp, #48	@ 0x30
                chParam.DrRange.Value = payload[macIndex++];
 8009838:	5d3a      	ldrb	r2, [r7, r4]
                newChannelReq.ChannelId = payload[macIndex++];
 800983a:	710b      	strb	r3, [r1, #4]
                newChannelReq.NewChannel = &chParam;
 800983c:	ab10      	add	r3, sp, #64	@ 0x40
 800983e:	930c      	str	r3, [sp, #48]	@ 0x30
                chParam.DrRange.Value = payload[macIndex++];
 8009840:	721a      	strb	r2, [r3, #8]
                status = ( uint8_t )RegionNewChannelReq( Nvm.MacGroup2.Region, &newChannelReq );
 8009842:	4b54      	ldr	r3, [pc, #336]	@ (8009994 <ProcessMacCommands.constprop.0+0x3c4>)
                chParam.DrRange.Value = payload[macIndex++];
 8009844:	b2ed      	uxtb	r5, r5
                status = ( uint8_t )RegionNewChannelReq( Nvm.MacGroup2.Region, &newChannelReq );
 8009846:	7818      	ldrb	r0, [r3, #0]
 8009848:	f002 fe72 	bl	800c530 <RegionNewChannelReq>
 800984c:	b2c3      	uxtb	r3, r0
 800984e:	7033      	strb	r3, [r6, #0]
                if( ( int8_t )status >= 0 )
 8009850:	2800      	cmp	r0, #0
 8009852:	da00      	bge.n	8009856 <ProcessMacCommands.constprop.0+0x286>
 8009854:	e705      	b.n	8009662 <ProcessMacCommands.constprop.0+0x92>
                    macCmdPayload[0] = status;
 8009856:	a90a      	add	r1, sp, #40	@ 0x28
                    LoRaMacCommandsAddCmd( MOTE_MAC_NEW_CHANNEL_ANS, macCmdPayload, 1 );
 8009858:	2201      	movs	r2, #1
 800985a:	2007      	movs	r0, #7
                    macCmdPayload[0] = status;
 800985c:	700b      	strb	r3, [r1, #0]
                    LoRaMacCommandsAddCmd( MOTE_MAC_NEW_CHANNEL_ANS, macCmdPayload, 1 );
 800985e:	e7cc      	b.n	80097fa <ProcessMacCommands.constprop.0+0x22a>
                uint8_t delay = payload[macIndex++] & 0x0F;
 8009860:	230f      	movs	r3, #15
 8009862:	5d7a      	ldrb	r2, [r7, r5]
 8009864:	3402      	adds	r4, #2
 8009866:	401a      	ands	r2, r3
 8009868:	b2e4      	uxtb	r4, r4
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = delay * 1000;
 800986a:	1c13      	adds	r3, r2, #0
 800986c:	2a00      	cmp	r2, #0
 800986e:	d100      	bne.n	8009872 <ProcessMacCommands.constprop.0+0x2a2>
 8009870:	2301      	movs	r3, #1
 8009872:	b2da      	uxtb	r2, r3
 8009874:	23fa      	movs	r3, #250	@ 0xfa
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 8009876:	21fa      	movs	r1, #250	@ 0xfa
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = delay * 1000;
 8009878:	009b      	lsls	r3, r3, #2
 800987a:	4353      	muls	r3, r2
 800987c:	4a41      	ldr	r2, [pc, #260]	@ (8009984 <ProcessMacCommands.constprop.0+0x3b4>)
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 800987e:	0089      	lsls	r1, r1, #2
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = delay * 1000;
 8009880:	6513      	str	r3, [r2, #80]	@ 0x50
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 8009882:	185b      	adds	r3, r3, r1
 8009884:	6553      	str	r3, [r2, #84]	@ 0x54
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_TIMING_SETUP_ANS, macCmdPayload, 0 );
 8009886:	a90a      	add	r1, sp, #40	@ 0x28
 8009888:	2200      	movs	r2, #0
 800988a:	2008      	movs	r0, #8
 800988c:	f001 ffa6 	bl	800b7dc <LoRaMacCommandsAddCmd>
    MacCtx.MacFlags.Bits.MlmeSchedUplinkInd = 1;
 8009890:	2210      	movs	r2, #16
 8009892:	4b38      	ldr	r3, [pc, #224]	@ (8009974 <ProcessMacCommands.constprop.0+0x3a4>)
 8009894:	4940      	ldr	r1, [pc, #256]	@ (8009998 <ProcessMacCommands.constprop.0+0x3c8>)
 8009896:	5c58      	ldrb	r0, [r3, r1]
 8009898:	4302      	orrs	r2, r0
 800989a:	545a      	strb	r2, [r3, r1]
 800989c:	e753      	b.n	8009746 <ProcessMacCommands.constprop.0+0x176>
                if( ( eirpDwellTime & 0x20 ) == 0x20 )
 800989e:	2101      	movs	r1, #1
                uint8_t eirpDwellTime = payload[macIndex++];
 80098a0:	3402      	adds	r4, #2
 80098a2:	b2e3      	uxtb	r3, r4
 80098a4:	9305      	str	r3, [sp, #20]
 80098a6:	5d7b      	ldrb	r3, [r7, r5]
                if( ( eirpDwellTime & 0x20 ) == 0x20 )
 80098a8:	ad0b      	add	r5, sp, #44	@ 0x2c
 80098aa:	095a      	lsrs	r2, r3, #5
 80098ac:	400a      	ands	r2, r1
 80098ae:	706a      	strb	r2, [r5, #1]
                if( ( eirpDwellTime & 0x10 ) == 0x10 )
 80098b0:	091a      	lsrs	r2, r3, #4
 80098b2:	400a      	ands	r2, r1
 80098b4:	702a      	strb	r2, [r5, #0]
                txParamSetupReq.MaxEirp = eirpDwellTime & 0x0F;
 80098b6:	220f      	movs	r2, #15
                if( RegionTxParamSetupReq( Nvm.MacGroup2.Region, &txParamSetupReq ) != -1 )
 80098b8:	4e36      	ldr	r6, [pc, #216]	@ (8009994 <ProcessMacCommands.constprop.0+0x3c4>)
                txParamSetupReq.MaxEirp = eirpDwellTime & 0x0F;
 80098ba:	4013      	ands	r3, r2
 80098bc:	70ab      	strb	r3, [r5, #2]
                if( RegionTxParamSetupReq( Nvm.MacGroup2.Region, &txParamSetupReq ) != -1 )
 80098be:	0029      	movs	r1, r5
 80098c0:	7830      	ldrb	r0, [r6, #0]
 80098c2:	4c30      	ldr	r4, [pc, #192]	@ (8009984 <ProcessMacCommands.constprop.0+0x3b4>)
 80098c4:	f002 fe3e 	bl	800c544 <RegionTxParamSetupReq>
 80098c8:	3001      	adds	r0, #1
 80098ca:	d029      	beq.n	8009920 <ProcessMacCommands.constprop.0+0x350>
                    Nvm.MacGroup2.MacParams.UplinkDwellTime = txParamSetupReq.UplinkDwellTime;
 80098cc:	782b      	ldrb	r3, [r5, #0]
 80098ce:	882a      	ldrh	r2, [r5, #0]
 80098d0:	9306      	str	r3, [sp, #24]
 80098d2:	0023      	movs	r3, r4
 80098d4:	3374      	adds	r3, #116	@ 0x74
 80098d6:	801a      	strh	r2, [r3, #0]
                    Nvm.MacGroup2.MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
 80098d8:	78aa      	ldrb	r2, [r5, #2]
 80098da:	4b30      	ldr	r3, [pc, #192]	@ (800999c <ProcessMacCommands.constprop.0+0x3cc>)
 80098dc:	5c98      	ldrb	r0, [r3, r2]
 80098de:	f7f7 f8b5 	bl	8000a4c <__aeabi_ui2f>
                    getPhy.Attribute = PHY_MIN_TX_DR;
 80098e2:	2128      	movs	r1, #40	@ 0x28
 80098e4:	2302      	movs	r3, #2
 80098e6:	aa06      	add	r2, sp, #24
 80098e8:	1852      	adds	r2, r2, r1
 80098ea:	7013      	strb	r3, [r2, #0]
                    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 80098ec:	222a      	movs	r2, #42	@ 0x2a
 80098ee:	ab06      	add	r3, sp, #24
 80098f0:	189b      	adds	r3, r3, r2
 80098f2:	9a06      	ldr	r2, [sp, #24]
                    Nvm.MacGroup2.MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
 80098f4:	67a0      	str	r0, [r4, #120]	@ 0x78
                    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 80098f6:	701a      	strb	r2, [r3, #0]
                    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80098f8:	a910      	add	r1, sp, #64	@ 0x40
 80098fa:	7830      	ldrb	r0, [r6, #0]
 80098fc:	f002 fda3 	bl	800c446 <RegionGetPhyParam>
                    Nvm.MacGroup1.ChannelsDatarate = MAX( Nvm.MacGroup1.ChannelsDatarate, ( int8_t )phyParam.Value );
 8009900:	2100      	movs	r1, #0
                    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8009902:	900c      	str	r0, [sp, #48]	@ 0x30
                    Nvm.MacGroup1.ChannelsDatarate = MAX( Nvm.MacGroup1.ChannelsDatarate, ( int8_t )phyParam.Value );
 8009904:	3439      	adds	r4, #57	@ 0x39
 8009906:	5661      	ldrsb	r1, [r4, r1]
 8009908:	1c03      	adds	r3, r0, #0
 800990a:	b240      	sxtb	r0, r0
 800990c:	7822      	ldrb	r2, [r4, #0]
 800990e:	4288      	cmp	r0, r1
 8009910:	da00      	bge.n	8009914 <ProcessMacCommands.constprop.0+0x344>
 8009912:	1c13      	adds	r3, r2, #0
                    LoRaMacCommandsAddCmd( MOTE_MAC_TX_PARAM_SETUP_ANS, macCmdPayload, 0 );
 8009914:	2200      	movs	r2, #0
 8009916:	2009      	movs	r0, #9
 8009918:	a90a      	add	r1, sp, #40	@ 0x28
                    Nvm.MacGroup1.ChannelsDatarate = MAX( Nvm.MacGroup1.ChannelsDatarate, ( int8_t )phyParam.Value );
 800991a:	7023      	strb	r3, [r4, #0]
                    LoRaMacCommandsAddCmd( MOTE_MAC_TX_PARAM_SETUP_ANS, macCmdPayload, 0 );
 800991c:	f001 ff5e 	bl	800b7dc <LoRaMacCommandsAddCmd>
                uint8_t eirpDwellTime = payload[macIndex++];
 8009920:	9d05      	ldr	r5, [sp, #20]
 8009922:	e69e      	b.n	8009662 <ProcessMacCommands.constprop.0+0x92>
                status = 0x03;
 8009924:	260d      	movs	r6, #13
 8009926:	ab06      	add	r3, sp, #24
 8009928:	18f6      	adds	r6, r6, r3
 800992a:	2303      	movs	r3, #3
 800992c:	7033      	strb	r3, [r6, #0]
                dlChannelReq.ChannelId = payload[macIndex++];
 800992e:	5d7b      	ldrb	r3, [r7, r5]
 8009930:	a910      	add	r1, sp, #64	@ 0x40
 8009932:	700b      	strb	r3, [r1, #0]
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8009934:	1d22      	adds	r2, r4, #4
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
 8009936:	1ce3      	adds	r3, r4, #3
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8009938:	b2db      	uxtb	r3, r3
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800993a:	b2d2      	uxtb	r2, r2
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800993c:	5cfb      	ldrb	r3, [r7, r3]
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800993e:	5cba      	ldrb	r2, [r7, r2]
 8009940:	1d65      	adds	r5, r4, #5
                dlChannelReq.ChannelId = payload[macIndex++];
 8009942:	3402      	adds	r4, #2
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8009944:	0412      	lsls	r2, r2, #16
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8009946:	021b      	lsls	r3, r3, #8
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
 8009948:	b2e4      	uxtb	r4, r4
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800994a:	4313      	orrs	r3, r2
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
 800994c:	5d3a      	ldrb	r2, [r7, r4]
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800994e:	b2ed      	uxtb	r5, r5
 8009950:	4313      	orrs	r3, r2
                dlChannelReq.Rx1Frequency *= 100;
 8009952:	2264      	movs	r2, #100	@ 0x64
 8009954:	4353      	muls	r3, r2
 8009956:	604b      	str	r3, [r1, #4]
                status = ( uint8_t )RegionDlChannelReq( Nvm.MacGroup2.Region, &dlChannelReq );
 8009958:	4b0e      	ldr	r3, [pc, #56]	@ (8009994 <ProcessMacCommands.constprop.0+0x3c4>)
 800995a:	7818      	ldrb	r0, [r3, #0]
 800995c:	f002 fdfc 	bl	800c558 <RegionDlChannelReq>
 8009960:	b2c3      	uxtb	r3, r0
 8009962:	7033      	strb	r3, [r6, #0]
                if( ( int8_t )status >= 0 )
 8009964:	2800      	cmp	r0, #0
 8009966:	da00      	bge.n	800996a <ProcessMacCommands.constprop.0+0x39a>
 8009968:	e67b      	b.n	8009662 <ProcessMacCommands.constprop.0+0x92>
                    macCmdPayload[0] = status;
 800996a:	a90a      	add	r1, sp, #40	@ 0x28
                    LoRaMacCommandsAddCmd( MOTE_MAC_DL_CHANNEL_ANS, macCmdPayload, 1 );
 800996c:	2201      	movs	r2, #1
 800996e:	200a      	movs	r0, #10
                    macCmdPayload[0] = status;
 8009970:	700b      	strb	r3, [r1, #0]
                    LoRaMacCommandsAddCmd( MOTE_MAC_DL_CHANNEL_ANS, macCmdPayload, 1 );
 8009972:	e724      	b.n	80097be <ProcessMacCommands.constprop.0+0x1ee>
 8009974:	20000d34 	.word	0x20000d34
 8009978:	00000454 	.word	0x00000454
 800997c:	00000455 	.word	0x00000455
 8009980:	20000ae6 	.word	0x20000ae6
 8009984:	200009e8 	.word	0x200009e8
 8009988:	20000a21 	.word	0x20000a21
 800998c:	20000a20 	.word	0x20000a20
 8009990:	20000ae7 	.word	0x20000ae7
 8009994:	20000a28 	.word	0x20000a28
 8009998:	00000481 	.word	0x00000481
 800999c:	08010755 	.word	0x08010755
                if( LoRaMacConfirmQueueIsCmdActive( MLME_DEVICE_TIME ) == true )
 80099a0:	200a      	movs	r0, #10
 80099a2:	f002 f8bf 	bl	800bb24 <LoRaMacConfirmQueueIsCmdActive>
 80099a6:	2800      	cmp	r0, #0
 80099a8:	d100      	bne.n	80099ac <ProcessMacCommands.constprop.0+0x3dc>
 80099aa:	e65a      	b.n	8009662 <ProcessMacCommands.constprop.0+0x92>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
 80099ac:	210a      	movs	r1, #10
 80099ae:	2000      	movs	r0, #0
 80099b0:	f002 f870 	bl	800ba94 <LoRaMacConfirmQueueSetStatus>
                    SysTime_t sysTime = { 0 };
 80099b4:	231e      	movs	r3, #30
 80099b6:	aa06      	add	r2, sp, #24
 80099b8:	189b      	adds	r3, r3, r2
 80099ba:	2200      	movs	r2, #0
 80099bc:	801a      	strh	r2, [r3, #0]
                    gpsEpochTime.Seconds = ( uint32_t )payload[macIndex++];
 80099be:	1ca3      	adds	r3, r4, #2
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 8;
 80099c0:	b2db      	uxtb	r3, r3
 80099c2:	5cfe      	ldrb	r6, [r7, r3]
 80099c4:	1ce3      	adds	r3, r4, #3
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 80099c6:	b2db      	uxtb	r3, r3
 80099c8:	5cfb      	ldrb	r3, [r7, r3]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 8;
 80099ca:	0236      	lsls	r6, r6, #8
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 80099cc:	041b      	lsls	r3, r3, #16
 80099ce:	431e      	orrs	r6, r3
                    gpsEpochTime.Seconds = ( uint32_t )payload[macIndex++];
 80099d0:	5d7b      	ldrb	r3, [r7, r5]
                    gpsEpochTime.SubSeconds = payload[macIndex++];
 80099d2:	1da5      	adds	r5, r4, #6
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 80099d4:	431e      	orrs	r6, r3
 80099d6:	1d23      	adds	r3, r4, #4
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 80099d8:	b2db      	uxtb	r3, r3
 80099da:	5cfb      	ldrb	r3, [r7, r3]
 80099dc:	3405      	adds	r4, #5
 80099de:	061b      	lsls	r3, r3, #24
 80099e0:	431e      	orrs	r6, r3
                    gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 80099e2:	23fa      	movs	r3, #250	@ 0xfa
                    gpsEpochTime.SubSeconds = payload[macIndex++];
 80099e4:	b2e4      	uxtb	r4, r4
                    gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 80099e6:	5d3a      	ldrb	r2, [r7, r4]
 80099e8:	009b      	lsls	r3, r3, #2
 80099ea:	4353      	muls	r3, r2
                    sysTime = gpsEpochTime;
 80099ec:	aa06      	add	r2, sp, #24
                    gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 80099ee:	121b      	asrs	r3, r3, #8
                    sysTime = gpsEpochTime;
 80099f0:	8393      	strh	r3, [r2, #28]
                    sysTimeCurrent = SysTimeGet( );
 80099f2:	a810      	add	r0, sp, #64	@ 0x40
 80099f4:	f005 fd10 	bl	800f418 <SysTimeGet>
                    sysTime.Seconds += UNIX_GPS_EPOCH_OFFSET;
 80099f8:	4b40      	ldr	r3, [pc, #256]	@ (8009afc <ProcessMacCommands.constprop.0+0x52c>)
                    sysTime = SysTimeAdd( sysTimeCurrent, SysTimeSub( sysTime, MacCtx.LastTxSysTime ) );
 80099fa:	4c41      	ldr	r4, [pc, #260]	@ (8009b00 <ProcessMacCommands.constprop.0+0x530>)
                    sysTime.Seconds += UNIX_GPS_EPOCH_OFFSET;
 80099fc:	18f1      	adds	r1, r6, r3
                    sysTime = SysTimeAdd( sysTimeCurrent, SysTimeSub( sysTime, MacCtx.LastTxSysTime ) );
 80099fe:	4b41      	ldr	r3, [pc, #260]	@ (8009b04 <ProcessMacCommands.constprop.0+0x534>)
 8009a00:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	a80e      	add	r0, sp, #56	@ 0x38
 8009a06:	9300      	str	r3, [sp, #0]
 8009a08:	23ce      	movs	r3, #206	@ 0xce
 8009a0a:	009b      	lsls	r3, r3, #2
 8009a0c:	58e3      	ldr	r3, [r4, r3]
 8009a0e:	910c      	str	r1, [sp, #48]	@ 0x30
 8009a10:	f005 fcc6 	bl	800f3a0 <SysTimeSub>
 8009a14:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009a16:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8009a18:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8009a1a:	9300      	str	r3, [sp, #0]
 8009a1c:	a80c      	add	r0, sp, #48	@ 0x30
 8009a1e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009a20:	f005 fca4 	bl	800f36c <SysTimeAdd>
                    SysTimeSet( sysTime );
 8009a24:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8009a26:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8009a28:	f005 fcd0 	bl	800f3cc <SysTimeSet>
                    LoRaMacClassBDeviceTimeAns( );
 8009a2c:	f001 fec0 	bl	800b7b0 <LoRaMacClassBDeviceTimeAns>
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = true;
 8009a30:	2201      	movs	r2, #1
 8009a32:	4b35      	ldr	r3, [pc, #212]	@ (8009b08 <ProcessMacCommands.constprop.0+0x538>)
                    gpsEpochTime.SubSeconds = payload[macIndex++];
 8009a34:	b2ed      	uxtb	r5, r5
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = true;
 8009a36:	54e2      	strb	r2, [r4, r3]
 8009a38:	e613      	b.n	8009662 <ProcessMacCommands.constprop.0+0x92>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_PING_SLOT_INFO ) == true )
 8009a3a:	200d      	movs	r0, #13
 8009a3c:	f002 f872 	bl	800bb24 <LoRaMacConfirmQueueIsCmdActive>
 8009a40:	2800      	cmp	r0, #0
 8009a42:	d100      	bne.n	8009a46 <ProcessMacCommands.constprop.0+0x476>
 8009a44:	e60d      	b.n	8009662 <ProcessMacCommands.constprop.0+0x92>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
 8009a46:	210d      	movs	r1, #13
 8009a48:	2000      	movs	r0, #0
 8009a4a:	f002 f823 	bl	800ba94 <LoRaMacConfirmQueueSetStatus>
                    if( ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_PING_SLOT ) && ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT ) )
 8009a4e:	2290      	movs	r2, #144	@ 0x90
 8009a50:	4b2b      	ldr	r3, [pc, #172]	@ (8009b00 <ProcessMacCommands.constprop.0+0x530>)
 8009a52:	00d2      	lsls	r2, r2, #3
 8009a54:	5c9b      	ldrb	r3, [r3, r2]
 8009a56:	3b04      	subs	r3, #4
 8009a58:	2b01      	cmp	r3, #1
 8009a5a:	d800      	bhi.n	8009a5e <ProcessMacCommands.constprop.0+0x48e>
 8009a5c:	e601      	b.n	8009662 <ProcessMacCommands.constprop.0+0x92>
                        LoRaMacClassBPingSlotInfoAns( );
 8009a5e:	f001 fea3 	bl	800b7a8 <LoRaMacClassBPingSlotInfoAns>
 8009a62:	e5fe      	b.n	8009662 <ProcessMacCommands.constprop.0+0x92>
                frequency = ( uint32_t )payload[macIndex++];
 8009a64:	1ca3      	adds	r3, r4, #2
                frequency |= ( uint32_t )payload[macIndex++] << 8;
 8009a66:	1ce2      	adds	r2, r4, #3
 8009a68:	b2db      	uxtb	r3, r3
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 8009a6a:	b2d2      	uxtb	r2, r2
                frequency |= ( uint32_t )payload[macIndex++] << 8;
 8009a6c:	5cfb      	ldrb	r3, [r7, r3]
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 8009a6e:	5cba      	ldrb	r2, [r7, r2]
                frequency = ( uint32_t )payload[macIndex++];
 8009a70:	5d79      	ldrb	r1, [r7, r5]
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 8009a72:	0412      	lsls	r2, r2, #16
                frequency |= ( uint32_t )payload[macIndex++] << 8;
 8009a74:	021b      	lsls	r3, r3, #8
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 8009a76:	4313      	orrs	r3, r2
 8009a78:	430b      	orrs	r3, r1
                frequency *= 100;
 8009a7a:	2164      	movs	r1, #100	@ 0x64
 8009a7c:	4359      	muls	r1, r3
                status = LoRaMacClassBPingSlotChannelReq( datarate, frequency );
 8009a7e:	230f      	movs	r3, #15
                datarate = payload[macIndex++] & 0x0F;
 8009a80:	1d65      	adds	r5, r4, #5
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 8009a82:	3404      	adds	r4, #4
                datarate = payload[macIndex++] & 0x0F;
 8009a84:	b2e4      	uxtb	r4, r4
 8009a86:	5d38      	ldrb	r0, [r7, r4]
 8009a88:	b2ed      	uxtb	r5, r5
                status = LoRaMacClassBPingSlotChannelReq( datarate, frequency );
 8009a8a:	4018      	ands	r0, r3
 8009a8c:	f001 fe8d 	bl	800b7aa <LoRaMacClassBPingSlotChannelReq>
                macCmdPayload[0] = status;
 8009a90:	a90a      	add	r1, sp, #40	@ 0x28
 8009a92:	7008      	strb	r0, [r1, #0]
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_FREQ_ANS, macCmdPayload, 1 );
 8009a94:	2201      	movs	r2, #1
 8009a96:	2011      	movs	r0, #17
 8009a98:	e6af      	b.n	80097fa <ProcessMacCommands.constprop.0+0x22a>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_TIMING ) == true )
 8009a9a:	200e      	movs	r0, #14
 8009a9c:	f002 f842 	bl	800bb24 <LoRaMacConfirmQueueIsCmdActive>
 8009aa0:	2800      	cmp	r0, #0
 8009aa2:	d100      	bne.n	8009aa6 <ProcessMacCommands.constprop.0+0x4d6>
 8009aa4:	e5dd      	b.n	8009662 <ProcessMacCommands.constprop.0+0x92>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_BEACON_TIMING );
 8009aa6:	210e      	movs	r1, #14
 8009aa8:	2000      	movs	r0, #0
 8009aaa:	f001 fff3 	bl	800ba94 <LoRaMacConfirmQueueSetStatus>
                    beaconTimingDelay = ( uint16_t )payload[macIndex++];
 8009aae:	1ca3      	adds	r3, r4, #2
                    beaconTimingDelay |= ( uint16_t )payload[macIndex++] << 8;
 8009ab0:	b2db      	uxtb	r3, r3
 8009ab2:	5cfb      	ldrb	r3, [r7, r3]
 8009ab4:	5d78      	ldrb	r0, [r7, r5]
 8009ab6:	021b      	lsls	r3, r3, #8
 8009ab8:	4318      	orrs	r0, r3
                    beaconTimingChannel = payload[macIndex++];
 8009aba:	1d25      	adds	r5, r4, #4
                    LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
 8009abc:	4b13      	ldr	r3, [pc, #76]	@ (8009b0c <ProcessMacCommands.constprop.0+0x53c>)
                    beaconTimingDelay |= ( uint16_t )payload[macIndex++] << 8;
 8009abe:	3403      	adds	r4, #3
                    beaconTimingChannel = payload[macIndex++];
 8009ac0:	b2e4      	uxtb	r4, r4
                    LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
 8009ac2:	5d39      	ldrb	r1, [r7, r4]
 8009ac4:	685a      	ldr	r2, [r3, #4]
                    beaconTimingChannel = payload[macIndex++];
 8009ac6:	b2ed      	uxtb	r5, r5
                    LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
 8009ac8:	f001 fe71 	bl	800b7ae <LoRaMacClassBBeaconTimingAns>
 8009acc:	e5c9      	b.n	8009662 <ProcessMacCommands.constprop.0+0x92>
                    frequency *= 100;
 8009ace:	2064      	movs	r0, #100	@ 0x64
                    frequency = ( uint32_t )payload[macIndex++];
 8009ad0:	5d79      	ldrb	r1, [r7, r5]
 8009ad2:	1ca3      	adds	r3, r4, #2
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 8009ad4:	1d25      	adds	r5, r4, #4
                    frequency |= ( uint32_t )payload[macIndex++] << 8;
 8009ad6:	3403      	adds	r4, #3
 8009ad8:	b2db      	uxtb	r3, r3
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 8009ada:	b2e4      	uxtb	r4, r4
                    frequency |= ( uint32_t )payload[macIndex++] << 8;
 8009adc:	5cfb      	ldrb	r3, [r7, r3]
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 8009ade:	5d3a      	ldrb	r2, [r7, r4]
                    frequency |= ( uint32_t )payload[macIndex++] << 8;
 8009ae0:	021b      	lsls	r3, r3, #8
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 8009ae2:	0412      	lsls	r2, r2, #16
 8009ae4:	4313      	orrs	r3, r2
 8009ae6:	430b      	orrs	r3, r1
                    frequency *= 100;
 8009ae8:	4358      	muls	r0, r3
                    if( LoRaMacClassBBeaconFreqReq( frequency ) == true )
 8009aea:	f001 fe62 	bl	800b7b2 <LoRaMacClassBBeaconFreqReq>
 8009aee:	a90a      	add	r1, sp, #40	@ 0x28
 8009af0:	7008      	strb	r0, [r1, #0]
                    LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_FREQ_ANS, macCmdPayload, 1 );
 8009af2:	2201      	movs	r2, #1
 8009af4:	2013      	movs	r0, #19
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 8009af6:	b2ed      	uxtb	r5, r5
                    LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_FREQ_ANS, macCmdPayload, 1 );
 8009af8:	e67f      	b.n	80097fa <ProcessMacCommands.constprop.0+0x22a>
 8009afa:	46c0      	nop			@ (mov r8, r8)
 8009afc:	12d53d80 	.word	0x12d53d80
 8009b00:	20000d34 	.word	0x20000d34
 8009b04:	20001070 	.word	0x20001070
 8009b08:	00000434 	.word	0x00000434
 8009b0c:	200009d0 	.word	0x200009d0

08009b10 <StopRetransmission.isra.0>:
    return false;
}

static bool StopRetransmission( void )
{
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 8009b10:	4b0f      	ldr	r3, [pc, #60]	@ (8009b50 <StopRetransmission.isra.0+0x40>)
 8009b12:	4a10      	ldr	r2, [pc, #64]	@ (8009b54 <StopRetransmission.isra.0+0x44>)
 8009b14:	5c9a      	ldrb	r2, [r3, r2]
 8009b16:	0792      	lsls	r2, r2, #30
 8009b18:	d503      	bpl.n	8009b22 <StopRetransmission.isra.0+0x12>
        ( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 8009b1a:	4a0f      	ldr	r2, [pc, #60]	@ (8009b58 <StopRetransmission.isra.0+0x48>)
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 8009b1c:	5c9a      	ldrb	r2, [r3, r2]
 8009b1e:	2a01      	cmp	r2, #1
 8009b20:	d907      	bls.n	8009b32 <StopRetransmission.isra.0+0x22>
          ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_2 ) ) )
    {   // Maximum repetitions without downlink. Increase ADR Ack counter.
        // Only process the case when the MAC did not receive a downlink.
        if( Nvm.MacGroup2.AdrCtrlOn == true )
 8009b22:	4a0e      	ldr	r2, [pc, #56]	@ (8009b5c <StopRetransmission.isra.0+0x4c>)
 8009b24:	490e      	ldr	r1, [pc, #56]	@ (8009b60 <StopRetransmission.isra.0+0x50>)
 8009b26:	7812      	ldrb	r2, [r2, #0]
 8009b28:	2a00      	cmp	r2, #0
 8009b2a:	d002      	beq.n	8009b32 <StopRetransmission.isra.0+0x22>
        {
            Nvm.MacGroup1.AdrAckCounter++;
 8009b2c:	6a8a      	ldr	r2, [r1, #40]	@ 0x28
 8009b2e:	3201      	adds	r2, #1
 8009b30:	628a      	str	r2, [r1, #40]	@ 0x28
        }
    }

    MacCtx.ChannelsNbTransCounter = 0;
 8009b32:	2182      	movs	r1, #130	@ 0x82
 8009b34:	2200      	movs	r2, #0
    MacCtx.NodeAckRequested = false;
    MacCtx.AckTimeoutRetry = false;
    MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8009b36:	2002      	movs	r0, #2
    MacCtx.ChannelsNbTransCounter = 0;
 8009b38:	00c9      	lsls	r1, r1, #3
 8009b3a:	545a      	strb	r2, [r3, r1]
    MacCtx.NodeAckRequested = false;
 8009b3c:	4909      	ldr	r1, [pc, #36]	@ (8009b64 <StopRetransmission.isra.0+0x54>)
 8009b3e:	545a      	strb	r2, [r3, r1]
    MacCtx.AckTimeoutRetry = false;
 8009b40:	4909      	ldr	r1, [pc, #36]	@ (8009b68 <StopRetransmission.isra.0+0x58>)
 8009b42:	545a      	strb	r2, [r3, r1]
    MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8009b44:	39d3      	subs	r1, #211	@ 0xd3
 8009b46:	585a      	ldr	r2, [r3, r1]
 8009b48:	4382      	bics	r2, r0
 8009b4a:	505a      	str	r2, [r3, r1]

    return true;
}
 8009b4c:	4770      	bx	lr
 8009b4e:	46c0      	nop			@ (mov r8, r8)
 8009b50:	20000d34 	.word	0x20000d34
 8009b54:	00000481 	.word	0x00000481
 8009b58:	0000047f 	.word	0x0000047f
 8009b5c:	20000ae6 	.word	0x20000ae6
 8009b60:	200009e8 	.word	0x200009e8
 8009b64:	00000414 	.word	0x00000414
 8009b68:	00000413 	.word	0x00000413

08009b6c <OnTxDelayedTimerEvent>:
{
 8009b6c:	b510      	push	{r4, lr}
    TimerStop( &MacCtx.TxDelayedTimer );
 8009b6e:	4810      	ldr	r0, [pc, #64]	@ (8009bb0 <OnTxDelayedTimerEvent+0x44>)
 8009b70:	f005 fdd8 	bl	800f724 <UTIL_TIMER_Stop>
    MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 8009b74:	22d0      	movs	r2, #208	@ 0xd0
 8009b76:	2120      	movs	r1, #32
 8009b78:	4c0e      	ldr	r4, [pc, #56]	@ (8009bb4 <OnTxDelayedTimerEvent+0x48>)
 8009b7a:	0092      	lsls	r2, r2, #2
 8009b7c:	58a3      	ldr	r3, [r4, r2]
    switch( ScheduleTx( true ) )
 8009b7e:	2001      	movs	r0, #1
    MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 8009b80:	438b      	bics	r3, r1
 8009b82:	50a3      	str	r3, [r4, r2]
    switch( ScheduleTx( true ) )
 8009b84:	f7ff fa4a 	bl	800901c <ScheduleTx>
 8009b88:	2800      	cmp	r0, #0
 8009b8a:	d010      	beq.n	8009bae <OnTxDelayedTimerEvent+0x42>
 8009b8c:	280b      	cmp	r0, #11
 8009b8e:	d00e      	beq.n	8009bae <OnTxDelayedTimerEvent+0x42>
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR;
 8009b90:	2009      	movs	r0, #9
            MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8009b92:	4b09      	ldr	r3, [pc, #36]	@ (8009bb8 <OnTxDelayedTimerEvent+0x4c>)
 8009b94:	781a      	ldrb	r2, [r3, #0]
 8009b96:	4b09      	ldr	r3, [pc, #36]	@ (8009bbc <OnTxDelayedTimerEvent+0x50>)
 8009b98:	54e2      	strb	r2, [r4, r3]
            MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
 8009b9a:	4b09      	ldr	r3, [pc, #36]	@ (8009bc0 <OnTxDelayedTimerEvent+0x54>)
 8009b9c:	5ce2      	ldrb	r2, [r4, r3]
 8009b9e:	4b09      	ldr	r3, [pc, #36]	@ (8009bc4 <OnTxDelayedTimerEvent+0x58>)
 8009ba0:	54e2      	strb	r2, [r4, r3]
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR;
 8009ba2:	4b09      	ldr	r3, [pc, #36]	@ (8009bc8 <OnTxDelayedTimerEvent+0x5c>)
 8009ba4:	54e0      	strb	r0, [r4, r3]
            LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR );
 8009ba6:	f001 ff9f 	bl	800bae8 <LoRaMacConfirmQueueSetStatusCmn>
            StopRetransmission( );
 8009baa:	f7ff ffb1 	bl	8009b10 <StopRetransmission.isra.0>
}
 8009bae:	bd10      	pop	{r4, pc}
 8009bb0:	2000109c 	.word	0x2000109c
 8009bb4:	20000d34 	.word	0x20000d34
 8009bb8:	20000a21 	.word	0x20000a21
 8009bbc:	0000043a 	.word	0x0000043a
 8009bc0:	00000412 	.word	0x00000412
 8009bc4:	0000043d 	.word	0x0000043d
 8009bc8:	00000439 	.word	0x00000439

08009bcc <LoRaMacIsBusy>:
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 8009bcc:	22d0      	movs	r2, #208	@ 0xd0
 8009bce:	4b06      	ldr	r3, [pc, #24]	@ (8009be8 <LoRaMacIsBusy+0x1c>)
 8009bd0:	0092      	lsls	r2, r2, #2
 8009bd2:	589a      	ldr	r2, [r3, r2]
    return true;
 8009bd4:	2001      	movs	r0, #1
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 8009bd6:	2a00      	cmp	r2, #0
 8009bd8:	d105      	bne.n	8009be6 <LoRaMacIsBusy+0x1a>
        ( MacCtx.AllowRequests == LORAMAC_REQUEST_HANDLING_ON ) )
 8009bda:	4a04      	ldr	r2, [pc, #16]	@ (8009bec <LoRaMacIsBusy+0x20>)
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 8009bdc:	5c98      	ldrb	r0, [r3, r2]
 8009bde:	3801      	subs	r0, #1
 8009be0:	1e43      	subs	r3, r0, #1
 8009be2:	4198      	sbcs	r0, r3
 8009be4:	b2c0      	uxtb	r0, r0
}
 8009be6:	4770      	bx	lr
 8009be8:	20000d34 	.word	0x20000d34
 8009bec:	00000482 	.word	0x00000482

08009bf0 <LoRaMacProcess>:
{
 8009bf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009bf2:	b0a9      	sub	sp, #164	@ 0xa4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009bf4:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8009bf8:	b672      	cpsid	i
    LoRaMacRadioEvents.Value = 0;
 8009bfa:	2100      	movs	r1, #0
    events = LoRaMacRadioEvents;
 8009bfc:	4edb      	ldr	r6, [pc, #876]	@ (8009f6c <LoRaMacProcess+0x37c>)
 8009bfe:	6833      	ldr	r3, [r6, #0]
    LoRaMacRadioEvents.Value = 0;
 8009c00:	6031      	str	r1, [r6, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009c02:	f382 8810 	msr	PRIMASK, r2
    if( events.Value != 0 )
 8009c06:	428b      	cmp	r3, r1
 8009c08:	d100      	bne.n	8009c0c <LoRaMacProcess+0x1c>
 8009c0a:	e0e1      	b.n	8009dd0 <LoRaMacProcess+0x1e0>
        if( events.Events.TxDone == 1 )
 8009c0c:	b2da      	uxtb	r2, r3
 8009c0e:	9205      	str	r2, [sp, #20]
 8009c10:	06db      	lsls	r3, r3, #27
 8009c12:	d56e      	bpl.n	8009cf2 <LoRaMacProcess+0x102>
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 8009c14:	4bd6      	ldr	r3, [pc, #856]	@ (8009f70 <LoRaMacProcess+0x380>)
 8009c16:	4cd7      	ldr	r4, [pc, #860]	@ (8009f74 <LoRaMacProcess+0x384>)
 8009c18:	781b      	ldrb	r3, [r3, #0]
 8009c1a:	2b02      	cmp	r3, #2
 8009c1c:	d002      	beq.n	8009c24 <LoRaMacProcess+0x34>
        Radio.Sleep( );
 8009c1e:	4bd6      	ldr	r3, [pc, #856]	@ (8009f78 <LoRaMacProcess+0x388>)
 8009c20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c22:	4798      	blx	r3
    TimerSetValue( &MacCtx.RxWindowTimer1, MacCtx.RxWindow1Delay );
 8009c24:	23ec      	movs	r3, #236	@ 0xec
 8009c26:	4fd5      	ldr	r7, [pc, #852]	@ (8009f7c <LoRaMacProcess+0x38c>)
 8009c28:	4dd5      	ldr	r5, [pc, #852]	@ (8009f80 <LoRaMacProcess+0x390>)
 8009c2a:	009b      	lsls	r3, r3, #2
 8009c2c:	58e9      	ldr	r1, [r5, r3]
 8009c2e:	0038      	movs	r0, r7
 8009c30:	f005 fe0a 	bl	800f848 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer1 );
 8009c34:	0038      	movs	r0, r7
 8009c36:	f005 fdc9 	bl	800f7cc <UTIL_TIMER_Start>
    TimerSetValue( &MacCtx.RxWindowTimer2, MacCtx.RxWindow2Delay );
 8009c3a:	23ed      	movs	r3, #237	@ 0xed
 8009c3c:	4fd1      	ldr	r7, [pc, #836]	@ (8009f84 <LoRaMacProcess+0x394>)
 8009c3e:	009b      	lsls	r3, r3, #2
 8009c40:	58e9      	ldr	r1, [r5, r3]
 8009c42:	0038      	movs	r0, r7
 8009c44:	f005 fe00 	bl	800f848 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer2 );
 8009c48:	0038      	movs	r0, r7
 8009c4a:	f005 fdbf 	bl	800f7cc <UTIL_TIMER_Start>
    if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) || ( MacCtx.NodeAckRequested == true ) )
 8009c4e:	0023      	movs	r3, r4
 8009c50:	33fc      	adds	r3, #252	@ 0xfc
 8009c52:	781b      	ldrb	r3, [r3, #0]
 8009c54:	4fcc      	ldr	r7, [pc, #816]	@ (8009f88 <LoRaMacProcess+0x398>)
 8009c56:	2b02      	cmp	r3, #2
 8009c58:	d002      	beq.n	8009c60 <LoRaMacProcess+0x70>
 8009c5a:	5deb      	ldrb	r3, [r5, r7]
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d013      	beq.n	8009c88 <LoRaMacProcess+0x98>
        getPhy.Attribute = PHY_ACK_TIMEOUT;
 8009c60:	2316      	movs	r3, #22
 8009c62:	a912      	add	r1, sp, #72	@ 0x48
 8009c64:	700b      	strb	r3, [r1, #0]
        phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8009c66:	0023      	movs	r3, r4
 8009c68:	3340      	adds	r3, #64	@ 0x40
 8009c6a:	7818      	ldrb	r0, [r3, #0]
 8009c6c:	f002 fbeb 	bl	800c446 <RegionGetPhyParam>
        TimerSetValue( &MacCtx.AckTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
 8009c70:	23ed      	movs	r3, #237	@ 0xed
 8009c72:	009b      	lsls	r3, r3, #2
 8009c74:	58e9      	ldr	r1, [r5, r3]
 8009c76:	4dc5      	ldr	r5, [pc, #788]	@ (8009f8c <LoRaMacProcess+0x39c>)
        phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8009c78:	9010      	str	r0, [sp, #64]	@ 0x40
        TimerSetValue( &MacCtx.AckTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
 8009c7a:	1809      	adds	r1, r1, r0
 8009c7c:	0028      	movs	r0, r5
 8009c7e:	f005 fde3 	bl	800f848 <UTIL_TIMER_SetPeriod>
        TimerStart( &MacCtx.AckTimeoutTimer );
 8009c82:	0028      	movs	r0, r5
 8009c84:	f005 fda2 	bl	800f7cc <UTIL_TIMER_Start>
    txDone.Channel = MacCtx.Channel;
 8009c88:	2058      	movs	r0, #88	@ 0x58
    Nvm.MacGroup1.LastTxDoneTime = TxDoneParams.CurTime;
 8009c8a:	6973      	ldr	r3, [r6, #20]
    txDone.Channel = MacCtx.Channel;
 8009c8c:	4ac0      	ldr	r2, [pc, #768]	@ (8009f90 <LoRaMacProcess+0x3a0>)
 8009c8e:	4ebc      	ldr	r6, [pc, #752]	@ (8009f80 <LoRaMacProcess+0x390>)
    Nvm.MacGroup1.LastTxDoneTime = TxDoneParams.CurTime;
 8009c90:	62e3      	str	r3, [r4, #44]	@ 0x2c
    txDone.Channel = MacCtx.Channel;
 8009c92:	5cb2      	ldrb	r2, [r6, r2]
 8009c94:	a906      	add	r1, sp, #24
 8009c96:	1809      	adds	r1, r1, r0
 8009c98:	700a      	strb	r2, [r1, #0]
    txDone.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 8009c9a:	a80e      	add	r0, sp, #56	@ 0x38
    txDone.LastTxDoneTime = TxDoneParams.CurTime;
 8009c9c:	931d      	str	r3, [sp, #116]	@ 0x74
    txDone.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 8009c9e:	f005 fbe3 	bl	800f468 <SysTimeGetMcuTime>
 8009ca2:	0023      	movs	r3, r4
 8009ca4:	3309      	adds	r3, #9
 8009ca6:	33ff      	adds	r3, #255	@ 0xff
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	ad08      	add	r5, sp, #32
 8009cac:	9300      	str	r3, [sp, #0]
 8009cae:	2382      	movs	r3, #130	@ 0x82
 8009cb0:	005b      	lsls	r3, r3, #1
 8009cb2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8009cb4:	0028      	movs	r0, r5
 8009cb6:	58e3      	ldr	r3, [r4, r3]
 8009cb8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8009cba:	f005 fb71 	bl	800f3a0 <SysTimeSub>
 8009cbe:	ab1f      	add	r3, sp, #124	@ 0x7c
 8009cc0:	cd06      	ldmia	r5!, {r1, r2}
 8009cc2:	c306      	stmia	r3!, {r1, r2}
    txDone.LastTxAirTime = MacCtx.TxTimeOnAir;
 8009cc4:	2383      	movs	r3, #131	@ 0x83
 8009cc6:	00db      	lsls	r3, r3, #3
 8009cc8:	58f3      	ldr	r3, [r6, r3]
 8009cca:	2159      	movs	r1, #89	@ 0x59
 8009ccc:	931e      	str	r3, [sp, #120]	@ 0x78
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 8009cce:	0023      	movs	r3, r4
 8009cd0:	33ff      	adds	r3, #255	@ 0xff
 8009cd2:	7c5b      	ldrb	r3, [r3, #17]
    RegionSetBandTxDone( Nvm.MacGroup2.Region, &txDone );
 8009cd4:	3440      	adds	r4, #64	@ 0x40
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 8009cd6:	1e5a      	subs	r2, r3, #1
 8009cd8:	4193      	sbcs	r3, r2
 8009cda:	aa06      	add	r2, sp, #24
 8009cdc:	1852      	adds	r2, r2, r1
 8009cde:	7013      	strb	r3, [r2, #0]
    RegionSetBandTxDone( Nvm.MacGroup2.Region, &txDone );
 8009ce0:	7820      	ldrb	r0, [r4, #0]
 8009ce2:	a91c      	add	r1, sp, #112	@ 0x70
 8009ce4:	f002 fbbb 	bl	800c45e <RegionSetBandTxDone>
    if( MacCtx.NodeAckRequested == false )
 8009ce8:	5df3      	ldrb	r3, [r6, r7]
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d101      	bne.n	8009cf2 <LoRaMacProcess+0x102>
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8009cee:	4aa9      	ldr	r2, [pc, #676]	@ (8009f94 <LoRaMacProcess+0x3a4>)
 8009cf0:	54b3      	strb	r3, [r6, r2]
        if( events.Events.RxDone == 1 )
 8009cf2:	9b05      	ldr	r3, [sp, #20]
 8009cf4:	071b      	lsls	r3, r3, #28
 8009cf6:	d53f      	bpl.n	8009d78 <LoRaMacProcess+0x188>
    uint8_t *payload = RxDoneParams.Payload;
 8009cf8:	4b9c      	ldr	r3, [pc, #624]	@ (8009f6c <LoRaMacProcess+0x37c>)
    MacCtx.McpsConfirm.AckReceived = false;
 8009cfa:	4ca1      	ldr	r4, [pc, #644]	@ (8009f80 <LoRaMacProcess+0x390>)
    uint8_t *payload = RxDoneParams.Payload;
 8009cfc:	689a      	ldr	r2, [r3, #8]
    uint32_t address = Nvm.MacGroup2.DevAddr;
 8009cfe:	4f9d      	ldr	r7, [pc, #628]	@ (8009f74 <LoRaMacProcess+0x384>)
    uint8_t *payload = RxDoneParams.Payload;
 8009d00:	9203      	str	r2, [sp, #12]
    uint16_t size = RxDoneParams.Size;
 8009d02:	899a      	ldrh	r2, [r3, #12]
 8009d04:	9202      	str	r2, [sp, #8]
    int16_t rssi = RxDoneParams.Rssi;
 8009d06:	220e      	movs	r2, #14
 8009d08:	5e9d      	ldrsh	r5, [r3, r2]
    int8_t snr = RxDoneParams.Snr;
 8009d0a:	7c1b      	ldrb	r3, [r3, #16]
    uint32_t address = Nvm.MacGroup2.DevAddr;
 8009d0c:	4aa2      	ldr	r2, [pc, #648]	@ (8009f98 <LoRaMacProcess+0x3a8>)
    int8_t snr = RxDoneParams.Snr;
 8009d0e:	b25b      	sxtb	r3, r3
 8009d10:	9304      	str	r3, [sp, #16]
    uint32_t downLinkCounter = 0;
 8009d12:	2300      	movs	r3, #0
    uint32_t address = Nvm.MacGroup2.DevAddr;
 8009d14:	6812      	ldr	r2, [r2, #0]
    MacCtx.RxStatus.Snr = snr;
 8009d16:	9904      	ldr	r1, [sp, #16]
    uint32_t address = Nvm.MacGroup2.DevAddr;
 8009d18:	9207      	str	r2, [sp, #28]
    MacCtx.McpsConfirm.AckReceived = false;
 8009d1a:	4aa0      	ldr	r2, [pc, #640]	@ (8009f9c <LoRaMacProcess+0x3ac>)
    uint32_t downLinkCounter = 0;
 8009d1c:	930b      	str	r3, [sp, #44]	@ 0x2c
    MacCtx.McpsConfirm.AckReceived = false;
 8009d1e:	54a3      	strb	r3, [r4, r2]
    MacCtx.RxStatus.Rssi = rssi;
 8009d20:	4a9f      	ldr	r2, [pc, #636]	@ (8009fa0 <LoRaMacProcess+0x3b0>)
 8009d22:	52a5      	strh	r5, [r4, r2]
    MacCtx.RxStatus.Snr = snr;
 8009d24:	4a9f      	ldr	r2, [pc, #636]	@ (8009fa4 <LoRaMacProcess+0x3b4>)
 8009d26:	54a1      	strb	r1, [r4, r2]
    MacCtx.RxStatus.RxSlot = MacCtx.RxSlot;
 8009d28:	3202      	adds	r2, #2
 8009d2a:	5ca2      	ldrb	r2, [r4, r2]
 8009d2c:	499e      	ldr	r1, [pc, #632]	@ (8009fa8 <LoRaMacProcess+0x3b8>)
 8009d2e:	5462      	strb	r2, [r4, r1]
    MacCtx.McpsIndication.Multicast = 0;
 8009d30:	4a9e      	ldr	r2, [pc, #632]	@ (8009fac <LoRaMacProcess+0x3bc>)
 8009d32:	52a3      	strh	r3, [r4, r2]
    MacCtx.McpsIndication.FramePending = 0;
 8009d34:	4a9e      	ldr	r2, [pc, #632]	@ (8009fb0 <LoRaMacProcess+0x3c0>)
 8009d36:	54a3      	strb	r3, [r4, r2]
    MacCtx.McpsIndication.Buffer = NULL;
 8009d38:	4a9e      	ldr	r2, [pc, #632]	@ (8009fb4 <LoRaMacProcess+0x3c4>)
 8009d3a:	50a3      	str	r3, [r4, r2]
    MacCtx.McpsIndication.BufferSize = 0;
 8009d3c:	3204      	adds	r2, #4
 8009d3e:	52a3      	strh	r3, [r4, r2]
    MacCtx.McpsIndication.AckReceived = false;
 8009d40:	4a9d      	ldr	r2, [pc, #628]	@ (8009fb8 <LoRaMacProcess+0x3c8>)
 8009d42:	54a3      	strb	r3, [r4, r2]
    MacCtx.McpsIndication.DownLinkCounter = 0;
 8009d44:	4a9d      	ldr	r2, [pc, #628]	@ (8009fbc <LoRaMacProcess+0x3cc>)
 8009d46:	50a3      	str	r3, [r4, r2]
    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 8009d48:	4a9d      	ldr	r2, [pc, #628]	@ (8009fc0 <LoRaMacProcess+0x3d0>)
 8009d4a:	54a3      	strb	r3, [r4, r2]
    MacCtx.McpsIndication.DevAddress = 0;
 8009d4c:	3214      	adds	r2, #20
 8009d4e:	50a3      	str	r3, [r4, r2]
    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 8009d50:	4a9c      	ldr	r2, [pc, #624]	@ (8009fc4 <LoRaMacProcess+0x3d4>)
 8009d52:	54a3      	strb	r3, [r4, r2]
    Radio.Sleep( );
 8009d54:	4b88      	ldr	r3, [pc, #544]	@ (8009f78 <LoRaMacProcess+0x388>)
 8009d56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d58:	4798      	blx	r3
    TimerStop( &MacCtx.RxWindowTimer2 );
 8009d5a:	488a      	ldr	r0, [pc, #552]	@ (8009f84 <LoRaMacProcess+0x394>)
 8009d5c:	f005 fce2 	bl	800f724 <UTIL_TIMER_Stop>
    if( LoRaMacClassBRxBeacon( payload, size ) == true )
 8009d60:	9902      	ldr	r1, [sp, #8]
 8009d62:	9803      	ldr	r0, [sp, #12]
 8009d64:	f001 fd0d 	bl	800b782 <LoRaMacClassBRxBeacon>
 8009d68:	1e06      	subs	r6, r0, #0
 8009d6a:	d100      	bne.n	8009d6e <LoRaMacProcess+0x17e>
 8009d6c:	e186      	b.n	800a07c <LoRaMacProcess+0x48c>
        MacCtx.MlmeIndication.BeaconInfo.Rssi = rssi;
 8009d6e:	4b96      	ldr	r3, [pc, #600]	@ (8009fc8 <LoRaMacProcess+0x3d8>)
        MacCtx.MlmeIndication.BeaconInfo.Snr = snr;
 8009d70:	9a04      	ldr	r2, [sp, #16]
        MacCtx.MlmeIndication.BeaconInfo.Rssi = rssi;
 8009d72:	52e5      	strh	r5, [r4, r3]
        MacCtx.MlmeIndication.BeaconInfo.Snr = snr;
 8009d74:	4b95      	ldr	r3, [pc, #596]	@ (8009fcc <LoRaMacProcess+0x3dc>)
 8009d76:	54e2      	strb	r2, [r4, r3]
        if( events.Events.TxTimeout == 1 )
 8009d78:	9b05      	ldr	r3, [sp, #20]
 8009d7a:	075b      	lsls	r3, r3, #29
 8009d7c:	d51a      	bpl.n	8009db4 <LoRaMacProcess+0x1c4>
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 8009d7e:	4b7c      	ldr	r3, [pc, #496]	@ (8009f70 <LoRaMacProcess+0x380>)
 8009d80:	781b      	ldrb	r3, [r3, #0]
 8009d82:	2b02      	cmp	r3, #2
 8009d84:	d002      	beq.n	8009d8c <LoRaMacProcess+0x19c>
        Radio.Sleep( );
 8009d86:	4b7c      	ldr	r3, [pc, #496]	@ (8009f78 <LoRaMacProcess+0x388>)
 8009d88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d8a:	4798      	blx	r3
    UpdateRxSlotIdleState( );
 8009d8c:	f7fe ff24 	bl	8008bd8 <UpdateRxSlotIdleState>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT;
 8009d90:	2002      	movs	r0, #2
 8009d92:	4c7b      	ldr	r4, [pc, #492]	@ (8009f80 <LoRaMacProcess+0x390>)
 8009d94:	4b7f      	ldr	r3, [pc, #508]	@ (8009f94 <LoRaMacProcess+0x3a4>)
 8009d96:	54e0      	strb	r0, [r4, r3]
    LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT );
 8009d98:	f001 fea6 	bl	800bae8 <LoRaMacConfirmQueueSetStatusCmn>
    if( MacCtx.NodeAckRequested == true )
 8009d9c:	4b7a      	ldr	r3, [pc, #488]	@ (8009f88 <LoRaMacProcess+0x398>)
 8009d9e:	5ce3      	ldrb	r3, [r4, r3]
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d002      	beq.n	8009daa <LoRaMacProcess+0x1ba>
        MacCtx.AckTimeoutRetry = true;
 8009da4:	2201      	movs	r2, #1
 8009da6:	4b8a      	ldr	r3, [pc, #552]	@ (8009fd0 <LoRaMacProcess+0x3e0>)
 8009da8:	54e2      	strb	r2, [r4, r3]
    MacCtx.MacFlags.Bits.MacDone = 1;
 8009daa:	2320      	movs	r3, #32
 8009dac:	4989      	ldr	r1, [pc, #548]	@ (8009fd4 <LoRaMacProcess+0x3e4>)
 8009dae:	5c62      	ldrb	r2, [r4, r1]
 8009db0:	4313      	orrs	r3, r2
 8009db2:	5463      	strb	r3, [r4, r1]
        if( events.Events.RxError == 1 )
 8009db4:	9b05      	ldr	r3, [sp, #20]
 8009db6:	079b      	lsls	r3, r3, #30
 8009db8:	d503      	bpl.n	8009dc2 <LoRaMacProcess+0x1d2>
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_ERROR, LORAMAC_EVENT_INFO_STATUS_RX2_ERROR );
 8009dba:	2106      	movs	r1, #6
 8009dbc:	2005      	movs	r0, #5
 8009dbe:	f7fe ff7b 	bl	8008cb8 <HandleRadioRxErrorTimeout>
        if( events.Events.RxTimeout == 1 )
 8009dc2:	9b05      	ldr	r3, [sp, #20]
 8009dc4:	07db      	lsls	r3, r3, #31
 8009dc6:	d503      	bpl.n	8009dd0 <LoRaMacProcess+0x1e0>
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_TIMEOUT, LORAMAC_EVENT_INFO_STATUS_RX2_TIMEOUT );
 8009dc8:	2104      	movs	r1, #4
 8009dca:	2003      	movs	r0, #3
 8009dcc:	f7fe ff74 	bl	8008cb8 <HandleRadioRxErrorTimeout>
    LoRaMacClassBProcess( );
 8009dd0:	f001 fcf4 	bl	800b7bc <LoRaMacClassBProcess>
    if( MacCtx.MacFlags.Bits.MacDone == 1 )
 8009dd4:	4c6a      	ldr	r4, [pc, #424]	@ (8009f80 <LoRaMacProcess+0x390>)
 8009dd6:	4b7f      	ldr	r3, [pc, #508]	@ (8009fd4 <LoRaMacProcess+0x3e4>)
 8009dd8:	5ce2      	ldrb	r2, [r4, r3]
 8009dda:	0693      	lsls	r3, r2, #26
 8009ddc:	d400      	bmi.n	8009de0 <LoRaMacProcess+0x1f0>
 8009dde:	e117      	b.n	800a010 <LoRaMacProcess+0x420>
    if( ( MacCtx.MacState & LORAMAC_RX_ABORT ) == LORAMAC_RX_ABORT )
 8009de0:	21d0      	movs	r1, #208	@ 0xd0
    MacCtx.AllowRequests = requestState;
 8009de2:	2300      	movs	r3, #0
 8009de4:	4d7c      	ldr	r5, [pc, #496]	@ (8009fd8 <LoRaMacProcess+0x3e8>)
    if( ( MacCtx.MacState & LORAMAC_RX_ABORT ) == LORAMAC_RX_ABORT )
 8009de6:	0089      	lsls	r1, r1, #2
    MacCtx.AllowRequests = requestState;
 8009de8:	5563      	strb	r3, [r4, r5]
    if( ( MacCtx.MacState & LORAMAC_RX_ABORT ) == LORAMAC_RX_ABORT )
 8009dea:	5863      	ldr	r3, [r4, r1]
 8009dec:	0618      	lsls	r0, r3, #24
 8009dee:	d502      	bpl.n	8009df6 <LoRaMacProcess+0x206>
        MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8009df0:	2082      	movs	r0, #130	@ 0x82
 8009df2:	4383      	bics	r3, r0
 8009df4:	5063      	str	r3, [r4, r1]
    MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
}

static uint8_t IsRequestPending( void )
{
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 8009df6:	2305      	movs	r3, #5
 8009df8:	421a      	tst	r2, r3
 8009dfa:	d100      	bne.n	8009dfe <LoRaMacProcess+0x20e>
 8009dfc:	e37d      	b.n	800a4fa <LoRaMacProcess+0x90a>
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 8009dfe:	200c      	movs	r0, #12
 8009e00:	f001 fe90 	bl	800bb24 <LoRaMacConfirmQueueIsCmdActive>
 8009e04:	2800      	cmp	r0, #0
 8009e06:	d100      	bne.n	8009e0a <LoRaMacProcess+0x21a>
 8009e08:	e377      	b.n	800a4fa <LoRaMacProcess+0x90a>
        ( MacCtx.MacFlags.Bits.McpsReq == 0 ) )
 8009e0a:	4b72      	ldr	r3, [pc, #456]	@ (8009fd4 <LoRaMacProcess+0x3e4>)
 8009e0c:	5ce3      	ldrb	r3, [r4, r3]
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 8009e0e:	07da      	lsls	r2, r3, #31
 8009e10:	d500      	bpl.n	8009e14 <LoRaMacProcess+0x224>
 8009e12:	e372      	b.n	800a4fa <LoRaMacProcess+0x90a>
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 8009e14:	075b      	lsls	r3, r3, #29
 8009e16:	d400      	bmi.n	8009e1a <LoRaMacProcess+0x22a>
 8009e18:	e386      	b.n	800a528 <LoRaMacProcess+0x938>
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8009e1a:	22d0      	movs	r2, #208	@ 0xd0
 8009e1c:	2102      	movs	r1, #2
 8009e1e:	0092      	lsls	r2, r2, #2
 8009e20:	58a3      	ldr	r3, [r4, r2]
 8009e22:	438b      	bics	r3, r1
 8009e24:	50a3      	str	r3, [r4, r2]
    if( MacCtx.MacState == LORAMAC_IDLE )
 8009e26:	23d0      	movs	r3, #208	@ 0xd0
 8009e28:	009b      	lsls	r3, r3, #2
        if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 8009e2a:	4a6a      	ldr	r2, [pc, #424]	@ (8009fd4 <LoRaMacProcess+0x3e4>)
    if( MacCtx.MacState == LORAMAC_IDLE )
 8009e2c:	58e3      	ldr	r3, [r4, r3]
        if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 8009e2e:	5ca7      	ldrb	r7, [r4, r2]
    if( MacCtx.MacState == LORAMAC_IDLE )
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d000      	beq.n	8009e36 <LoRaMacProcess+0x246>
 8009e34:	e0ea      	b.n	800a00c <LoRaMacProcess+0x41c>
        if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 8009e36:	0039      	movs	r1, r7
 8009e38:	3301      	adds	r3, #1
 8009e3a:	4019      	ands	r1, r3
 8009e3c:	421f      	tst	r7, r3
 8009e3e:	d002      	beq.n	8009e46 <LoRaMacProcess+0x256>
            MacCtx.MacFlags.Bits.McpsReq = 0;
 8009e40:	0038      	movs	r0, r7
 8009e42:	4398      	bics	r0, r3
 8009e44:	54a0      	strb	r0, [r4, r2]
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 8009e46:	2204      	movs	r2, #4
 8009e48:	4862      	ldr	r0, [pc, #392]	@ (8009fd4 <LoRaMacProcess+0x3e4>)
 8009e4a:	5c23      	ldrb	r3, [r4, r0]
 8009e4c:	4213      	tst	r3, r2
 8009e4e:	d001      	beq.n	8009e54 <LoRaMacProcess+0x264>
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 8009e50:	4393      	bics	r3, r2
 8009e52:	5423      	strb	r3, [r4, r0]
    MacCtx.AllowRequests = requestState;
 8009e54:	2301      	movs	r3, #1
 8009e56:	5563      	strb	r3, [r4, r5]
        if( reqEvents.Bits.McpsReq == 1 )
 8009e58:	2900      	cmp	r1, #0
 8009e5a:	d005      	beq.n	8009e68 <LoRaMacProcess+0x278>
            MacCtx.MacPrimitives->MacMcpsConfirm( &MacCtx.McpsConfirm );
 8009e5c:	23d1      	movs	r3, #209	@ 0xd1
 8009e5e:	009b      	lsls	r3, r3, #2
 8009e60:	58e3      	ldr	r3, [r4, r3]
 8009e62:	485e      	ldr	r0, [pc, #376]	@ (8009fdc <LoRaMacProcess+0x3ec>)
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	4798      	blx	r3
        if( reqEvents.Bits.MlmeReq == 1 )
 8009e68:	2604      	movs	r6, #4
 8009e6a:	4237      	tst	r7, r6
 8009e6c:	d00a      	beq.n	8009e84 <LoRaMacProcess+0x294>
            LoRaMacConfirmQueueHandleCb( &MacCtx.MlmeConfirm );
 8009e6e:	485c      	ldr	r0, [pc, #368]	@ (8009fe0 <LoRaMacProcess+0x3f0>)
 8009e70:	f001 fe64 	bl	800bb3c <LoRaMacConfirmQueueHandleCb>
            if( LoRaMacConfirmQueueGetCnt( ) > 0 )
 8009e74:	f001 fe90 	bl	800bb98 <LoRaMacConfirmQueueGetCnt>
 8009e78:	2800      	cmp	r0, #0
 8009e7a:	d003      	beq.n	8009e84 <LoRaMacProcess+0x294>
                MacCtx.MacFlags.Bits.MlmeReq = 1;
 8009e7c:	4a55      	ldr	r2, [pc, #340]	@ (8009fd4 <LoRaMacProcess+0x3e4>)
 8009e7e:	5ca3      	ldrb	r3, [r4, r2]
 8009e80:	431e      	orrs	r6, r3
 8009e82:	54a6      	strb	r6, [r4, r2]
        LoRaMacClassBResumeBeaconing( );
 8009e84:	f001 fc89 	bl	800b79a <LoRaMacClassBResumeBeaconing>
    if( MacCtx.MacState == LORAMAC_IDLE )
 8009e88:	26d0      	movs	r6, #208	@ 0xd0
        MacCtx.MacFlags.Bits.MacDone = 0;
 8009e8a:	2220      	movs	r2, #32
 8009e8c:	4f51      	ldr	r7, [pc, #324]	@ (8009fd4 <LoRaMacProcess+0x3e4>)
    if( MacCtx.MacState == LORAMAC_IDLE )
 8009e8e:	00b6      	lsls	r6, r6, #2
        MacCtx.MacFlags.Bits.MacDone = 0;
 8009e90:	5de3      	ldrb	r3, [r4, r7]
 8009e92:	4393      	bics	r3, r2
 8009e94:	55e3      	strb	r3, [r4, r7]
    if( MacCtx.MacState == LORAMAC_IDLE )
 8009e96:	59a3      	ldr	r3, [r4, r6]
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d000      	beq.n	8009e9e <LoRaMacProcess+0x2ae>
 8009e9c:	e0b6      	b.n	800a00c <LoRaMacProcess+0x41c>
        bool isStickyMacCommandPending = false;
 8009e9e:	3238      	adds	r2, #56	@ 0x38
 8009ea0:	a906      	add	r1, sp, #24
 8009ea2:	1889      	adds	r1, r1, r2
 8009ea4:	700b      	strb	r3, [r1, #0]
        LoRaMacCommandsStickyCmdsPending( &isStickyMacCommandPending );
 8009ea6:	a81c      	add	r0, sp, #112	@ 0x70
 8009ea8:	f001 fd68 	bl	800b97c <LoRaMacCommandsStickyCmdsPending>
        if( isStickyMacCommandPending == true )
 8009eac:	2258      	movs	r2, #88	@ 0x58
 8009eae:	ab06      	add	r3, sp, #24
 8009eb0:	189b      	adds	r3, r3, r2
 8009eb2:	781b      	ldrb	r3, [r3, #0]
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d003      	beq.n	8009ec0 <LoRaMacProcess+0x2d0>
    MacCtx.MacFlags.Bits.MlmeSchedUplinkInd = 1;
 8009eb8:	2310      	movs	r3, #16
 8009eba:	5de2      	ldrb	r2, [r4, r7]
 8009ebc:	4313      	orrs	r3, r2
 8009ebe:	55e3      	strb	r3, [r4, r7]
    if( MacCtx.MacState != LORAMAC_IDLE )
 8009ec0:	59a6      	ldr	r6, [r4, r6]
 8009ec2:	2e00      	cmp	r6, #0
 8009ec4:	d000      	beq.n	8009ec8 <LoRaMacProcess+0x2d8>
 8009ec6:	e0a1      	b.n	800a00c <LoRaMacProcess+0x41c>
    crc = Crc32( ( uint8_t* ) &nvmData->Crypto, sizeof( nvmData->Crypto ) -
 8009ec8:	4f2a      	ldr	r7, [pc, #168]	@ (8009f74 <LoRaMacProcess+0x384>)
 8009eca:	2124      	movs	r1, #36	@ 0x24
 8009ecc:	0038      	movs	r0, r7
 8009ece:	f003 fc73 	bl	800d7b8 <Crc32>
    if( crc != nvmData->Crypto.Crc32 )
 8009ed2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ed4:	4298      	cmp	r0, r3
 8009ed6:	d001      	beq.n	8009edc <LoRaMacProcess+0x2ec>
        nvmData->Crypto.Crc32 = crc;
 8009ed8:	6278      	str	r0, [r7, #36]	@ 0x24
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CRYPTO;
 8009eda:	3601      	adds	r6, #1
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup1, sizeof( nvmData->MacGroup1 ) -
 8009edc:	2114      	movs	r1, #20
 8009ede:	4841      	ldr	r0, [pc, #260]	@ (8009fe4 <LoRaMacProcess+0x3f4>)
 8009ee0:	f003 fc6a 	bl	800d7b8 <Crc32>
    if( crc != nvmData->MacGroup1.Crc32 )
 8009ee4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009ee6:	4298      	cmp	r0, r3
 8009ee8:	d002      	beq.n	8009ef0 <LoRaMacProcess+0x300>
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP1;
 8009eea:	2302      	movs	r3, #2
        nvmData->MacGroup1.Crc32 = crc;
 8009eec:	63f8      	str	r0, [r7, #60]	@ 0x3c
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP1;
 8009eee:	431e      	orrs	r6, r3
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup2, sizeof( nvmData->MacGroup2 ) -
 8009ef0:	21d4      	movs	r1, #212	@ 0xd4
 8009ef2:	483d      	ldr	r0, [pc, #244]	@ (8009fe8 <LoRaMacProcess+0x3f8>)
 8009ef4:	f003 fc60 	bl	800d7b8 <Crc32>
    if( crc != nvmData->MacGroup2.Crc32 )
 8009ef8:	003b      	movs	r3, r7
 8009efa:	33fc      	adds	r3, #252	@ 0xfc
 8009efc:	699a      	ldr	r2, [r3, #24]
 8009efe:	4290      	cmp	r0, r2
 8009f00:	d002      	beq.n	8009f08 <LoRaMacProcess+0x318>
        nvmData->MacGroup2.Crc32 = crc;
 8009f02:	6198      	str	r0, [r3, #24]
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP2;
 8009f04:	2304      	movs	r3, #4
 8009f06:	431e      	orrs	r6, r3
    crc = Crc32( ( uint8_t* ) &nvmData->SecureElement, sizeof( nvmData->SecureElement ) -
 8009f08:	21bc      	movs	r1, #188	@ 0xbc
 8009f0a:	4838      	ldr	r0, [pc, #224]	@ (8009fec <LoRaMacProcess+0x3fc>)
 8009f0c:	f003 fc54 	bl	800d7b8 <Crc32>
    if( crc != nvmData->SecureElement.Crc32 )
 8009f10:	23ea      	movs	r3, #234	@ 0xea
 8009f12:	005b      	lsls	r3, r3, #1
 8009f14:	58fa      	ldr	r2, [r7, r3]
 8009f16:	4290      	cmp	r0, r2
 8009f18:	d003      	beq.n	8009f22 <LoRaMacProcess+0x332>
        nvmData->SecureElement.Crc32 = crc;
 8009f1a:	50f8      	str	r0, [r7, r3]
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_SECURE_ELEMENT;
 8009f1c:	3bcd      	subs	r3, #205	@ 0xcd
 8009f1e:	3bff      	subs	r3, #255	@ 0xff
 8009f20:	431e      	orrs	r6, r3
    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup1, sizeof( nvmData->RegionGroup1 ) -
 8009f22:	2190      	movs	r1, #144	@ 0x90
 8009f24:	4832      	ldr	r0, [pc, #200]	@ (8009ff0 <LoRaMacProcess+0x400>)
 8009f26:	f003 fc47 	bl	800d7b8 <Crc32>
    if( crc != nvmData->RegionGroup1.Crc32 )
 8009f2a:	239a      	movs	r3, #154	@ 0x9a
 8009f2c:	009b      	lsls	r3, r3, #2
 8009f2e:	58fa      	ldr	r2, [r7, r3]
 8009f30:	4290      	cmp	r0, r2
 8009f32:	d002      	beq.n	8009f3a <LoRaMacProcess+0x34a>
        nvmData->RegionGroup1.Crc32 = crc;
 8009f34:	50f8      	str	r0, [r7, r3]
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP1;
 8009f36:	2310      	movs	r3, #16
 8009f38:	431e      	orrs	r6, r3
    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup2, sizeof( nvmData->RegionGroup2 ) -
 8009f3a:	21c4      	movs	r1, #196	@ 0xc4
 8009f3c:	482d      	ldr	r0, [pc, #180]	@ (8009ff4 <LoRaMacProcess+0x404>)
 8009f3e:	f003 fc3b 	bl	800d7b8 <Crc32>
    if( crc != nvmData->RegionGroup2.Crc32 )
 8009f42:	23cc      	movs	r3, #204	@ 0xcc
 8009f44:	009b      	lsls	r3, r3, #2
 8009f46:	58fa      	ldr	r2, [r7, r3]
 8009f48:	4290      	cmp	r0, r2
 8009f4a:	d002      	beq.n	8009f52 <LoRaMacProcess+0x362>
        nvmData->RegionGroup2.Crc32 = crc;
 8009f4c:	50f8      	str	r0, [r7, r3]
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP2;
 8009f4e:	2320      	movs	r3, #32
 8009f50:	431e      	orrs	r6, r3
    crc = Crc32( ( uint8_t* ) &nvmData->ClassB, sizeof( nvmData->ClassB ) -
 8009f52:	2114      	movs	r1, #20
 8009f54:	4828      	ldr	r0, [pc, #160]	@ (8009ff8 <LoRaMacProcess+0x408>)
 8009f56:	f003 fc2f 	bl	800d7b8 <Crc32>
    if( crc != nvmData->ClassB.Crc32 )
 8009f5a:	23d2      	movs	r3, #210	@ 0xd2
 8009f5c:	009b      	lsls	r3, r3, #2
 8009f5e:	58fa      	ldr	r2, [r7, r3]
 8009f60:	4290      	cmp	r0, r2
 8009f62:	d04b      	beq.n	8009ffc <LoRaMacProcess+0x40c>
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CLASS_B;
 8009f64:	2240      	movs	r2, #64	@ 0x40
        nvmData->ClassB.Crc32 = crc;
 8009f66:	50f8      	str	r0, [r7, r3]
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CLASS_B;
 8009f68:	4316      	orrs	r6, r2
 8009f6a:	e047      	b.n	8009ffc <LoRaMacProcess+0x40c>
 8009f6c:	200009d0 	.word	0x200009d0
 8009f70:	20000ae4 	.word	0x20000ae4
 8009f74:	200009e8 	.word	0x200009e8
 8009f78:	080108d8 	.word	0x080108d8
 8009f7c:	200010b4 	.word	0x200010b4
 8009f80:	20000d34 	.word	0x20000d34
 8009f84:	200010cc 	.word	0x200010cc
 8009f88:	00000414 	.word	0x00000414
 8009f8c:	2000112c 	.word	0x2000112c
 8009f90:	00000415 	.word	0x00000415
 8009f94:	00000439 	.word	0x00000439
 8009f98:	20000ab4 	.word	0x20000ab4
 8009f9c:	0000043c 	.word	0x0000043c
 8009fa0:	0000047c 	.word	0x0000047c
 8009fa4:	0000047e 	.word	0x0000047e
 8009fa8:	0000047f 	.word	0x0000047f
 8009fac:	0000041e 	.word	0x0000041e
 8009fb0:	00000421 	.word	0x00000421
 8009fb4:	00000424 	.word	0x00000424
 8009fb8:	0000042a 	.word	0x0000042a
 8009fbc:	0000042c 	.word	0x0000042c
 8009fc0:	0000041c 	.word	0x0000041c
 8009fc4:	00000434 	.word	0x00000434
 8009fc8:	00000472 	.word	0x00000472
 8009fcc:	00000474 	.word	0x00000474
 8009fd0:	00000413 	.word	0x00000413
 8009fd4:	00000481 	.word	0x00000481
 8009fd8:	00000482 	.word	0x00000482
 8009fdc:	2000116c 	.word	0x2000116c
 8009fe0:	20001180 	.word	0x20001180
 8009fe4:	20000a10 	.word	0x20000a10
 8009fe8:	20000a28 	.word	0x20000a28
 8009fec:	20000b00 	.word	0x20000b00
 8009ff0:	20000bc0 	.word	0x20000bc0
 8009ff4:	20000c54 	.word	0x20000c54
 8009ff8:	20000d1c 	.word	0x20000d1c
    if( ( MacCtx.MacCallbacks != NULL ) &&
 8009ffc:	58e3      	ldr	r3, [r4, r3]
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d004      	beq.n	800a00c <LoRaMacProcess+0x41c>
        ( MacCtx.MacCallbacks->NvmDataChange  != NULL ) )
 800a002:	68db      	ldr	r3, [r3, #12]
    if( ( MacCtx.MacCallbacks != NULL ) &&
 800a004:	2b00      	cmp	r3, #0
 800a006:	d001      	beq.n	800a00c <LoRaMacProcess+0x41c>
        MacCtx.MacCallbacks->NvmDataChange ( notifyFlags );
 800a008:	0030      	movs	r0, r6
 800a00a:	4798      	blx	r3
    MacCtx.AllowRequests = requestState;
 800a00c:	2301      	movs	r3, #1
 800a00e:	5563      	strb	r3, [r4, r5]
    if( MacCtx.MacFlags.Bits.MlmeInd == 1 )
 800a010:	2208      	movs	r2, #8
 800a012:	49a2      	ldr	r1, [pc, #648]	@ (800a29c <LoRaMacProcess+0x6ac>)
 800a014:	5c63      	ldrb	r3, [r4, r1]
 800a016:	4213      	tst	r3, r2
 800a018:	d008      	beq.n	800a02c <LoRaMacProcess+0x43c>
        MacCtx.MacFlags.Bits.MlmeInd = 0;
 800a01a:	4393      	bics	r3, r2
 800a01c:	5463      	strb	r3, [r4, r1]
        MacCtx.MacPrimitives->MacMlmeIndication( &MacCtx.MlmeIndication, &MacCtx.RxStatus );
 800a01e:	23d1      	movs	r3, #209	@ 0xd1
 800a020:	009b      	lsls	r3, r3, #2
 800a022:	58e3      	ldr	r3, [r4, r3]
 800a024:	499e      	ldr	r1, [pc, #632]	@ (800a2a0 <LoRaMacProcess+0x6b0>)
 800a026:	489f      	ldr	r0, [pc, #636]	@ (800a2a4 <LoRaMacProcess+0x6b4>)
 800a028:	68db      	ldr	r3, [r3, #12]
 800a02a:	4798      	blx	r3
    if( MacCtx.MacFlags.Bits.MlmeSchedUplinkInd == 1 )
 800a02c:	2510      	movs	r5, #16
 800a02e:	4e9b      	ldr	r6, [pc, #620]	@ (800a29c <LoRaMacProcess+0x6ac>)
 800a030:	5da3      	ldrb	r3, [r4, r6]
 800a032:	422b      	tst	r3, r5
 800a034:	d00b      	beq.n	800a04e <LoRaMacProcess+0x45e>
        schduleUplinkIndication.MlmeIndication = MLME_SCHEDULE_UPLINK;
 800a036:	2307      	movs	r3, #7
 800a038:	a81c      	add	r0, sp, #112	@ 0x70
 800a03a:	8003      	strh	r3, [r0, #0]
        MacCtx.MacPrimitives->MacMlmeIndication( &schduleUplinkIndication, &MacCtx.RxStatus );
 800a03c:	23d1      	movs	r3, #209	@ 0xd1
 800a03e:	009b      	lsls	r3, r3, #2
 800a040:	58e3      	ldr	r3, [r4, r3]
 800a042:	4997      	ldr	r1, [pc, #604]	@ (800a2a0 <LoRaMacProcess+0x6b0>)
 800a044:	68db      	ldr	r3, [r3, #12]
 800a046:	4798      	blx	r3
        MacCtx.MacFlags.Bits.MlmeSchedUplinkInd = 0;
 800a048:	5da3      	ldrb	r3, [r4, r6]
 800a04a:	43ab      	bics	r3, r5
 800a04c:	55a3      	strb	r3, [r4, r6]
    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 800a04e:	2202      	movs	r2, #2
 800a050:	4992      	ldr	r1, [pc, #584]	@ (800a29c <LoRaMacProcess+0x6ac>)
 800a052:	5c63      	ldrb	r3, [r4, r1]
 800a054:	4213      	tst	r3, r2
 800a056:	d008      	beq.n	800a06a <LoRaMacProcess+0x47a>
        MacCtx.MacFlags.Bits.McpsInd = 0;
 800a058:	4393      	bics	r3, r2
 800a05a:	5463      	strb	r3, [r4, r1]
        MacCtx.MacPrimitives->MacMcpsIndication( &MacCtx.McpsIndication, &MacCtx.RxStatus );
 800a05c:	23d1      	movs	r3, #209	@ 0xd1
 800a05e:	009b      	lsls	r3, r3, #2
 800a060:	58e3      	ldr	r3, [r4, r3]
 800a062:	498f      	ldr	r1, [pc, #572]	@ (800a2a0 <LoRaMacProcess+0x6b0>)
 800a064:	4890      	ldr	r0, [pc, #576]	@ (800a2a8 <LoRaMacProcess+0x6b8>)
 800a066:	685b      	ldr	r3, [r3, #4]
 800a068:	4798      	blx	r3
    if( MacCtx.RxSlot == RX_SLOT_WIN_CLASS_C )
 800a06a:	2390      	movs	r3, #144	@ 0x90
 800a06c:	00db      	lsls	r3, r3, #3
 800a06e:	5ce3      	ldrb	r3, [r4, r3]
 800a070:	2b02      	cmp	r3, #2
 800a072:	d101      	bne.n	800a078 <LoRaMacProcess+0x488>
        OpenContinuousRxCWindow( );
 800a074:	f7ff f97c 	bl	8009370 <OpenContinuousRxCWindow>
}
 800a078:	b029      	add	sp, #164	@ 0xa4
 800a07a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800a07c:	003b      	movs	r3, r7
 800a07e:	33fc      	adds	r3, #252	@ 0xfc
 800a080:	781b      	ldrb	r3, [r3, #0]
 800a082:	2b01      	cmp	r3, #1
 800a084:	d10c      	bne.n	800a0a0 <LoRaMacProcess+0x4b0>
        if( LoRaMacClassBIsPingExpected( ) == true )
 800a086:	f001 fb80 	bl	800b78a <LoRaMacClassBIsPingExpected>
 800a08a:	1e05      	subs	r5, r0, #0
 800a08c:	d01a      	beq.n	800a0c4 <LoRaMacProcess+0x4d4>
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800a08e:	0030      	movs	r0, r6
 800a090:	f001 fb70 	bl	800b774 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 800a094:	0030      	movs	r0, r6
 800a096:	f001 fb72 	bl	800b77e <LoRaMacClassBPingSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 800a09a:	2304      	movs	r3, #4
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 800a09c:	4a83      	ldr	r2, [pc, #524]	@ (800a2ac <LoRaMacProcess+0x6bc>)
 800a09e:	54a3      	strb	r3, [r4, r2]
    macHdr.Value = payload[pktHeaderLen++];
 800a0a0:	9b03      	ldr	r3, [sp, #12]
 800a0a2:	781b      	ldrb	r3, [r3, #0]
    switch( macHdr.Bits.MType )
 800a0a4:	0958      	lsrs	r0, r3, #5
 800a0a6:	3801      	subs	r0, #1
    macHdr.Value = payload[pktHeaderLen++];
 800a0a8:	9306      	str	r3, [sp, #24]
    switch( macHdr.Bits.MType )
 800a0aa:	4b81      	ldr	r3, [pc, #516]	@ (800a2b0 <LoRaMacProcess+0x6c0>)
 800a0ac:	2806      	cmp	r0, #6
 800a0ae:	d900      	bls.n	800a0b2 <LoRaMacProcess+0x4c2>
 800a0b0:	e217      	b.n	800a4e2 <LoRaMacProcess+0x8f2>
 800a0b2:	f7f6 f84f 	bl	8000154 <__gnu_thumb1_case_uhi>
 800a0b6:	0013      	.short	0x0013
 800a0b8:	00990216 	.word	0x00990216
 800a0bc:	00960216 	.word	0x00960216
 800a0c0:	02050216 	.word	0x02050216
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 800a0c4:	f001 fb63 	bl	800b78e <LoRaMacClassBIsMulticastExpected>
 800a0c8:	2800      	cmp	r0, #0
 800a0ca:	d0e9      	beq.n	800a0a0 <LoRaMacProcess+0x4b0>
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800a0cc:	0028      	movs	r0, r5
 800a0ce:	f001 fb52 	bl	800b776 <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800a0d2:	0028      	movs	r0, r5
 800a0d4:	f001 fb54 	bl	800b780 <LoRaMacClassBMulticastSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 800a0d8:	2305      	movs	r3, #5
 800a0da:	e7df      	b.n	800a09c <LoRaMacProcess+0x4ac>
            if( size < LORAMAC_JOIN_ACCEPT_FRAME_MIN_SIZE )
 800a0dc:	9b02      	ldr	r3, [sp, #8]
 800a0de:	2b10      	cmp	r3, #16
 800a0e0:	d806      	bhi.n	800a0f0 <LoRaMacProcess+0x500>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800a0e2:	2101      	movs	r1, #1
 800a0e4:	4b72      	ldr	r3, [pc, #456]	@ (800a2b0 <LoRaMacProcess+0x6c0>)
 800a0e6:	4a73      	ldr	r2, [pc, #460]	@ (800a2b4 <LoRaMacProcess+0x6c4>)
 800a0e8:	5499      	strb	r1, [r3, r2]
                PrepareRxDoneAbort( );
 800a0ea:	f7fe fdc7 	bl	8008c7c <PrepareRxDoneAbort>
                return;
 800a0ee:	e643      	b.n	8009d78 <LoRaMacProcess+0x188>
            macMsgJoinAccept.Buffer = payload;
 800a0f0:	9b03      	ldr	r3, [sp, #12]
 800a0f2:	ae12      	add	r6, sp, #72	@ 0x48
 800a0f4:	9312      	str	r3, [sp, #72]	@ 0x48
            macMsgJoinAccept.BufSize = size;
 800a0f6:	466b      	mov	r3, sp
 800a0f8:	7a1d      	ldrb	r5, [r3, #8]
            if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 800a0fa:	003b      	movs	r3, r7
            macMsgJoinAccept.BufSize = size;
 800a0fc:	7135      	strb	r5, [r6, #4]
            if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 800a0fe:	33ff      	adds	r3, #255	@ 0xff
 800a100:	7c5b      	ldrb	r3, [r3, #17]
 800a102:	2b00      	cmp	r3, #0
 800a104:	d1ed      	bne.n	800a0e2 <LoRaMacProcess+0x4f2>
            macCryptoStatus = LoRaMacCryptoHandleJoinAccept( JOIN_REQ, SecureElementGetJoinEui( ), &macMsgJoinAccept );
 800a106:	f7fd fd85 	bl	8007c14 <SecureElementGetJoinEui>
 800a10a:	0032      	movs	r2, r6
 800a10c:	0001      	movs	r1, r0
 800a10e:	20ff      	movs	r0, #255	@ 0xff
 800a110:	f001 ffda 	bl	800c0c8 <LoRaMacCryptoHandleJoinAccept>
            if( LORAMAC_CRYPTO_SUCCESS == macCryptoStatus )
 800a114:	2800      	cmp	r0, #0
 800a116:	d15c      	bne.n	800a1d2 <LoRaMacProcess+0x5e2>
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 800a118:	003a      	movs	r2, r7
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[1] << 8 );
 800a11a:	7ab3      	ldrb	r3, [r6, #10]
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 800a11c:	7af1      	ldrb	r1, [r6, #11]
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[1] << 8 );
 800a11e:	021b      	lsls	r3, r3, #8
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 800a120:	0409      	lsls	r1, r1, #16
 800a122:	430b      	orrs	r3, r1
                Nvm.MacGroup2.NetID = ( uint32_t ) macMsgJoinAccept.NetID[0];
 800a124:	7a71      	ldrb	r1, [r6, #9]
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 800a126:	32c8      	adds	r2, #200	@ 0xc8
 800a128:	430b      	orrs	r3, r1
 800a12a:	6013      	str	r3, [r2, #0]
                Nvm.MacGroup2.DevAddr = macMsgJoinAccept.DevAddr;
 800a12c:	003b      	movs	r3, r7
                Nvm.MacGroup2.MacParams.Rx1DrOffset = macMsgJoinAccept.DLSettings.Bits.RX1DRoffset;
 800a12e:	0039      	movs	r1, r7
                Nvm.MacGroup2.DevAddr = macMsgJoinAccept.DevAddr;
 800a130:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800a132:	33cc      	adds	r3, #204	@ 0xcc
 800a134:	601a      	str	r2, [r3, #0]
                Nvm.MacGroup2.MacParams.Rx1DrOffset = macMsgJoinAccept.DLSettings.Bits.RX1DRoffset;
 800a136:	7c33      	ldrb	r3, [r6, #16]
 800a138:	3161      	adds	r1, #97	@ 0x61
 800a13a:	065a      	lsls	r2, r3, #25
 800a13c:	0f52      	lsrs	r2, r2, #29
 800a13e:	700a      	strb	r2, [r1, #0]
                Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800a140:	003a      	movs	r2, r7
 800a142:	071b      	lsls	r3, r3, #28
 800a144:	0f1b      	lsrs	r3, r3, #28
 800a146:	3268      	adds	r2, #104	@ 0x68
 800a148:	7013      	strb	r3, [r2, #0]
                Nvm.MacGroup2.MacParams.RxCChannel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800a14a:	003a      	movs	r2, r7
 800a14c:	3270      	adds	r2, #112	@ 0x70
 800a14e:	7013      	strb	r3, [r2, #0]
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = macMsgJoinAccept.RxDelay;
 800a150:	7c72      	ldrb	r2, [r6, #17]
                Nvm.MacGroup2.MacParams.ReceiveDelay1 *= 1000;
 800a152:	2a00      	cmp	r2, #0
 800a154:	d100      	bne.n	800a158 <LoRaMacProcess+0x568>
 800a156:	3201      	adds	r2, #1
 800a158:	23fa      	movs	r3, #250	@ 0xfa
 800a15a:	009b      	lsls	r3, r3, #2
 800a15c:	4353      	muls	r3, r2
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 800a15e:	22fa      	movs	r2, #250	@ 0xfa
                Nvm.MacGroup2.Version.Fields.Minor = 0;
 800a160:	2600      	movs	r6, #0
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 800a162:	0092      	lsls	r2, r2, #2
                Nvm.MacGroup2.MacParams.ReceiveDelay1 *= 1000;
 800a164:	653b      	str	r3, [r7, #80]	@ 0x50
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 800a166:	189b      	adds	r3, r3, r2
 800a168:	657b      	str	r3, [r7, #84]	@ 0x54
                Nvm.MacGroup2.Version.Fields.Minor = 0;
 800a16a:	4b53      	ldr	r3, [pc, #332]	@ (800a2b8 <LoRaMacProcess+0x6c8>)
                applyCFList.Payload = macMsgJoinAccept.CFList;
 800a16c:	aa06      	add	r2, sp, #24
                Nvm.MacGroup2.Version.Fields.Minor = 0;
 800a16e:	73de      	strb	r6, [r3, #15]
                applyCFList.Payload = macMsgJoinAccept.CFList;
 800a170:	2342      	movs	r3, #66	@ 0x42
 800a172:	189b      	adds	r3, r3, r2
 800a174:	9310      	str	r3, [sp, #64]	@ 0x40
                RegionApplyCFList( Nvm.MacGroup2.Region, &applyCFList );
 800a176:	003b      	movs	r3, r7
                applyCFList.Payload = macMsgJoinAccept.CFList;
 800a178:	a910      	add	r1, sp, #64	@ 0x40
                applyCFList.Size = size - 17;
 800a17a:	3d11      	subs	r5, #17
                RegionApplyCFList( Nvm.MacGroup2.Region, &applyCFList );
 800a17c:	3340      	adds	r3, #64	@ 0x40
                applyCFList.Size = size - 17;
 800a17e:	710d      	strb	r5, [r1, #4]
                RegionApplyCFList( Nvm.MacGroup2.Region, &applyCFList );
 800a180:	7818      	ldrb	r0, [r3, #0]
 800a182:	f002 f986 	bl	800c492 <RegionApplyCFList>
                Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_OTAA;
 800a186:	2302      	movs	r3, #2
 800a188:	4a4b      	ldr	r2, [pc, #300]	@ (800a2b8 <LoRaMacProcess+0x6c8>)
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800a18a:	2001      	movs	r0, #1
                Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_OTAA;
 800a18c:	7453      	strb	r3, [r2, #17]
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800a18e:	f001 fcc9 	bl	800bb24 <LoRaMacConfirmQueueIsCmdActive>
 800a192:	42b0      	cmp	r0, r6
 800a194:	d003      	beq.n	800a19e <LoRaMacProcess+0x5ae>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_JOIN );
 800a196:	2101      	movs	r1, #1
 800a198:	0030      	movs	r0, r6
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
 800a19a:	f001 fc7b 	bl	800ba94 <LoRaMacConfirmQueueSetStatus>
            MacCtx.MacFlags.Bits.MlmeInd = 1;
 800a19e:	2308      	movs	r3, #8
 800a1a0:	493e      	ldr	r1, [pc, #248]	@ (800a29c <LoRaMacProcess+0x6ac>)
 800a1a2:	5c62      	ldrb	r2, [r4, r1]
            MacCtx.MacFlags.Bits.McpsInd = 1;
 800a1a4:	4313      	orrs	r3, r2
 800a1a6:	5463      	strb	r3, [r4, r1]
    if( MacCtx.NodeAckRequested == true )
 800a1a8:	4c41      	ldr	r4, [pc, #260]	@ (800a2b0 <LoRaMacProcess+0x6c0>)
 800a1aa:	4b44      	ldr	r3, [pc, #272]	@ (800a2bc <LoRaMacProcess+0x6cc>)
 800a1ac:	5ce3      	ldrb	r3, [r4, r3]
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d100      	bne.n	800a1b4 <LoRaMacProcess+0x5c4>
 800a1b2:	e19c      	b.n	800a4ee <LoRaMacProcess+0x8fe>
        if( MacCtx.McpsConfirm.AckReceived == true )
 800a1b4:	4b42      	ldr	r3, [pc, #264]	@ (800a2c0 <LoRaMacProcess+0x6d0>)
 800a1b6:	5ce3      	ldrb	r3, [r4, r3]
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d002      	beq.n	800a1c2 <LoRaMacProcess+0x5d2>
            OnAckTimeoutTimerEvent( NULL );
 800a1bc:	2000      	movs	r0, #0
 800a1be:	f7fe fd31 	bl	8008c24 <OnAckTimeoutTimerEvent>
    MacCtx.MacFlags.Bits.MacDone = 1;
 800a1c2:	2320      	movs	r3, #32
 800a1c4:	4935      	ldr	r1, [pc, #212]	@ (800a29c <LoRaMacProcess+0x6ac>)
 800a1c6:	5c62      	ldrb	r2, [r4, r1]
 800a1c8:	4313      	orrs	r3, r2
 800a1ca:	5463      	strb	r3, [r4, r1]
    UpdateRxSlotIdleState( );
 800a1cc:	f7fe fd04 	bl	8008bd8 <UpdateRxSlotIdleState>
 800a1d0:	e5d2      	b.n	8009d78 <LoRaMacProcess+0x188>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800a1d2:	2001      	movs	r0, #1
 800a1d4:	f001 fca6 	bl	800bb24 <LoRaMacConfirmQueueIsCmdActive>
 800a1d8:	2800      	cmp	r0, #0
 800a1da:	d0e0      	beq.n	800a19e <LoRaMacProcess+0x5ae>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
 800a1dc:	2101      	movs	r1, #1
 800a1de:	2007      	movs	r0, #7
 800a1e0:	e7db      	b.n	800a19a <LoRaMacProcess+0x5aa>
            MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 800a1e2:	2201      	movs	r2, #1
 800a1e4:	4937      	ldr	r1, [pc, #220]	@ (800a2c4 <LoRaMacProcess+0x6d4>)
 800a1e6:	545a      	strb	r2, [r3, r1]
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800a1e8:	4a37      	ldr	r2, [pc, #220]	@ (800a2c8 <LoRaMacProcess+0x6d8>)
 800a1ea:	a90c      	add	r1, sp, #48	@ 0x30
 800a1ec:	7812      	ldrb	r2, [r2, #0]
            getPhy.Datarate = MacCtx.McpsIndication.RxDatarate;
 800a1ee:	4c30      	ldr	r4, [pc, #192]	@ (800a2b0 <LoRaMacProcess+0x6c0>)
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800a1f0:	708a      	strb	r2, [r1, #2]
            getPhy.Datarate = MacCtx.McpsIndication.RxDatarate;
 800a1f2:	2284      	movs	r2, #132	@ 0x84
 800a1f4:	00d2      	lsls	r2, r2, #3
 800a1f6:	5ca2      	ldrb	r2, [r4, r2]
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800a1f8:	4b34      	ldr	r3, [pc, #208]	@ (800a2cc <LoRaMacProcess+0x6dc>)
            getPhy.Datarate = MacCtx.McpsIndication.RxDatarate;
 800a1fa:	704a      	strb	r2, [r1, #1]
            if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 800a1fc:	001a      	movs	r2, r3
 800a1fe:	3280      	adds	r2, #128	@ 0x80
 800a200:	7812      	ldrb	r2, [r2, #0]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800a202:	3340      	adds	r3, #64	@ 0x40
 800a204:	320d      	adds	r2, #13
 800a206:	700a      	strb	r2, [r1, #0]
 800a208:	7818      	ldrb	r0, [r3, #0]
 800a20a:	f002 f91c 	bl	800c446 <RegionGetPhyParam>
            if( ( MAX( 0, ( int16_t )( ( int16_t ) size - ( int16_t ) LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE ) ) > ( int16_t )phyParam.Value ) ||
 800a20e:	9a02      	ldr	r2, [sp, #8]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800a210:	900a      	str	r0, [sp, #40]	@ 0x28
            if( ( MAX( 0, ( int16_t )( ( int16_t ) size - ( int16_t ) LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE ) ) > ( int16_t )phyParam.Value ) ||
 800a212:	3a0d      	subs	r2, #13
 800a214:	1c13      	adds	r3, r2, #0
 800a216:	0412      	lsls	r2, r2, #16
 800a218:	d500      	bpl.n	800a21c <LoRaMacProcess+0x62c>
 800a21a:	2300      	movs	r3, #0
 800a21c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a21e:	b21b      	sxth	r3, r3
 800a220:	b212      	sxth	r2, r2
 800a222:	4293      	cmp	r3, r2
 800a224:	dd00      	ble.n	800a228 <LoRaMacProcess+0x638>
 800a226:	e75c      	b.n	800a0e2 <LoRaMacProcess+0x4f2>
 800a228:	9b02      	ldr	r3, [sp, #8]
 800a22a:	2b0b      	cmp	r3, #11
 800a22c:	d800      	bhi.n	800a230 <LoRaMacProcess+0x640>
 800a22e:	e758      	b.n	800a0e2 <LoRaMacProcess+0x4f2>
            macMsgData.BufSize = size;
 800a230:	225c      	movs	r2, #92	@ 0x5c
            macMsgData.Buffer = payload;
 800a232:	9b03      	ldr	r3, [sp, #12]
            if( LORAMAC_PARSER_SUCCESS != LoRaMacParserData( &macMsgData ) )
 800a234:	a81c      	add	r0, sp, #112	@ 0x70
            macMsgData.Buffer = payload;
 800a236:	931c      	str	r3, [sp, #112]	@ 0x70
            macMsgData.BufSize = size;
 800a238:	ab06      	add	r3, sp, #24
 800a23a:	189b      	adds	r3, r3, r2
 800a23c:	9a02      	ldr	r2, [sp, #8]
 800a23e:	701a      	strb	r2, [r3, #0]
            macMsgData.FRMPayloadSize = LORAMAC_PHY_MAXPAYLOAD;
 800a240:	22ff      	movs	r2, #255	@ 0xff
            macMsgData.FRMPayload = MacCtx.RxPayload;
 800a242:	4b23      	ldr	r3, [pc, #140]	@ (800a2d0 <LoRaMacProcess+0x6e0>)
 800a244:	9325      	str	r3, [sp, #148]	@ 0x94
            macMsgData.FRMPayloadSize = LORAMAC_PHY_MAXPAYLOAD;
 800a246:	ab26      	add	r3, sp, #152	@ 0x98
 800a248:	701a      	strb	r2, [r3, #0]
            if( LORAMAC_PARSER_SUCCESS != LoRaMacParserData( &macMsgData ) )
 800a24a:	f001 fff9 	bl	800c240 <LoRaMacParserData>
 800a24e:	1e06      	subs	r6, r0, #0
 800a250:	d000      	beq.n	800a254 <LoRaMacProcess+0x664>
 800a252:	e746      	b.n	800a0e2 <LoRaMacProcess+0x4f2>
            MacCtx.McpsIndication.DevAddress = macMsgData.FHDR.DevAddr;
 800a254:	2386      	movs	r3, #134	@ 0x86
    if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen > 0 ) && ( macMsg->FPort > 0 ) )
 800a256:	2264      	movs	r2, #100	@ 0x64
            MacCtx.McpsIndication.DevAddress = macMsgData.FHDR.DevAddr;
 800a258:	981e      	ldr	r0, [sp, #120]	@ 0x78
 800a25a:	00db      	lsls	r3, r3, #3
 800a25c:	50e0      	str	r0, [r4, r3]
    if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen > 0 ) && ( macMsg->FPort > 0 ) )
 800a25e:	ab06      	add	r3, sp, #24
 800a260:	189b      	adds	r3, r3, r2
 800a262:	781a      	ldrb	r2, [r3, #0]
 800a264:	230f      	movs	r3, #15
 800a266:	0011      	movs	r1, r2
 800a268:	4019      	ands	r1, r3
 800a26a:	421a      	tst	r2, r3
 800a26c:	d005      	beq.n	800a27a <LoRaMacProcess+0x68a>
 800a26e:	334a      	adds	r3, #74	@ 0x4a
 800a270:	ac06      	add	r4, sp, #24
 800a272:	191b      	adds	r3, r3, r4
 800a274:	7fdb      	ldrb	r3, [r3, #31]
 800a276:	2b00      	cmp	r3, #0
 800a278:	d12c      	bne.n	800a2d4 <LoRaMacProcess+0x6e4>
    else if( macMsg->FRMPayloadSize == 0 )
 800a27a:	ab26      	add	r3, sp, #152	@ 0x98
 800a27c:	781b      	ldrb	r3, [r3, #0]
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d100      	bne.n	800a284 <LoRaMacProcess+0x694>
 800a282:	e08d      	b.n	800a3a0 <LoRaMacProcess+0x7b0>
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort == 0 ) )
 800a284:	2900      	cmp	r1, #0
 800a286:	d000      	beq.n	800a28a <LoRaMacProcess+0x69a>
 800a288:	e72b      	b.n	800a0e2 <LoRaMacProcess+0x4f2>
 800a28a:	2359      	movs	r3, #89	@ 0x59
 800a28c:	a906      	add	r1, sp, #24
 800a28e:	185b      	adds	r3, r3, r1
 800a290:	7fdb      	ldrb	r3, [r3, #31]
        *fType = FRAME_TYPE_C;
 800a292:	1e59      	subs	r1, r3, #1
 800a294:	418b      	sbcs	r3, r1
 800a296:	3302      	adds	r3, #2
        *fType = FRAME_TYPE_B;
 800a298:	9302      	str	r3, [sp, #8]
 800a29a:	e01c      	b.n	800a2d6 <LoRaMacProcess+0x6e6>
 800a29c:	00000481 	.word	0x00000481
 800a2a0:	200011b0 	.word	0x200011b0
 800a2a4:	20001194 	.word	0x20001194
 800a2a8:	20001150 	.word	0x20001150
 800a2ac:	0000047f 	.word	0x0000047f
 800a2b0:	20000d34 	.word	0x20000d34
 800a2b4:	0000041d 	.word	0x0000041d
 800a2b8:	20000ae7 	.word	0x20000ae7
 800a2bc:	00000414 	.word	0x00000414
 800a2c0:	0000043c 	.word	0x0000043c
 800a2c4:	0000041c 	.word	0x0000041c
 800a2c8:	20000a5d 	.word	0x20000a5d
 800a2cc:	200009e8 	.word	0x200009e8
 800a2d0:	20000f6c 	.word	0x20000f6c
        *fType = FRAME_TYPE_A;
 800a2d4:	9602      	str	r6, [sp, #8]
            downLinkCounter = 0;
 800a2d6:	2300      	movs	r3, #0
 800a2d8:	930b      	str	r3, [sp, #44]	@ 0x2c
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 800a2da:	4bae      	ldr	r3, [pc, #696]	@ (800a594 <LoRaMacProcess+0x9a4>)
 800a2dc:	49ae      	ldr	r1, [pc, #696]	@ (800a598 <LoRaMacProcess+0x9a8>)
                    ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) )
 800a2de:	001c      	movs	r4, r3
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 800a2e0:	6809      	ldr	r1, [r1, #0]
                    ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) )
 800a2e2:	34d2      	adds	r4, #210	@ 0xd2
    AddressIdentifier_t addrID = UNICAST_DEV_ADDR;
 800a2e4:	2501      	movs	r5, #1
                    ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) )
 800a2e6:	7824      	ldrb	r4, [r4, #0]
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 800a2e8:	4288      	cmp	r0, r1
 800a2ea:	d11b      	bne.n	800a324 <LoRaMacProcess+0x734>
 800a2ec:	2c00      	cmp	r4, #0
 800a2ee:	d019      	beq.n	800a324 <LoRaMacProcess+0x734>
                    addrID = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.GroupID;
 800a2f0:	0018      	movs	r0, r3
 800a2f2:	30d3      	adds	r0, #211	@ 0xd3
 800a2f4:	7805      	ldrb	r5, [r0, #0]
                    downLinkCounter = *( Nvm.MacGroup2.MulticastChannelList[i].DownLinkCounter );
 800a2f6:	0018      	movs	r0, r3
 800a2f8:	30f0      	adds	r0, #240	@ 0xf0
 800a2fa:	6800      	ldr	r0, [r0, #0]
                    if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 800a2fc:	33fc      	adds	r3, #252	@ 0xfc
                    downLinkCounter = *( Nvm.MacGroup2.MulticastChannelList[i].DownLinkCounter );
 800a2fe:	6800      	ldr	r0, [r0, #0]
 800a300:	900b      	str	r0, [sp, #44]	@ 0x2c
                    if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 800a302:	781b      	ldrb	r3, [r3, #0]
 800a304:	2b02      	cmp	r3, #2
 800a306:	d103      	bne.n	800a310 <LoRaMacProcess+0x720>
                        MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 800a308:	2003      	movs	r0, #3
 800a30a:	4ba4      	ldr	r3, [pc, #656]	@ (800a59c <LoRaMacProcess+0x9ac>)
 800a30c:	4ca4      	ldr	r4, [pc, #656]	@ (800a5a0 <LoRaMacProcess+0x9b0>)
 800a30e:	5518      	strb	r0, [r3, r4]
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 800a310:	9b02      	ldr	r3, [sp, #8]
 800a312:	2b03      	cmp	r3, #3
 800a314:	d000      	beq.n	800a318 <LoRaMacProcess+0x728>
 800a316:	e6e4      	b.n	800a0e2 <LoRaMacProcess+0x4f2>
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 800a318:	2360      	movs	r3, #96	@ 0x60
 800a31a:	421a      	tst	r2, r3
 800a31c:	d000      	beq.n	800a320 <LoRaMacProcess+0x730>
 800a31e:	e6e0      	b.n	800a0e2 <LoRaMacProcess+0x4f2>
 800a320:	2601      	movs	r6, #1
 800a322:	9107      	str	r1, [sp, #28]
            getPhy.Attribute = PHY_MAX_FCNT_GAP;
 800a324:	2315      	movs	r3, #21
 800a326:	a90c      	add	r1, sp, #48	@ 0x30
 800a328:	700b      	strb	r3, [r1, #0]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800a32a:	4b9e      	ldr	r3, [pc, #632]	@ (800a5a4 <LoRaMacProcess+0x9b4>)
 800a32c:	4c99      	ldr	r4, [pc, #612]	@ (800a594 <LoRaMacProcess+0x9a4>)
 800a32e:	7818      	ldrb	r0, [r3, #0]
 800a330:	f002 f889 	bl	800c446 <RegionGetPhyParam>
 800a334:	34ff      	adds	r4, #255	@ 0xff
 800a336:	7be3      	ldrb	r3, [r4, #15]
 800a338:	900a      	str	r0, [sp, #40]	@ 0x28
    switch( addrID )
 800a33a:	2d00      	cmp	r5, #0
 800a33c:	d032      	beq.n	800a3a4 <LoRaMacProcess+0x7b4>
 800a33e:	2d01      	cmp	r5, #1
 800a340:	d135      	bne.n	800a3ae <LoRaMacProcess+0x7be>
                *fCntID = FCNT_DOWN;
 800a342:	2403      	movs	r4, #3
            if( lrWanVersion.Fields.Minor == 1 )
 800a344:	2b01      	cmp	r3, #1
 800a346:	d106      	bne.n	800a356 <LoRaMacProcess+0x766>
                if( ( fType == FRAME_TYPE_A ) || ( fType == FRAME_TYPE_D ) )
 800a348:	9a02      	ldr	r2, [sp, #8]
 800a34a:	3b0b      	subs	r3, #11
 800a34c:	4113      	asrs	r3, r2
 800a34e:	3c01      	subs	r4, #1
 800a350:	402b      	ands	r3, r5
 800a352:	1ae4      	subs	r4, r4, r3
 800a354:	b2e4      	uxtb	r4, r4
    return LoRaMacCryptoGetFCntDown( *fCntID, maxFCntGap, macMsg->FHDR.FCnt, currentDown );
 800a356:	af1c      	add	r7, sp, #112	@ 0x70
 800a358:	b281      	uxth	r1, r0
 800a35a:	89fa      	ldrh	r2, [r7, #14]
 800a35c:	0020      	movs	r0, r4
 800a35e:	ab0b      	add	r3, sp, #44	@ 0x2c
 800a360:	f001 fd40 	bl	800bde4 <LoRaMacCryptoGetFCntDown>
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800a364:	2800      	cmp	r0, #0
 800a366:	d027      	beq.n	800a3b8 <LoRaMacProcess+0x7c8>
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED )
 800a368:	4b8c      	ldr	r3, [pc, #560]	@ (800a59c <LoRaMacProcess+0x9ac>)
 800a36a:	2807      	cmp	r0, #7
 800a36c:	d11c      	bne.n	800a3a8 <LoRaMacProcess+0x7b8>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_REPEATED;
 800a36e:	2208      	movs	r2, #8
 800a370:	498d      	ldr	r1, [pc, #564]	@ (800a5a8 <LoRaMacProcess+0x9b8>)
 800a372:	545a      	strb	r2, [r3, r1]
                    if( ( Nvm.MacGroup2.Version.Fields.Minor == 0 ) && ( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN ) && ( Nvm.MacGroup1.LastRxMic == macMsgData.MIC ) )
 800a374:	4a8d      	ldr	r2, [pc, #564]	@ (800a5ac <LoRaMacProcess+0x9bc>)
 800a376:	4b87      	ldr	r3, [pc, #540]	@ (800a594 <LoRaMacProcess+0x9a4>)
 800a378:	7bd2      	ldrb	r2, [r2, #15]
 800a37a:	2a00      	cmp	r2, #0
 800a37c:	d10b      	bne.n	800a396 <LoRaMacProcess+0x7a6>
 800a37e:	9906      	ldr	r1, [sp, #24]
 800a380:	321f      	adds	r2, #31
 800a382:	4391      	bics	r1, r2
 800a384:	29a0      	cmp	r1, #160	@ 0xa0
 800a386:	d106      	bne.n	800a396 <LoRaMacProcess+0x7a6>
 800a388:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800a38a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a38c:	4291      	cmp	r1, r2
 800a38e:	d102      	bne.n	800a396 <LoRaMacProcess+0x7a6>
                        Nvm.MacGroup1.SrvAckRequested = true;
 800a390:	2201      	movs	r2, #1
 800a392:	333a      	adds	r3, #58	@ 0x3a
 800a394:	701a      	strb	r2, [r3, #0]
                MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 800a396:	4b81      	ldr	r3, [pc, #516]	@ (800a59c <LoRaMacProcess+0x9ac>)
 800a398:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800a39a:	4985      	ldr	r1, [pc, #532]	@ (800a5b0 <LoRaMacProcess+0x9c0>)
 800a39c:	505a      	str	r2, [r3, r1]
                PrepareRxDoneAbort( );
 800a39e:	e6a4      	b.n	800a0ea <LoRaMacProcess+0x4fa>
        *fType = FRAME_TYPE_B;
 800a3a0:	2301      	movs	r3, #1
 800a3a2:	e779      	b.n	800a298 <LoRaMacProcess+0x6a8>
    switch( addrID )
 800a3a4:	2404      	movs	r4, #4
 800a3a6:	e7d6      	b.n	800a356 <LoRaMacProcess+0x766>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_TOO_MANY_FRAMES_LOSS;
 800a3a8:	220a      	movs	r2, #10
                else if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_MAX_GAP_FCNT )
 800a3aa:	2808      	cmp	r0, #8
 800a3ac:	d001      	beq.n	800a3b2 <LoRaMacProcess+0x7c2>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800a3ae:	2201      	movs	r2, #1
 800a3b0:	4b7a      	ldr	r3, [pc, #488]	@ (800a59c <LoRaMacProcess+0x9ac>)
 800a3b2:	497d      	ldr	r1, [pc, #500]	@ (800a5a8 <LoRaMacProcess+0x9b8>)
 800a3b4:	545a      	strb	r2, [r3, r1]
 800a3b6:	e7ee      	b.n	800a396 <LoRaMacProcess+0x7a6>
            macCryptoStatus = LoRaMacCryptoUnsecureMessage( addrID, address, fCntID, downLinkCounter, &macMsgData );
 800a3b8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a3ba:	0022      	movs	r2, r4
 800a3bc:	0028      	movs	r0, r5
 800a3be:	9907      	ldr	r1, [sp, #28]
 800a3c0:	9700      	str	r7, [sp, #0]
 800a3c2:	f001 fde7 	bl	800bf94 <LoRaMacCryptoUnsecureMessage>
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800a3c6:	4b75      	ldr	r3, [pc, #468]	@ (800a59c <LoRaMacProcess+0x9ac>)
 800a3c8:	2800      	cmp	r0, #0
 800a3ca:	d006      	beq.n	800a3da <LoRaMacProcess+0x7ea>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ADDRESS_FAIL;
 800a3cc:	3802      	subs	r0, #2
 800a3ce:	1e42      	subs	r2, r0, #1
 800a3d0:	4190      	sbcs	r0, r2
 800a3d2:	4a75      	ldr	r2, [pc, #468]	@ (800a5a8 <LoRaMacProcess+0x9b8>)
 800a3d4:	300b      	adds	r0, #11
 800a3d6:	5498      	strb	r0, [r3, r2]
 800a3d8:	e687      	b.n	800a0ea <LoRaMacProcess+0x4fa>
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800a3da:	4a73      	ldr	r2, [pc, #460]	@ (800a5a8 <LoRaMacProcess+0x9b8>)
            MacCtx.McpsIndication.FramePending = macMsgData.FHDR.FCtrl.Bits.FPending;
 800a3dc:	4c75      	ldr	r4, [pc, #468]	@ (800a5b4 <LoRaMacProcess+0x9c4>)
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800a3de:	5498      	strb	r0, [r3, r2]
            MacCtx.McpsIndication.Multicast = multicast;
 800a3e0:	4a75      	ldr	r2, [pc, #468]	@ (800a5b8 <LoRaMacProcess+0x9c8>)
 800a3e2:	549e      	strb	r6, [r3, r2]
            MacCtx.McpsIndication.FramePending = macMsgData.FHDR.FCtrl.Bits.FPending;
 800a3e4:	7b3a      	ldrb	r2, [r7, #12]
 800a3e6:	06d1      	lsls	r1, r2, #27
 800a3e8:	0fc9      	lsrs	r1, r1, #31
 800a3ea:	5519      	strb	r1, [r3, r4]
            MacCtx.McpsIndication.Buffer = NULL;
 800a3ec:	4973      	ldr	r1, [pc, #460]	@ (800a5bc <LoRaMacProcess+0x9cc>)
            MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 800a3ee:	4c70      	ldr	r4, [pc, #448]	@ (800a5b0 <LoRaMacProcess+0x9c0>)
            MacCtx.McpsIndication.Buffer = NULL;
 800a3f0:	5058      	str	r0, [r3, r1]
            MacCtx.McpsIndication.BufferSize = 0;
 800a3f2:	3104      	adds	r1, #4
 800a3f4:	5458      	strb	r0, [r3, r1]
            MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 800a3f6:	990b      	ldr	r1, [sp, #44]	@ 0x2c
            MacCtx.McpsIndication.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 800a3f8:	0692      	lsls	r2, r2, #26
            MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 800a3fa:	5119      	str	r1, [r3, r4]
            MacCtx.McpsIndication.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 800a3fc:	4970      	ldr	r1, [pc, #448]	@ (800a5c0 <LoRaMacProcess+0x9d0>)
 800a3fe:	0fd2      	lsrs	r2, r2, #31
 800a400:	545a      	strb	r2, [r3, r1]
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800a402:	4970      	ldr	r1, [pc, #448]	@ (800a5c4 <LoRaMacProcess+0x9d4>)
 800a404:	5458      	strb	r0, [r3, r1]
            MacCtx.McpsConfirm.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 800a406:	4970      	ldr	r1, [pc, #448]	@ (800a5c8 <LoRaMacProcess+0x9d8>)
 800a408:	545a      	strb	r2, [r3, r1]
            if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 800a40a:	4a65      	ldr	r2, [pc, #404]	@ (800a5a0 <LoRaMacProcess+0x9b0>)
 800a40c:	5c9a      	ldrb	r2, [r3, r2]
 800a40e:	2a01      	cmp	r2, #1
 800a410:	d801      	bhi.n	800a416 <LoRaMacProcess+0x826>
                Nvm.MacGroup1.AdrAckCounter = 0;
 800a412:	4b60      	ldr	r3, [pc, #384]	@ (800a594 <LoRaMacProcess+0x9a4>)
 800a414:	6298      	str	r0, [r3, #40]	@ 0x28
            if( multicast == 1 )
 800a416:	ad1c      	add	r5, sp, #112	@ 0x70
 800a418:	2e01      	cmp	r6, #1
 800a41a:	d043      	beq.n	800a4a4 <LoRaMacProcess+0x8b4>
                if( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN )
 800a41c:	231f      	movs	r3, #31
 800a41e:	9906      	ldr	r1, [sp, #24]
 800a420:	4399      	bics	r1, r3
 800a422:	4b5c      	ldr	r3, [pc, #368]	@ (800a594 <LoRaMacProcess+0x9a4>)
 800a424:	29a0      	cmp	r1, #160	@ 0xa0
 800a426:	d139      	bne.n	800a49c <LoRaMacProcess+0x8ac>
                    Nvm.MacGroup1.SrvAckRequested = true;
 800a428:	0019      	movs	r1, r3
 800a42a:	2001      	movs	r0, #1
 800a42c:	313a      	adds	r1, #58	@ 0x3a
 800a42e:	7008      	strb	r0, [r1, #0]
                    if( Nvm.MacGroup2.Version.Fields.Minor == 0 )
 800a430:	0019      	movs	r1, r3
 800a432:	31ff      	adds	r1, #255	@ 0xff
 800a434:	7bc9      	ldrb	r1, [r1, #15]
 800a436:	2900      	cmp	r1, #0
 800a438:	d101      	bne.n	800a43e <LoRaMacProcess+0x84e>
                        Nvm.MacGroup1.LastRxMic = macMsgData.MIC;
 800a43a:	6ae9      	ldr	r1, [r5, #44]	@ 0x2c
 800a43c:	6359      	str	r1, [r3, #52]	@ 0x34
                    MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 800a43e:	2601      	movs	r6, #1
                MacCtx.McpsIndication.McpsIndication = MCPS_MULTICAST;
 800a440:	4c56      	ldr	r4, [pc, #344]	@ (800a59c <LoRaMacProcess+0x9ac>)
 800a442:	4b62      	ldr	r3, [pc, #392]	@ (800a5cc <LoRaMacProcess+0x9dc>)
 800a444:	54e6      	strb	r6, [r4, r3]
            RemoveMacCommands( MacCtx.RxStatus.RxSlot, macMsgData.FHDR.FCtrl, MacCtx.McpsConfirm.McpsRequest );
 800a446:	331c      	adds	r3, #28
 800a448:	5ce1      	ldrb	r1, [r4, r3]
 800a44a:	7b2b      	ldrb	r3, [r5, #12]
    if( rxSlot == RX_SLOT_WIN_1 || rxSlot == RX_SLOT_WIN_2  )
 800a44c:	2a01      	cmp	r2, #1
 800a44e:	d805      	bhi.n	800a45c <LoRaMacProcess+0x86c>
        if( request == MCPS_CONFIRMED )
 800a450:	2901      	cmp	r1, #1
 800a452:	d101      	bne.n	800a458 <LoRaMacProcess+0x868>
            if( fCtrl.Bits.Ack == 1 )
 800a454:	069b      	lsls	r3, r3, #26
 800a456:	d501      	bpl.n	800a45c <LoRaMacProcess+0x86c>
                LoRaMacCommandsRemoveStickyAnsCmds( );
 800a458:	f001 fa3e 	bl	800b8d8 <LoRaMacCommandsRemoveStickyAnsCmds>
            switch( fType )
 800a45c:	2759      	movs	r7, #89	@ 0x59
 800a45e:	ab06      	add	r3, sp, #24
 800a460:	18ff      	adds	r7, r7, r3
 800a462:	9b02      	ldr	r3, [sp, #8]
 800a464:	4e5a      	ldr	r6, [pc, #360]	@ (800a5d0 <LoRaMacProcess+0x9e0>)
 800a466:	2b02      	cmp	r3, #2
 800a468:	d01e      	beq.n	800a4a8 <LoRaMacProcess+0x8b8>
 800a46a:	2b03      	cmp	r3, #3
 800a46c:	d008      	beq.n	800a480 <LoRaMacProcess+0x890>
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 800a46e:	7b29      	ldrb	r1, [r5, #12]
 800a470:	9a04      	ldr	r2, [sp, #16]
 800a472:	0709      	lsls	r1, r1, #28
 800a474:	0f09      	lsrs	r1, r1, #28
 800a476:	a820      	add	r0, sp, #128	@ 0x80
 800a478:	2b01      	cmp	r3, #1
 800a47a:	d019      	beq.n	800a4b0 <LoRaMacProcess+0x8c0>
 800a47c:	f7ff f8a8 	bl	80095d0 <ProcessMacCommands.constprop.0>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800a480:	7ffb      	ldrb	r3, [r7, #31]
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 800a482:	4a4e      	ldr	r2, [pc, #312]	@ (800a5bc <LoRaMacProcess+0x9cc>)
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800a484:	55a3      	strb	r3, [r4, r6]
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 800a486:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 800a488:	50a3      	str	r3, [r4, r2]
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 800a48a:	ab26      	add	r3, sp, #152	@ 0x98
 800a48c:	781a      	ldrb	r2, [r3, #0]
 800a48e:	2385      	movs	r3, #133	@ 0x85
 800a490:	00db      	lsls	r3, r3, #3
 800a492:	54e2      	strb	r2, [r4, r3]
                    MacCtx.McpsIndication.RxData = true;
 800a494:	2201      	movs	r2, #1
 800a496:	4b4f      	ldr	r3, [pc, #316]	@ (800a5d4 <LoRaMacProcess+0x9e4>)
 800a498:	54e2      	strb	r2, [r4, r3]
                    break;
 800a49a:	e00d      	b.n	800a4b8 <LoRaMacProcess+0x8c8>
                    Nvm.MacGroup1.SrvAckRequested = false;
 800a49c:	2100      	movs	r1, #0
 800a49e:	333a      	adds	r3, #58	@ 0x3a
 800a4a0:	7019      	strb	r1, [r3, #0]
                    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 800a4a2:	e7cd      	b.n	800a440 <LoRaMacProcess+0x850>
 800a4a4:	2602      	movs	r6, #2
 800a4a6:	e7cb      	b.n	800a440 <LoRaMacProcess+0x850>
                    ProcessMacCommands( macMsgData.FRMPayload, 0, macMsgData.FRMPayloadSize, snr, MacCtx.RxStatus.RxSlot );
 800a4a8:	ab26      	add	r3, sp, #152	@ 0x98
 800a4aa:	7819      	ldrb	r1, [r3, #0]
 800a4ac:	9a04      	ldr	r2, [sp, #16]
 800a4ae:	6a68      	ldr	r0, [r5, #36]	@ 0x24
 800a4b0:	f7ff f88e 	bl	80095d0 <ProcessMacCommands.constprop.0>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800a4b4:	7ffb      	ldrb	r3, [r7, #31]
 800a4b6:	55a3      	strb	r3, [r4, r6]
            MacCtx.MacFlags.Bits.McpsInd = 1;
 800a4b8:	4947      	ldr	r1, [pc, #284]	@ (800a5d8 <LoRaMacProcess+0x9e8>)
 800a4ba:	2302      	movs	r3, #2
 800a4bc:	5c62      	ldrb	r2, [r4, r1]
 800a4be:	e671      	b.n	800a1a4 <LoRaMacProcess+0x5b4>
            memcpy1( MacCtx.RxPayload, &payload[pktHeaderLen], size - pktHeaderLen );
 800a4c0:	9f02      	ldr	r7, [sp, #8]
 800a4c2:	4e46      	ldr	r6, [pc, #280]	@ (800a5dc <LoRaMacProcess+0x9ec>)
 800a4c4:	9903      	ldr	r1, [sp, #12]
 800a4c6:	3f01      	subs	r7, #1
 800a4c8:	b2ba      	uxth	r2, r7
 800a4ca:	0030      	movs	r0, r6
 800a4cc:	3101      	adds	r1, #1
 800a4ce:	f003 f959 	bl	800d784 <memcpy1>
            MacCtx.McpsIndication.McpsIndication = MCPS_PROPRIETARY;
 800a4d2:	2303      	movs	r3, #3
 800a4d4:	4a3d      	ldr	r2, [pc, #244]	@ (800a5cc <LoRaMacProcess+0x9dc>)
 800a4d6:	52a3      	strh	r3, [r4, r2]
            MacCtx.McpsIndication.Buffer = MacCtx.RxPayload;
 800a4d8:	4b38      	ldr	r3, [pc, #224]	@ (800a5bc <LoRaMacProcess+0x9cc>)
 800a4da:	50e6      	str	r6, [r4, r3]
            MacCtx.McpsIndication.BufferSize = size - pktHeaderLen;
 800a4dc:	3304      	adds	r3, #4
 800a4de:	54e7      	strb	r7, [r4, r3]
            MacCtx.MacFlags.Bits.McpsInd = 1;
 800a4e0:	e7ea      	b.n	800a4b8 <LoRaMacProcess+0x8c8>
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800a4e2:	2101      	movs	r1, #1
 800a4e4:	4a30      	ldr	r2, [pc, #192]	@ (800a5a8 <LoRaMacProcess+0x9b8>)
 800a4e6:	5499      	strb	r1, [r3, r2]
            PrepareRxDoneAbort( );
 800a4e8:	f7fe fbc8 	bl	8008c7c <PrepareRxDoneAbort>
            break;
 800a4ec:	e65c      	b.n	800a1a8 <LoRaMacProcess+0x5b8>
        if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 800a4ee:	4b3c      	ldr	r3, [pc, #240]	@ (800a5e0 <LoRaMacProcess+0x9f0>)
 800a4f0:	781b      	ldrb	r3, [r3, #0]
 800a4f2:	2b02      	cmp	r3, #2
 800a4f4:	d000      	beq.n	800a4f8 <LoRaMacProcess+0x908>
 800a4f6:	e664      	b.n	800a1c2 <LoRaMacProcess+0x5d2>
 800a4f8:	e660      	b.n	800a1bc <LoRaMacProcess+0x5cc>
    if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800a4fa:	4b37      	ldr	r3, [pc, #220]	@ (800a5d8 <LoRaMacProcess+0x9e8>)
 800a4fc:	5ce3      	ldrb	r3, [r4, r3]
 800a4fe:	075b      	lsls	r3, r3, #29
 800a500:	d512      	bpl.n	800a528 <LoRaMacProcess+0x938>
        if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800a502:	2001      	movs	r0, #1
 800a504:	26d0      	movs	r6, #208	@ 0xd0
 800a506:	f001 fb0d 	bl	800bb24 <LoRaMacConfirmQueueIsCmdActive>
 800a50a:	00b6      	lsls	r6, r6, #2
 800a50c:	2800      	cmp	r0, #0
 800a50e:	d036      	beq.n	800a57e <LoRaMacProcess+0x98e>
            if( LoRaMacConfirmQueueGetStatus( MLME_JOIN ) == LORAMAC_EVENT_INFO_STATUS_OK )
 800a510:	2001      	movs	r0, #1
 800a512:	f001 fad5 	bl	800bac0 <LoRaMacConfirmQueueGetStatus>
 800a516:	2800      	cmp	r0, #0
 800a518:	d102      	bne.n	800a520 <LoRaMacProcess+0x930>
                MacCtx.ChannelsNbTransCounter = 0;
 800a51a:	2382      	movs	r3, #130	@ 0x82
 800a51c:	00db      	lsls	r3, r3, #3
 800a51e:	54e0      	strb	r0, [r4, r3]
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800a520:	2202      	movs	r2, #2
 800a522:	59a3      	ldr	r3, [r4, r6]
 800a524:	4393      	bics	r3, r2
 800a526:	51a3      	str	r3, [r4, r6]
    if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 800a528:	4b2b      	ldr	r3, [pc, #172]	@ (800a5d8 <LoRaMacProcess+0x9e8>)
 800a52a:	5ce2      	ldrb	r2, [r4, r3]
 800a52c:	07d3      	lsls	r3, r2, #31
 800a52e:	d400      	bmi.n	800a532 <LoRaMacProcess+0x942>
 800a530:	e479      	b.n	8009e26 <LoRaMacProcess+0x236>
        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 800a532:	2387      	movs	r3, #135	@ 0x87
 800a534:	00db      	lsls	r3, r3, #3
 800a536:	5ce3      	ldrb	r3, [r4, r3]
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d001      	beq.n	800a540 <LoRaMacProcess+0x950>
 800a53c:	2b03      	cmp	r3, #3
 800a53e:	d155      	bne.n	800a5ec <LoRaMacProcess+0x9fc>
    if( MacCtx.ChannelsNbTransCounter >=
 800a540:	2082      	movs	r0, #130	@ 0x82
        Nvm.MacGroup2.MacParams.ChannelsNbTrans )
 800a542:	4928      	ldr	r1, [pc, #160]	@ (800a5e4 <LoRaMacProcess+0x9f4>)
    if( MacCtx.ChannelsNbTransCounter >=
 800a544:	00c0      	lsls	r0, r0, #3
 800a546:	5c20      	ldrb	r0, [r4, r0]
 800a548:	7809      	ldrb	r1, [r1, #0]
        Nvm.MacGroup2.MacParams.ChannelsNbTrans )
 800a54a:	4b12      	ldr	r3, [pc, #72]	@ (800a594 <LoRaMacProcess+0x9a4>)
    if( MacCtx.ChannelsNbTransCounter >=
 800a54c:	4288      	cmp	r0, r1
 800a54e:	d20a      	bcs.n	800a566 <LoRaMacProcess+0x976>
    else if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 800a550:	0792      	lsls	r2, r2, #30
 800a552:	d400      	bmi.n	800a556 <LoRaMacProcess+0x966>
 800a554:	e07c      	b.n	800a650 <LoRaMacProcess+0xa60>
        if( Nvm.MacGroup2.DeviceClass == CLASS_A )
 800a556:	33fc      	adds	r3, #252	@ 0xfc
 800a558:	781b      	ldrb	r3, [r3, #0]
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d003      	beq.n	800a566 <LoRaMacProcess+0x976>
            if( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 )
 800a55e:	4b10      	ldr	r3, [pc, #64]	@ (800a5a0 <LoRaMacProcess+0x9b0>)
 800a560:	5ce3      	ldrb	r3, [r4, r3]
 800a562:	2b00      	cmp	r3, #0
 800a564:	d174      	bne.n	800a650 <LoRaMacProcess+0xa60>
            TimerStop( &MacCtx.TxDelayedTimer );
 800a566:	4820      	ldr	r0, [pc, #128]	@ (800a5e8 <LoRaMacProcess+0x9f8>)
 800a568:	f005 f8dc 	bl	800f724 <UTIL_TIMER_Stop>
            MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 800a56c:	22d0      	movs	r2, #208	@ 0xd0
 800a56e:	2120      	movs	r1, #32
 800a570:	0092      	lsls	r2, r2, #2
 800a572:	58a3      	ldr	r3, [r4, r2]
 800a574:	438b      	bics	r3, r1
 800a576:	50a3      	str	r3, [r4, r2]
            StopRetransmission( );
 800a578:	f7ff faca 	bl	8009b10 <StopRetransmission.isra.0>
 800a57c:	e453      	b.n	8009e26 <LoRaMacProcess+0x236>
        else if( ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true ) ||
 800a57e:	2005      	movs	r0, #5
 800a580:	f001 fad0 	bl	800bb24 <LoRaMacConfirmQueueIsCmdActive>
 800a584:	2800      	cmp	r0, #0
 800a586:	d1cb      	bne.n	800a520 <LoRaMacProcess+0x930>
                 ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW_1 ) == true ) )
 800a588:	2006      	movs	r0, #6
 800a58a:	f001 facb 	bl	800bb24 <LoRaMacConfirmQueueIsCmdActive>
        else if( ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true ) ||
 800a58e:	2800      	cmp	r0, #0
 800a590:	d1c6      	bne.n	800a520 <LoRaMacProcess+0x930>
 800a592:	e7c9      	b.n	800a528 <LoRaMacProcess+0x938>
 800a594:	200009e8 	.word	0x200009e8
 800a598:	20000abc 	.word	0x20000abc
 800a59c:	20000d34 	.word	0x20000d34
 800a5a0:	0000047f 	.word	0x0000047f
 800a5a4:	20000a28 	.word	0x20000a28
 800a5a8:	0000041d 	.word	0x0000041d
 800a5ac:	20000ae7 	.word	0x20000ae7
 800a5b0:	0000042c 	.word	0x0000042c
 800a5b4:	00000421 	.word	0x00000421
 800a5b8:	0000041e 	.word	0x0000041e
 800a5bc:	00000424 	.word	0x00000424
 800a5c0:	0000042a 	.word	0x0000042a
 800a5c4:	00000439 	.word	0x00000439
 800a5c8:	0000043c 	.word	0x0000043c
 800a5cc:	0000041c 	.word	0x0000041c
 800a5d0:	0000041f 	.word	0x0000041f
 800a5d4:	00000429 	.word	0x00000429
 800a5d8:	00000481 	.word	0x00000481
 800a5dc:	20000f6c 	.word	0x20000f6c
 800a5e0:	20000ae4 	.word	0x20000ae4
 800a5e4:	20000a48 	.word	0x20000a48
 800a5e8:	2000109c 	.word	0x2000109c
        else if( MacCtx.McpsConfirm.McpsRequest == MCPS_CONFIRMED )
 800a5ec:	2b01      	cmp	r3, #1
 800a5ee:	d12f      	bne.n	800a650 <LoRaMacProcess+0xa60>
            if( MacCtx.AckTimeoutRetry == true )
 800a5f0:	4b2a      	ldr	r3, [pc, #168]	@ (800a69c <LoRaMacProcess+0xaac>)
 800a5f2:	5ce1      	ldrb	r1, [r4, r3]
 800a5f4:	2900      	cmp	r1, #0
 800a5f6:	d101      	bne.n	800a5fc <LoRaMacProcess+0xa0c>
 800a5f8:	f7ff fc15 	bl	8009e26 <LoRaMacProcess+0x236>
    if( MacCtx.AckTimeoutRetriesCounter >=
 800a5fc:	4e28      	ldr	r6, [pc, #160]	@ (800a6a0 <LoRaMacProcess+0xab0>)
        MacCtx.AckTimeoutRetries )
 800a5fe:	4829      	ldr	r0, [pc, #164]	@ (800a6a4 <LoRaMacProcess+0xab4>)
    if( MacCtx.AckTimeoutRetriesCounter >=
 800a600:	5da3      	ldrb	r3, [r4, r6]
        MacCtx.AckTimeoutRetries )
 800a602:	5c20      	ldrb	r0, [r4, r0]
    if( MacCtx.AckTimeoutRetriesCounter >=
 800a604:	4283      	cmp	r3, r0
 800a606:	d204      	bcs.n	800a612 <LoRaMacProcess+0xa22>
    return false;
 800a608:	2100      	movs	r1, #0
    else if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 800a60a:	0792      	lsls	r2, r2, #30
 800a60c:	d501      	bpl.n	800a612 <LoRaMacProcess+0xa22>
        if( MacCtx.McpsConfirm.AckReceived == true )
 800a60e:	4a26      	ldr	r2, [pc, #152]	@ (800a6a8 <LoRaMacProcess+0xab8>)
 800a610:	5ca1      	ldrb	r1, [r4, r2]
                if( Nvm.MacGroup2.Version.Fields.Minor == 0 )
 800a612:	4f26      	ldr	r7, [pc, #152]	@ (800a6ac <LoRaMacProcess+0xabc>)
 800a614:	4a26      	ldr	r2, [pc, #152]	@ (800a6b0 <LoRaMacProcess+0xac0>)
 800a616:	7bff      	ldrb	r7, [r7, #15]
 800a618:	2f00      	cmp	r7, #0
 800a61a:	d13c      	bne.n	800a696 <LoRaMacProcess+0xaa6>
                    if( stopRetransmission == false )
 800a61c:	2900      	cmp	r1, #0
 800a61e:	d123      	bne.n	800a668 <LoRaMacProcess+0xa78>
    if( MacCtx.AckTimeoutRetriesCounter < MacCtx.AckTimeoutRetries )
 800a620:	4283      	cmp	r3, r0
 800a622:	d215      	bcs.n	800a650 <LoRaMacProcess+0xa60>
        MacCtx.AckTimeoutRetriesCounter++;
 800a624:	3301      	adds	r3, #1
 800a626:	b2db      	uxtb	r3, r3
 800a628:	55a3      	strb	r3, [r4, r6]
        if( ( MacCtx.AckTimeoutRetriesCounter % 2 ) == 1 )
 800a62a:	07db      	lsls	r3, r3, #31
 800a62c:	d510      	bpl.n	800a650 <LoRaMacProcess+0xa60>
            getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 800a62e:	2322      	movs	r3, #34	@ 0x22
 800a630:	a91c      	add	r1, sp, #112	@ 0x70
 800a632:	700b      	strb	r3, [r1, #0]
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800a634:	0013      	movs	r3, r2
            getPhy.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800a636:	0016      	movs	r6, r2
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800a638:	3374      	adds	r3, #116	@ 0x74
 800a63a:	781b      	ldrb	r3, [r3, #0]
            getPhy.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800a63c:	3639      	adds	r6, #57	@ 0x39
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800a63e:	708b      	strb	r3, [r1, #2]
            getPhy.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800a640:	7833      	ldrb	r3, [r6, #0]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800a642:	3240      	adds	r2, #64	@ 0x40
            getPhy.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800a644:	704b      	strb	r3, [r1, #1]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800a646:	7810      	ldrb	r0, [r2, #0]
 800a648:	f001 fefd 	bl	800c446 <RegionGetPhyParam>
 800a64c:	9012      	str	r0, [sp, #72]	@ 0x48
            Nvm.MacGroup1.ChannelsDatarate = phyParam.Value;
 800a64e:	7030      	strb	r0, [r6, #0]
            MacCtx.MacFlags.Bits.MacDone = 0;
 800a650:	2220      	movs	r2, #32
            MacCtx.AckTimeoutRetry = false;
 800a652:	2000      	movs	r0, #0
            MacCtx.MacFlags.Bits.MacDone = 0;
 800a654:	4917      	ldr	r1, [pc, #92]	@ (800a6b4 <LoRaMacProcess+0xac4>)
 800a656:	5c63      	ldrb	r3, [r4, r1]
 800a658:	4393      	bics	r3, r2
 800a65a:	5463      	strb	r3, [r4, r1]
            MacCtx.AckTimeoutRetry = false;
 800a65c:	4b0f      	ldr	r3, [pc, #60]	@ (800a69c <LoRaMacProcess+0xaac>)
 800a65e:	54e0      	strb	r0, [r4, r3]
            OnTxDelayedTimerEvent( NULL );
 800a660:	f7ff fa84 	bl	8009b6c <OnTxDelayedTimerEvent>
 800a664:	f7ff fbdf 	bl	8009e26 <LoRaMacProcess+0x236>
    if( MacCtx.McpsConfirm.AckReceived == false )
 800a668:	4b0f      	ldr	r3, [pc, #60]	@ (800a6a8 <LoRaMacProcess+0xab8>)
 800a66a:	5ce7      	ldrb	r7, [r4, r3]
 800a66c:	2f00      	cmp	r7, #0
 800a66e:	d10e      	bne.n	800a68e <LoRaMacProcess+0xa9e>
        params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 800a670:	2302      	movs	r3, #2
 800a672:	a91c      	add	r1, sp, #112	@ 0x70
 800a674:	720b      	strb	r3, [r1, #8]
        params.NvmGroup1 = &Nvm.RegionGroup1;
 800a676:	4b10      	ldr	r3, [pc, #64]	@ (800a6b8 <LoRaMacProcess+0xac8>)
        RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 800a678:	3240      	adds	r2, #64	@ 0x40
        params.NvmGroup1 = &Nvm.RegionGroup1;
 800a67a:	931c      	str	r3, [sp, #112]	@ 0x70
        params.NvmGroup2 = &Nvm.RegionGroup2;
 800a67c:	4b0f      	ldr	r3, [pc, #60]	@ (800a6bc <LoRaMacProcess+0xacc>)
 800a67e:	604b      	str	r3, [r1, #4]
        RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 800a680:	7810      	ldrb	r0, [r2, #0]
 800a682:	f001 fef3 	bl	800c46c <RegionInitDefaults>
        MacCtx.NodeAckRequested = false;
 800a686:	4b0e      	ldr	r3, [pc, #56]	@ (800a6c0 <LoRaMacProcess+0xad0>)
 800a688:	54e7      	strb	r7, [r4, r3]
        MacCtx.McpsConfirm.AckReceived = false;
 800a68a:	4b07      	ldr	r3, [pc, #28]	@ (800a6a8 <LoRaMacProcess+0xab8>)
 800a68c:	54e7      	strb	r7, [r4, r3]
    MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
 800a68e:	5da2      	ldrb	r2, [r4, r6]
 800a690:	4b0c      	ldr	r3, [pc, #48]	@ (800a6c4 <LoRaMacProcess+0xad4>)
 800a692:	54e2      	strb	r2, [r4, r3]
        if( stopRetransmission == true )
 800a694:	e767      	b.n	800a566 <LoRaMacProcess+0x976>
 800a696:	2900      	cmp	r1, #0
 800a698:	d0da      	beq.n	800a650 <LoRaMacProcess+0xa60>
 800a69a:	e764      	b.n	800a566 <LoRaMacProcess+0x976>
 800a69c:	00000413 	.word	0x00000413
 800a6a0:	00000412 	.word	0x00000412
 800a6a4:	00000411 	.word	0x00000411
 800a6a8:	0000043c 	.word	0x0000043c
 800a6ac:	20000ae7 	.word	0x20000ae7
 800a6b0:	200009e8 	.word	0x200009e8
 800a6b4:	00000481 	.word	0x00000481
 800a6b8:	20000bc0 	.word	0x20000bc0
 800a6bc:	20000c54 	.word	0x20000c54
 800a6c0:	00000414 	.word	0x00000414
 800a6c4:	0000043d 	.word	0x0000043d

0800a6c8 <LoRaMacInitialization>:
    return 0;
}


LoRaMacStatus_t LoRaMacInitialization( LoRaMacPrimitives_t* primitives, LoRaMacCallback_t* callbacks, LoRaMacRegion_t region )
{
 800a6c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a6ca:	b08f      	sub	sp, #60	@ 0x3c
    PhyParam_t phyParam;

    if( ( primitives == NULL ) ||
        ( callbacks == NULL ) )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800a6cc:	2503      	movs	r5, #3
{
 800a6ce:	9003      	str	r0, [sp, #12]
 800a6d0:	9104      	str	r1, [sp, #16]
 800a6d2:	9205      	str	r2, [sp, #20]
    if( ( primitives == NULL ) ||
 800a6d4:	2800      	cmp	r0, #0
 800a6d6:	d100      	bne.n	800a6da <LoRaMacInitialization+0x12>
 800a6d8:	e15e      	b.n	800a998 <LoRaMacInitialization+0x2d0>
 800a6da:	2900      	cmp	r1, #0
 800a6dc:	d100      	bne.n	800a6e0 <LoRaMacInitialization+0x18>
 800a6de:	e15b      	b.n	800a998 <LoRaMacInitialization+0x2d0>
    }

    if( ( primitives->MacMcpsConfirm == NULL ) ||
 800a6e0:	6803      	ldr	r3, [r0, #0]
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d100      	bne.n	800a6e8 <LoRaMacInitialization+0x20>
 800a6e6:	e157      	b.n	800a998 <LoRaMacInitialization+0x2d0>
 800a6e8:	6843      	ldr	r3, [r0, #4]
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	d100      	bne.n	800a6f0 <LoRaMacInitialization+0x28>
 800a6ee:	e153      	b.n	800a998 <LoRaMacInitialization+0x2d0>
        ( primitives->MacMcpsIndication == NULL ) ||
 800a6f0:	6883      	ldr	r3, [r0, #8]
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	d100      	bne.n	800a6f8 <LoRaMacInitialization+0x30>
 800a6f6:	e14f      	b.n	800a998 <LoRaMacInitialization+0x2d0>
        ( primitives->MacMlmeConfirm == NULL ) ||
 800a6f8:	68c3      	ldr	r3, [r0, #12]
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	d100      	bne.n	800a700 <LoRaMacInitialization+0x38>
 800a6fe:	e14b      	b.n	800a998 <LoRaMacInitialization+0x2d0>
        ( primitives->MacMlmeIndication == NULL ) )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }
    // Verify if the region is supported
    if( RegionIsActive( region ) == false )
 800a700:	0010      	movs	r0, r2
 800a702:	f001 fe9b 	bl	800c43c <RegionIsActive>
    {
        return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 800a706:	3506      	adds	r5, #6
    if( RegionIsActive( region ) == false )
 800a708:	2800      	cmp	r0, #0
 800a70a:	d100      	bne.n	800a70e <LoRaMacInitialization+0x46>
 800a70c:	e144      	b.n	800a998 <LoRaMacInitialization+0x2d0>
    }

    // Confirm queue reset
    LoRaMacConfirmQueueInit( primitives );
 800a70e:	9803      	ldr	r0, [sp, #12]
 800a710:	f001 f974 	bl	800b9fc <LoRaMacConfirmQueueInit>

    // Initialize the module context with zeros
    memset1( ( uint8_t* ) &Nvm, 0x00, sizeof( LoRaMacNvmData_t ) );
 800a714:	22d3      	movs	r2, #211	@ 0xd3
 800a716:	4cb0      	ldr	r4, [pc, #704]	@ (800a9d8 <LoRaMacInitialization+0x310>)
 800a718:	2100      	movs	r1, #0
 800a71a:	0020      	movs	r0, r4
 800a71c:	0092      	lsls	r2, r2, #2
 800a71e:	f003 f846 	bl	800d7ae <memset1>
    memset1( ( uint8_t* ) &MacCtx, 0x00, sizeof( LoRaMacCtx_t ) );
 800a722:	22a1      	movs	r2, #161	@ 0xa1
 800a724:	4fad      	ldr	r7, [pc, #692]	@ (800a9dc <LoRaMacInitialization+0x314>)
 800a726:	2100      	movs	r1, #0
 800a728:	0038      	movs	r0, r7
 800a72a:	00d2      	lsls	r2, r2, #3
 800a72c:	f003 f83f 	bl	800d7ae <memset1>

    // Set non zero variables to its default value
    MacCtx.AckTimeoutRetriesCounter = 1;
 800a730:	2201      	movs	r2, #1
    MacCtx.AckTimeoutRetries = 1;
    Nvm.MacGroup2.Region = region;
 800a732:	0026      	movs	r6, r4
    MacCtx.AckTimeoutRetriesCounter = 1;
 800a734:	4baa      	ldr	r3, [pc, #680]	@ (800a9e0 <LoRaMacInitialization+0x318>)
    Nvm.MacGroup2.Region = region;
 800a736:	3640      	adds	r6, #64	@ 0x40
    MacCtx.AckTimeoutRetriesCounter = 1;
 800a738:	54fa      	strb	r2, [r7, r3]
    MacCtx.AckTimeoutRetries = 1;
 800a73a:	4baa      	ldr	r3, [pc, #680]	@ (800a9e4 <LoRaMacInitialization+0x31c>)
    Nvm.MacGroup2.DeviceClass = CLASS_A;
 800a73c:	2500      	movs	r5, #0
    MacCtx.AckTimeoutRetries = 1;
 800a73e:	54fa      	strb	r2, [r7, r3]
    Nvm.MacGroup2.Region = region;
 800a740:	9b05      	ldr	r3, [sp, #20]
    Nvm.MacGroup2.MacParams.RepeaterSupport = false; /* ST_WORKAROUND: Keep repeater feature */
 800a742:	0021      	movs	r1, r4
    Nvm.MacGroup2.Region = region;
 800a744:	7033      	strb	r3, [r6, #0]
    Nvm.MacGroup2.DeviceClass = CLASS_A;
 800a746:	0023      	movs	r3, r4

    // Setup version
    Nvm.MacGroup2.Version.Value = LORAMAC_VERSION;
 800a748:	4aa7      	ldr	r2, [pc, #668]	@ (800a9e8 <LoRaMacInitialization+0x320>)
    Nvm.MacGroup2.DeviceClass = CLASS_A;
 800a74a:	33fc      	adds	r3, #252	@ 0xfc
    Nvm.MacGroup2.Version.Value = LORAMAC_VERSION;
 800a74c:	611a      	str	r2, [r3, #16]
    Nvm.MacGroup2.DeviceClass = CLASS_A;
 800a74e:	701d      	strb	r5, [r3, #0]

    // Reset to defaults
    getPhy.Attribute = PHY_DUTY_CYCLE;
 800a750:	230f      	movs	r3, #15
    Nvm.MacGroup2.MacParams.RepeaterSupport = false; /* ST_WORKAROUND: Keep repeater feature */
 800a752:	3180      	adds	r1, #128	@ 0x80
 800a754:	700d      	strb	r5, [r1, #0]
    getPhy.Attribute = PHY_DUTY_CYCLE;
 800a756:	ad09      	add	r5, sp, #36	@ 0x24
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800a758:	0029      	movs	r1, r5
 800a75a:	9805      	ldr	r0, [sp, #20]
    getPhy.Attribute = PHY_DUTY_CYCLE;
 800a75c:	702b      	strb	r3, [r5, #0]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800a75e:	f001 fe72 	bl	800c446 <RegionGetPhyParam>
    Nvm.MacGroup2.DutyCycleOn = ( bool ) phyParam.Value;
 800a762:	1e43      	subs	r3, r0, #1
 800a764:	4198      	sbcs	r0, r3
 800a766:	0023      	movs	r3, r4

    getPhy.Attribute = PHY_DEF_TX_POWER;
 800a768:	210a      	movs	r1, #10
    Nvm.MacGroup2.DutyCycleOn = ( bool ) phyParam.Value;
 800a76a:	33ff      	adds	r3, #255	@ 0xff
    getPhy.Attribute = PHY_DEF_TX_POWER;
 800a76c:	7029      	strb	r1, [r5, #0]
    Nvm.MacGroup2.DutyCycleOn = ( bool ) phyParam.Value;
 800a76e:	7058      	strb	r0, [r3, #1]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800a770:	0029      	movs	r1, r5
 800a772:	7830      	ldrb	r0, [r6, #0]
 800a774:	f001 fe67 	bl	800c446 <RegionGetPhyParam>
    Nvm.MacGroup2.ChannelsTxPowerDefault = phyParam.Value;
 800a778:	0023      	movs	r3, r4
 800a77a:	33c4      	adds	r3, #196	@ 0xc4
 800a77c:	7018      	strb	r0, [r3, #0]

    getPhy.Attribute = PHY_DEF_TX_DR;
 800a77e:	2006      	movs	r0, #6
 800a780:	7028      	strb	r0, [r5, #0]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800a782:	0029      	movs	r1, r5
 800a784:	7830      	ldrb	r0, [r6, #0]
 800a786:	f001 fe5e 	bl	800c446 <RegionGetPhyParam>
    Nvm.MacGroup2.ChannelsDatarateDefault = phyParam.Value;
 800a78a:	0023      	movs	r3, r4
 800a78c:	33c5      	adds	r3, #197	@ 0xc5
 800a78e:	7018      	strb	r0, [r3, #0]

    getPhy.Attribute = PHY_MAX_RX_WINDOW;
 800a790:	2310      	movs	r3, #16
 800a792:	702b      	strb	r3, [r5, #0]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800a794:	0029      	movs	r1, r5
 800a796:	7830      	ldrb	r0, [r6, #0]
 800a798:	f001 fe55 	bl	800c446 <RegionGetPhyParam>
    Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow = phyParam.Value;
 800a79c:	4b93      	ldr	r3, [pc, #588]	@ (800a9ec <LoRaMacInitialization+0x324>)

    getPhy.Attribute = PHY_RECEIVE_DELAY1;
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800a79e:	0029      	movs	r1, r5
    Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow = phyParam.Value;
 800a7a0:	6018      	str	r0, [r3, #0]
    getPhy.Attribute = PHY_RECEIVE_DELAY1;
 800a7a2:	2311      	movs	r3, #17
 800a7a4:	702b      	strb	r3, [r5, #0]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800a7a6:	7830      	ldrb	r0, [r6, #0]
 800a7a8:	f001 fe4d 	bl	800c446 <RegionGetPhyParam>
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1 = phyParam.Value;
 800a7ac:	4b90      	ldr	r3, [pc, #576]	@ (800a9f0 <LoRaMacInitialization+0x328>)

    getPhy.Attribute = PHY_RECEIVE_DELAY2;
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800a7ae:	0029      	movs	r1, r5
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1 = phyParam.Value;
 800a7b0:	6018      	str	r0, [r3, #0]
    getPhy.Attribute = PHY_RECEIVE_DELAY2;
 800a7b2:	2312      	movs	r3, #18
 800a7b4:	702b      	strb	r3, [r5, #0]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800a7b6:	7830      	ldrb	r0, [r6, #0]
 800a7b8:	f001 fe45 	bl	800c446 <RegionGetPhyParam>
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2 = phyParam.Value;
 800a7bc:	4b8d      	ldr	r3, [pc, #564]	@ (800a9f4 <LoRaMacInitialization+0x32c>)

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY1;
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800a7be:	0029      	movs	r1, r5
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2 = phyParam.Value;
 800a7c0:	6018      	str	r0, [r3, #0]
    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY1;
 800a7c2:	2313      	movs	r3, #19
 800a7c4:	702b      	strb	r3, [r5, #0]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800a7c6:	7830      	ldrb	r0, [r6, #0]
 800a7c8:	f001 fe3d 	bl	800c446 <RegionGetPhyParam>
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1 = phyParam.Value;
 800a7cc:	4b8a      	ldr	r3, [pc, #552]	@ (800a9f8 <LoRaMacInitialization+0x330>)

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY2;
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800a7ce:	0029      	movs	r1, r5
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1 = phyParam.Value;
 800a7d0:	6018      	str	r0, [r3, #0]
    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY2;
 800a7d2:	2314      	movs	r3, #20
 800a7d4:	702b      	strb	r3, [r5, #0]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800a7d6:	7830      	ldrb	r0, [r6, #0]
 800a7d8:	f001 fe35 	bl	800c446 <RegionGetPhyParam>
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2 = phyParam.Value;
 800a7dc:	4b87      	ldr	r3, [pc, #540]	@ (800a9fc <LoRaMacInitialization+0x334>)

    getPhy.Attribute = PHY_DEF_DR1_OFFSET;
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800a7de:	0029      	movs	r1, r5
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2 = phyParam.Value;
 800a7e0:	6018      	str	r0, [r3, #0]
    getPhy.Attribute = PHY_DEF_DR1_OFFSET;
 800a7e2:	2317      	movs	r3, #23
 800a7e4:	702b      	strb	r3, [r5, #0]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800a7e6:	7830      	ldrb	r0, [r6, #0]
 800a7e8:	f001 fe2d 	bl	800c446 <RegionGetPhyParam>
    Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset = phyParam.Value;
 800a7ec:	0023      	movs	r3, r4
 800a7ee:	33a1      	adds	r3, #161	@ 0xa1
 800a7f0:	7018      	strb	r0, [r3, #0]

    getPhy.Attribute = PHY_DEF_RX2_FREQUENCY;
 800a7f2:	2318      	movs	r3, #24
 800a7f4:	702b      	strb	r3, [r5, #0]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800a7f6:	0029      	movs	r1, r5
 800a7f8:	7830      	ldrb	r0, [r6, #0]
 800a7fa:	f001 fe24 	bl	800c446 <RegionGetPhyParam>
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Frequency = phyParam.Value;
 800a7fe:	0023      	movs	r3, r4
 800a800:	33a4      	adds	r3, #164	@ 0xa4
 800a802:	6018      	str	r0, [r3, #0]
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Frequency = phyParam.Value;
 800a804:	0023      	movs	r3, r4
 800a806:	33ac      	adds	r3, #172	@ 0xac
 800a808:	6018      	str	r0, [r3, #0]

    getPhy.Attribute = PHY_DEF_RX2_DR;
 800a80a:	2319      	movs	r3, #25
 800a80c:	702b      	strb	r3, [r5, #0]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800a80e:	0029      	movs	r1, r5
 800a810:	7830      	ldrb	r0, [r6, #0]
 800a812:	f001 fe18 	bl	800c446 <RegionGetPhyParam>
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Datarate = phyParam.Value;
 800a816:	0023      	movs	r3, r4
 800a818:	b2c0      	uxtb	r0, r0
 800a81a:	33a8      	adds	r3, #168	@ 0xa8
 800a81c:	7018      	strb	r0, [r3, #0]
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Datarate = phyParam.Value;
 800a81e:	0023      	movs	r3, r4
 800a820:	33b0      	adds	r3, #176	@ 0xb0
 800a822:	7018      	strb	r0, [r3, #0]

    getPhy.Attribute = PHY_DEF_UPLINK_DWELL_TIME;
 800a824:	231e      	movs	r3, #30
 800a826:	702b      	strb	r3, [r5, #0]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800a828:	0029      	movs	r1, r5
 800a82a:	7830      	ldrb	r0, [r6, #0]
 800a82c:	f001 fe0b 	bl	800c446 <RegionGetPhyParam>
    Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime = phyParam.Value;
 800a830:	0023      	movs	r3, r4
 800a832:	33b4      	adds	r3, #180	@ 0xb4
 800a834:	7018      	strb	r0, [r3, #0]

    getPhy.Attribute = PHY_DEF_DOWNLINK_DWELL_TIME;
 800a836:	231f      	movs	r3, #31
 800a838:	702b      	strb	r3, [r5, #0]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800a83a:	0029      	movs	r1, r5
 800a83c:	7830      	ldrb	r0, [r6, #0]
 800a83e:	f001 fe02 	bl	800c446 <RegionGetPhyParam>
    Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime = phyParam.Value;
 800a842:	0023      	movs	r3, r4
 800a844:	33b5      	adds	r3, #181	@ 0xb5
 800a846:	7018      	strb	r0, [r3, #0]

    getPhy.Attribute = PHY_DEF_MAX_EIRP;
 800a848:	2320      	movs	r3, #32
 800a84a:	702b      	strb	r3, [r5, #0]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800a84c:	0029      	movs	r1, r5
 800a84e:	7830      	ldrb	r0, [r6, #0]
 800a850:	f001 fdf9 	bl	800c446 <RegionGetPhyParam>
    Nvm.MacGroup2.MacParamsDefaults.MaxEirp = phyParam.fValue;
 800a854:	0023      	movs	r3, r4
 800a856:	33b8      	adds	r3, #184	@ 0xb8
 800a858:	6018      	str	r0, [r3, #0]

    getPhy.Attribute = PHY_DEF_ANTENNA_GAIN;
 800a85a:	2321      	movs	r3, #33	@ 0x21
 800a85c:	702b      	strb	r3, [r5, #0]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800a85e:	0029      	movs	r1, r5
 800a860:	7830      	ldrb	r0, [r6, #0]
 800a862:	f001 fdf0 	bl	800c446 <RegionGetPhyParam>
    Nvm.MacGroup2.MacParamsDefaults.AntennaGain = phyParam.fValue;
 800a866:	0023      	movs	r3, r4
 800a868:	33bc      	adds	r3, #188	@ 0xbc
 800a86a:	6018      	str	r0, [r3, #0]

    getPhy.Attribute = PHY_DEF_ADR_ACK_LIMIT;
 800a86c:	230b      	movs	r3, #11
 800a86e:	702b      	strb	r3, [r5, #0]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800a870:	0029      	movs	r1, r5
 800a872:	7830      	ldrb	r0, [r6, #0]
 800a874:	f001 fde7 	bl	800c446 <RegionGetPhyParam>
    MacCtx.AdrAckLimit = phyParam.Value;
 800a878:	23fd      	movs	r3, #253	@ 0xfd
 800a87a:	009b      	lsls	r3, r3, #2
 800a87c:	52f8      	strh	r0, [r7, r3]

    getPhy.Attribute = PHY_DEF_ADR_ACK_DELAY;
 800a87e:	230c      	movs	r3, #12
 800a880:	702b      	strb	r3, [r5, #0]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800a882:	0029      	movs	r1, r5
 800a884:	7830      	ldrb	r0, [r6, #0]
 800a886:	f001 fdde 	bl	800c446 <RegionGetPhyParam>
    MacCtx.AdrAckDelay = phyParam.Value;
 800a88a:	4b5d      	ldr	r3, [pc, #372]	@ (800aa00 <LoRaMacInitialization+0x338>)

    // Init parameters which are not set in function ResetMacParameters
    Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans = 1;
 800a88c:	2201      	movs	r2, #1
    MacCtx.AdrAckDelay = phyParam.Value;
 800a88e:	52f8      	strh	r0, [r7, r3]
    Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans = 1;
 800a890:	0023      	movs	r3, r4
    Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = 10;
 800a892:	210a      	movs	r1, #10
    Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans = 1;
 800a894:	33a0      	adds	r3, #160	@ 0xa0
 800a896:	701a      	strb	r2, [r3, #0]
    Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = 10;
 800a898:	4b5a      	ldr	r3, [pc, #360]	@ (800aa04 <LoRaMacInitialization+0x33c>)
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800a89a:	9008      	str	r0, [sp, #32]
    Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = 10;
 800a89c:	67d9      	str	r1, [r3, #124]	@ 0x7c
    Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = 6;
 800a89e:	0023      	movs	r3, r4
 800a8a0:	2006      	movs	r0, #6
 800a8a2:	3388      	adds	r3, #136	@ 0x88
 800a8a4:	7018      	strb	r0, [r3, #0]

    Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError;
    Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols;
 800a8a6:	0023      	movs	r3, r4
 800a8a8:	3348      	adds	r3, #72	@ 0x48
 800a8aa:	7018      	strb	r0, [r3, #0]
    Nvm.MacGroup2.MacParams.MaxRxWindow = Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow;
 800a8ac:	4b4f      	ldr	r3, [pc, #316]	@ (800a9ec <LoRaMacInitialization+0x324>)
    Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1;
    Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2;
    Nvm.MacGroup2.MacParams.ChannelsNbTrans = Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans;

    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_DEFAULTS;
 800a8ae:	2500      	movs	r5, #0
    Nvm.MacGroup2.MacParams.MaxRxWindow = Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow;
 800a8b0:	681b      	ldr	r3, [r3, #0]
    Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError;
 800a8b2:	6461      	str	r1, [r4, #68]	@ 0x44
    Nvm.MacGroup2.MacParams.MaxRxWindow = Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow;
 800a8b4:	64e3      	str	r3, [r4, #76]	@ 0x4c
    Nvm.MacGroup2.MacParams.ReceiveDelay1 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1;
 800a8b6:	4b4e      	ldr	r3, [pc, #312]	@ (800a9f0 <LoRaMacInitialization+0x328>)
    params.Type = INIT_TYPE_DEFAULTS;
 800a8b8:	a90b      	add	r1, sp, #44	@ 0x2c
    Nvm.MacGroup2.MacParams.ReceiveDelay1 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1;
 800a8ba:	681b      	ldr	r3, [r3, #0]
    params.Type = INIT_TYPE_DEFAULTS;
 800a8bc:	720d      	strb	r5, [r1, #8]
    Nvm.MacGroup2.MacParams.ReceiveDelay1 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1;
 800a8be:	6523      	str	r3, [r4, #80]	@ 0x50
    Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2;
 800a8c0:	4b4c      	ldr	r3, [pc, #304]	@ (800a9f4 <LoRaMacInitialization+0x32c>)
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	6563      	str	r3, [r4, #84]	@ 0x54
    Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1;
 800a8c6:	4b4c      	ldr	r3, [pc, #304]	@ (800a9f8 <LoRaMacInitialization+0x330>)
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	65a3      	str	r3, [r4, #88]	@ 0x58
    Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2;
 800a8cc:	4b4b      	ldr	r3, [pc, #300]	@ (800a9fc <LoRaMacInitialization+0x334>)
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	65e3      	str	r3, [r4, #92]	@ 0x5c
    Nvm.MacGroup2.MacParams.ChannelsNbTrans = Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans;
 800a8d2:	0023      	movs	r3, r4
 800a8d4:	3360      	adds	r3, #96	@ 0x60
 800a8d6:	701a      	strb	r2, [r3, #0]
    params.NvmGroup1 = &Nvm.RegionGroup1;
 800a8d8:	4b4b      	ldr	r3, [pc, #300]	@ (800aa08 <LoRaMacInitialization+0x340>)
 800a8da:	930b      	str	r3, [sp, #44]	@ 0x2c
    params.NvmGroup2 = &Nvm.RegionGroup2;
 800a8dc:	4b4b      	ldr	r3, [pc, #300]	@ (800aa0c <LoRaMacInitialization+0x344>)
 800a8de:	604b      	str	r3, [r1, #4]
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 800a8e0:	7830      	ldrb	r0, [r6, #0]
 800a8e2:	f001 fdc3 	bl	800c46c <RegionInitDefaults>

    MacCtx.MacCallbacks = callbacks;
 800a8e6:	23d2      	movs	r3, #210	@ 0xd2
 800a8e8:	9904      	ldr	r1, [sp, #16]
 800a8ea:	009b      	lsls	r3, r3, #2
 800a8ec:	50f9      	str	r1, [r7, r3]
    ResetMacParameters( );
 800a8ee:	f7fe fae3 	bl	8008eb8 <ResetMacParameters>

    Nvm.MacGroup2.PublicNetwork = true;
 800a8f2:	0023      	movs	r3, r4
 800a8f4:	2201      	movs	r2, #1
 800a8f6:	33fd      	adds	r3, #253	@ 0xfd
 800a8f8:	701a      	strb	r2, [r3, #0]

    MacCtx.MacPrimitives = primitives;
 800a8fa:	23d1      	movs	r3, #209	@ 0xd1
 800a8fc:	9903      	ldr	r1, [sp, #12]
 800a8fe:	009b      	lsls	r3, r3, #2
 800a900:	50f9      	str	r1, [r7, r3]
    // Reset duty cycle times
    Nvm.MacGroup1.LastTxDoneTime = 0;
    Nvm.MacGroup1.AggregatedTimeOff = 0;

    // Initialize timers
    TimerInit( &MacCtx.TxDelayedTimer, OnTxDelayedTimerEvent );
 800a902:	2101      	movs	r1, #1
    MacCtx.MacFlags.Value = 0;
 800a904:	4b42      	ldr	r3, [pc, #264]	@ (800aa10 <LoRaMacInitialization+0x348>)
    Nvm.MacGroup1.LastTxDoneTime = 0;
 800a906:	62e5      	str	r5, [r4, #44]	@ 0x2c
    MacCtx.MacFlags.Value = 0;
 800a908:	54fd      	strb	r5, [r7, r3]
    MacCtx.MacState = LORAMAC_STOPPED;
 800a90a:	3b42      	subs	r3, #66	@ 0x42
 800a90c:	3bff      	subs	r3, #255	@ 0xff
 800a90e:	50fa      	str	r2, [r7, r3]
    Nvm.MacGroup1.AggregatedTimeOff = 0;
 800a910:	6325      	str	r5, [r4, #48]	@ 0x30
    TimerInit( &MacCtx.TxDelayedTimer, OnTxDelayedTimerEvent );
 800a912:	002a      	movs	r2, r5
 800a914:	4b3f      	ldr	r3, [pc, #252]	@ (800aa14 <LoRaMacInitialization+0x34c>)
 800a916:	9500      	str	r5, [sp, #0]
 800a918:	4249      	negs	r1, r1
 800a91a:	483f      	ldr	r0, [pc, #252]	@ (800aa18 <LoRaMacInitialization+0x350>)
 800a91c:	f004 fea4 	bl	800f668 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer1, OnRxWindow1TimerEvent );
 800a920:	2101      	movs	r1, #1
 800a922:	002a      	movs	r2, r5
 800a924:	4b3d      	ldr	r3, [pc, #244]	@ (800aa1c <LoRaMacInitialization+0x354>)
 800a926:	9500      	str	r5, [sp, #0]
 800a928:	4249      	negs	r1, r1
 800a92a:	483d      	ldr	r0, [pc, #244]	@ (800aa20 <LoRaMacInitialization+0x358>)
 800a92c:	f004 fe9c 	bl	800f668 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer2, OnRxWindow2TimerEvent );
 800a930:	2101      	movs	r1, #1
 800a932:	002a      	movs	r2, r5
 800a934:	4b3b      	ldr	r3, [pc, #236]	@ (800aa24 <LoRaMacInitialization+0x35c>)
 800a936:	9500      	str	r5, [sp, #0]
 800a938:	4249      	negs	r1, r1
 800a93a:	483b      	ldr	r0, [pc, #236]	@ (800aa28 <LoRaMacInitialization+0x360>)
 800a93c:	f004 fe94 	bl	800f668 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.AckTimeoutTimer, OnAckTimeoutTimerEvent );
 800a940:	2101      	movs	r1, #1
 800a942:	002a      	movs	r2, r5
 800a944:	4249      	negs	r1, r1
 800a946:	4b39      	ldr	r3, [pc, #228]	@ (800aa2c <LoRaMacInitialization+0x364>)
 800a948:	9500      	str	r5, [sp, #0]
 800a94a:	4839      	ldr	r0, [pc, #228]	@ (800aa30 <LoRaMacInitialization+0x368>)

    // Store the current initialization time
    Nvm.MacGroup2.InitializationTime = SysTimeGetMcuTime( );
 800a94c:	ad06      	add	r5, sp, #24
    TimerInit( &MacCtx.AckTimeoutTimer, OnAckTimeoutTimerEvent );
 800a94e:	f004 fe8b 	bl	800f668 <UTIL_TIMER_Create>
    Nvm.MacGroup2.InitializationTime = SysTimeGetMcuTime( );
 800a952:	0028      	movs	r0, r5
 800a954:	f004 fd88 	bl	800f468 <SysTimeGetMcuTime>
 800a958:	1d63      	adds	r3, r4, #5
 800a95a:	33ff      	adds	r3, #255	@ 0xff
 800a95c:	cd06      	ldmia	r5!, {r1, r2}
 800a95e:	c306      	stmia	r3!, {r1, r2}

    // Initialize Radio driver
    MacCtx.RadioEvents.TxDone = OnRadioTxDone;
 800a960:	22d3      	movs	r2, #211	@ 0xd3
 800a962:	4b34      	ldr	r3, [pc, #208]	@ (800aa34 <LoRaMacInitialization+0x36c>)
 800a964:	0092      	lsls	r2, r2, #2
 800a966:	50bb      	str	r3, [r7, r2]
    MacCtx.RadioEvents.RxDone = OnRadioRxDone;
 800a968:	4b33      	ldr	r3, [pc, #204]	@ (800aa38 <LoRaMacInitialization+0x370>)
 800a96a:	3208      	adds	r2, #8
 800a96c:	50bb      	str	r3, [r7, r2]
    MacCtx.RadioEvents.RxError = OnRadioRxError;
 800a96e:	4b33      	ldr	r3, [pc, #204]	@ (800aa3c <LoRaMacInitialization+0x374>)
 800a970:	3208      	adds	r2, #8
 800a972:	50bb      	str	r3, [r7, r2]
    MacCtx.RadioEvents.TxTimeout = OnRadioTxTimeout;
 800a974:	4b32      	ldr	r3, [pc, #200]	@ (800aa40 <LoRaMacInitialization+0x378>)
 800a976:	3a0c      	subs	r2, #12
 800a978:	50bb      	str	r3, [r7, r2]
    MacCtx.RadioEvents.RxTimeout = OnRadioRxTimeout;
    Radio.Init( &MacCtx.RadioEvents );
 800a97a:	4e32      	ldr	r6, [pc, #200]	@ (800aa44 <LoRaMacInitialization+0x37c>)
    MacCtx.RadioEvents.RxTimeout = OnRadioRxTimeout;
 800a97c:	4b32      	ldr	r3, [pc, #200]	@ (800aa48 <LoRaMacInitialization+0x380>)
 800a97e:	3208      	adds	r2, #8
 800a980:	50bb      	str	r3, [r7, r2]
    Radio.Init( &MacCtx.RadioEvents );
 800a982:	4832      	ldr	r0, [pc, #200]	@ (800aa4c <LoRaMacInitialization+0x384>)
 800a984:	6833      	ldr	r3, [r6, #0]
 800a986:	4798      	blx	r3

    // Initialize the Secure Element driver
    if( SecureElementInit( &Nvm.SecureElement, callbacks->GetUniqueId ) != SECURE_ELEMENT_SUCCESS ) /* ST_WORKAROUND: Add unique ID callback as input parameter */
 800a988:	9b04      	ldr	r3, [sp, #16]
 800a98a:	4831      	ldr	r0, [pc, #196]	@ (800aa50 <LoRaMacInitialization+0x388>)
 800a98c:	6899      	ldr	r1, [r3, #8]
 800a98e:	f7fc ffc1 	bl	8007914 <SecureElementInit>
 800a992:	2800      	cmp	r0, #0
 800a994:	d003      	beq.n	800a99e <LoRaMacInitialization+0x2d6>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 800a996:	2511      	movs	r5, #17
    Radio.Sleep( );

    LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );

    return LORAMAC_STATUS_OK;
}
 800a998:	0028      	movs	r0, r5
 800a99a:	b00f      	add	sp, #60	@ 0x3c
 800a99c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if( LoRaMacCryptoInit( &Nvm.Crypto ) != LORAMAC_CRYPTO_SUCCESS )
 800a99e:	0020      	movs	r0, r4
 800a9a0:	f001 f9ec 	bl	800bd7c <LoRaMacCryptoInit>
 800a9a4:	2800      	cmp	r0, #0
 800a9a6:	d1f6      	bne.n	800a996 <LoRaMacInitialization+0x2ce>
    if( LoRaMacCommandsInit( ) != LORAMAC_COMMANDS_SUCCESS )
 800a9a8:	f000 ff0a 	bl	800b7c0 <LoRaMacCommandsInit>
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800a9ac:	2513      	movs	r5, #19
    if( LoRaMacCommandsInit( ) != LORAMAC_COMMANDS_SUCCESS )
 800a9ae:	2800      	cmp	r0, #0
 800a9b0:	d1f2      	bne.n	800a998 <LoRaMacInitialization+0x2d0>
    if( LoRaMacCryptoSetMulticastReference( Nvm.MacGroup2.MulticastChannelList ) != LORAMAC_CRYPTO_SUCCESS )
 800a9b2:	4828      	ldr	r0, [pc, #160]	@ (800aa54 <LoRaMacInitialization+0x38c>)
 800a9b4:	f001 fa54 	bl	800be60 <LoRaMacCryptoSetMulticastReference>
 800a9b8:	1e05      	subs	r5, r0, #0
 800a9ba:	d1ec      	bne.n	800a996 <LoRaMacInitialization+0x2ce>
    srand1( Radio.Random( ) );
 800a9bc:	6973      	ldr	r3, [r6, #20]
 800a9be:	4798      	blx	r3
    Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 800a9c0:	34fd      	adds	r4, #253	@ 0xfd
    srand1( Radio.Random( ) );
 800a9c2:	f002 febd 	bl	800d740 <srand1>
    Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 800a9c6:	7820      	ldrb	r0, [r4, #0]
 800a9c8:	6db3      	ldr	r3, [r6, #88]	@ 0x58
 800a9ca:	4798      	blx	r3
    Radio.Sleep( );
 800a9cc:	6af3      	ldr	r3, [r6, #44]	@ 0x2c
 800a9ce:	4798      	blx	r3
    MacCtx.AllowRequests = requestState;
 800a9d0:	2201      	movs	r2, #1
 800a9d2:	4b21      	ldr	r3, [pc, #132]	@ (800aa58 <LoRaMacInitialization+0x390>)
 800a9d4:	54fa      	strb	r2, [r7, r3]
    return LORAMAC_STATUS_OK;
 800a9d6:	e7df      	b.n	800a998 <LoRaMacInitialization+0x2d0>
 800a9d8:	200009e8 	.word	0x200009e8
 800a9dc:	20000d34 	.word	0x20000d34
 800a9e0:	00000412 	.word	0x00000412
 800a9e4:	00000411 	.word	0x00000411
 800a9e8:	01000300 	.word	0x01000300
 800a9ec:	20000a74 	.word	0x20000a74
 800a9f0:	20000a78 	.word	0x20000a78
 800a9f4:	20000a7c 	.word	0x20000a7c
 800a9f8:	20000a80 	.word	0x20000a80
 800a9fc:	20000a84 	.word	0x20000a84
 800aa00:	000003f6 	.word	0x000003f6
 800aa04:	200009f0 	.word	0x200009f0
 800aa08:	20000bc0 	.word	0x20000bc0
 800aa0c:	20000c54 	.word	0x20000c54
 800aa10:	00000481 	.word	0x00000481
 800aa14:	08009b6d 	.word	0x08009b6d
 800aa18:	2000109c 	.word	0x2000109c
 800aa1c:	0800950d 	.word	0x0800950d
 800aa20:	200010b4 	.word	0x200010b4
 800aa24:	0800956d 	.word	0x0800956d
 800aa28:	200010cc 	.word	0x200010cc
 800aa2c:	08008c25 	.word	0x08008c25
 800aa30:	2000112c 	.word	0x2000112c
 800aa34:	08008e65 	.word	0x08008e65
 800aa38:	08008e15 	.word	0x08008e15
 800aa3c:	08008bad 	.word	0x08008bad
 800aa40:	08008dd9 	.word	0x08008dd9
 800aa44:	080108d8 	.word	0x080108d8
 800aa48:	08008d9d 	.word	0x08008d9d
 800aa4c:	20001080 	.word	0x20001080
 800aa50:	20000b00 	.word	0x20000b00
 800aa54:	20000ab8 	.word	0x20000ab8
 800aa58:	00000482 	.word	0x00000482

0800aa5c <LoRaMacStart>:

LoRaMacStatus_t LoRaMacStart( void )
{
    MacCtx.MacState = LORAMAC_IDLE;
 800aa5c:	22d0      	movs	r2, #208	@ 0xd0
 800aa5e:	2000      	movs	r0, #0
 800aa60:	4b01      	ldr	r3, [pc, #4]	@ (800aa68 <LoRaMacStart+0xc>)
 800aa62:	0092      	lsls	r2, r2, #2
 800aa64:	5098      	str	r0, [r3, r2]
    return LORAMAC_STATUS_OK;
}
 800aa66:	4770      	bx	lr
 800aa68:	20000d34 	.word	0x20000d34

0800aa6c <LoRaMacQueryTxPossible>:
    }
    return LORAMAC_STATUS_BUSY;
}

LoRaMacStatus_t LoRaMacQueryTxPossible( uint8_t size, LoRaMacTxInfo_t* txInfo )
{
 800aa6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aa6e:	000c      	movs	r4, r1
    CalcNextAdrParams_t adrNext;
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 800aa70:	4929      	ldr	r1, [pc, #164]	@ (800ab18 <LoRaMacQueryTxPossible+0xac>)
{
 800aa72:	b089      	sub	sp, #36	@ 0x24
    int8_t datarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 800aa74:	000b      	movs	r3, r1
 800aa76:	466a      	mov	r2, sp
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 800aa78:	6a8e      	ldr	r6, [r1, #40]	@ 0x28
    int8_t datarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 800aa7a:	33c5      	adds	r3, #197	@ 0xc5
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 800aa7c:	9601      	str	r6, [sp, #4]
    int8_t datarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 800aa7e:	781b      	ldrb	r3, [r3, #0]
    int8_t txPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
    size_t macCmdsSize = 0;
 800aa80:	2700      	movs	r7, #0
    int8_t datarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 800aa82:	7093      	strb	r3, [r2, #2]
    int8_t txPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 800aa84:	000b      	movs	r3, r1
 800aa86:	33c4      	adds	r3, #196	@ 0xc4
 800aa88:	781b      	ldrb	r3, [r3, #0]
 800aa8a:	3203      	adds	r2, #3
 800aa8c:	7013      	strb	r3, [r2, #0]
{
 800aa8e:	0005      	movs	r5, r0

    if( txInfo == NULL )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800aa90:	2303      	movs	r3, #3
    size_t macCmdsSize = 0;
 800aa92:	9702      	str	r7, [sp, #8]
    if( txInfo == NULL )
 800aa94:	42bc      	cmp	r4, r7
 800aa96:	d037      	beq.n	800ab08 <LoRaMacQueryTxPossible+0x9c>
    }

    // Setup ADR request
    adrNext.Version = Nvm.MacGroup2.Version;
 800aa98:	000b      	movs	r3, r1
 800aa9a:	33fc      	adds	r3, #252	@ 0xfc
 800aa9c:	691b      	ldr	r3, [r3, #16]
 800aa9e:	a803      	add	r0, sp, #12
 800aaa0:	9303      	str	r3, [sp, #12]
    adrNext.UpdateChanMask = false;
    adrNext.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 800aaa2:	000b      	movs	r3, r1
    adrNext.UpdateChanMask = false;
 800aaa4:	7107      	strb	r7, [r0, #4]
    adrNext.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 800aaa6:	33fe      	adds	r3, #254	@ 0xfe
 800aaa8:	781b      	ldrb	r3, [r3, #0]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 800aaaa:	6086      	str	r6, [r0, #8]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 800aaac:	26fd      	movs	r6, #253	@ 0xfd
    adrNext.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 800aaae:	7143      	strb	r3, [r0, #5]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 800aab0:	4b1a      	ldr	r3, [pc, #104]	@ (800ab1c <LoRaMacQueryTxPossible+0xb0>)
 800aab2:	00b6      	lsls	r6, r6, #2
 800aab4:	599b      	ldr	r3, [r3, r6]
 800aab6:	9306      	str	r3, [sp, #24]
    adrNext.AdrAckDelay = MacCtx.AdrAckDelay;
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800aab8:	8f0b      	ldrh	r3, [r1, #56]	@ 0x38
 800aaba:	ba5b      	rev16	r3, r3
 800aabc:	8203      	strh	r3, [r0, #16]
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
    adrNext.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800aabe:	000b      	movs	r3, r1
 800aac0:	3374      	adds	r3, #116	@ 0x74
 800aac2:	781b      	ldrb	r3, [r3, #0]
    adrNext.Region = Nvm.MacGroup2.Region;
 800aac4:	3140      	adds	r1, #64	@ 0x40
    adrNext.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800aac6:	7483      	strb	r3, [r0, #18]
    adrNext.Region = Nvm.MacGroup2.Region;
 800aac8:	780b      	ldrb	r3, [r1, #0]

    // We call the function for information purposes only. We don't want to
    // apply the datarate, the tx power and the ADR ack counter.
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &adrAckCounter );
 800aaca:	4669      	mov	r1, sp
    adrNext.Region = Nvm.MacGroup2.Region;
 800aacc:	74c3      	strb	r3, [r0, #19]
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &adrAckCounter );
 800aace:	3102      	adds	r1, #2
 800aad0:	ab01      	add	r3, sp, #4
 800aad2:	f000 fde5 	bl	800b6a0 <LoRaMacAdrCalcNext>

    txInfo->CurrentPossiblePayloadSize = GetMaxAppPayloadWithoutFOptsLength( datarate );
 800aad6:	466b      	mov	r3, sp
 800aad8:	2002      	movs	r0, #2
 800aada:	5618      	ldrsb	r0, [r3, r0]
 800aadc:	f7fe f88a 	bl	8008bf4 <GetMaxAppPayloadWithoutFOptsLength>
 800aae0:	7060      	strb	r0, [r4, #1]

    if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 800aae2:	a802      	add	r0, sp, #8
 800aae4:	f000 ff0c 	bl	800b900 <LoRaMacCommandsGetSizeSerializedCmds>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800aae8:	2313      	movs	r3, #19
    if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 800aaea:	42b8      	cmp	r0, r7
 800aaec:	d10c      	bne.n	800ab08 <LoRaMacQueryTxPossible+0x9c>
    }

    // Verify if the MAC commands fit into the FOpts and into the maximum payload.
    if( ( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH >= macCmdsSize ) && ( txInfo->CurrentPossiblePayloadSize >= macCmdsSize ) )
 800aaee:	9a02      	ldr	r2, [sp, #8]
 800aaf0:	2a0f      	cmp	r2, #15
 800aaf2:	d80c      	bhi.n	800ab0e <LoRaMacQueryTxPossible+0xa2>
 800aaf4:	7863      	ldrb	r3, [r4, #1]
 800aaf6:	429a      	cmp	r2, r3
 800aaf8:	d809      	bhi.n	800ab0e <LoRaMacQueryTxPossible+0xa2>
    {
        txInfo->MaxPossibleApplicationDataSize = txInfo->CurrentPossiblePayloadSize - macCmdsSize;

        // Verify if the application data together with MAC command fit into the maximum payload.
        if( txInfo->CurrentPossiblePayloadSize >= ( macCmdsSize + size ) )
 800aafa:	18ad      	adds	r5, r5, r2
        txInfo->MaxPossibleApplicationDataSize = txInfo->CurrentPossiblePayloadSize - macCmdsSize;
 800aafc:	1a99      	subs	r1, r3, r2
        if( txInfo->CurrentPossiblePayloadSize >= ( macCmdsSize + size ) )
 800aafe:	42ab      	cmp	r3, r5
 800ab00:	419b      	sbcs	r3, r3
 800ab02:	425b      	negs	r3, r3
        txInfo->MaxPossibleApplicationDataSize = txInfo->CurrentPossiblePayloadSize - macCmdsSize;
 800ab04:	7021      	strb	r1, [r4, #0]
        if( txInfo->CurrentPossiblePayloadSize >= ( macCmdsSize + size ) )
 800ab06:	00db      	lsls	r3, r3, #3
    else
    {
        txInfo->MaxPossibleApplicationDataSize = 0;
        return LORAMAC_STATUS_LENGTH_ERROR;
    }
}
 800ab08:	0018      	movs	r0, r3
 800ab0a:	b009      	add	sp, #36	@ 0x24
 800ab0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        txInfo->MaxPossibleApplicationDataSize = 0;
 800ab0e:	2300      	movs	r3, #0
 800ab10:	7023      	strb	r3, [r4, #0]
           return LORAMAC_STATUS_LENGTH_ERROR;
 800ab12:	3308      	adds	r3, #8
        return LORAMAC_STATUS_LENGTH_ERROR;
 800ab14:	e7f8      	b.n	800ab08 <LoRaMacQueryTxPossible+0x9c>
 800ab16:	46c0      	nop			@ (mov r8, r8)
 800ab18:	200009e8 	.word	0x200009e8
 800ab1c:	20000d34 	.word	0x20000d34

0800ab20 <LoRaMacMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibGetRequestConfirm( MibRequestConfirm_t* mibGet )
{
 800ab20:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ab22:	0004      	movs	r4, r0
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( mibGet == NULL )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800ab24:	2003      	movs	r0, #3
    if( mibGet == NULL )
 800ab26:	2c00      	cmp	r4, #0
 800ab28:	d01e      	beq.n	800ab68 <LoRaMacMibGetRequestConfirm+0x48>
    }

    switch( mibGet->Type )
 800ab2a:	7820      	ldrb	r0, [r4, #0]
 800ab2c:	2828      	cmp	r0, #40	@ 0x28
 800ab2e:	d900      	bls.n	800ab32 <LoRaMacMibGetRequestConfirm+0x12>
 800ab30:	e07b      	b.n	800ac2a <LoRaMacMibGetRequestConfirm+0x10a>
 800ab32:	f7f5 fafb 	bl	800012c <__gnu_thumb1_case_uqi>
 800ab36:	1b15      	.short	0x1b15
 800ab38:	2725221e 	.word	0x2725221e
 800ab3c:	7a7a7a2b 	.word	0x7a7a7a2b
 800ab40:	7a7a7a7a 	.word	0x7a7a7a7a
 800ab44:	312f2d7a 	.word	0x312f2d7a
 800ab48:	44413e39 	.word	0x44413e39
 800ab4c:	4e4c4649 	.word	0x4e4c4649
 800ab50:	5a575451 	.word	0x5a575451
 800ab54:	61635f5d 	.word	0x61635f5d
 800ab58:	706a6865 	.word	0x706a6865
 800ab5c:	7a6e      	.short	0x7a6e
 800ab5e:	73          	.byte	0x73
 800ab5f:	00          	.byte	0x00
    {
        case MIB_DEVICE_CLASS:
        {
            mibGet->Param.Class = Nvm.MacGroup2.DeviceClass;
 800ab60:	4b34      	ldr	r3, [pc, #208]	@ (800ac34 <LoRaMacMibGetRequestConfirm+0x114>)
 800ab62:	781b      	ldrb	r3, [r3, #0]
 800ab64:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ab66:	2000      	movs	r0, #0
            status = LoRaMacClassBMibGetRequestConfirm( mibGet );
            break;
        }
    }
    return status;
}
 800ab68:	b004      	add	sp, #16
 800ab6a:	bd10      	pop	{r4, pc}
            mibGet->Param.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 800ab6c:	4b32      	ldr	r3, [pc, #200]	@ (800ac38 <LoRaMacMibGetRequestConfirm+0x118>)
 800ab6e:	7c5b      	ldrb	r3, [r3, #17]
 800ab70:	e7f8      	b.n	800ab64 <LoRaMacMibGetRequestConfirm+0x44>
            mibGet->Param.DevEui = SecureElementGetDevEui( );
 800ab72:	f7fd f839 	bl	8007be8 <SecureElementGetDevEui>
            mibGet->Param.JoinEui = SecureElementGetJoinEui( );
 800ab76:	6060      	str	r0, [r4, #4]
            break;
 800ab78:	e7f5      	b.n	800ab66 <LoRaMacMibGetRequestConfirm+0x46>
            mibGet->Param.JoinEui = SecureElementGetJoinEui( );
 800ab7a:	f7fd f84b 	bl	8007c14 <SecureElementGetJoinEui>
 800ab7e:	e7fa      	b.n	800ab76 <LoRaMacMibGetRequestConfirm+0x56>
            mibGet->Param.AdrEnable = Nvm.MacGroup2.AdrCtrlOn;
 800ab80:	4b2e      	ldr	r3, [pc, #184]	@ (800ac3c <LoRaMacMibGetRequestConfirm+0x11c>)
 800ab82:	e7ee      	b.n	800ab62 <LoRaMacMibGetRequestConfirm+0x42>
            mibGet->Param.NetID = Nvm.MacGroup2.NetID;
 800ab84:	4b2e      	ldr	r3, [pc, #184]	@ (800ac40 <LoRaMacMibGetRequestConfirm+0x120>)
            mibGet->Param.DevAddr = Nvm.MacGroup2.DevAddr;
 800ab86:	681b      	ldr	r3, [r3, #0]
            mibGet->Param.Contexts = GetNvmData( );
 800ab88:	6063      	str	r3, [r4, #4]
            break;
 800ab8a:	e7ec      	b.n	800ab66 <LoRaMacMibGetRequestConfirm+0x46>
            mibGet->Param.DevAddr = Nvm.MacGroup2.DevAddr;
 800ab8c:	4b2d      	ldr	r3, [pc, #180]	@ (800ac44 <LoRaMacMibGetRequestConfirm+0x124>)
 800ab8e:	e7fa      	b.n	800ab86 <LoRaMacMibGetRequestConfirm+0x66>
            mibGet->Param.EnablePublicNetwork = Nvm.MacGroup2.PublicNetwork;
 800ab90:	4b2d      	ldr	r3, [pc, #180]	@ (800ac48 <LoRaMacMibGetRequestConfirm+0x128>)
 800ab92:	e7e6      	b.n	800ab62 <LoRaMacMibGetRequestConfirm+0x42>
            mibGet->Param.EnableRepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 800ab94:	4b2d      	ldr	r3, [pc, #180]	@ (800ac4c <LoRaMacMibGetRequestConfirm+0x12c>)
 800ab96:	e7e4      	b.n	800ab62 <LoRaMacMibGetRequestConfirm+0x42>
            getPhy.Attribute = PHY_CHANNELS;
 800ab98:	231d      	movs	r3, #29
 800ab9a:	a902      	add	r1, sp, #8
            getPhy.Attribute = PHY_CHANNELS_MASK;
 800ab9c:	700b      	strb	r3, [r1, #0]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800ab9e:	4b2c      	ldr	r3, [pc, #176]	@ (800ac50 <LoRaMacMibGetRequestConfirm+0x130>)
 800aba0:	7818      	ldrb	r0, [r3, #0]
 800aba2:	f001 fc50 	bl	800c446 <RegionGetPhyParam>
 800aba6:	e7e6      	b.n	800ab76 <LoRaMacMibGetRequestConfirm+0x56>
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParams.Rx2Channel;
 800aba8:	4b2a      	ldr	r3, [pc, #168]	@ (800ac54 <LoRaMacMibGetRequestConfirm+0x134>)
 800abaa:	3404      	adds	r4, #4
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 800abac:	cb06      	ldmia	r3!, {r1, r2}
 800abae:	c406      	stmia	r4!, {r1, r2}
            break;
 800abb0:	e7d9      	b.n	800ab66 <LoRaMacMibGetRequestConfirm+0x46>
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 800abb2:	4b29      	ldr	r3, [pc, #164]	@ (800ac58 <LoRaMacMibGetRequestConfirm+0x138>)
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 800abb4:	3404      	adds	r4, #4
 800abb6:	e7f9      	b.n	800abac <LoRaMacMibGetRequestConfirm+0x8c>
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParams.RxCChannel;
 800abb8:	4b28      	ldr	r3, [pc, #160]	@ (800ac5c <LoRaMacMibGetRequestConfirm+0x13c>)
 800abba:	3404      	adds	r4, #4
 800abbc:	e7f6      	b.n	800abac <LoRaMacMibGetRequestConfirm+0x8c>
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 800abbe:	4b28      	ldr	r3, [pc, #160]	@ (800ac60 <LoRaMacMibGetRequestConfirm+0x140>)
 800abc0:	e7f8      	b.n	800abb4 <LoRaMacMibGetRequestConfirm+0x94>
            getPhy.Attribute = PHY_CHANNELS_DEFAULT_MASK;
 800abc2:	231b      	movs	r3, #27
 800abc4:	a902      	add	r1, sp, #8
 800abc6:	e7e9      	b.n	800ab9c <LoRaMacMibGetRequestConfirm+0x7c>
            getPhy.Attribute = PHY_CHANNELS_MASK;
 800abc8:	231a      	movs	r3, #26
 800abca:	a902      	add	r1, sp, #8
 800abcc:	e7e6      	b.n	800ab9c <LoRaMacMibGetRequestConfirm+0x7c>
            mibGet->Param.ChannelsNbTrans = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 800abce:	4b25      	ldr	r3, [pc, #148]	@ (800ac64 <LoRaMacMibGetRequestConfirm+0x144>)
 800abd0:	e7c7      	b.n	800ab62 <LoRaMacMibGetRequestConfirm+0x42>
            mibGet->Param.MaxRxWindow = Nvm.MacGroup2.MacParams.MaxRxWindow;
 800abd2:	4b25      	ldr	r3, [pc, #148]	@ (800ac68 <LoRaMacMibGetRequestConfirm+0x148>)
 800abd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800abd6:	e7d7      	b.n	800ab88 <LoRaMacMibGetRequestConfirm+0x68>
            mibGet->Param.ReceiveDelay1 = Nvm.MacGroup2.MacParams.ReceiveDelay1;
 800abd8:	4b23      	ldr	r3, [pc, #140]	@ (800ac68 <LoRaMacMibGetRequestConfirm+0x148>)
 800abda:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800abdc:	e7d4      	b.n	800ab88 <LoRaMacMibGetRequestConfirm+0x68>
            mibGet->Param.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay2;
 800abde:	4b22      	ldr	r3, [pc, #136]	@ (800ac68 <LoRaMacMibGetRequestConfirm+0x148>)
 800abe0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800abe2:	e7d1      	b.n	800ab88 <LoRaMacMibGetRequestConfirm+0x68>
            mibGet->Param.JoinAcceptDelay1 = Nvm.MacGroup2.MacParams.JoinAcceptDelay1;
 800abe4:	4b20      	ldr	r3, [pc, #128]	@ (800ac68 <LoRaMacMibGetRequestConfirm+0x148>)
 800abe6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800abe8:	e7ce      	b.n	800ab88 <LoRaMacMibGetRequestConfirm+0x68>
            mibGet->Param.JoinAcceptDelay2 = Nvm.MacGroup2.MacParams.JoinAcceptDelay2;
 800abea:	4b1f      	ldr	r3, [pc, #124]	@ (800ac68 <LoRaMacMibGetRequestConfirm+0x148>)
 800abec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800abee:	e7cb      	b.n	800ab88 <LoRaMacMibGetRequestConfirm+0x68>
            mibGet->Param.ChannelsDefaultDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 800abf0:	4b1e      	ldr	r3, [pc, #120]	@ (800ac6c <LoRaMacMibGetRequestConfirm+0x14c>)
 800abf2:	e7b6      	b.n	800ab62 <LoRaMacMibGetRequestConfirm+0x42>
            mibGet->Param.ChannelsDatarate = Nvm.MacGroup1.ChannelsDatarate;
 800abf4:	4b1e      	ldr	r3, [pc, #120]	@ (800ac70 <LoRaMacMibGetRequestConfirm+0x150>)
 800abf6:	e7b4      	b.n	800ab62 <LoRaMacMibGetRequestConfirm+0x42>
            mibGet->Param.ChannelsDefaultTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 800abf8:	4b1e      	ldr	r3, [pc, #120]	@ (800ac74 <LoRaMacMibGetRequestConfirm+0x154>)
 800abfa:	e7b2      	b.n	800ab62 <LoRaMacMibGetRequestConfirm+0x42>
            mibGet->Param.ChannelsTxPower = Nvm.MacGroup1.ChannelsTxPower;
 800abfc:	4b1e      	ldr	r3, [pc, #120]	@ (800ac78 <LoRaMacMibGetRequestConfirm+0x158>)
 800abfe:	e7b0      	b.n	800ab62 <LoRaMacMibGetRequestConfirm+0x42>
            mibGet->Param.SystemMaxRxError = Nvm.MacGroup2.MacParams.SystemMaxRxError;
 800ac00:	4b19      	ldr	r3, [pc, #100]	@ (800ac68 <LoRaMacMibGetRequestConfirm+0x148>)
 800ac02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ac04:	e7c0      	b.n	800ab88 <LoRaMacMibGetRequestConfirm+0x68>
            mibGet->Param.MinRxSymbols = Nvm.MacGroup2.MacParams.MinRxSymbols;
 800ac06:	4b1d      	ldr	r3, [pc, #116]	@ (800ac7c <LoRaMacMibGetRequestConfirm+0x15c>)
 800ac08:	e7ab      	b.n	800ab62 <LoRaMacMibGetRequestConfirm+0x42>
            mibGet->Param.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 800ac0a:	4b17      	ldr	r3, [pc, #92]	@ (800ac68 <LoRaMacMibGetRequestConfirm+0x148>)
 800ac0c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
            mibGet->Param.DefaultAntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 800ac0e:	6063      	str	r3, [r4, #4]
            break;
 800ac10:	e7a9      	b.n	800ab66 <LoRaMacMibGetRequestConfirm+0x46>
            mibGet->Param.Contexts = GetNvmData( );
 800ac12:	4b15      	ldr	r3, [pc, #84]	@ (800ac68 <LoRaMacMibGetRequestConfirm+0x148>)
 800ac14:	e7b8      	b.n	800ab88 <LoRaMacMibGetRequestConfirm+0x68>
            mibGet->Param.DefaultAntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 800ac16:	4b1a      	ldr	r3, [pc, #104]	@ (800ac80 <LoRaMacMibGetRequestConfirm+0x160>)
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	e7f8      	b.n	800ac0e <LoRaMacMibGetRequestConfirm+0xee>
            mibGet->Param.LrWanVersion.LoRaWan = Nvm.MacGroup2.Version;
 800ac1c:	4b05      	ldr	r3, [pc, #20]	@ (800ac34 <LoRaMacMibGetRequestConfirm+0x114>)
 800ac1e:	691b      	ldr	r3, [r3, #16]
 800ac20:	6063      	str	r3, [r4, #4]
            mibGet->Param.LrWanVersion.LoRaWanRegion = RegionGetVersion( );
 800ac22:	f001 fcd1 	bl	800c5c8 <RegionGetVersion>
 800ac26:	60a0      	str	r0, [r4, #8]
            break;
 800ac28:	e79d      	b.n	800ab66 <LoRaMacMibGetRequestConfirm+0x46>
            status = LoRaMacClassBMibGetRequestConfirm( mibGet );
 800ac2a:	0020      	movs	r0, r4
 800ac2c:	f000 fdb8 	bl	800b7a0 <LoRaMacClassBMibGetRequestConfirm>
            break;
 800ac30:	e79a      	b.n	800ab68 <LoRaMacMibGetRequestConfirm+0x48>
 800ac32:	46c0      	nop			@ (mov r8, r8)
 800ac34:	20000ae4 	.word	0x20000ae4
 800ac38:	20000ae7 	.word	0x20000ae7
 800ac3c:	20000ae6 	.word	0x20000ae6
 800ac40:	20000ab0 	.word	0x20000ab0
 800ac44:	20000ab4 	.word	0x20000ab4
 800ac48:	20000ae5 	.word	0x20000ae5
 800ac4c:	20000a68 	.word	0x20000a68
 800ac50:	20000a28 	.word	0x20000a28
 800ac54:	20000a4c 	.word	0x20000a4c
 800ac58:	20000a8c 	.word	0x20000a8c
 800ac5c:	20000a54 	.word	0x20000a54
 800ac60:	20000a94 	.word	0x20000a94
 800ac64:	20000a48 	.word	0x20000a48
 800ac68:	200009e8 	.word	0x200009e8
 800ac6c:	20000aad 	.word	0x20000aad
 800ac70:	20000a21 	.word	0x20000a21
 800ac74:	20000aac 	.word	0x20000aac
 800ac78:	20000a20 	.word	0x20000a20
 800ac7c:	20000a30 	.word	0x20000a30
 800ac80:	20000aa4 	.word	0x20000aa4

0800ac84 <LoRaMacMibSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibSetRequestConfirm( MibRequestConfirm_t* mibSet )
{
 800ac84:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ac86:	1e04      	subs	r4, r0, #0
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
    ChanMaskSetParams_t chanMaskSet;
    VerifyParams_t verify;

    if( mibSet == NULL )
 800ac88:	d101      	bne.n	800ac8e <LoRaMacMibSetRequestConfirm+0xa>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800ac8a:	2003      	movs	r0, #3
            status = LoRaMacMibClassBSetRequestConfirm( mibSet );
            break;
        }
    }
    return status;
}
 800ac8c:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
    if( ( MacCtx.MacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING )
 800ac8e:	23d0      	movs	r3, #208	@ 0xd0
 800ac90:	4dbe      	ldr	r5, [pc, #760]	@ (800af8c <LoRaMacMibSetRequestConfirm+0x308>)
 800ac92:	009b      	lsls	r3, r3, #2
 800ac94:	58eb      	ldr	r3, [r5, r3]
        return LORAMAC_STATUS_BUSY;
 800ac96:	2001      	movs	r0, #1
    if( ( MacCtx.MacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING )
 800ac98:	079a      	lsls	r2, r3, #30
 800ac9a:	d4f7      	bmi.n	800ac8c <LoRaMacMibSetRequestConfirm+0x8>
    switch( mibSet->Type )
 800ac9c:	7820      	ldrb	r0, [r4, #0]
 800ac9e:	2827      	cmp	r0, #39	@ 0x27
 800aca0:	d900      	bls.n	800aca4 <LoRaMacMibSetRequestConfirm+0x20>
 800aca2:	e218      	b.n	800b0d6 <LoRaMacMibSetRequestConfirm+0x452>
 800aca4:	f7f5 fa56 	bl	8000154 <__gnu_thumb1_case_uhi>
 800aca8:	002c0028 	.word	0x002c0028
 800acac:	00390033 	.word	0x00390033
 800acb0:	0041003d 	.word	0x0041003d
 800acb4:	00470045 	.word	0x00470045
 800acb8:	00560051 	.word	0x00560051
 800acbc:	0060005b 	.word	0x0060005b
 800acc0:	006a0065 	.word	0x006a0065
 800acc4:	0074006f 	.word	0x0074006f
 800acc8:	0217007d 	.word	0x0217007d
 800accc:	009f007f 	.word	0x009f007f
 800acd0:	00dc00b5 	.word	0x00dc00b5
 800acd4:	00ef00fd 	.word	0x00ef00fd
 800acd8:	01090101 	.word	0x01090101
 800acdc:	0111010d 	.word	0x0111010d
 800ace0:	01190115 	.word	0x01190115
 800ace4:	012f011d 	.word	0x012f011d
 800ace8:	0141014f 	.word	0x0141014f
 800acec:	0164015e 	.word	0x0164015e
 800acf0:	016d0169 	.word	0x016d0169
 800acf4:	020c0194 	.word	0x020c0194
            status = SwitchClass( mibSet->Param.Class );
 800acf8:	7920      	ldrb	r0, [r4, #4]
 800acfa:	f7fe fb6f 	bl	80093dc <SwitchClass>
            break;
 800acfe:	e7c5      	b.n	800ac8c <LoRaMacMibSetRequestConfirm+0x8>
            if( mibSet->Param.NetworkActivation != ACTIVATION_TYPE_OTAA  )
 800ad00:	7923      	ldrb	r3, [r4, #4]
 800ad02:	2b02      	cmp	r3, #2
 800ad04:	d0c1      	beq.n	800ac8a <LoRaMacMibSetRequestConfirm+0x6>
                Nvm.MacGroup2.NetworkActivation = mibSet->Param.NetworkActivation;
 800ad06:	4aa2      	ldr	r2, [pc, #648]	@ (800af90 <LoRaMacMibSetRequestConfirm+0x30c>)
 800ad08:	7453      	strb	r3, [r2, #17]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ad0a:	2000      	movs	r0, #0
 800ad0c:	e7be      	b.n	800ac8c <LoRaMacMibSetRequestConfirm+0x8>
            if( SecureElementSetDevEui( mibSet->Param.DevEui ) != SECURE_ELEMENT_SUCCESS )
 800ad0e:	6860      	ldr	r0, [r4, #4]
 800ad10:	f7fc ff5c 	bl	8007bcc <SecureElementSetDevEui>
            if( SecureElementSetJoinEui( mibSet->Param.JoinEui ) != SECURE_ELEMENT_SUCCESS )
 800ad14:	2800      	cmp	r0, #0
 800ad16:	d0f8      	beq.n	800ad0a <LoRaMacMibSetRequestConfirm+0x86>
 800ad18:	e7b7      	b.n	800ac8a <LoRaMacMibSetRequestConfirm+0x6>
 800ad1a:	6860      	ldr	r0, [r4, #4]
 800ad1c:	f7fc ff6a 	bl	8007bf4 <SecureElementSetJoinEui>
 800ad20:	e7f8      	b.n	800ad14 <LoRaMacMibSetRequestConfirm+0x90>
            Nvm.MacGroup2.AdrCtrlOn = mibSet->Param.AdrEnable;
 800ad22:	4b9c      	ldr	r3, [pc, #624]	@ (800af94 <LoRaMacMibSetRequestConfirm+0x310>)
            Nvm.MacGroup2.MacParams.RepeaterSupport = mibSet->Param.EnableRepeaterSupport;
 800ad24:	7922      	ldrb	r2, [r4, #4]
 800ad26:	701a      	strb	r2, [r3, #0]
            break;
 800ad28:	e7ef      	b.n	800ad0a <LoRaMacMibSetRequestConfirm+0x86>
            Nvm.MacGroup2.NetID = mibSet->Param.NetID;
 800ad2a:	4b9b      	ldr	r3, [pc, #620]	@ (800af98 <LoRaMacMibSetRequestConfirm+0x314>)
            Nvm.MacGroup2.DevAddr = mibSet->Param.DevAddr;
 800ad2c:	6862      	ldr	r2, [r4, #4]
 800ad2e:	601a      	str	r2, [r3, #0]
            break;
 800ad30:	e7eb      	b.n	800ad0a <LoRaMacMibSetRequestConfirm+0x86>
            Nvm.MacGroup2.DevAddr = mibSet->Param.DevAddr;
 800ad32:	4b9a      	ldr	r3, [pc, #616]	@ (800af9c <LoRaMacMibSetRequestConfirm+0x318>)
 800ad34:	e7fa      	b.n	800ad2c <LoRaMacMibSetRequestConfirm+0xa8>
            if( mibSet->Param.AppKey != NULL )
 800ad36:	6861      	ldr	r1, [r4, #4]
 800ad38:	2900      	cmp	r1, #0
 800ad3a:	d0a6      	beq.n	800ac8a <LoRaMacMibSetRequestConfirm+0x6>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_KEY, mibSet->Param.AppKey ) )
 800ad3c:	2000      	movs	r0, #0
 800ad3e:	f001 f9a9 	bl	800c094 <LoRaMacCryptoSetKey>
 800ad42:	2800      	cmp	r0, #0
 800ad44:	d0e1      	beq.n	800ad0a <LoRaMacMibSetRequestConfirm+0x86>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800ad46:	2011      	movs	r0, #17
 800ad48:	e7a0      	b.n	800ac8c <LoRaMacMibSetRequestConfirm+0x8>
            if( mibSet->Param.NwkKey != NULL )
 800ad4a:	6861      	ldr	r1, [r4, #4]
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_KEY, mibSet->Param.NwkKey ) )
 800ad4c:	2001      	movs	r0, #1
            if( mibSet->Param.NwkKey != NULL )
 800ad4e:	2900      	cmp	r1, #0
 800ad50:	d1f5      	bne.n	800ad3e <LoRaMacMibSetRequestConfirm+0xba>
 800ad52:	e79a      	b.n	800ac8a <LoRaMacMibSetRequestConfirm+0x6>
            if( mibSet->Param.NwkSKey != NULL )
 800ad54:	6861      	ldr	r1, [r4, #4]
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_S_KEY, mibSet->Param.NwkSKey ) )
 800ad56:	2002      	movs	r0, #2
            if( mibSet->Param.NwkSKey != NULL )
 800ad58:	2900      	cmp	r1, #0
 800ad5a:	d1f0      	bne.n	800ad3e <LoRaMacMibSetRequestConfirm+0xba>
 800ad5c:	e795      	b.n	800ac8a <LoRaMacMibSetRequestConfirm+0x6>
            if( mibSet->Param.AppSKey != NULL )
 800ad5e:	6861      	ldr	r1, [r4, #4]
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_S_KEY, mibSet->Param.AppSKey ) )
 800ad60:	2003      	movs	r0, #3
            if( mibSet->Param.AppSKey != NULL )
 800ad62:	2900      	cmp	r1, #0
 800ad64:	d1eb      	bne.n	800ad3e <LoRaMacMibSetRequestConfirm+0xba>
 800ad66:	e790      	b.n	800ac8a <LoRaMacMibSetRequestConfirm+0x6>
            if( mibSet->Param.McKEKey != NULL )
 800ad68:	6861      	ldr	r1, [r4, #4]
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KE_KEY, mibSet->Param.McKEKey ) )
 800ad6a:	207f      	movs	r0, #127	@ 0x7f
            if( mibSet->Param.McKEKey != NULL )
 800ad6c:	2900      	cmp	r1, #0
 800ad6e:	d1e6      	bne.n	800ad3e <LoRaMacMibSetRequestConfirm+0xba>
 800ad70:	e78b      	b.n	800ac8a <LoRaMacMibSetRequestConfirm+0x6>
            if( mibSet->Param.McKey0 != NULL )
 800ad72:	6861      	ldr	r1, [r4, #4]
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_0, mibSet->Param.McKey0 ) )
 800ad74:	2080      	movs	r0, #128	@ 0x80
            if( mibSet->Param.McKey0 != NULL )
 800ad76:	2900      	cmp	r1, #0
 800ad78:	d1e1      	bne.n	800ad3e <LoRaMacMibSetRequestConfirm+0xba>
 800ad7a:	e786      	b.n	800ac8a <LoRaMacMibSetRequestConfirm+0x6>
            if( mibSet->Param.McAppSKey0 != NULL )
 800ad7c:	6861      	ldr	r1, [r4, #4]
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_0, mibSet->Param.McAppSKey0 ) )
 800ad7e:	2081      	movs	r0, #129	@ 0x81
            if( mibSet->Param.McAppSKey0 != NULL )
 800ad80:	2900      	cmp	r1, #0
 800ad82:	d1dc      	bne.n	800ad3e <LoRaMacMibSetRequestConfirm+0xba>
 800ad84:	e781      	b.n	800ac8a <LoRaMacMibSetRequestConfirm+0x6>
            if( mibSet->Param.McNwkSKey0 != NULL )
 800ad86:	6861      	ldr	r1, [r4, #4]
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_0, mibSet->Param.McNwkSKey0 ) )
 800ad88:	2082      	movs	r0, #130	@ 0x82
            if( mibSet->Param.McNwkSKey0 != NULL )
 800ad8a:	2900      	cmp	r1, #0
 800ad8c:	d1d7      	bne.n	800ad3e <LoRaMacMibSetRequestConfirm+0xba>
 800ad8e:	e77c      	b.n	800ac8a <LoRaMacMibSetRequestConfirm+0x6>
            Nvm.MacGroup2.PublicNetwork = mibSet->Param.EnablePublicNetwork;
 800ad90:	7920      	ldrb	r0, [r4, #4]
 800ad92:	4b83      	ldr	r3, [pc, #524]	@ (800afa0 <LoRaMacMibSetRequestConfirm+0x31c>)
            Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 800ad94:	4c83      	ldr	r4, [pc, #524]	@ (800afa4 <LoRaMacMibSetRequestConfirm+0x320>)
            Nvm.MacGroup2.PublicNetwork = mibSet->Param.EnablePublicNetwork;
 800ad96:	7018      	strb	r0, [r3, #0]
            Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 800ad98:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800ad9a:	4798      	blx	r3
            Radio.Sleep( );
 800ad9c:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800ad9e:	4798      	blx	r3
            break;
 800ada0:	e7b3      	b.n	800ad0a <LoRaMacMibSetRequestConfirm+0x86>
            Nvm.MacGroup2.MacParams.RepeaterSupport = mibSet->Param.EnableRepeaterSupport;
 800ada2:	4b81      	ldr	r3, [pc, #516]	@ (800afa8 <LoRaMacMibSetRequestConfirm+0x324>)
 800ada4:	e7be      	b.n	800ad24 <LoRaMacMibSetRequestConfirm+0xa0>
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 800ada6:	466a      	mov	r2, sp
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800ada8:	4d80      	ldr	r5, [pc, #512]	@ (800afac <LoRaMacMibSetRequestConfirm+0x328>)
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 800adaa:	7a23      	ldrb	r3, [r4, #8]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) != true )
 800adac:	002e      	movs	r6, r5
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 800adae:	7013      	strb	r3, [r2, #0]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800adb0:	4b7f      	ldr	r3, [pc, #508]	@ (800afb0 <LoRaMacMibSetRequestConfirm+0x32c>)
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) != true )
 800adb2:	3640      	adds	r6, #64	@ 0x40
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800adb4:	781b      	ldrb	r3, [r3, #0]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) != true )
 800adb6:	4669      	mov	r1, sp
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800adb8:	7053      	strb	r3, [r2, #1]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) != true )
 800adba:	7830      	ldrb	r0, [r6, #0]
 800adbc:	2207      	movs	r2, #7
 800adbe:	f001 fb5c 	bl	800c47a <RegionVerify>
 800adc2:	2800      	cmp	r0, #0
 800adc4:	d100      	bne.n	800adc8 <LoRaMacMibSetRequestConfirm+0x144>
 800adc6:	e760      	b.n	800ac8a <LoRaMacMibSetRequestConfirm+0x6>
                verify.Frequency = mibSet->Param.Rx2Channel.Frequency;
 800adc8:	6863      	ldr	r3, [r4, #4]
                if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_FREQUENCY ) != true )
 800adca:	2200      	movs	r2, #0
                verify.Frequency = mibSet->Param.Rx2Channel.Frequency;
 800adcc:	9300      	str	r3, [sp, #0]
                if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_FREQUENCY ) != true )
 800adce:	4669      	mov	r1, sp
 800add0:	7830      	ldrb	r0, [r6, #0]
 800add2:	f001 fb52 	bl	800c47a <RegionVerify>
 800add6:	2800      	cmp	r0, #0
 800add8:	d100      	bne.n	800addc <LoRaMacMibSetRequestConfirm+0x158>
 800adda:	e756      	b.n	800ac8a <LoRaMacMibSetRequestConfirm+0x6>
                    Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
 800addc:	3564      	adds	r5, #100	@ 0x64
 800adde:	3404      	adds	r4, #4
 800ade0:	cc06      	ldmia	r4!, {r1, r2}
 800ade2:	c506      	stmia	r5!, {r1, r2}
 800ade4:	e791      	b.n	800ad0a <LoRaMacMibSetRequestConfirm+0x86>
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 800ade6:	466a      	mov	r2, sp
 800ade8:	7a23      	ldrb	r3, [r4, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800adea:	4d70      	ldr	r5, [pc, #448]	@ (800afac <LoRaMacMibSetRequestConfirm+0x328>)
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 800adec:	7013      	strb	r3, [r2, #0]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800adee:	4b70      	ldr	r3, [pc, #448]	@ (800afb0 <LoRaMacMibSetRequestConfirm+0x32c>)
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 800adf0:	4669      	mov	r1, sp
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800adf2:	781b      	ldrb	r3, [r3, #0]
 800adf4:	7053      	strb	r3, [r2, #1]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 800adf6:	002b      	movs	r3, r5
 800adf8:	3340      	adds	r3, #64	@ 0x40
 800adfa:	2207      	movs	r2, #7
 800adfc:	7818      	ldrb	r0, [r3, #0]
 800adfe:	f001 fb3c 	bl	800c47a <RegionVerify>
                Nvm.MacGroup2.MacParamsDefaults.Rx2Channel = mibSet->Param.Rx2DefaultChannel;
 800ae02:	35a4      	adds	r5, #164	@ 0xa4
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 800ae04:	2800      	cmp	r0, #0
 800ae06:	d100      	bne.n	800ae0a <LoRaMacMibSetRequestConfirm+0x186>
 800ae08:	e73f      	b.n	800ac8a <LoRaMacMibSetRequestConfirm+0x6>
                Nvm.MacGroup2.MacParamsDefaults.RxCChannel = mibSet->Param.RxCDefaultChannel;
 800ae0a:	3404      	adds	r4, #4
 800ae0c:	cc03      	ldmia	r4!, {r0, r1}
 800ae0e:	c503      	stmia	r5!, {r0, r1}
 800ae10:	e77b      	b.n	800ad0a <LoRaMacMibSetRequestConfirm+0x86>
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 800ae12:	466a      	mov	r2, sp
 800ae14:	7a23      	ldrb	r3, [r4, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800ae16:	4d65      	ldr	r5, [pc, #404]	@ (800afac <LoRaMacMibSetRequestConfirm+0x328>)
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 800ae18:	7013      	strb	r3, [r2, #0]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800ae1a:	4b65      	ldr	r3, [pc, #404]	@ (800afb0 <LoRaMacMibSetRequestConfirm+0x32c>)
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 800ae1c:	4669      	mov	r1, sp
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800ae1e:	781b      	ldrb	r3, [r3, #0]
 800ae20:	7053      	strb	r3, [r2, #1]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 800ae22:	002b      	movs	r3, r5
 800ae24:	3340      	adds	r3, #64	@ 0x40
 800ae26:	2207      	movs	r2, #7
 800ae28:	7818      	ldrb	r0, [r3, #0]
 800ae2a:	f001 fb26 	bl	800c47a <RegionVerify>
 800ae2e:	2800      	cmp	r0, #0
 800ae30:	d100      	bne.n	800ae34 <LoRaMacMibSetRequestConfirm+0x1b0>
 800ae32:	e72a      	b.n	800ac8a <LoRaMacMibSetRequestConfirm+0x6>
                Nvm.MacGroup2.MacParams.RxCChannel = mibSet->Param.RxCChannel;
 800ae34:	002b      	movs	r3, r5
 800ae36:	3404      	adds	r4, #4
 800ae38:	336c      	adds	r3, #108	@ 0x6c
 800ae3a:	cc06      	ldmia	r4!, {r1, r2}
 800ae3c:	c306      	stmia	r3!, {r1, r2}
                if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) && ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) )
 800ae3e:	002b      	movs	r3, r5
 800ae40:	33fc      	adds	r3, #252	@ 0xfc
 800ae42:	781b      	ldrb	r3, [r3, #0]
 800ae44:	2b02      	cmp	r3, #2
 800ae46:	d000      	beq.n	800ae4a <LoRaMacMibSetRequestConfirm+0x1c6>
 800ae48:	e75f      	b.n	800ad0a <LoRaMacMibSetRequestConfirm+0x86>
 800ae4a:	35ff      	adds	r5, #255	@ 0xff
 800ae4c:	7c6b      	ldrb	r3, [r5, #17]
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	d100      	bne.n	800ae54 <LoRaMacMibSetRequestConfirm+0x1d0>
 800ae52:	e75a      	b.n	800ad0a <LoRaMacMibSetRequestConfirm+0x86>
                    Radio.Sleep( );
 800ae54:	4b53      	ldr	r3, [pc, #332]	@ (800afa4 <LoRaMacMibSetRequestConfirm+0x320>)
 800ae56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae58:	4798      	blx	r3
                    OpenContinuousRxCWindow( );
 800ae5a:	f7fe fa89 	bl	8009370 <OpenContinuousRxCWindow>
 800ae5e:	e754      	b.n	800ad0a <LoRaMacMibSetRequestConfirm+0x86>
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 800ae60:	466a      	mov	r2, sp
 800ae62:	7a23      	ldrb	r3, [r4, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800ae64:	4d51      	ldr	r5, [pc, #324]	@ (800afac <LoRaMacMibSetRequestConfirm+0x328>)
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 800ae66:	7013      	strb	r3, [r2, #0]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800ae68:	4b51      	ldr	r3, [pc, #324]	@ (800afb0 <LoRaMacMibSetRequestConfirm+0x32c>)
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 800ae6a:	4669      	mov	r1, sp
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800ae6c:	781b      	ldrb	r3, [r3, #0]
 800ae6e:	7053      	strb	r3, [r2, #1]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 800ae70:	002b      	movs	r3, r5
 800ae72:	3340      	adds	r3, #64	@ 0x40
 800ae74:	2207      	movs	r2, #7
 800ae76:	7818      	ldrb	r0, [r3, #0]
 800ae78:	f001 faff 	bl	800c47a <RegionVerify>
 800ae7c:	2800      	cmp	r0, #0
 800ae7e:	d100      	bne.n	800ae82 <LoRaMacMibSetRequestConfirm+0x1fe>
 800ae80:	e703      	b.n	800ac8a <LoRaMacMibSetRequestConfirm+0x6>
                Nvm.MacGroup2.MacParamsDefaults.RxCChannel = mibSet->Param.RxCDefaultChannel;
 800ae82:	35ac      	adds	r5, #172	@ 0xac
 800ae84:	e7c1      	b.n	800ae0a <LoRaMacMibSetRequestConfirm+0x186>
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsDefaultMask;
 800ae86:	6863      	ldr	r3, [r4, #4]
 800ae88:	9300      	str	r3, [sp, #0]
            chanMaskSet.ChannelsMaskType = CHANNELS_DEFAULT_MASK;
 800ae8a:	2301      	movs	r3, #1
            chanMaskSet.ChannelsMaskType = CHANNELS_MASK;
 800ae8c:	466a      	mov	r2, sp
 800ae8e:	7113      	strb	r3, [r2, #4]
            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 800ae90:	4b48      	ldr	r3, [pc, #288]	@ (800afb4 <LoRaMacMibSetRequestConfirm+0x330>)
 800ae92:	4669      	mov	r1, sp
 800ae94:	7818      	ldrb	r0, [r3, #0]
 800ae96:	f001 fb03 	bl	800c4a0 <RegionChanMaskSet>
 800ae9a:	2800      	cmp	r0, #0
 800ae9c:	d000      	beq.n	800aea0 <LoRaMacMibSetRequestConfirm+0x21c>
 800ae9e:	e734      	b.n	800ad0a <LoRaMacMibSetRequestConfirm+0x86>
 800aea0:	e6f3      	b.n	800ac8a <LoRaMacMibSetRequestConfirm+0x6>
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsMask;
 800aea2:	6863      	ldr	r3, [r4, #4]
 800aea4:	9300      	str	r3, [sp, #0]
            chanMaskSet.ChannelsMaskType = CHANNELS_MASK;
 800aea6:	2300      	movs	r3, #0
 800aea8:	e7f0      	b.n	800ae8c <LoRaMacMibSetRequestConfirm+0x208>
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 800aeaa:	7923      	ldrb	r3, [r4, #4]
 800aeac:	1e5a      	subs	r2, r3, #1
 800aeae:	2a0e      	cmp	r2, #14
 800aeb0:	d900      	bls.n	800aeb4 <LoRaMacMibSetRequestConfirm+0x230>
 800aeb2:	e6ea      	b.n	800ac8a <LoRaMacMibSetRequestConfirm+0x6>
                Nvm.MacGroup2.MacParams.ChannelsNbTrans = mibSet->Param.ChannelsNbTrans;
 800aeb4:	4a40      	ldr	r2, [pc, #256]	@ (800afb8 <LoRaMacMibSetRequestConfirm+0x334>)
            Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = mibSet->Param.MinRxSymbols;
 800aeb6:	7013      	strb	r3, [r2, #0]
            break;
 800aeb8:	e727      	b.n	800ad0a <LoRaMacMibSetRequestConfirm+0x86>
            Nvm.MacGroup2.MacParams.MaxRxWindow = mibSet->Param.MaxRxWindow;
 800aeba:	4b3c      	ldr	r3, [pc, #240]	@ (800afac <LoRaMacMibSetRequestConfirm+0x328>)
 800aebc:	6862      	ldr	r2, [r4, #4]
 800aebe:	64da      	str	r2, [r3, #76]	@ 0x4c
            break;
 800aec0:	e723      	b.n	800ad0a <LoRaMacMibSetRequestConfirm+0x86>
            Nvm.MacGroup2.MacParams.ReceiveDelay1 = mibSet->Param.ReceiveDelay1;
 800aec2:	4b3a      	ldr	r3, [pc, #232]	@ (800afac <LoRaMacMibSetRequestConfirm+0x328>)
 800aec4:	6862      	ldr	r2, [r4, #4]
 800aec6:	651a      	str	r2, [r3, #80]	@ 0x50
            break;
 800aec8:	e71f      	b.n	800ad0a <LoRaMacMibSetRequestConfirm+0x86>
            Nvm.MacGroup2.MacParams.ReceiveDelay2 = mibSet->Param.ReceiveDelay2;
 800aeca:	4b38      	ldr	r3, [pc, #224]	@ (800afac <LoRaMacMibSetRequestConfirm+0x328>)
 800aecc:	6862      	ldr	r2, [r4, #4]
 800aece:	655a      	str	r2, [r3, #84]	@ 0x54
            break;
 800aed0:	e71b      	b.n	800ad0a <LoRaMacMibSetRequestConfirm+0x86>
            Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = mibSet->Param.JoinAcceptDelay1;
 800aed2:	4b36      	ldr	r3, [pc, #216]	@ (800afac <LoRaMacMibSetRequestConfirm+0x328>)
 800aed4:	6862      	ldr	r2, [r4, #4]
 800aed6:	659a      	str	r2, [r3, #88]	@ 0x58
            break;
 800aed8:	e717      	b.n	800ad0a <LoRaMacMibSetRequestConfirm+0x86>
            Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = mibSet->Param.JoinAcceptDelay2;
 800aeda:	4b34      	ldr	r3, [pc, #208]	@ (800afac <LoRaMacMibSetRequestConfirm+0x328>)
 800aedc:	6862      	ldr	r2, [r4, #4]
 800aede:	65da      	str	r2, [r3, #92]	@ 0x5c
            break;
 800aee0:	e713      	b.n	800ad0a <LoRaMacMibSetRequestConfirm+0x86>
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDefaultDatarate;
 800aee2:	466a      	mov	r2, sp
 800aee4:	7923      	ldrb	r3, [r4, #4]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_DR ) == true )
 800aee6:	4669      	mov	r1, sp
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDefaultDatarate;
 800aee8:	7013      	strb	r3, [r2, #0]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_DR ) == true )
 800aeea:	4b32      	ldr	r3, [pc, #200]	@ (800afb4 <LoRaMacMibSetRequestConfirm+0x330>)
 800aeec:	2206      	movs	r2, #6
 800aeee:	7818      	ldrb	r0, [r3, #0]
 800aef0:	4c2e      	ldr	r4, [pc, #184]	@ (800afac <LoRaMacMibSetRequestConfirm+0x328>)
 800aef2:	f001 fac2 	bl	800c47a <RegionVerify>
                Nvm.MacGroup2.ChannelsDatarateDefault = verify.DatarateParams.Datarate;
 800aef6:	34c5      	adds	r4, #197	@ 0xc5
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_DR ) == true )
 800aef8:	2800      	cmp	r0, #0
 800aefa:	d100      	bne.n	800aefe <LoRaMacMibSetRequestConfirm+0x27a>
 800aefc:	e6c5      	b.n	800ac8a <LoRaMacMibSetRequestConfirm+0x6>
                Nvm.MacGroup1.ChannelsTxPower = verify.TxPower;
 800aefe:	466b      	mov	r3, sp
 800af00:	781b      	ldrb	r3, [r3, #0]
 800af02:	7023      	strb	r3, [r4, #0]
 800af04:	e701      	b.n	800ad0a <LoRaMacMibSetRequestConfirm+0x86>
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDatarate;
 800af06:	466a      	mov	r2, sp
 800af08:	7923      	ldrb	r3, [r4, #4]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800af0a:	4c28      	ldr	r4, [pc, #160]	@ (800afac <LoRaMacMibSetRequestConfirm+0x328>)
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDatarate;
 800af0c:	7013      	strb	r3, [r2, #0]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800af0e:	4b2b      	ldr	r3, [pc, #172]	@ (800afbc <LoRaMacMibSetRequestConfirm+0x338>)
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 800af10:	4669      	mov	r1, sp
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800af12:	781b      	ldrb	r3, [r3, #0]
 800af14:	7093      	strb	r3, [r2, #2]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 800af16:	0023      	movs	r3, r4
 800af18:	3340      	adds	r3, #64	@ 0x40
 800af1a:	2205      	movs	r2, #5
 800af1c:	7818      	ldrb	r0, [r3, #0]
 800af1e:	f001 faac 	bl	800c47a <RegionVerify>
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 800af22:	3439      	adds	r4, #57	@ 0x39
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 800af24:	2800      	cmp	r0, #0
 800af26:	d1ea      	bne.n	800aefe <LoRaMacMibSetRequestConfirm+0x27a>
 800af28:	e6af      	b.n	800ac8a <LoRaMacMibSetRequestConfirm+0x6>
            verify.TxPower = mibSet->Param.ChannelsDefaultTxPower;
 800af2a:	466a      	mov	r2, sp
 800af2c:	7923      	ldrb	r3, [r4, #4]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_POWER ) == true )
 800af2e:	4669      	mov	r1, sp
            verify.TxPower = mibSet->Param.ChannelsDefaultTxPower;
 800af30:	7013      	strb	r3, [r2, #0]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_POWER ) == true )
 800af32:	4b20      	ldr	r3, [pc, #128]	@ (800afb4 <LoRaMacMibSetRequestConfirm+0x330>)
 800af34:	220a      	movs	r2, #10
 800af36:	7818      	ldrb	r0, [r3, #0]
 800af38:	4c1c      	ldr	r4, [pc, #112]	@ (800afac <LoRaMacMibSetRequestConfirm+0x328>)
 800af3a:	f001 fa9e 	bl	800c47a <RegionVerify>
                Nvm.MacGroup2.ChannelsTxPowerDefault = verify.TxPower;
 800af3e:	34c4      	adds	r4, #196	@ 0xc4
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_POWER ) == true )
 800af40:	2800      	cmp	r0, #0
 800af42:	d1dc      	bne.n	800aefe <LoRaMacMibSetRequestConfirm+0x27a>
 800af44:	e6a1      	b.n	800ac8a <LoRaMacMibSetRequestConfirm+0x6>
            verify.TxPower = mibSet->Param.ChannelsTxPower;
 800af46:	466a      	mov	r2, sp
 800af48:	7923      	ldrb	r3, [r4, #4]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_POWER ) == true )
 800af4a:	4669      	mov	r1, sp
            verify.TxPower = mibSet->Param.ChannelsTxPower;
 800af4c:	7013      	strb	r3, [r2, #0]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_POWER ) == true )
 800af4e:	4b19      	ldr	r3, [pc, #100]	@ (800afb4 <LoRaMacMibSetRequestConfirm+0x330>)
 800af50:	2209      	movs	r2, #9
 800af52:	7818      	ldrb	r0, [r3, #0]
 800af54:	4c15      	ldr	r4, [pc, #84]	@ (800afac <LoRaMacMibSetRequestConfirm+0x328>)
 800af56:	f001 fa90 	bl	800c47a <RegionVerify>
 800af5a:	2800      	cmp	r0, #0
 800af5c:	d100      	bne.n	800af60 <LoRaMacMibSetRequestConfirm+0x2dc>
 800af5e:	e694      	b.n	800ac8a <LoRaMacMibSetRequestConfirm+0x6>
                Nvm.MacGroup1.ChannelsTxPower = verify.TxPower;
 800af60:	3438      	adds	r4, #56	@ 0x38
 800af62:	e7cc      	b.n	800aefe <LoRaMacMibSetRequestConfirm+0x27a>
            Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = mibSet->Param.SystemMaxRxError;
 800af64:	6862      	ldr	r2, [r4, #4]
 800af66:	4b11      	ldr	r3, [pc, #68]	@ (800afac <LoRaMacMibSetRequestConfirm+0x328>)
 800af68:	4915      	ldr	r1, [pc, #84]	@ (800afc0 <LoRaMacMibSetRequestConfirm+0x33c>)
 800af6a:	645a      	str	r2, [r3, #68]	@ 0x44
 800af6c:	67ca      	str	r2, [r1, #124]	@ 0x7c
            break;
 800af6e:	e6cc      	b.n	800ad0a <LoRaMacMibSetRequestConfirm+0x86>
            Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = mibSet->Param.MinRxSymbols;
 800af70:	4a14      	ldr	r2, [pc, #80]	@ (800afc4 <LoRaMacMibSetRequestConfirm+0x340>)
 800af72:	7923      	ldrb	r3, [r4, #4]
 800af74:	7013      	strb	r3, [r2, #0]
 800af76:	4a14      	ldr	r2, [pc, #80]	@ (800afc8 <LoRaMacMibSetRequestConfirm+0x344>)
 800af78:	e79d      	b.n	800aeb6 <LoRaMacMibSetRequestConfirm+0x232>
            Nvm.MacGroup2.MacParams.AntennaGain = mibSet->Param.AntennaGain;
 800af7a:	4b0c      	ldr	r3, [pc, #48]	@ (800afac <LoRaMacMibSetRequestConfirm+0x328>)
 800af7c:	6862      	ldr	r2, [r4, #4]
 800af7e:	67da      	str	r2, [r3, #124]	@ 0x7c
            break;
 800af80:	e6c3      	b.n	800ad0a <LoRaMacMibSetRequestConfirm+0x86>
            Nvm.MacGroup2.MacParamsDefaults.AntennaGain = mibSet->Param.DefaultAntennaGain;
 800af82:	4b12      	ldr	r3, [pc, #72]	@ (800afcc <LoRaMacMibSetRequestConfirm+0x348>)
 800af84:	6862      	ldr	r2, [r4, #4]
 800af86:	601a      	str	r2, [r3, #0]
            break;
 800af88:	e6bf      	b.n	800ad0a <LoRaMacMibSetRequestConfirm+0x86>
 800af8a:	46c0      	nop			@ (mov r8, r8)
 800af8c:	20000d34 	.word	0x20000d34
 800af90:	20000ae7 	.word	0x20000ae7
 800af94:	20000ae6 	.word	0x20000ae6
 800af98:	20000ab0 	.word	0x20000ab0
 800af9c:	20000ab4 	.word	0x20000ab4
 800afa0:	20000ae5 	.word	0x20000ae5
 800afa4:	080108d8 	.word	0x080108d8
 800afa8:	20000a68 	.word	0x20000a68
 800afac:	200009e8 	.word	0x200009e8
 800afb0:	20000a5d 	.word	0x20000a5d
 800afb4:	20000a28 	.word	0x20000a28
 800afb8:	20000a48 	.word	0x20000a48
 800afbc:	20000a5c 	.word	0x20000a5c
 800afc0:	200009f0 	.word	0x200009f0
 800afc4:	20000a70 	.word	0x20000a70
 800afc8:	20000a30 	.word	0x20000a30
 800afcc:	20000aa4 	.word	0x20000aa4
            if( mibSet->Param.Contexts != 0 )
 800afd0:	6864      	ldr	r4, [r4, #4]
 800afd2:	2c00      	cmp	r4, #0
 800afd4:	d100      	bne.n	800afd8 <LoRaMacMibSetRequestConfirm+0x354>
 800afd6:	e658      	b.n	800ac8a <LoRaMacMibSetRequestConfirm+0x6>
        return LORAMAC_STATUS_BUSY;
 800afd8:	2001      	movs	r0, #1
    if( MacCtx.MacState != LORAMAC_STOPPED )
 800afda:	4283      	cmp	r3, r0
 800afdc:	d000      	beq.n	800afe0 <LoRaMacMibSetRequestConfirm+0x35c>
 800afde:	e655      	b.n	800ac8c <LoRaMacMibSetRequestConfirm+0x8>
    crc = Crc32( ( uint8_t* ) &nvm->Crypto, sizeof( nvm->Crypto ) -
 800afe0:	2124      	movs	r1, #36	@ 0x24
 800afe2:	0020      	movs	r0, r4
 800afe4:	f002 fbe8 	bl	800d7b8 <Crc32>
    if( crc == nvm->Crypto.Crc32 )
 800afe8:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800afea:	4298      	cmp	r0, r3
 800afec:	d104      	bne.n	800aff8 <LoRaMacMibSetRequestConfirm+0x374>
        memcpy1( ( uint8_t* ) &Nvm.Crypto, ( uint8_t* ) &nvm->Crypto,
 800afee:	2228      	movs	r2, #40	@ 0x28
 800aff0:	0021      	movs	r1, r4
 800aff2:	483b      	ldr	r0, [pc, #236]	@ (800b0e0 <LoRaMacMibSetRequestConfirm+0x45c>)
 800aff4:	f002 fbc6 	bl	800d784 <memcpy1>
    crc = Crc32( ( uint8_t* ) &nvm->MacGroup1, sizeof( nvm->MacGroup1 ) -
 800aff8:	0026      	movs	r6, r4
 800affa:	3628      	adds	r6, #40	@ 0x28
 800affc:	2114      	movs	r1, #20
 800affe:	0030      	movs	r0, r6
 800b000:	f002 fbda 	bl	800d7b8 <Crc32>
    if( crc == nvm->MacGroup1.Crc32 )
 800b004:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800b006:	4298      	cmp	r0, r3
 800b008:	d104      	bne.n	800b014 <LoRaMacMibSetRequestConfirm+0x390>
        memcpy1( ( uint8_t* ) &Nvm.MacGroup1, ( uint8_t* ) &nvm->MacGroup1,
 800b00a:	2218      	movs	r2, #24
 800b00c:	0031      	movs	r1, r6
 800b00e:	4835      	ldr	r0, [pc, #212]	@ (800b0e4 <LoRaMacMibSetRequestConfirm+0x460>)
 800b010:	f002 fbb8 	bl	800d784 <memcpy1>
    crc = Crc32( ( uint8_t* ) &nvm->MacGroup2, sizeof( nvm->MacGroup2 ) -
 800b014:	0026      	movs	r6, r4
 800b016:	3640      	adds	r6, #64	@ 0x40
 800b018:	21d4      	movs	r1, #212	@ 0xd4
 800b01a:	0030      	movs	r0, r6
 800b01c:	f002 fbcc 	bl	800d7b8 <Crc32>
    if( crc == nvm->MacGroup2.Crc32 )
 800b020:	0023      	movs	r3, r4
 800b022:	33fc      	adds	r3, #252	@ 0xfc
 800b024:	699b      	ldr	r3, [r3, #24]
 800b026:	4298      	cmp	r0, r3
 800b028:	d115      	bne.n	800b056 <LoRaMacMibSetRequestConfirm+0x3d2>
        memcpy1( ( uint8_t* ) &Nvm.MacGroup2, ( uint8_t* ) &nvm->MacGroup2,
 800b02a:	22d8      	movs	r2, #216	@ 0xd8
 800b02c:	0031      	movs	r1, r6
 800b02e:	482e      	ldr	r0, [pc, #184]	@ (800b0e8 <LoRaMacMibSetRequestConfirm+0x464>)
 800b030:	f002 fba8 	bl	800d784 <memcpy1>
        MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 800b034:	4b2d      	ldr	r3, [pc, #180]	@ (800b0ec <LoRaMacMibSetRequestConfirm+0x468>)
 800b036:	5cea      	ldrb	r2, [r5, r3]
 800b038:	3b35      	subs	r3, #53	@ 0x35
 800b03a:	54ea      	strb	r2, [r5, r3]
        MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 800b03c:	22f9      	movs	r2, #249	@ 0xf9
 800b03e:	4b28      	ldr	r3, [pc, #160]	@ (800b0e0 <LoRaMacMibSetRequestConfirm+0x45c>)
 800b040:	0092      	lsls	r2, r2, #2
 800b042:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
        MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800b044:	3375      	adds	r3, #117	@ 0x75
        MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 800b046:	50a9      	str	r1, [r5, r2]
        MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800b048:	781a      	ldrb	r2, [r3, #0]
 800b04a:	23fc      	movs	r3, #252	@ 0xfc
 800b04c:	009b      	lsls	r3, r3, #2
 800b04e:	54ea      	strb	r2, [r5, r3]
        MacCtx.RxWindowCConfig.RxContinuous = true;
 800b050:	4b27      	ldr	r3, [pc, #156]	@ (800b0f0 <LoRaMacMibSetRequestConfirm+0x46c>)
 800b052:	4a28      	ldr	r2, [pc, #160]	@ (800b0f4 <LoRaMacMibSetRequestConfirm+0x470>)
 800b054:	52ea      	strh	r2, [r5, r3]
    crc = Crc32( ( uint8_t* ) &nvm->SecureElement, sizeof( nvm->SecureElement ) -
 800b056:	0025      	movs	r5, r4
 800b058:	3519      	adds	r5, #25
 800b05a:	35ff      	adds	r5, #255	@ 0xff
 800b05c:	21bc      	movs	r1, #188	@ 0xbc
 800b05e:	0028      	movs	r0, r5
 800b060:	f002 fbaa 	bl	800d7b8 <Crc32>
    if( crc == nvm->SecureElement.Crc32 )
 800b064:	23ea      	movs	r3, #234	@ 0xea
 800b066:	005b      	lsls	r3, r3, #1
 800b068:	58e3      	ldr	r3, [r4, r3]
 800b06a:	4298      	cmp	r0, r3
 800b06c:	d104      	bne.n	800b078 <LoRaMacMibSetRequestConfirm+0x3f4>
        memcpy1( ( uint8_t* ) &Nvm.SecureElement,( uint8_t* ) &nvm->SecureElement,
 800b06e:	22c0      	movs	r2, #192	@ 0xc0
 800b070:	0029      	movs	r1, r5
 800b072:	4821      	ldr	r0, [pc, #132]	@ (800b0f8 <LoRaMacMibSetRequestConfirm+0x474>)
 800b074:	f002 fb86 	bl	800d784 <memcpy1>
    crc = Crc32( ( uint8_t* ) &nvm->RegionGroup1, sizeof( nvm->RegionGroup1 ) -
 800b078:	0025      	movs	r5, r4
 800b07a:	35d9      	adds	r5, #217	@ 0xd9
 800b07c:	35ff      	adds	r5, #255	@ 0xff
 800b07e:	2190      	movs	r1, #144	@ 0x90
 800b080:	0028      	movs	r0, r5
 800b082:	f002 fb99 	bl	800d7b8 <Crc32>
    if( crc == nvm->RegionGroup1.Crc32 )
 800b086:	239a      	movs	r3, #154	@ 0x9a
 800b088:	009b      	lsls	r3, r3, #2
 800b08a:	58e3      	ldr	r3, [r4, r3]
 800b08c:	4298      	cmp	r0, r3
 800b08e:	d104      	bne.n	800b09a <LoRaMacMibSetRequestConfirm+0x416>
        memcpy1( ( uint8_t* ) &Nvm.RegionGroup1,( uint8_t* ) &nvm->RegionGroup1,
 800b090:	2294      	movs	r2, #148	@ 0x94
 800b092:	0029      	movs	r1, r5
 800b094:	4819      	ldr	r0, [pc, #100]	@ (800b0fc <LoRaMacMibSetRequestConfirm+0x478>)
 800b096:	f002 fb75 	bl	800d784 <memcpy1>
    crc = Crc32( ( uint8_t* ) &nvm->ClassB, sizeof( nvm->ClassB ) -
 800b09a:	23cd      	movs	r3, #205	@ 0xcd
 800b09c:	009b      	lsls	r3, r3, #2
 800b09e:	18e5      	adds	r5, r4, r3
 800b0a0:	2114      	movs	r1, #20
 800b0a2:	0028      	movs	r0, r5
 800b0a4:	f002 fb88 	bl	800d7b8 <Crc32>
    if( crc == nvm->ClassB.Crc32 )
 800b0a8:	23d2      	movs	r3, #210	@ 0xd2
 800b0aa:	009b      	lsls	r3, r3, #2
 800b0ac:	58e3      	ldr	r3, [r4, r3]
 800b0ae:	4298      	cmp	r0, r3
 800b0b0:	d000      	beq.n	800b0b4 <LoRaMacMibSetRequestConfirm+0x430>
 800b0b2:	e62a      	b.n	800ad0a <LoRaMacMibSetRequestConfirm+0x86>
        memcpy1( ( uint8_t* ) &Nvm.ClassB,( uint8_t* ) &nvm->ClassB,
 800b0b4:	2218      	movs	r2, #24
 800b0b6:	0029      	movs	r1, r5
 800b0b8:	4811      	ldr	r0, [pc, #68]	@ (800b100 <LoRaMacMibSetRequestConfirm+0x47c>)
 800b0ba:	f002 fb63 	bl	800d784 <memcpy1>
 800b0be:	e624      	b.n	800ad0a <LoRaMacMibSetRequestConfirm+0x86>
            if( mibSet->Param.AbpLrWanVersion.Fields.Minor <= 1 )
 800b0c0:	79a3      	ldrb	r3, [r4, #6]
 800b0c2:	2b01      	cmp	r3, #1
 800b0c4:	d900      	bls.n	800b0c8 <LoRaMacMibSetRequestConfirm+0x444>
 800b0c6:	e5e0      	b.n	800ac8a <LoRaMacMibSetRequestConfirm+0x6>
                Nvm.MacGroup2.Version = mibSet->Param.AbpLrWanVersion;
 800b0c8:	4b0e      	ldr	r3, [pc, #56]	@ (800b104 <LoRaMacMibSetRequestConfirm+0x480>)
 800b0ca:	6862      	ldr	r2, [r4, #4]
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetLrWanVersion( mibSet->Param.AbpLrWanVersion ) )
 800b0cc:	6860      	ldr	r0, [r4, #4]
                Nvm.MacGroup2.Version = mibSet->Param.AbpLrWanVersion;
 800b0ce:	611a      	str	r2, [r3, #16]
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetLrWanVersion( mibSet->Param.AbpLrWanVersion ) )
 800b0d0:	f000 fe72 	bl	800bdb8 <LoRaMacCryptoSetLrWanVersion>
 800b0d4:	e635      	b.n	800ad42 <LoRaMacMibSetRequestConfirm+0xbe>
            status = LoRaMacMibClassBSetRequestConfirm( mibSet );
 800b0d6:	0020      	movs	r0, r4
 800b0d8:	f000 fb64 	bl	800b7a4 <LoRaMacMibClassBSetRequestConfirm>
            break;
 800b0dc:	e5d6      	b.n	800ac8c <LoRaMacMibSetRequestConfirm+0x8>
 800b0de:	46c0      	nop			@ (mov r8, r8)
 800b0e0:	200009e8 	.word	0x200009e8
 800b0e4:	20000a10 	.word	0x20000a10
 800b0e8:	20000a28 	.word	0x20000a28
 800b0ec:	00000415 	.word	0x00000415
 800b0f0:	000003f2 	.word	0x000003f2
 800b0f4:	00000201 	.word	0x00000201
 800b0f8:	20000b00 	.word	0x20000b00
 800b0fc:	20000bc0 	.word	0x20000bc0
 800b100:	20000d1c 	.word	0x20000d1c
 800b104:	20000ae4 	.word	0x20000ae4

0800b108 <LoRaMacMlmeRequest>:

LoRaMacStatus_t LoRaMacMlmeRequest( MlmeReq_t* mlmeRequest )
{
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
    MlmeConfirmQueue_t queueElement;
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 800b108:	2300      	movs	r3, #0
{
 800b10a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b10c:	b089      	sub	sp, #36	@ 0x24
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 800b10e:	aa02      	add	r2, sp, #8
{
 800b110:	0006      	movs	r6, r0

    if( mlmeRequest == NULL )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800b112:	2503      	movs	r5, #3
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 800b114:	8013      	strh	r3, [r2, #0]
    if( mlmeRequest == NULL )
 800b116:	4298      	cmp	r0, r3
 800b118:	d004      	beq.n	800b124 <LoRaMacMlmeRequest+0x1c>
    }
    if( LoRaMacIsBusy( ) == true )
 800b11a:	f7fe fd57 	bl	8009bcc <LoRaMacIsBusy>
 800b11e:	2800      	cmp	r0, #0
 800b120:	d003      	beq.n	800b12a <LoRaMacMlmeRequest+0x22>
    {
        return LORAMAC_STATUS_BUSY;
 800b122:	2501      	movs	r5, #1
    else
    {
        LoRaMacConfirmQueueAdd( &queueElement );
    }
    return status;
}
 800b124:	0028      	movs	r0, r5
 800b126:	b009      	add	sp, #36	@ 0x24
 800b128:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if( LoRaMacConfirmQueueIsFull( ) == true )
 800b12a:	f000 fd3b 	bl	800bba4 <LoRaMacConfirmQueueIsFull>
 800b12e:	2800      	cmp	r0, #0
 800b130:	d1f7      	bne.n	800b122 <LoRaMacMlmeRequest+0x1a>
    if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 800b132:	f000 fd31 	bl	800bb98 <LoRaMacConfirmQueueGetCnt>
 800b136:	1e01      	subs	r1, r0, #0
 800b138:	d103      	bne.n	800b142 <LoRaMacMlmeRequest+0x3a>
        memset1( ( uint8_t* ) &MacCtx.MlmeConfirm, 0, sizeof( MacCtx.MlmeConfirm ) );
 800b13a:	2214      	movs	r2, #20
 800b13c:	4866      	ldr	r0, [pc, #408]	@ (800b2d8 <LoRaMacMlmeRequest+0x1d0>)
 800b13e:	f002 fb36 	bl	800d7ae <memset1>
    MacCtx.MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800b142:	2201      	movs	r2, #1
 800b144:	4c65      	ldr	r4, [pc, #404]	@ (800b2dc <LoRaMacMlmeRequest+0x1d4>)
 800b146:	4b66      	ldr	r3, [pc, #408]	@ (800b2e0 <LoRaMacMlmeRequest+0x1d8>)
    MacCtx.MacFlags.Bits.MlmeReq = 1;
 800b148:	4866      	ldr	r0, [pc, #408]	@ (800b2e4 <LoRaMacMlmeRequest+0x1dc>)
    MacCtx.MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800b14a:	54e2      	strb	r2, [r4, r3]
    MacCtx.MacFlags.Bits.MlmeReq = 1;
 800b14c:	2304      	movs	r3, #4
 800b14e:	5c21      	ldrb	r1, [r4, r0]
 800b150:	430b      	orrs	r3, r1
    queueElement.RestrictCommonReadyToHandle = false;
 800b152:	2100      	movs	r1, #0
    MacCtx.MacFlags.Bits.MlmeReq = 1;
 800b154:	5423      	strb	r3, [r4, r0]
    queueElement.Request = mlmeRequest->Type;
 800b156:	7830      	ldrb	r0, [r6, #0]
 800b158:	ab03      	add	r3, sp, #12
 800b15a:	7018      	strb	r0, [r3, #0]
    switch( mlmeRequest->Type )
 800b15c:	3801      	subs	r0, #1
    queueElement.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800b15e:	705a      	strb	r2, [r3, #1]
    queueElement.RestrictCommonReadyToHandle = false;
 800b160:	70d9      	strb	r1, [r3, #3]
    switch( mlmeRequest->Type )
 800b162:	280d      	cmp	r0, #13
 800b164:	d900      	bls.n	800b168 <LoRaMacMlmeRequest+0x60>
 800b166:	e0b0      	b.n	800b2ca <LoRaMacMlmeRequest+0x1c2>
 800b168:	f7f4 ffe0 	bl	800012c <__gnu_thumb1_case_uqi>
 800b16c:	5cafaf07 	.word	0x5cafaf07
 800b170:	afaf8366 	.word	0xafaf8366
 800b174:	a3af8baf 	.word	0xa3af8baf
 800b178:	9f8f      	.short	0x9f8f
            if( ( MacCtx.MacState & LORAMAC_TX_DELAYED ) == LORAMAC_TX_DELAYED )
 800b17a:	23d0      	movs	r3, #208	@ 0xd0
 800b17c:	009b      	lsls	r3, r3, #2
 800b17e:	58e2      	ldr	r2, [r4, r3]
 800b180:	2320      	movs	r3, #32
 800b182:	0015      	movs	r5, r2
 800b184:	401d      	ands	r5, r3
 800b186:	421a      	tst	r2, r3
 800b188:	d1cb      	bne.n	800b122 <LoRaMacMlmeRequest+0x1a>
            ResetMacParameters( );
 800b18a:	f7fd fe95 	bl	8008eb8 <ResetMacParameters>
            Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR );
 800b18e:	2104      	movs	r1, #4
 800b190:	4b55      	ldr	r3, [pc, #340]	@ (800b2e8 <LoRaMacMlmeRequest+0x1e0>)
 800b192:	5671      	ldrsb	r1, [r6, r1]
 800b194:	9301      	str	r3, [sp, #4]
 800b196:	002a      	movs	r2, r5
 800b198:	7818      	ldrb	r0, [r3, #0]
 800b19a:	4f54      	ldr	r7, [pc, #336]	@ (800b2ec <LoRaMacMlmeRequest+0x1e4>)
 800b19c:	f001 f9e6 	bl	800c56c <RegionAlternateDr>
            queueElement.Status = LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL;
 800b1a0:	2207      	movs	r2, #7
            Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR );
 800b1a2:	3739      	adds	r7, #57	@ 0x39
            queueElement.Status = LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL;
 800b1a4:	ab03      	add	r3, sp, #12
            Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR );
 800b1a6:	7038      	strb	r0, [r7, #0]
            SwitchClass( CLASS_A );
 800b1a8:	0028      	movs	r0, r5
            queueElement.Status = LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL;
 800b1aa:	705a      	strb	r2, [r3, #1]
            SwitchClass( CLASS_A );
 800b1ac:	f7fe f916 	bl	80093dc <SwitchClass>
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_JOIN_REQUEST;
 800b1b0:	0023      	movs	r3, r4
 800b1b2:	33ff      	adds	r3, #255	@ 0xff
 800b1b4:	715d      	strb	r5, [r3, #5]
            MacCtx.TxMsg.Message.JoinReq.Buffer = MacCtx.PktBuffer;
 800b1b6:	0023      	movs	r3, r4
 800b1b8:	4a4d      	ldr	r2, [pc, #308]	@ (800b2f0 <LoRaMacMlmeRequest+0x1e8>)
 800b1ba:	33fc      	adds	r3, #252	@ 0xfc
 800b1bc:	60da      	str	r2, [r3, #12]
            MacCtx.TxMsg.Message.JoinReq.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 800b1be:	0023      	movs	r3, r4
 800b1c0:	22ff      	movs	r2, #255	@ 0xff
 800b1c2:	33fe      	adds	r3, #254	@ 0xfe
 800b1c4:	81da      	strh	r2, [r3, #14]
            memcpy1( MacCtx.TxMsg.Message.JoinReq.JoinEUI, SecureElementGetJoinEui( ), LORAMAC_JOIN_EUI_FIELD_SIZE );
 800b1c6:	f7fc fd25 	bl	8007c14 <SecureElementGetJoinEui>
 800b1ca:	4b4a      	ldr	r3, [pc, #296]	@ (800b2f4 <LoRaMacMlmeRequest+0x1ec>)
 800b1cc:	0001      	movs	r1, r0
 800b1ce:	2208      	movs	r2, #8
 800b1d0:	0018      	movs	r0, r3
 800b1d2:	f002 fad7 	bl	800d784 <memcpy1>
            memcpy1( MacCtx.TxMsg.Message.JoinReq.DevEUI, SecureElementGetDevEui( ), LORAMAC_DEV_EUI_FIELD_SIZE );
 800b1d6:	f7fc fd07 	bl	8007be8 <SecureElementGetDevEui>
 800b1da:	4b47      	ldr	r3, [pc, #284]	@ (800b2f8 <LoRaMacMlmeRequest+0x1f0>)
 800b1dc:	0001      	movs	r1, r0
 800b1de:	2208      	movs	r2, #8
 800b1e0:	0018      	movs	r0, r3
 800b1e2:	f002 facf 	bl	800d784 <memcpy1>
    status = ScheduleTx( allowDelayedTx );
 800b1e6:	0028      	movs	r0, r5
 800b1e8:	f7fd ff18 	bl	800901c <ScheduleTx>
 800b1ec:	1e05      	subs	r5, r0, #0
            if( status != LORAMAC_STATUS_OK )
 800b1ee:	d021      	beq.n	800b234 <LoRaMacMlmeRequest+0x12c>
                Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR_RESTORE );
 800b1f0:	2104      	movs	r1, #4
 800b1f2:	9b01      	ldr	r3, [sp, #4]
 800b1f4:	2201      	movs	r2, #1
 800b1f6:	5671      	ldrsb	r1, [r6, r1]
 800b1f8:	7818      	ldrb	r0, [r3, #0]
 800b1fa:	f001 f9b7 	bl	800c56c <RegionAlternateDr>
 800b1fe:	7038      	strb	r0, [r7, #0]
    mlmeRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 800b200:	4b3e      	ldr	r3, [pc, #248]	@ (800b2fc <LoRaMacMlmeRequest+0x1f4>)
 800b202:	58e3      	ldr	r3, [r4, r3]
 800b204:	6133      	str	r3, [r6, #16]
    if( status != LORAMAC_STATUS_OK )
 800b206:	2d00      	cmp	r5, #0
 800b208:	d061      	beq.n	800b2ce <LoRaMacMlmeRequest+0x1c6>
        if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 800b20a:	f000 fcc5 	bl	800bb98 <LoRaMacConfirmQueueGetCnt>
 800b20e:	2800      	cmp	r0, #0
 800b210:	d000      	beq.n	800b214 <LoRaMacMlmeRequest+0x10c>
 800b212:	e787      	b.n	800b124 <LoRaMacMlmeRequest+0x1c>
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 800b214:	2204      	movs	r2, #4
            MacCtx.NodeAckRequested = false;
 800b216:	4b3a      	ldr	r3, [pc, #232]	@ (800b300 <LoRaMacMlmeRequest+0x1f8>)
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 800b218:	4932      	ldr	r1, [pc, #200]	@ (800b2e4 <LoRaMacMlmeRequest+0x1dc>)
            MacCtx.NodeAckRequested = false;
 800b21a:	54e0      	strb	r0, [r4, r3]
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 800b21c:	5c63      	ldrb	r3, [r4, r1]
 800b21e:	4393      	bics	r3, r2
 800b220:	5463      	strb	r3, [r4, r1]
 800b222:	e77f      	b.n	800b124 <LoRaMacMlmeRequest+0x1c>
            if( LoRaMacCommandsAddCmd( MOTE_MAC_LINK_CHECK_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 800b224:	2200      	movs	r2, #0
 800b226:	2002      	movs	r0, #2
 800b228:	a902      	add	r1, sp, #8
 800b22a:	f000 fad7 	bl	800b7dc <LoRaMacCommandsAddCmd>
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800b22e:	2513      	movs	r5, #19
            if( LoRaMacCommandsAddCmd( MOTE_MAC_LINK_CHECK_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 800b230:	2800      	cmp	r0, #0
 800b232:	d1e5      	bne.n	800b200 <LoRaMacMlmeRequest+0xf8>
            status = SetTxContinuousWave( mlmeRequest->Req.TxCw.Timeout );
 800b234:	2500      	movs	r5, #0
 800b236:	e7e3      	b.n	800b200 <LoRaMacMlmeRequest+0xf8>
    continuousWave.Channel = MacCtx.Channel;
 800b238:	4b32      	ldr	r3, [pc, #200]	@ (800b304 <LoRaMacMlmeRequest+0x1fc>)
 800b23a:	a904      	add	r1, sp, #16
 800b23c:	5ce3      	ldrb	r3, [r4, r3]
    continuousWave.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800b23e:	4832      	ldr	r0, [pc, #200]	@ (800b308 <LoRaMacMlmeRequest+0x200>)
            status = SetTxContinuousWave( mlmeRequest->Req.TxCw.Timeout );
 800b240:	88b2      	ldrh	r2, [r6, #4]
    continuousWave.Channel = MacCtx.Channel;
 800b242:	700b      	strb	r3, [r1, #0]
    continuousWave.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800b244:	7800      	ldrb	r0, [r0, #0]
 800b246:	4b29      	ldr	r3, [pc, #164]	@ (800b2ec <LoRaMacMlmeRequest+0x1e4>)
 800b248:	7048      	strb	r0, [r1, #1]
    continuousWave.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 800b24a:	0018      	movs	r0, r3
 800b24c:	3038      	adds	r0, #56	@ 0x38
 800b24e:	7800      	ldrb	r0, [r0, #0]
    RegionSetContinuousWave( Nvm.MacGroup2.Region, &continuousWave );
 800b250:	3340      	adds	r3, #64	@ 0x40
    continuousWave.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 800b252:	7088      	strb	r0, [r1, #2]
    continuousWave.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
 800b254:	6b98      	ldr	r0, [r3, #56]	@ 0x38
    continuousWave.Timeout = timeout;
 800b256:	818a      	strh	r2, [r1, #12]
    continuousWave.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
 800b258:	6048      	str	r0, [r1, #4]
    continuousWave.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 800b25a:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800b25c:	6088      	str	r0, [r1, #8]
    RegionSetContinuousWave( Nvm.MacGroup2.Region, &continuousWave );
 800b25e:	7818      	ldrb	r0, [r3, #0]
 800b260:	f001 f99e 	bl	800c5a0 <RegionSetContinuousWave>
    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 800b264:	22d0      	movs	r2, #208	@ 0xd0
 800b266:	2302      	movs	r3, #2
 800b268:	0092      	lsls	r2, r2, #2
 800b26a:	58a1      	ldr	r1, [r4, r2]
 800b26c:	430b      	orrs	r3, r1
 800b26e:	50a3      	str	r3, [r4, r2]
            break;
 800b270:	e7e0      	b.n	800b234 <LoRaMacMlmeRequest+0x12c>
    Radio.SetTxContinuousWave( frequency, power, timeout );
 800b272:	210c      	movs	r1, #12
 800b274:	4b25      	ldr	r3, [pc, #148]	@ (800b30c <LoRaMacMlmeRequest+0x204>)
 800b276:	88b2      	ldrh	r2, [r6, #4]
 800b278:	5671      	ldrsb	r1, [r6, r1]
 800b27a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b27c:	68b0      	ldr	r0, [r6, #8]
 800b27e:	4798      	blx	r3
    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 800b280:	e7f0      	b.n	800b264 <LoRaMacMlmeRequest+0x15c>
            if( LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_TIME_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 800b282:	2200      	movs	r2, #0
 800b284:	200d      	movs	r0, #13
 800b286:	a902      	add	r1, sp, #8
 800b288:	e7cf      	b.n	800b22a <LoRaMacMlmeRequest+0x122>
            if( Nvm.MacGroup2.DeviceClass == CLASS_A )
 800b28a:	4b21      	ldr	r3, [pc, #132]	@ (800b310 <LoRaMacMlmeRequest+0x208>)
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 800b28c:	2502      	movs	r5, #2
            if( Nvm.MacGroup2.DeviceClass == CLASS_A )
 800b28e:	781b      	ldrb	r3, [r3, #0]
 800b290:	2b00      	cmp	r3, #0
 800b292:	d1b5      	bne.n	800b200 <LoRaMacMlmeRequest+0xf8>
                uint8_t value = mlmeRequest->Req.PingSlotInfo.PingSlot.Value;
 800b294:	7935      	ldrb	r5, [r6, #4]
                LoRaMacClassBSetPingSlotInfo( mlmeRequest->Req.PingSlotInfo.PingSlot.Fields.Periodicity );
 800b296:	0768      	lsls	r0, r5, #29
 800b298:	0f40      	lsrs	r0, r0, #29
 800b29a:	f000 fa7c 	bl	800b796 <LoRaMacClassBSetPingSlotInfo>
                macCmdPayload[0] = value;
 800b29e:	ab02      	add	r3, sp, #8
                if( LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_INFO_REQ, macCmdPayload, 1 ) != LORAMAC_COMMANDS_SUCCESS )
 800b2a0:	2201      	movs	r2, #1
 800b2a2:	0019      	movs	r1, r3
 800b2a4:	2010      	movs	r0, #16
                macCmdPayload[0] = value;
 800b2a6:	701d      	strb	r5, [r3, #0]
                if( LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_INFO_REQ, macCmdPayload, 1 ) != LORAMAC_COMMANDS_SUCCESS )
 800b2a8:	e7bf      	b.n	800b22a <LoRaMacMlmeRequest+0x122>
            if( LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_TIMING_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 800b2aa:	2200      	movs	r2, #0
 800b2ac:	2012      	movs	r0, #18
 800b2ae:	a902      	add	r1, sp, #8
 800b2b0:	e7bb      	b.n	800b22a <LoRaMacMlmeRequest+0x122>
            queueElement.RestrictCommonReadyToHandle = true;
 800b2b2:	70da      	strb	r2, [r3, #3]
            if( LoRaMacClassBIsAcquisitionInProgress( ) == false )
 800b2b4:	f000 fa60 	bl	800b778 <LoRaMacClassBIsAcquisitionInProgress>
                status = LORAMAC_STATUS_BUSY;
 800b2b8:	2501      	movs	r5, #1
            if( LoRaMacClassBIsAcquisitionInProgress( ) == false )
 800b2ba:	1e07      	subs	r7, r0, #0
 800b2bc:	d1a0      	bne.n	800b200 <LoRaMacMlmeRequest+0xf8>
                LoRaMacClassBSetBeaconState( BEACON_STATE_ACQUISITION );
 800b2be:	f000 fa58 	bl	800b772 <LoRaMacClassBSetBeaconState>
                LoRaMacClassBBeaconTimerEvent( NULL );
 800b2c2:	0038      	movs	r0, r7
 800b2c4:	f000 fa5a 	bl	800b77c <LoRaMacClassBBeaconTimerEvent>
                status = LORAMAC_STATUS_OK;
 800b2c8:	e7b4      	b.n	800b234 <LoRaMacMlmeRequest+0x12c>
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 800b2ca:	2502      	movs	r5, #2
 800b2cc:	e798      	b.n	800b200 <LoRaMacMlmeRequest+0xf8>
        LoRaMacConfirmQueueAdd( &queueElement );
 800b2ce:	a803      	add	r0, sp, #12
 800b2d0:	f000 fba8 	bl	800ba24 <LoRaMacConfirmQueueAdd>
 800b2d4:	e726      	b.n	800b124 <LoRaMacMlmeRequest+0x1c>
 800b2d6:	46c0      	nop			@ (mov r8, r8)
 800b2d8:	20001180 	.word	0x20001180
 800b2dc:	20000d34 	.word	0x20000d34
 800b2e0:	0000044d 	.word	0x0000044d
 800b2e4:	00000481 	.word	0x00000481
 800b2e8:	20000a28 	.word	0x20000a28
 800b2ec:	200009e8 	.word	0x200009e8
 800b2f0:	20000d36 	.word	0x20000d36
 800b2f4:	20000e42 	.word	0x20000e42
 800b2f8:	20000e4a 	.word	0x20000e4a
 800b2fc:	00000484 	.word	0x00000484
 800b300:	00000414 	.word	0x00000414
 800b304:	00000415 	.word	0x00000415
 800b308:	20000a21 	.word	0x20000a21
 800b30c:	080108d8 	.word	0x080108d8
 800b310:	20000ae4 	.word	0x20000ae4

0800b314 <LoRaMacMcpsRequest>:

/* ST_WORKAROUND_BEGIN: Update MCPS request with new input parameter to allow delayed tx */
LoRaMacStatus_t LoRaMacMcpsRequest( McpsReq_t* mcpsRequest, bool allowDelayedTx )
{
 800b314:	2300      	movs	r3, #0
 800b316:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b318:	b095      	sub	sp, #84	@ 0x54
 800b31a:	0007      	movs	r7, r0
 800b31c:	9107      	str	r1, [sp, #28]
 800b31e:	9300      	str	r3, [sp, #0]
    /* ST_WORKAROUND_END */
    uint16_t fBufferSize;
    int8_t datarate = DR_0;
    bool readyToSend = false;

    if( mcpsRequest == NULL )
 800b320:	4298      	cmp	r0, r3
 800b322:	d103      	bne.n	800b32c <LoRaMacMcpsRequest+0x18>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800b324:	2403      	movs	r4, #3

    // Fill return structure
    mcpsRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;

    return status;
}
 800b326:	0020      	movs	r0, r4
 800b328:	b015      	add	sp, #84	@ 0x54
 800b32a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if( LoRaMacIsBusy( ) == true )
 800b32c:	f7fe fc4e 	bl	8009bcc <LoRaMacIsBusy>
        return LORAMAC_STATUS_BUSY;
 800b330:	2401      	movs	r4, #1
    if( LoRaMacIsBusy( ) == true )
 800b332:	1e05      	subs	r5, r0, #0
 800b334:	d1f7      	bne.n	800b326 <LoRaMacMcpsRequest+0x12>
    macHdr.Value = 0;
 800b336:	466b      	mov	r3, sp
    memset1( ( uint8_t* ) &MacCtx.McpsConfirm, 0, sizeof( MacCtx.McpsConfirm ) );
 800b338:	2214      	movs	r2, #20
    macHdr.Value = 0;
 800b33a:	7218      	strb	r0, [r3, #8]
    memset1( ( uint8_t* ) &MacCtx.McpsConfirm, 0, sizeof( MacCtx.McpsConfirm ) );
 800b33c:	0029      	movs	r1, r5
 800b33e:	48b8      	ldr	r0, [pc, #736]	@ (800b620 <LoRaMacMcpsRequest+0x30c>)
 800b340:	f002 fa35 	bl	800d7ae <memset1>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800b344:	4bb7      	ldr	r3, [pc, #732]	@ (800b624 <LoRaMacMcpsRequest+0x310>)
 800b346:	4ab8      	ldr	r2, [pc, #736]	@ (800b628 <LoRaMacMcpsRequest+0x314>)
 800b348:	549c      	strb	r4, [r3, r2]
    MacCtx.AckTimeoutRetriesCounter = 1;
 800b34a:	4ab8      	ldr	r2, [pc, #736]	@ (800b62c <LoRaMacMcpsRequest+0x318>)
 800b34c:	549c      	strb	r4, [r3, r2]
    switch( mcpsRequest->Type )
 800b34e:	783a      	ldrb	r2, [r7, #0]
 800b350:	42a2      	cmp	r2, r4
 800b352:	d100      	bne.n	800b356 <LoRaMacMcpsRequest+0x42>
 800b354:	e111      	b.n	800b57a <LoRaMacMcpsRequest+0x266>
 800b356:	2a03      	cmp	r2, #3
 800b358:	d100      	bne.n	800b35c <LoRaMacMcpsRequest+0x48>
 800b35a:	e117      	b.n	800b58c <LoRaMacMcpsRequest+0x278>
 800b35c:	002e      	movs	r6, r5
 800b35e:	9501      	str	r5, [sp, #4]
 800b360:	9503      	str	r5, [sp, #12]
 800b362:	2a00      	cmp	r2, #0
 800b364:	d10d      	bne.n	800b382 <LoRaMacMcpsRequest+0x6e>
            MacCtx.AckTimeoutRetries = 1;
 800b366:	4ab2      	ldr	r2, [pc, #712]	@ (800b630 <LoRaMacMcpsRequest+0x31c>)
 800b368:	549c      	strb	r4, [r3, r2]
            macHdr.Bits.MType = FRAME_TYPE_DATA_UNCONFIRMED_UP;
 800b36a:	2340      	movs	r3, #64	@ 0x40
            macHdr.Bits.MType = FRAME_TYPE_DATA_CONFIRMED_UP;
 800b36c:	466a      	mov	r2, sp
            datarate = mcpsRequest->Req.Confirmed.Datarate;
 800b36e:	260e      	movs	r6, #14
            readyToSend = true;
 800b370:	2501      	movs	r5, #1
            macHdr.Bits.MType = FRAME_TYPE_DATA_CONFIRMED_UP;
 800b372:	7213      	strb	r3, [r2, #8]
            fPort = mcpsRequest->Req.Confirmed.fPort;
 800b374:	793b      	ldrb	r3, [r7, #4]
 800b376:	9303      	str	r3, [sp, #12]
            fBuffer = mcpsRequest->Req.Confirmed.fBuffer;
 800b378:	68bb      	ldr	r3, [r7, #8]
 800b37a:	9301      	str	r3, [sp, #4]
            fBufferSize = mcpsRequest->Req.Confirmed.fBufferSize;
 800b37c:	89bb      	ldrh	r3, [r7, #12]
 800b37e:	9300      	str	r3, [sp, #0]
            datarate = mcpsRequest->Req.Confirmed.Datarate;
 800b380:	57be      	ldrsb	r6, [r7, r6]
    getPhy.Attribute = PHY_MIN_TX_DR;
 800b382:	2402      	movs	r4, #2
 800b384:	ab08      	add	r3, sp, #32
 800b386:	751c      	strb	r4, [r3, #20]
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800b388:	4baa      	ldr	r3, [pc, #680]	@ (800b634 <LoRaMacMcpsRequest+0x320>)
 800b38a:	aa08      	add	r2, sp, #32
 800b38c:	9304      	str	r3, [sp, #16]
 800b38e:	4baa      	ldr	r3, [pc, #680]	@ (800b638 <LoRaMacMcpsRequest+0x324>)
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800b390:	a90d      	add	r1, sp, #52	@ 0x34
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800b392:	781b      	ldrb	r3, [r3, #0]
 800b394:	7593      	strb	r3, [r2, #22]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800b396:	9b04      	ldr	r3, [sp, #16]
 800b398:	3340      	adds	r3, #64	@ 0x40
 800b39a:	7818      	ldrb	r0, [r3, #0]
 800b39c:	f001 f853 	bl	800c446 <RegionGetPhyParam>
    if( readyToSend == true )
 800b3a0:	2d00      	cmp	r5, #0
 800b3a2:	d100      	bne.n	800b3a6 <LoRaMacMcpsRequest+0x92>
 800b3a4:	e0e4      	b.n	800b570 <LoRaMacMcpsRequest+0x25c>
        if( Nvm.MacGroup2.AdrCtrlOn == false )
 800b3a6:	9b04      	ldr	r3, [sp, #16]
 800b3a8:	33fe      	adds	r3, #254	@ 0xfe
 800b3aa:	781b      	ldrb	r3, [r3, #0]
 800b3ac:	2b00      	cmp	r3, #0
 800b3ae:	d116      	bne.n	800b3de <LoRaMacMcpsRequest+0xca>
    datarate = MAX( datarate, ( int8_t )phyParam.Value );
 800b3b0:	1c03      	adds	r3, r0, #0
 800b3b2:	b240      	sxtb	r0, r0
            verify.DatarateParams.Datarate = datarate;
 800b3b4:	ac09      	add	r4, sp, #36	@ 0x24
    datarate = MAX( datarate, ( int8_t )phyParam.Value );
 800b3b6:	42b0      	cmp	r0, r6
 800b3b8:	da00      	bge.n	800b3bc <LoRaMacMcpsRequest+0xa8>
 800b3ba:	1c33      	adds	r3, r6, #0
            verify.DatarateParams.Datarate = datarate;
 800b3bc:	7023      	strb	r3, [r4, #0]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800b3be:	4b9e      	ldr	r3, [pc, #632]	@ (800b638 <LoRaMacMcpsRequest+0x324>)
 800b3c0:	4d9c      	ldr	r5, [pc, #624]	@ (800b634 <LoRaMacMcpsRequest+0x320>)
 800b3c2:	781b      	ldrb	r3, [r3, #0]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 800b3c4:	2205      	movs	r2, #5
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800b3c6:	70a3      	strb	r3, [r4, #2]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 800b3c8:	002b      	movs	r3, r5
 800b3ca:	3340      	adds	r3, #64	@ 0x40
 800b3cc:	0021      	movs	r1, r4
 800b3ce:	7818      	ldrb	r0, [r3, #0]
 800b3d0:	f001 f853 	bl	800c47a <RegionVerify>
 800b3d4:	2800      	cmp	r0, #0
 800b3d6:	d0a5      	beq.n	800b324 <LoRaMacMcpsRequest+0x10>
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 800b3d8:	7823      	ldrb	r3, [r4, #0]
 800b3da:	3539      	adds	r5, #57	@ 0x39
 800b3dc:	702b      	strb	r3, [r5, #0]
    int8_t datarate = Nvm.MacGroup1.ChannelsDatarate;
 800b3de:	4b95      	ldr	r3, [pc, #596]	@ (800b634 <LoRaMacMcpsRequest+0x320>)
 800b3e0:	8f1a      	ldrh	r2, [r3, #56]	@ 0x38
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 800b3e2:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 800b3e4:	9204      	str	r2, [sp, #16]
 800b3e6:	ba52      	rev16	r2, r2
 800b3e8:	4694      	mov	ip, r2
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800b3ea:	001a      	movs	r2, r3
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 800b3ec:	910a      	str	r1, [sp, #40]	@ 0x28
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800b3ee:	32ff      	adds	r2, #255	@ 0xff
 800b3f0:	7c50      	ldrb	r0, [r2, #17]
 800b3f2:	2800      	cmp	r0, #0
 800b3f4:	d100      	bne.n	800b3f8 <LoRaMacMcpsRequest+0xe4>
 800b3f6:	e10e      	b.n	800b616 <LoRaMacMcpsRequest+0x302>
    if( Nvm.MacGroup2.MaxDCycle == 0 )
 800b3f8:	7812      	ldrb	r2, [r2, #0]
 800b3fa:	2a00      	cmp	r2, #0
 800b3fc:	d100      	bne.n	800b400 <LoRaMacMcpsRequest+0xec>
        Nvm.MacGroup1.AggregatedTimeOff = 0;
 800b3fe:	631a      	str	r2, [r3, #48]	@ 0x30
    fCtrl.Bits.Adr           = Nvm.MacGroup2.AdrCtrlOn;
 800b400:	001a      	movs	r2, r3
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800b402:	001c      	movs	r4, r3
    fCtrl.Bits.Adr           = Nvm.MacGroup2.AdrCtrlOn;
 800b404:	32fe      	adds	r2, #254	@ 0xfe
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800b406:	34fc      	adds	r4, #252	@ 0xfc
    fCtrl.Bits.Adr           = Nvm.MacGroup2.AdrCtrlOn;
 800b408:	7816      	ldrb	r6, [r2, #0]
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800b40a:	7822      	ldrb	r2, [r4, #0]
    fCtrl.Value = 0;
 800b40c:	2500      	movs	r5, #0
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800b40e:	3a01      	subs	r2, #1
 800b410:	4250      	negs	r0, r2
 800b412:	4142      	adcs	r2, r0
 800b414:	b2d2      	uxtb	r2, r2
 800b416:	9206      	str	r2, [sp, #24]
    if( Nvm.MacGroup1.SrvAckRequested == true )
 800b418:	001a      	movs	r2, r3
 800b41a:	323a      	adds	r2, #58	@ 0x3a
 800b41c:	7812      	ldrb	r2, [r2, #0]
    adrNext.Version = Nvm.MacGroup2.Version;
 800b41e:	a80f      	add	r0, sp, #60	@ 0x3c
    if( Nvm.MacGroup1.SrvAckRequested == true )
 800b420:	9205      	str	r2, [sp, #20]
    adrNext.Version = Nvm.MacGroup2.Version;
 800b422:	6922      	ldr	r2, [r4, #16]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 800b424:	4c7f      	ldr	r4, [pc, #508]	@ (800b624 <LoRaMacMcpsRequest+0x310>)
    adrNext.Version = Nvm.MacGroup2.Version;
 800b426:	920f      	str	r2, [sp, #60]	@ 0x3c
    adrNext.UpdateChanMask = true;
 800b428:	2201      	movs	r2, #1
 800b42a:	7102      	strb	r2, [r0, #4]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 800b42c:	22fd      	movs	r2, #253	@ 0xfd
 800b42e:	0092      	lsls	r2, r2, #2
 800b430:	58a2      	ldr	r2, [r4, r2]
    adrNext.AdrEnabled = fCtrl.Bits.Adr;
 800b432:	7146      	strb	r6, [r0, #5]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 800b434:	9212      	str	r2, [sp, #72]	@ 0x48
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800b436:	4662      	mov	r2, ip
 800b438:	8202      	strh	r2, [r0, #16]
    adrNext.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800b43a:	001a      	movs	r2, r3
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 800b43c:	6081      	str	r1, [r0, #8]
    adrNext.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800b43e:	3274      	adds	r2, #116	@ 0x74
 800b440:	7812      	ldrb	r2, [r2, #0]
    adrNext.Region = Nvm.MacGroup2.Region;
 800b442:	3340      	adds	r3, #64	@ 0x40
    adrNext.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800b444:	7482      	strb	r2, [r0, #18]
    adrNext.Region = Nvm.MacGroup2.Region;
 800b446:	781b      	ldrb	r3, [r3, #0]
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &Nvm.MacGroup1.ChannelsDatarate,
 800b448:	4a7c      	ldr	r2, [pc, #496]	@ (800b63c <LoRaMacMcpsRequest+0x328>)
 800b44a:	497d      	ldr	r1, [pc, #500]	@ (800b640 <LoRaMacMcpsRequest+0x32c>)
    adrNext.Region = Nvm.MacGroup2.Region;
 800b44c:	74c3      	strb	r3, [r0, #19]
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &Nvm.MacGroup1.ChannelsDatarate,
 800b44e:	ab0a      	add	r3, sp, #40	@ 0x28
 800b450:	f000 f926 	bl	800b6a0 <LoRaMacAdrCalcNext>
 800b454:	9b05      	ldr	r3, [sp, #20]
 800b456:	0180      	lsls	r0, r0, #6
 800b458:	015a      	lsls	r2, r3, #5
 800b45a:	9b06      	ldr	r3, [sp, #24]
 800b45c:	01f6      	lsls	r6, r6, #7
 800b45e:	011b      	lsls	r3, r3, #4
 800b460:	4313      	orrs	r3, r2
 800b462:	4303      	orrs	r3, r0
 800b464:	4333      	orrs	r3, r6
 800b466:	9305      	str	r3, [sp, #20]
    MacCtx.NodeAckRequested = false;
 800b468:	4b76      	ldr	r3, [pc, #472]	@ (800b644 <LoRaMacMcpsRequest+0x330>)
    memcpy1( MacCtx.AppData, ( uint8_t* ) fBuffer, fBufferSize );
 800b46a:	9901      	ldr	r1, [sp, #4]
    MacCtx.NodeAckRequested = false;
 800b46c:	54e5      	strb	r5, [r4, r3]
        fBufferSize = 0;
 800b46e:	9b01      	ldr	r3, [sp, #4]
    memcpy1( MacCtx.AppData, ( uint8_t* ) fBuffer, fBufferSize );
 800b470:	4875      	ldr	r0, [pc, #468]	@ (800b648 <LoRaMacMcpsRequest+0x334>)
        fBufferSize = 0;
 800b472:	1e5a      	subs	r2, r3, #1
 800b474:	4193      	sbcs	r3, r2
 800b476:	9a00      	ldr	r2, [sp, #0]
 800b478:	425b      	negs	r3, r3
 800b47a:	401a      	ands	r2, r3
 800b47c:	9200      	str	r2, [sp, #0]
    MacCtx.PktBufferLen = 0;
 800b47e:	8025      	strh	r5, [r4, #0]
    uint32_t fCntUp = 0;
 800b480:	950b      	str	r5, [sp, #44]	@ 0x2c
    size_t macCmdsSize = 0;
 800b482:	950c      	str	r5, [sp, #48]	@ 0x30
    memcpy1( MacCtx.AppData, ( uint8_t* ) fBuffer, fBufferSize );
 800b484:	f002 f97e 	bl	800d784 <memcpy1>
    MacCtx.AppDataSize = fBufferSize;
 800b488:	466b      	mov	r3, sp
 800b48a:	781a      	ldrb	r2, [r3, #0]
 800b48c:	4b6f      	ldr	r3, [pc, #444]	@ (800b64c <LoRaMacMcpsRequest+0x338>)
 800b48e:	54e2      	strb	r2, [r4, r3]
    MacCtx.PktBuffer[0] = macHdr->Value;
 800b490:	466b      	mov	r3, sp
 800b492:	7a19      	ldrb	r1, [r3, #8]
    switch( macHdr->Bits.MType )
 800b494:	9b02      	ldr	r3, [sp, #8]
    MacCtx.PktBuffer[0] = macHdr->Value;
 800b496:	70a1      	strb	r1, [r4, #2]
    switch( macHdr->Bits.MType )
 800b498:	061b      	lsls	r3, r3, #24
 800b49a:	0f5b      	lsrs	r3, r3, #29
 800b49c:	2b04      	cmp	r3, #4
 800b49e:	d100      	bne.n	800b4a2 <LoRaMacMcpsRequest+0x18e>
 800b4a0:	e083      	b.n	800b5aa <LoRaMacMcpsRequest+0x296>
 800b4a2:	2b07      	cmp	r3, #7
 800b4a4:	d100      	bne.n	800b4a8 <LoRaMacMcpsRequest+0x194>
 800b4a6:	e0a2      	b.n	800b5ee <LoRaMacMcpsRequest+0x2da>
 800b4a8:	2b02      	cmp	r3, #2
 800b4aa:	d000      	beq.n	800b4ae <LoRaMacMcpsRequest+0x19a>
 800b4ac:	e0b1      	b.n	800b612 <LoRaMacMcpsRequest+0x2fe>
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_DATA;
 800b4ae:	0025      	movs	r5, r4
 800b4b0:	2304      	movs	r3, #4
            MacCtx.TxMsg.Message.Data.Buffer = MacCtx.PktBuffer;
 800b4b2:	0026      	movs	r6, r4
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_DATA;
 800b4b4:	35ff      	adds	r5, #255	@ 0xff
 800b4b6:	716b      	strb	r3, [r5, #5]
            MacCtx.TxMsg.Message.Data.Buffer = MacCtx.PktBuffer;
 800b4b8:	4b65      	ldr	r3, [pc, #404]	@ (800b650 <LoRaMacMcpsRequest+0x33c>)
 800b4ba:	36fc      	adds	r6, #252	@ 0xfc
 800b4bc:	60f3      	str	r3, [r6, #12]
            MacCtx.TxMsg.Message.Data.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 800b4be:	23ff      	movs	r3, #255	@ 0xff
            MacCtx.TxMsg.Message.Data.MHDR.Value = macHdr->Value;
 800b4c0:	73a9      	strb	r1, [r5, #14]
            MacCtx.TxMsg.Message.Data.FPort = fPort;
 800b4c2:	9903      	ldr	r1, [sp, #12]
            MacCtx.TxMsg.Message.Data.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 800b4c4:	736b      	strb	r3, [r5, #13]
            MacCtx.TxMsg.Message.Data.FPort = fPort;
 800b4c6:	3329      	adds	r3, #41	@ 0x29
 800b4c8:	54e1      	strb	r1, [r4, r3]
            MacCtx.TxMsg.Message.Data.FHDR.DevAddr = Nvm.MacGroup2.DevAddr;
 800b4ca:	4b5a      	ldr	r3, [pc, #360]	@ (800b634 <LoRaMacMcpsRequest+0x320>)
            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 800b4cc:	a80b      	add	r0, sp, #44	@ 0x2c
            MacCtx.TxMsg.Message.Data.FHDR.DevAddr = Nvm.MacGroup2.DevAddr;
 800b4ce:	9300      	str	r3, [sp, #0]
 800b4d0:	4b60      	ldr	r3, [pc, #384]	@ (800b654 <LoRaMacMcpsRequest+0x340>)
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	6173      	str	r3, [r6, #20]
            MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 800b4d6:	9b05      	ldr	r3, [sp, #20]
 800b4d8:	756b      	strb	r3, [r5, #21]
            MacCtx.TxMsg.Message.Data.FRMPayloadSize = MacCtx.AppDataSize;
 800b4da:	2398      	movs	r3, #152	@ 0x98
 800b4dc:	005b      	lsls	r3, r3, #1
 800b4de:	54e2      	strb	r2, [r4, r3]
            MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.AppData;
 800b4e0:	4b59      	ldr	r3, [pc, #356]	@ (800b648 <LoRaMacMcpsRequest+0x334>)
 800b4e2:	6333      	str	r3, [r6, #48]	@ 0x30
            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 800b4e4:	f000 fc70 	bl	800bdc8 <LoRaMacCryptoGetFCntUp>
 800b4e8:	2800      	cmp	r0, #0
 800b4ea:	d000      	beq.n	800b4ee <LoRaMacMcpsRequest+0x1da>
 800b4ec:	e08f      	b.n	800b60e <LoRaMacMcpsRequest+0x2fa>
            MacCtx.TxMsg.Message.Data.FHDR.FCnt = ( uint16_t )fCntUp;
 800b4ee:	0022      	movs	r2, r4
 800b4f0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b4f2:	32fe      	adds	r2, #254	@ 0xfe
 800b4f4:	8313      	strh	r3, [r2, #24]
            MacCtx.McpsConfirm.AckReceived = false;
 800b4f6:	4a58      	ldr	r2, [pc, #352]	@ (800b658 <LoRaMacMcpsRequest+0x344>)
 800b4f8:	52a0      	strh	r0, [r4, r2]
            MacCtx.McpsConfirm.UpLinkCounter = fCntUp;
 800b4fa:	4a58      	ldr	r2, [pc, #352]	@ (800b65c <LoRaMacMcpsRequest+0x348>)
            if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 800b4fc:	a80c      	add	r0, sp, #48	@ 0x30
            MacCtx.McpsConfirm.UpLinkCounter = fCntUp;
 800b4fe:	50a3      	str	r3, [r4, r2]
            if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 800b500:	f000 f9fe 	bl	800b900 <LoRaMacCommandsGetSizeSerializedCmds>
 800b504:	2800      	cmp	r0, #0
 800b506:	d15a      	bne.n	800b5be <LoRaMacMcpsRequest+0x2aa>
            if( macCmdsSize > 0 )
 800b508:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	d018      	beq.n	800b540 <LoRaMacMcpsRequest+0x22c>
                availableSize = GetMaxAppPayloadWithoutFOptsLength( Nvm.MacGroup1.ChannelsDatarate );
 800b50e:	2039      	movs	r0, #57	@ 0x39
 800b510:	9b00      	ldr	r3, [sp, #0]
 800b512:	5618      	ldrsb	r0, [r3, r0]
 800b514:	f7fd fb6e 	bl	8008bf4 <GetMaxAppPayloadWithoutFOptsLength>
                if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize <= LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 800b518:	4b4c      	ldr	r3, [pc, #304]	@ (800b64c <LoRaMacMcpsRequest+0x338>)
 800b51a:	5ce3      	ldrb	r3, [r4, r3]
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	d056      	beq.n	800b5ce <LoRaMacMcpsRequest+0x2ba>
 800b520:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b522:	2b0f      	cmp	r3, #15
 800b524:	d845      	bhi.n	800b5b2 <LoRaMacMcpsRequest+0x29e>
                    if( LoRaMacCommandsSerializeCmds( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH, &macCmdsSize, MacCtx.TxMsg.Message.Data.FHDR.FOpts ) != LORAMAC_COMMANDS_SUCCESS )
 800b526:	200f      	movs	r0, #15
 800b528:	4a4d      	ldr	r2, [pc, #308]	@ (800b660 <LoRaMacMcpsRequest+0x34c>)
 800b52a:	a90c      	add	r1, sp, #48	@ 0x30
 800b52c:	f000 f9f4 	bl	800b918 <LoRaMacCommandsSerializeCmds>
 800b530:	2800      	cmp	r0, #0
 800b532:	d144      	bne.n	800b5be <LoRaMacMcpsRequest+0x2aa>
                    fCtrl->Bits.FOptsLen = macCmdsSize;
 800b534:	220f      	movs	r2, #15
 800b536:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b538:	4013      	ands	r3, r2
 800b53a:	9a05      	ldr	r2, [sp, #20]
 800b53c:	431a      	orrs	r2, r3
                    MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 800b53e:	756a      	strb	r2, [r5, #21]
        status = ScheduleTx( allowDelayedTx ); /* ST_WORKAROUND: Update Send request with new input parameter to allow delayed tx */
 800b540:	9807      	ldr	r0, [sp, #28]
 800b542:	f7fd fd6b 	bl	800901c <ScheduleTx>
 800b546:	1e04      	subs	r4, r0, #0
    if( status != LORAMAC_STATUS_OK )
 800b548:	d13a      	bne.n	800b5c0 <LoRaMacMcpsRequest+0x2ac>
        Nvm.MacGroup1.SrvAckRequested = false;
 800b54a:	4a46      	ldr	r2, [pc, #280]	@ (800b664 <LoRaMacMcpsRequest+0x350>)
 800b54c:	4b39      	ldr	r3, [pc, #228]	@ (800b634 <LoRaMacMcpsRequest+0x320>)
 800b54e:	7010      	strb	r0, [r2, #0]
        Nvm.MacGroup1.AdrAckCounter = adrAckCounter;
 800b550:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b552:	629a      	str	r2, [r3, #40]	@ 0x28
        if( LoRaMacCommandsRemoveNoneStickyCmds( ) != LORAMAC_COMMANDS_SUCCESS )
 800b554:	f000 f9b0 	bl	800b8b8 <LoRaMacCommandsRemoveNoneStickyCmds>
 800b558:	1e04      	subs	r4, r0, #0
 800b55a:	d15e      	bne.n	800b61a <LoRaMacMcpsRequest+0x306>
            MacCtx.McpsConfirm.McpsRequest = mcpsRequest->Type;
 800b55c:	2287      	movs	r2, #135	@ 0x87
 800b55e:	4b31      	ldr	r3, [pc, #196]	@ (800b624 <LoRaMacMcpsRequest+0x310>)
 800b560:	7839      	ldrb	r1, [r7, #0]
 800b562:	00d2      	lsls	r2, r2, #3
 800b564:	5499      	strb	r1, [r3, r2]
            MacCtx.MacFlags.Bits.McpsReq = 1;
 800b566:	2201      	movs	r2, #1
 800b568:	493f      	ldr	r1, [pc, #252]	@ (800b668 <LoRaMacMcpsRequest+0x354>)
 800b56a:	5c58      	ldrb	r0, [r3, r1]
 800b56c:	4302      	orrs	r2, r0
            MacCtx.NodeAckRequested = false;
 800b56e:	545a      	strb	r2, [r3, r1]
    mcpsRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 800b570:	4b2c      	ldr	r3, [pc, #176]	@ (800b624 <LoRaMacMcpsRequest+0x310>)
 800b572:	4a3e      	ldr	r2, [pc, #248]	@ (800b66c <LoRaMacMcpsRequest+0x358>)
 800b574:	589b      	ldr	r3, [r3, r2]
 800b576:	613b      	str	r3, [r7, #16]
    return status;
 800b578:	e6d5      	b.n	800b326 <LoRaMacMcpsRequest+0x12>
            MacCtx.AckTimeoutRetries = MIN( mcpsRequest->Req.Confirmed.NbTrials, MAX_ACK_RETRIES );
 800b57a:	7bf9      	ldrb	r1, [r7, #15]
 800b57c:	1c0a      	adds	r2, r1, #0
 800b57e:	2908      	cmp	r1, #8
 800b580:	d900      	bls.n	800b584 <LoRaMacMcpsRequest+0x270>
 800b582:	2208      	movs	r2, #8
 800b584:	492a      	ldr	r1, [pc, #168]	@ (800b630 <LoRaMacMcpsRequest+0x31c>)
 800b586:	545a      	strb	r2, [r3, r1]
            macHdr.Bits.MType = FRAME_TYPE_DATA_CONFIRMED_UP;
 800b588:	2380      	movs	r3, #128	@ 0x80
 800b58a:	e6ef      	b.n	800b36c <LoRaMacMcpsRequest+0x58>
            MacCtx.AckTimeoutRetries = 1;
 800b58c:	4a28      	ldr	r2, [pc, #160]	@ (800b630 <LoRaMacMcpsRequest+0x31c>)
            datarate = mcpsRequest->Req.Proprietary.Datarate;
 800b58e:	260a      	movs	r6, #10
            MacCtx.AckTimeoutRetries = 1;
 800b590:	549c      	strb	r4, [r3, r2]
            macHdr.Bits.MType = FRAME_TYPE_PROPRIETARY;
 800b592:	23e0      	movs	r3, #224	@ 0xe0
 800b594:	466a      	mov	r2, sp
 800b596:	7213      	strb	r3, [r2, #8]
            fBuffer = mcpsRequest->Req.Proprietary.fBuffer;
 800b598:	687b      	ldr	r3, [r7, #4]
            readyToSend = true;
 800b59a:	0025      	movs	r5, r4
            fBuffer = mcpsRequest->Req.Proprietary.fBuffer;
 800b59c:	9301      	str	r3, [sp, #4]
            fBufferSize = mcpsRequest->Req.Proprietary.fBufferSize;
 800b59e:	893b      	ldrh	r3, [r7, #8]
 800b5a0:	9300      	str	r3, [sp, #0]
    uint8_t fPort = 0;
 800b5a2:	2300      	movs	r3, #0
            datarate = mcpsRequest->Req.Proprietary.Datarate;
 800b5a4:	57be      	ldrsb	r6, [r7, r6]
    uint8_t fPort = 0;
 800b5a6:	9303      	str	r3, [sp, #12]
            break;
 800b5a8:	e6eb      	b.n	800b382 <LoRaMacMcpsRequest+0x6e>
            MacCtx.NodeAckRequested = true;
 800b5aa:	2001      	movs	r0, #1
 800b5ac:	4b25      	ldr	r3, [pc, #148]	@ (800b644 <LoRaMacMcpsRequest+0x330>)
 800b5ae:	54e0      	strb	r0, [r4, r3]
 800b5b0:	e77d      	b.n	800b4ae <LoRaMacMcpsRequest+0x19a>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 800b5b2:	4a2f      	ldr	r2, [pc, #188]	@ (800b670 <LoRaMacMcpsRequest+0x35c>)
 800b5b4:	a90c      	add	r1, sp, #48	@ 0x30
 800b5b6:	f000 f9af 	bl	800b918 <LoRaMacCommandsSerializeCmds>
 800b5ba:	2800      	cmp	r0, #0
 800b5bc:	d0c0      	beq.n	800b540 <LoRaMacMcpsRequest+0x22c>
                return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800b5be:	2413      	movs	r4, #19
        Nvm.MacGroup1.ChannelsTxPower = txPower;
 800b5c0:	4b1c      	ldr	r3, [pc, #112]	@ (800b634 <LoRaMacMcpsRequest+0x320>)
 800b5c2:	9a04      	ldr	r2, [sp, #16]
 800b5c4:	871a      	strh	r2, [r3, #56]	@ 0x38
            MacCtx.NodeAckRequested = false;
 800b5c6:	2200      	movs	r2, #0
 800b5c8:	4b16      	ldr	r3, [pc, #88]	@ (800b624 <LoRaMacMcpsRequest+0x310>)
 800b5ca:	491e      	ldr	r1, [pc, #120]	@ (800b644 <LoRaMacMcpsRequest+0x330>)
 800b5cc:	e7cf      	b.n	800b56e <LoRaMacMcpsRequest+0x25a>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 800b5ce:	4d28      	ldr	r5, [pc, #160]	@ (800b670 <LoRaMacMcpsRequest+0x35c>)
 800b5d0:	a90c      	add	r1, sp, #48	@ 0x30
 800b5d2:	002a      	movs	r2, r5
 800b5d4:	f000 f9a0 	bl	800b918 <LoRaMacCommandsSerializeCmds>
 800b5d8:	2800      	cmp	r0, #0
 800b5da:	d1f0      	bne.n	800b5be <LoRaMacMcpsRequest+0x2aa>
                    MacCtx.TxMsg.Message.Data.FPort = 0;
 800b5dc:	2394      	movs	r3, #148	@ 0x94
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
 800b5de:	2298      	movs	r2, #152	@ 0x98
                    MacCtx.TxMsg.Message.Data.FPort = 0;
 800b5e0:	005b      	lsls	r3, r3, #1
 800b5e2:	54e0      	strb	r0, [r4, r3]
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
 800b5e4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b5e6:	0052      	lsls	r2, r2, #1
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
 800b5e8:	6335      	str	r5, [r6, #48]	@ 0x30
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
 800b5ea:	54a3      	strb	r3, [r4, r2]
    if( ( status == LORAMAC_STATUS_OK ) || ( status == LORAMAC_STATUS_SKIPPED_APP_DATA ) )
 800b5ec:	e7a8      	b.n	800b540 <LoRaMacMcpsRequest+0x22c>
            if( ( fBuffer != NULL ) && ( MacCtx.AppDataSize > 0 ) )
 800b5ee:	9b01      	ldr	r3, [sp, #4]
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	d0a5      	beq.n	800b540 <LoRaMacMcpsRequest+0x22c>
 800b5f4:	2a00      	cmp	r2, #0
 800b5f6:	d0a3      	beq.n	800b540 <LoRaMacMcpsRequest+0x22c>
                memcpy1( MacCtx.PktBuffer + LORAMAC_MHDR_FIELD_SIZE, ( uint8_t* ) fBuffer, MacCtx.AppDataSize );
 800b5f8:	466b      	mov	r3, sp
 800b5fa:	481e      	ldr	r0, [pc, #120]	@ (800b674 <LoRaMacMcpsRequest+0x360>)
 800b5fc:	781a      	ldrb	r2, [r3, #0]
 800b5fe:	9901      	ldr	r1, [sp, #4]
 800b600:	f002 f8c0 	bl	800d784 <memcpy1>
                MacCtx.PktBufferLen = LORAMAC_MHDR_FIELD_SIZE + MacCtx.AppDataSize;
 800b604:	4b11      	ldr	r3, [pc, #68]	@ (800b64c <LoRaMacMcpsRequest+0x338>)
 800b606:	5ce3      	ldrb	r3, [r4, r3]
 800b608:	3301      	adds	r3, #1
 800b60a:	8023      	strh	r3, [r4, #0]
    if( ( status == LORAMAC_STATUS_OK ) || ( status == LORAMAC_STATUS_SKIPPED_APP_DATA ) )
 800b60c:	e798      	b.n	800b540 <LoRaMacMcpsRequest+0x22c>
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 800b60e:	2412      	movs	r4, #18
 800b610:	e7d6      	b.n	800b5c0 <LoRaMacMcpsRequest+0x2ac>
            return LORAMAC_STATUS_SERVICE_UNKNOWN;
 800b612:	2402      	movs	r4, #2
 800b614:	e7d4      	b.n	800b5c0 <LoRaMacMcpsRequest+0x2ac>
        return LORAMAC_STATUS_NO_NETWORK_JOINED;
 800b616:	2407      	movs	r4, #7
 800b618:	e7d5      	b.n	800b5c6 <LoRaMacMcpsRequest+0x2b2>
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800b61a:	2413      	movs	r4, #19
 800b61c:	e7d3      	b.n	800b5c6 <LoRaMacMcpsRequest+0x2b2>
 800b61e:	46c0      	nop			@ (mov r8, r8)
 800b620:	2000116c 	.word	0x2000116c
 800b624:	20000d34 	.word	0x20000d34
 800b628:	00000439 	.word	0x00000439
 800b62c:	00000412 	.word	0x00000412
 800b630:	00000411 	.word	0x00000411
 800b634:	200009e8 	.word	0x200009e8
 800b638:	20000a5c 	.word	0x20000a5c
 800b63c:	20000a20 	.word	0x20000a20
 800b640:	20000a21 	.word	0x20000a21
 800b644:	00000414 	.word	0x00000414
 800b648:	20000e6c 	.word	0x20000e6c
 800b64c:	00000237 	.word	0x00000237
 800b650:	20000d36 	.word	0x20000d36
 800b654:	20000ab4 	.word	0x20000ab4
 800b658:	0000043c 	.word	0x0000043c
 800b65c:	00000444 	.word	0x00000444
 800b660:	20000e4c 	.word	0x20000e4c
 800b664:	20000a22 	.word	0x20000a22
 800b668:	00000481 	.word	0x00000481
 800b66c:	00000484 	.word	0x00000484
 800b670:	200011bc 	.word	0x200011bc
 800b674:	20000d37 	.word	0x20000d37

0800b678 <LoRaMacTestSetDutyCycleOn>:
/* ST_WORKAROUND_END */

void LoRaMacTestSetDutyCycleOn( bool enable )
{
 800b678:	b537      	push	{r0, r1, r2, r4, r5, lr}
    VerifyParams_t verify;

    verify.DutyCycle = enable;

    if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DUTY_CYCLE ) == true )
 800b67a:	4b07      	ldr	r3, [pc, #28]	@ (800b698 <LoRaMacTestSetDutyCycleOn+0x20>)
    verify.DutyCycle = enable;
 800b67c:	a901      	add	r1, sp, #4
 800b67e:	7008      	strb	r0, [r1, #0]
{
 800b680:	0004      	movs	r4, r0
    if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DUTY_CYCLE ) == true )
 800b682:	220f      	movs	r2, #15
 800b684:	7818      	ldrb	r0, [r3, #0]
 800b686:	4d05      	ldr	r5, [pc, #20]	@ (800b69c <LoRaMacTestSetDutyCycleOn+0x24>)
 800b688:	f000 fef7 	bl	800c47a <RegionVerify>
 800b68c:	2800      	cmp	r0, #0
 800b68e:	d001      	beq.n	800b694 <LoRaMacTestSetDutyCycleOn+0x1c>
    {
        Nvm.MacGroup2.DutyCycleOn = enable;
 800b690:	35ff      	adds	r5, #255	@ 0xff
 800b692:	706c      	strb	r4, [r5, #1]
    }
}
 800b694:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
 800b696:	46c0      	nop			@ (mov r8, r8)
 800b698:	20000a28 	.word	0x20000a28
 800b69c:	200009e8 	.word	0x200009e8

0800b6a0 <LoRaMacAdrCalcNext>:
 * \param [OUT] adrAckCounter The calculated ADR acknowledgement counter.
 *
 * \retval Returns true, if an ADR request should be performed.
 */
bool LoRaMacAdrCalcNext( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut, uint32_t* adrAckCounter )
{
 800b6a0:	b5f0      	push	{r4, r5, r6, r7, lr}
    if( adrNext->Version.Fields.Minor == 0 )
    {
        return CalcNextV10X( adrNext, drOut, txPowOut, adrAckCounter );
    }
    return false;
 800b6a2:	2500      	movs	r5, #0
{
 800b6a4:	b08d      	sub	sp, #52	@ 0x34
 800b6a6:	9104      	str	r1, [sp, #16]
 800b6a8:	9205      	str	r2, [sp, #20]
 800b6aa:	001e      	movs	r6, r3
    if( adrNext->Version.Fields.Minor == 0 )
 800b6ac:	7883      	ldrb	r3, [r0, #2]
{
 800b6ae:	0004      	movs	r4, r0
    if( adrNext->Version.Fields.Minor == 0 )
 800b6b0:	42ab      	cmp	r3, r5
 800b6b2:	d12a      	bne.n	800b70a <LoRaMacAdrCalcNext+0x6a>
    int8_t datarate = adrNext->Datarate;
 800b6b4:	2310      	movs	r3, #16
 800b6b6:	56c3      	ldrsb	r3, [r0, r3]
 800b6b8:	9301      	str	r3, [sp, #4]
    int8_t txPower = adrNext->TxPower;
 800b6ba:	2311      	movs	r3, #17
 800b6bc:	56c3      	ldrsb	r3, [r0, r3]
    int8_t datarate = adrNext->Datarate;
 800b6be:	9f01      	ldr	r7, [sp, #4]
    int8_t txPower = adrNext->TxPower;
 800b6c0:	9303      	str	r3, [sp, #12]
    *adrAckCounter = adrNext->AdrAckCounter;
 800b6c2:	6883      	ldr	r3, [r0, #8]
 800b6c4:	6033      	str	r3, [r6, #0]
    if( adrNext->AdrEnabled == true )
 800b6c6:	7945      	ldrb	r5, [r0, #5]
 800b6c8:	2d00      	cmp	r5, #0
 800b6ca:	d019      	beq.n	800b700 <LoRaMacAdrCalcNext+0x60>
        getPhy.Attribute = PHY_MIN_TX_DR;
 800b6cc:	2302      	movs	r3, #2
 800b6ce:	aa06      	add	r2, sp, #24
 800b6d0:	7113      	strb	r3, [r2, #4]
        getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 800b6d2:	7c83      	ldrb	r3, [r0, #18]
        phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 800b6d4:	a907      	add	r1, sp, #28
        getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 800b6d6:	7193      	strb	r3, [r2, #6]
        phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 800b6d8:	7cc0      	ldrb	r0, [r0, #19]
 800b6da:	f000 feb4 	bl	800c446 <RegionGetPhyParam>
        minTxDatarate = phyParam.Value;
 800b6de:	b243      	sxtb	r3, r0
 800b6e0:	9302      	str	r3, [sp, #8]
        datarate = MAX( datarate, minTxDatarate );
 800b6e2:	466b      	mov	r3, sp
 800b6e4:	9a02      	ldr	r2, [sp, #8]
 800b6e6:	791f      	ldrb	r7, [r3, #4]
 800b6e8:	9b01      	ldr	r3, [sp, #4]
 800b6ea:	4293      	cmp	r3, r2
 800b6ec:	da01      	bge.n	800b6f2 <LoRaMacAdrCalcNext+0x52>
 800b6ee:	466b      	mov	r3, sp
 800b6f0:	7a1f      	ldrb	r7, [r3, #8]
        if( datarate == minTxDatarate )
 800b6f2:	9b01      	ldr	r3, [sp, #4]
 800b6f4:	9a02      	ldr	r2, [sp, #8]
 800b6f6:	2500      	movs	r5, #0
        datarate = MAX( datarate, minTxDatarate );
 800b6f8:	b27f      	sxtb	r7, r7
        if( datarate == minTxDatarate )
 800b6fa:	4293      	cmp	r3, r2
 800b6fc:	dc08      	bgt.n	800b710 <LoRaMacAdrCalcNext+0x70>
            *adrAckCounter = 0;
 800b6fe:	6035      	str	r5, [r6, #0]
    *drOut = datarate;
 800b700:	9b04      	ldr	r3, [sp, #16]
    *txPowOut = txPower;
 800b702:	9a03      	ldr	r2, [sp, #12]
    *drOut = datarate;
 800b704:	701f      	strb	r7, [r3, #0]
    *txPowOut = txPower;
 800b706:	9b05      	ldr	r3, [sp, #20]
 800b708:	701a      	strb	r2, [r3, #0]
}
 800b70a:	0028      	movs	r0, r5
 800b70c:	b00d      	add	sp, #52	@ 0x34
 800b70e:	bdf0      	pop	{r4, r5, r6, r7, pc}
            if( adrNext->AdrAckCounter >=  adrNext->AdrAckLimit )
 800b710:	89a1      	ldrh	r1, [r4, #12]
 800b712:	68a2      	ldr	r2, [r4, #8]
            if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
 800b714:	89e3      	ldrh	r3, [r4, #14]
            if( adrNext->AdrAckCounter >=  adrNext->AdrAckLimit )
 800b716:	428a      	cmp	r2, r1
 800b718:	416d      	adcs	r5, r5
            if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
 800b71a:	185b      	adds	r3, r3, r1
            if( adrNext->AdrAckCounter >=  adrNext->AdrAckLimit )
 800b71c:	b2ed      	uxtb	r5, r5
            if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
 800b71e:	429a      	cmp	r2, r3
 800b720:	d3ee      	bcc.n	800b700 <LoRaMacAdrCalcNext+0x60>
                getPhy.Attribute = PHY_MAX_TX_POWER;
 800b722:	2308      	movs	r3, #8
 800b724:	ae07      	add	r6, sp, #28
 800b726:	7033      	strb	r3, [r6, #0]
                phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 800b728:	0031      	movs	r1, r6
 800b72a:	7ce0      	ldrb	r0, [r4, #19]
 800b72c:	f000 fe8b 	bl	800c446 <RegionGetPhyParam>
                txPower = phyParam.Value;
 800b730:	b243      	sxtb	r3, r0
 800b732:	9303      	str	r3, [sp, #12]
                if( ( adrNext->AdrAckCounter % adrNext->AdrAckDelay ) == 1 )
 800b734:	89e1      	ldrh	r1, [r4, #14]
 800b736:	68a0      	ldr	r0, [r4, #8]
 800b738:	f7f4 fd9c 	bl	8000274 <__aeabi_uidivmod>
 800b73c:	2901      	cmp	r1, #1
 800b73e:	d1df      	bne.n	800b700 <LoRaMacAdrCalcNext+0x60>
                    getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 800b740:	2322      	movs	r3, #34	@ 0x22
                    getPhy.Datarate = datarate;
 800b742:	7077      	strb	r7, [r6, #1]
                    getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 800b744:	7033      	strb	r3, [r6, #0]
                    getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 800b746:	7ca3      	ldrb	r3, [r4, #18]
                    phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 800b748:	0031      	movs	r1, r6
                    getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 800b74a:	70b3      	strb	r3, [r6, #2]
                    phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 800b74c:	7ce0      	ldrb	r0, [r4, #19]
 800b74e:	f000 fe7a 	bl	800c446 <RegionGetPhyParam>
                    if( datarate == minTxDatarate )
 800b752:	9b02      	ldr	r3, [sp, #8]
                    datarate = phyParam.Value;
 800b754:	b247      	sxtb	r7, r0
                    if( datarate == minTxDatarate )
 800b756:	42bb      	cmp	r3, r7
 800b758:	d1d2      	bne.n	800b700 <LoRaMacAdrCalcNext+0x60>
                        if( adrNext->UpdateChanMask == true )
 800b75a:	7923      	ldrb	r3, [r4, #4]
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	d005      	beq.n	800b76c <LoRaMacAdrCalcNext+0xcc>
                            params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 800b760:	2302      	movs	r3, #2
 800b762:	a909      	add	r1, sp, #36	@ 0x24
 800b764:	720b      	strb	r3, [r1, #8]
                            RegionInitDefaults( adrNext->Region, &params );
 800b766:	7ce0      	ldrb	r0, [r4, #19]
 800b768:	f000 fe80 	bl	800c46c <RegionInitDefaults>
                        adrAckReq = false;
 800b76c:	2500      	movs	r5, #0
 800b76e:	e7c7      	b.n	800b700 <LoRaMacAdrCalcNext+0x60>

0800b770 <LoRaMacClassBInit>:
    TimerInit( &Ctx.PingSlotTimer, LoRaMacClassBPingSlotTimerEvent );
    TimerInit( &Ctx.MulticastSlotTimer, LoRaMacClassBMulticastSlotTimerEvent );

    InitClassB( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b770:	4770      	bx	lr

0800b772 <LoRaMacClassBSetBeaconState>:
        {
            Ctx.BeaconState = beaconState;
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b772:	4770      	bx	lr

0800b774 <LoRaMacClassBSetPingSlotState>:

void LoRaMacClassBSetPingSlotState( PingSlotState_t pingSlotState )
 800b774:	4770      	bx	lr

0800b776 <LoRaMacClassBSetMulticastSlotState>:
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.PingSlotState = pingSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}

void LoRaMacClassBSetMulticastSlotState( PingSlotState_t multicastSlotState )
 800b776:	4770      	bx	lr

0800b778 <LoRaMacClassBIsAcquisitionInProgress>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b778:	2000      	movs	r0, #0
 800b77a:	4770      	bx	lr

0800b77c <LoRaMacClassBBeaconTimerEvent>:
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b77c:	4770      	bx	lr

0800b77e <LoRaMacClassBPingSlotTimerEvent>:
        TimerStart( &Ctx.BeaconTimer );
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBPingSlotTimerEvent( void* context )
 800b77e:	4770      	bx	lr

0800b780 <LoRaMacClassBMulticastSlotTimerEvent>:
        }
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBMulticastSlotTimerEvent( void* context )
 800b780:	4770      	bx	lr

0800b782 <LoRaMacClassBRxBeacon>:
    }
    return beaconProcessed;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b782:	2000      	movs	r0, #0
 800b784:	4770      	bx	lr

0800b786 <LoRaMacClassBIsBeaconExpected>:

bool LoRaMacClassBIsBeaconExpected( void )
 800b786:	2000      	movs	r0, #0
 800b788:	4770      	bx	lr

0800b78a <LoRaMacClassBIsPingExpected>:
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}

bool LoRaMacClassBIsPingExpected( void )
 800b78a:	2000      	movs	r0, #0
 800b78c:	4770      	bx	lr

0800b78e <LoRaMacClassBIsMulticastExpected>:
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}

bool LoRaMacClassBIsMulticastExpected( void )
 800b78e:	2000      	movs	r0, #0
 800b790:	4770      	bx	lr

0800b792 <LoRaMacClassBIsBeaconModeActive>:
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}

bool LoRaMacClassBIsBeaconModeActive( void )
 800b792:	2000      	movs	r0, #0
 800b794:	4770      	bx	lr

0800b796 <LoRaMacClassBSetPingSlotInfo>:
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}

void LoRaMacClassBSetPingSlotInfo( uint8_t periodicity )
 800b796:	4770      	bx	lr

0800b798 <LoRaMacClassBHaltBeaconing>:

        // Halt ping and multicast slot state machines
        LoRaMacClassBStopRxSlots( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b798:	4770      	bx	lr

0800b79a <LoRaMacClassBResumeBeaconing>:

void LoRaMacClassBResumeBeaconing( void )
 800b79a:	4770      	bx	lr

0800b79c <LoRaMacClassBSwitchClass>:
    }
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b79c:	2002      	movs	r0, #2
 800b79e:	4770      	bx	lr

0800b7a0 <LoRaMacClassBMibGetRequestConfirm>:
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b7a0:	2002      	movs	r0, #2
 800b7a2:	4770      	bx	lr

0800b7a4 <LoRaMacMibClassBSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibClassBSetRequestConfirm( MibRequestConfirm_t *mibSet )
 800b7a4:	2002      	movs	r0, #2
 800b7a6:	4770      	bx	lr

0800b7a8 <LoRaMacClassBPingSlotInfoAns>:
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#endif /* LORAMAC_CLASSB_ENABLED */
}

void LoRaMacClassBPingSlotInfoAns( void )
 800b7a8:	4770      	bx	lr

0800b7aa <LoRaMacClassBPingSlotChannelReq>:

    return status;
#else
    return 0;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b7aa:	2000      	movs	r0, #0
 800b7ac:	4770      	bx	lr

0800b7ae <LoRaMacClassBBeaconTimingAns>:

        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingDelay = Ctx.BeaconCtx.BeaconTimingDelay;
        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingChannel = Ctx.BeaconCtx.BeaconTimingChannel;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b7ae:	4770      	bx	lr

0800b7b0 <LoRaMacClassBDeviceTimeAns>:

void LoRaMacClassBDeviceTimeAns( void )
 800b7b0:	4770      	bx	lr

0800b7b2 <LoRaMacClassBBeaconFreqReq>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b7b2:	2000      	movs	r0, #0
 800b7b4:	4770      	bx	lr

0800b7b6 <LoRaMacClassBIsUplinkCollision>:
    }
    return 0;
#else
    return 0;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b7b6:	2000      	movs	r0, #0
 800b7b8:	4770      	bx	lr

0800b7ba <LoRaMacClassBStopRxSlots>:

void LoRaMacClassBStopRxSlots( void )
 800b7ba:	4770      	bx	lr

0800b7bc <LoRaMacClassBProcess>:
        multicastChannel->PingPeriod = CalcPingPeriod( multicastChannel->PingNb );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}

void LoRaMacClassBProcess( void )
 800b7bc:	4770      	bx	lr
	...

0800b7c0 <LoRaMacCommandsInit>:
            return false;
    }
}

LoRaMacCommandStatus_t LoRaMacCommandsInit( void )
{
 800b7c0:	b510      	push	{r4, lr}
    // Initialize with default
    memset1( ( uint8_t* )&CommandsCtx, 0, sizeof( CommandsCtx ) );
 800b7c2:	4c05      	ldr	r4, [pc, #20]	@ (800b7d8 <LoRaMacCommandsInit+0x18>)
 800b7c4:	22fc      	movs	r2, #252	@ 0xfc
 800b7c6:	0020      	movs	r0, r4
 800b7c8:	2100      	movs	r1, #0
 800b7ca:	f001 fff0 	bl	800d7ae <memset1>
    list->First = NULL;
 800b7ce:	2000      	movs	r0, #0
 800b7d0:	6020      	str	r0, [r4, #0]
    list->Last = NULL;
 800b7d2:	6060      	str	r0, [r4, #4]

    LinkedListInit( &CommandsCtx.MacCommandList );

    return LORAMAC_COMMANDS_SUCCESS;
}
 800b7d4:	bd10      	pop	{r4, pc}
 800b7d6:	46c0      	nop			@ (mov r8, r8)
 800b7d8:	2000123c 	.word	0x2000123c

0800b7dc <LoRaMacCommandsAddCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsAddCmd( uint8_t cid, uint8_t* payload, size_t payloadSize )
{
 800b7dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b7de:	0005      	movs	r5, r0
    if( payload == NULL )
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 800b7e0:	2701      	movs	r7, #1
{
 800b7e2:	9201      	str	r2, [sp, #4]
    if( payload == NULL )
 800b7e4:	2900      	cmp	r1, #0
 800b7e6:	d02f      	beq.n	800b848 <LoRaMacCommandsAddCmd+0x6c>
 800b7e8:	230f      	movs	r3, #15
 800b7ea:	4c1c      	ldr	r4, [pc, #112]	@ (800b85c <LoRaMacCommandsAddCmd+0x80>)
    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 800b7ec:	0020      	movs	r0, r4
    if( payload == NULL )
 800b7ee:	0022      	movs	r2, r4
 800b7f0:	3010      	adds	r0, #16
        if( mem[size] != 0x00 )
 800b7f2:	7817      	ldrb	r7, [r2, #0]
 800b7f4:	2f00      	cmp	r7, #0
 800b7f6:	d129      	bne.n	800b84c <LoRaMacCommandsAddCmd+0x70>
    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 800b7f8:	3201      	adds	r2, #1
 800b7fa:	4282      	cmp	r2, r0
 800b7fc:	d1f9      	bne.n	800b7f2 <LoRaMacCommandsAddCmd+0x16>
    if( list->First == NULL )
 800b7fe:	4e18      	ldr	r6, [pc, #96]	@ (800b860 <LoRaMacCommandsAddCmd+0x84>)
 800b800:	6833      	ldr	r3, [r6, #0]
 800b802:	2b00      	cmp	r3, #0
 800b804:	d100      	bne.n	800b808 <LoRaMacCommandsAddCmd+0x2c>
        list->First = element;
 800b806:	6034      	str	r4, [r6, #0]
    if( list->Last )
 800b808:	6873      	ldr	r3, [r6, #4]
 800b80a:	2b00      	cmp	r3, #0
 800b80c:	d000      	beq.n	800b810 <LoRaMacCommandsAddCmd+0x34>
        list->Last->Next = element;
 800b80e:	601c      	str	r4, [r3, #0]
    element->Next = NULL;
 800b810:	2300      	movs	r3, #0
 800b812:	6023      	str	r3, [r4, #0]
    }

    // Set Values
    newCmd->CID = cid;
    newCmd->PayloadSize = payloadSize;
    memcpy1( ( uint8_t* )newCmd->Payload, payload, payloadSize );
 800b814:	466b      	mov	r3, sp
    newCmd->PayloadSize = payloadSize;
 800b816:	9801      	ldr	r0, [sp, #4]
    memcpy1( ( uint8_t* )newCmd->Payload, payload, payloadSize );
 800b818:	889a      	ldrh	r2, [r3, #4]
    list->Last = element;
 800b81a:	6074      	str	r4, [r6, #4]
    newCmd->PayloadSize = payloadSize;
 800b81c:	60a0      	str	r0, [r4, #8]
    newCmd->CID = cid;
 800b81e:	7125      	strb	r5, [r4, #4]
    memcpy1( ( uint8_t* )newCmd->Payload, payload, payloadSize );
 800b820:	1d60      	adds	r0, r4, #5
 800b822:	f001 ffaf 	bl	800d784 <memcpy1>
            return true;
 800b826:	2301      	movs	r3, #1
    switch( cid )
 800b828:	2d05      	cmp	r5, #5
 800b82a:	d006      	beq.n	800b83a <LoRaMacCommandsAddCmd+0x5e>
 800b82c:	2100      	movs	r1, #0
 800b82e:	3d08      	subs	r5, #8
 800b830:	18db      	adds	r3, r3, r3
 800b832:	b2ed      	uxtb	r5, r5
 800b834:	42ab      	cmp	r3, r5
 800b836:	4149      	adcs	r1, r1
 800b838:	b2cb      	uxtb	r3, r1
    newCmd->IsSticky = IsSticky( cid );

    CommandsCtx.SerializedCmdsSize += ( CID_FIELD_SIZE + payloadSize );
 800b83a:	36f8      	adds	r6, #248	@ 0xf8
    newCmd->IsSticky = IsSticky( cid );
 800b83c:	7323      	strb	r3, [r4, #12]
    CommandsCtx.SerializedCmdsSize += ( CID_FIELD_SIZE + payloadSize );
 800b83e:	6833      	ldr	r3, [r6, #0]
 800b840:	9a01      	ldr	r2, [sp, #4]
 800b842:	3301      	adds	r3, #1
 800b844:	189b      	adds	r3, r3, r2
 800b846:	6033      	str	r3, [r6, #0]

    return LORAMAC_COMMANDS_SUCCESS;
}
 800b848:	0038      	movs	r0, r7
 800b84a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        if( itr == NUM_OF_MAC_COMMANDS )
 800b84c:	3b01      	subs	r3, #1
 800b84e:	b2db      	uxtb	r3, r3
 800b850:	0004      	movs	r4, r0
 800b852:	2b00      	cmp	r3, #0
 800b854:	d1ca      	bne.n	800b7ec <LoRaMacCommandsAddCmd+0x10>
        return LORAMAC_COMMANDS_ERROR_MEMORY;
 800b856:	2702      	movs	r7, #2
 800b858:	e7f6      	b.n	800b848 <LoRaMacCommandsAddCmd+0x6c>
 800b85a:	46c0      	nop			@ (mov r8, r8)
 800b85c:	20001244 	.word	0x20001244
 800b860:	2000123c 	.word	0x2000123c

0800b864 <LoRaMacCommandsRemoveCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveCmd( MacCommand_t* macCmd )
{
 800b864:	b510      	push	{r4, lr}
    if( macCmd == NULL )
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 800b866:	2401      	movs	r4, #1
    if( macCmd == NULL )
 800b868:	2800      	cmp	r0, #0
 800b86a:	d021      	beq.n	800b8b0 <LoRaMacCommandsRemoveCmd+0x4c>
    curElement = list->First;
 800b86c:	4b11      	ldr	r3, [pc, #68]	@ (800b8b4 <LoRaMacCommandsRemoveCmd+0x50>)
 800b86e:	681a      	ldr	r2, [r3, #0]
    if( element != curElement )
 800b870:	4290      	cmp	r0, r2
 800b872:	d104      	bne.n	800b87e <LoRaMacCommandsRemoveCmd+0x1a>
        list->First = element->Next;
 800b874:	6802      	ldr	r2, [r0, #0]
 800b876:	601a      	str	r2, [r3, #0]
 800b878:	2200      	movs	r2, #0
 800b87a:	e005      	b.n	800b888 <LoRaMacCommandsRemoveCmd+0x24>
 800b87c:	000a      	movs	r2, r1
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 800b87e:	2a00      	cmp	r2, #0
 800b880:	d0fa      	beq.n	800b878 <LoRaMacCommandsRemoveCmd+0x14>
 800b882:	6811      	ldr	r1, [r2, #0]
 800b884:	4288      	cmp	r0, r1
 800b886:	d1f9      	bne.n	800b87c <LoRaMacCommandsRemoveCmd+0x18>
    if( list->Last == element )
 800b888:	6859      	ldr	r1, [r3, #4]
 800b88a:	4288      	cmp	r0, r1
 800b88c:	d100      	bne.n	800b890 <LoRaMacCommandsRemoveCmd+0x2c>
        list->Last = PrevElement;
 800b88e:	605a      	str	r2, [r3, #4]
    if( PrevElement != NULL )
 800b890:	2a00      	cmp	r2, #0
 800b892:	d001      	beq.n	800b898 <LoRaMacCommandsRemoveCmd+0x34>
        PrevElement->Next = element->Next;
 800b894:	6801      	ldr	r1, [r0, #0]
 800b896:	6011      	str	r1, [r2, #0]
    element->Next = NULL;
 800b898:	2400      	movs	r4, #0
    if( LinkedListRemove( &CommandsCtx.MacCommandList, macCmd ) == false )
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
    }

    CommandsCtx.SerializedCmdsSize -= ( CID_FIELD_SIZE + macCmd->PayloadSize );
 800b89a:	33f8      	adds	r3, #248	@ 0xf8
 800b89c:	681a      	ldr	r2, [r3, #0]
 800b89e:	6881      	ldr	r1, [r0, #8]
 800b8a0:	3a01      	subs	r2, #1
 800b8a2:	1a52      	subs	r2, r2, r1
    element->Next = NULL;
 800b8a4:	6004      	str	r4, [r0, #0]
    memset1( ( uint8_t* )slot, 0x00, sizeof( MacCommand_t ) );
 800b8a6:	0021      	movs	r1, r4
    CommandsCtx.SerializedCmdsSize -= ( CID_FIELD_SIZE + macCmd->PayloadSize );
 800b8a8:	601a      	str	r2, [r3, #0]
    memset1( ( uint8_t* )slot, 0x00, sizeof( MacCommand_t ) );
 800b8aa:	2210      	movs	r2, #16
 800b8ac:	f001 ff7f 	bl	800d7ae <memset1>
    {
        return LORAMAC_COMMANDS_ERROR;
    }

    return LORAMAC_COMMANDS_SUCCESS;
}
 800b8b0:	0020      	movs	r0, r4
 800b8b2:	bd10      	pop	{r4, pc}
 800b8b4:	2000123c 	.word	0x2000123c

0800b8b8 <LoRaMacCommandsRemoveNoneStickyCmds>:
    }
    return LORAMAC_COMMANDS_SUCCESS;
}

LoRaMacCommandStatus_t LoRaMacCommandsRemoveNoneStickyCmds( void )
{
 800b8b8:	b510      	push	{r4, lr}
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 800b8ba:	4b06      	ldr	r3, [pc, #24]	@ (800b8d4 <LoRaMacCommandsRemoveNoneStickyCmds+0x1c>)
 800b8bc:	6818      	ldr	r0, [r3, #0]

    // Loop through all elements
    while( curElement != NULL )
 800b8be:	2800      	cmp	r0, #0
 800b8c0:	d100      	bne.n	800b8c4 <LoRaMacCommandsRemoveNoneStickyCmds+0xc>
            curElement = curElement->Next;
        }
    }

    return LORAMAC_COMMANDS_SUCCESS;
}
 800b8c2:	bd10      	pop	{r4, pc}
        if( curElement->IsSticky == false )
 800b8c4:	7b03      	ldrb	r3, [r0, #12]
            nexElement = curElement->Next;
 800b8c6:	6804      	ldr	r4, [r0, #0]
        if( curElement->IsSticky == false )
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	d101      	bne.n	800b8d0 <LoRaMacCommandsRemoveNoneStickyCmds+0x18>
            LoRaMacCommandsRemoveCmd( curElement );
 800b8cc:	f7ff ffca 	bl	800b864 <LoRaMacCommandsRemoveCmd>
{
 800b8d0:	0020      	movs	r0, r4
 800b8d2:	e7f4      	b.n	800b8be <LoRaMacCommandsRemoveNoneStickyCmds+0x6>
 800b8d4:	2000123c 	.word	0x2000123c

0800b8d8 <LoRaMacCommandsRemoveStickyAnsCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveStickyAnsCmds( void )
{
 800b8d8:	b510      	push	{r4, lr}
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 800b8da:	4b08      	ldr	r3, [pc, #32]	@ (800b8fc <LoRaMacCommandsRemoveStickyAnsCmds+0x24>)
 800b8dc:	6818      	ldr	r0, [r3, #0]

    // Loop through all elements
    while( curElement != NULL )
 800b8de:	2800      	cmp	r0, #0
 800b8e0:	d100      	bne.n	800b8e4 <LoRaMacCommandsRemoveStickyAnsCmds+0xc>
        }
        curElement = nexElement;
    }

    return LORAMAC_COMMANDS_SUCCESS;
}
 800b8e2:	bd10      	pop	{r4, pc}
        if( IsSticky( curElement->CID ) == true )
 800b8e4:	7903      	ldrb	r3, [r0, #4]
        nexElement = curElement->Next;
 800b8e6:	6804      	ldr	r4, [r0, #0]
    switch( cid )
 800b8e8:	2b05      	cmp	r3, #5
 800b8ea:	d002      	beq.n	800b8f2 <LoRaMacCommandsRemoveStickyAnsCmds+0x1a>
 800b8ec:	3b08      	subs	r3, #8
 800b8ee:	2b02      	cmp	r3, #2
 800b8f0:	d801      	bhi.n	800b8f6 <LoRaMacCommandsRemoveStickyAnsCmds+0x1e>
            LoRaMacCommandsRemoveCmd( curElement );
 800b8f2:	f7ff ffb7 	bl	800b864 <LoRaMacCommandsRemoveCmd>
{
 800b8f6:	0020      	movs	r0, r4
 800b8f8:	e7f1      	b.n	800b8de <LoRaMacCommandsRemoveStickyAnsCmds+0x6>
 800b8fa:	46c0      	nop			@ (mov r8, r8)
 800b8fc:	2000123c 	.word	0x2000123c

0800b900 <LoRaMacCommandsGetSizeSerializedCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsGetSizeSerializedCmds( size_t* size )
{
 800b900:	0003      	movs	r3, r0
    if( size == NULL )
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 800b902:	2001      	movs	r0, #1
    if( size == NULL )
 800b904:	2b00      	cmp	r3, #0
 800b906:	d003      	beq.n	800b910 <LoRaMacCommandsGetSizeSerializedCmds+0x10>
    }
    *size = CommandsCtx.SerializedCmdsSize;
    return LORAMAC_COMMANDS_SUCCESS;
 800b908:	2000      	movs	r0, #0
    *size = CommandsCtx.SerializedCmdsSize;
 800b90a:	4a02      	ldr	r2, [pc, #8]	@ (800b914 <LoRaMacCommandsGetSizeSerializedCmds+0x14>)
 800b90c:	6812      	ldr	r2, [r2, #0]
 800b90e:	601a      	str	r2, [r3, #0]
}
 800b910:	4770      	bx	lr
 800b912:	46c0      	nop			@ (mov r8, r8)
 800b914:	20001334 	.word	0x20001334

0800b918 <LoRaMacCommandsSerializeCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsSerializeCmds( size_t availableSize, size_t* effectiveSize, uint8_t* buffer )
{
 800b918:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b91a:	000f      	movs	r7, r1
 800b91c:	9001      	str	r0, [sp, #4]
 800b91e:	0016      	movs	r6, r2
    MacCommand_t* nextElement;
    uint8_t itr = 0;

    if( ( buffer == NULL ) || ( effectiveSize == NULL ) )
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 800b920:	2001      	movs	r0, #1
    if( ( buffer == NULL ) || ( effectiveSize == NULL ) )
 800b922:	2a00      	cmp	r2, #0
 800b924:	d00a      	beq.n	800b93c <LoRaMacCommandsSerializeCmds+0x24>
 800b926:	2900      	cmp	r1, #0
 800b928:	d008      	beq.n	800b93c <LoRaMacCommandsSerializeCmds+0x24>
    MacCommand_t* curElement = CommandsCtx.MacCommandList.First;
 800b92a:	4b13      	ldr	r3, [pc, #76]	@ (800b978 <LoRaMacCommandsSerializeCmds+0x60>)
 800b92c:	681c      	ldr	r4, [r3, #0]
    uint8_t itr = 0;
 800b92e:	2300      	movs	r3, #0
    }

    // Loop through all elements which fits into the buffer
    while( curElement != NULL )
 800b930:	2c00      	cmp	r4, #0
 800b932:	d104      	bne.n	800b93e <LoRaMacCommandsSerializeCmds+0x26>
        LoRaMacCommandsRemoveCmd( curElement );
        curElement = nextElement;
    }

    // Fetch the effective size of the mac commands
    LoRaMacCommandsGetSizeSerializedCmds( effectiveSize );
 800b934:	0038      	movs	r0, r7
 800b936:	f7ff ffe3 	bl	800b900 <LoRaMacCommandsGetSizeSerializedCmds>

    return LORAMAC_COMMANDS_SUCCESS;
 800b93a:	2000      	movs	r0, #0
}
 800b93c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        if( ( availableSize - itr ) >= ( CID_FIELD_SIZE + curElement->PayloadSize ) )
 800b93e:	9a01      	ldr	r2, [sp, #4]
 800b940:	1ad1      	subs	r1, r2, r3
 800b942:	68a2      	ldr	r2, [r4, #8]
 800b944:	3201      	adds	r2, #1
 800b946:	4291      	cmp	r1, r2
 800b948:	d313      	bcc.n	800b972 <LoRaMacCommandsSerializeCmds+0x5a>
            buffer[itr++] = curElement->CID;
 800b94a:	7922      	ldrb	r2, [r4, #4]
 800b94c:	1c5d      	adds	r5, r3, #1
 800b94e:	54f2      	strb	r2, [r6, r3]
            memcpy1( &buffer[itr], curElement->Payload, curElement->PayloadSize );
 800b950:	68a2      	ldr	r2, [r4, #8]
            buffer[itr++] = curElement->CID;
 800b952:	b2ed      	uxtb	r5, r5
            memcpy1( &buffer[itr], curElement->Payload, curElement->PayloadSize );
 800b954:	1d61      	adds	r1, r4, #5
 800b956:	b292      	uxth	r2, r2
 800b958:	1970      	adds	r0, r6, r5
 800b95a:	f001 ff13 	bl	800d784 <memcpy1>
            itr += curElement->PayloadSize;
 800b95e:	68a3      	ldr	r3, [r4, #8]
        curElement = curElement->Next;
 800b960:	6824      	ldr	r4, [r4, #0]
            itr += curElement->PayloadSize;
 800b962:	18eb      	adds	r3, r5, r3
 800b964:	b2db      	uxtb	r3, r3
        curElement = curElement->Next;
 800b966:	e7e3      	b.n	800b930 <LoRaMacCommandsSerializeCmds+0x18>
        nextElement = curElement->Next;
 800b968:	6825      	ldr	r5, [r4, #0]
        LoRaMacCommandsRemoveCmd( curElement );
 800b96a:	0020      	movs	r0, r4
 800b96c:	f7ff ff7a 	bl	800b864 <LoRaMacCommandsRemoveCmd>
        curElement = nextElement;
 800b970:	002c      	movs	r4, r5
    while( curElement != NULL )
 800b972:	2c00      	cmp	r4, #0
 800b974:	d1f8      	bne.n	800b968 <LoRaMacCommandsSerializeCmds+0x50>
 800b976:	e7dd      	b.n	800b934 <LoRaMacCommandsSerializeCmds+0x1c>
 800b978:	2000123c 	.word	0x2000123c

0800b97c <LoRaMacCommandsStickyCmdsPending>:

LoRaMacCommandStatus_t LoRaMacCommandsStickyCmdsPending( bool* cmdsPending )
{
 800b97c:	0003      	movs	r3, r0
    if( cmdsPending == NULL )
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 800b97e:	2001      	movs	r0, #1
    if( cmdsPending == NULL )
 800b980:	2b00      	cmp	r3, #0
 800b982:	d00b      	beq.n	800b99c <LoRaMacCommandsStickyCmdsPending+0x20>
    }
    MacCommand_t* curElement;
    curElement = CommandsCtx.MacCommandList.First;

    *cmdsPending = false;
 800b984:	2100      	movs	r1, #0
    curElement = CommandsCtx.MacCommandList.First;
 800b986:	4a07      	ldr	r2, [pc, #28]	@ (800b9a4 <LoRaMacCommandsStickyCmdsPending+0x28>)
 800b988:	6812      	ldr	r2, [r2, #0]
    *cmdsPending = false;
 800b98a:	7019      	strb	r1, [r3, #0]

    // Loop through all elements
    while( curElement != NULL )
 800b98c:	2a00      	cmp	r2, #0
 800b98e:	d004      	beq.n	800b99a <LoRaMacCommandsStickyCmdsPending+0x1e>
    {
        if( curElement->IsSticky == true )
 800b990:	7b11      	ldrb	r1, [r2, #12]
 800b992:	2900      	cmp	r1, #0
 800b994:	d003      	beq.n	800b99e <LoRaMacCommandsStickyCmdsPending+0x22>
        {
            // Found one sticky MAC command
            *cmdsPending = true;
 800b996:	2201      	movs	r2, #1
 800b998:	701a      	strb	r2, [r3, #0]
            return LORAMAC_COMMANDS_SUCCESS;
 800b99a:	2000      	movs	r0, #0
        }
        curElement = curElement->Next;
    }

    return LORAMAC_COMMANDS_SUCCESS;
}
 800b99c:	4770      	bx	lr
        curElement = curElement->Next;
 800b99e:	6812      	ldr	r2, [r2, #0]
 800b9a0:	e7f4      	b.n	800b98c <LoRaMacCommandsStickyCmdsPending+0x10>
 800b9a2:	46c0      	nop			@ (mov r8, r8)
 800b9a4:	2000123c 	.word	0x2000123c

0800b9a8 <LoRaMacCommandsGetCmdSize>:
uint8_t LoRaMacCommandsGetCmdSize( uint8_t cid )
{
    uint8_t cidSize = 0;

    // Decode Frame MAC commands
    switch( cid )
 800b9a8:	3802      	subs	r0, #2
 800b9aa:	b2c3      	uxtb	r3, r0
{
 800b9ac:	2000      	movs	r0, #0
 800b9ae:	2b11      	cmp	r3, #17
 800b9b0:	d801      	bhi.n	800b9b6 <LoRaMacCommandsGetCmdSize+0xe>
 800b9b2:	4a01      	ldr	r2, [pc, #4]	@ (800b9b8 <LoRaMacCommandsGetCmdSize+0x10>)
 800b9b4:	5cd0      	ldrb	r0, [r2, r3]
            // Unknown command. ABORT MAC commands processing
            break;
        }
    }
    return cidSize;
}
 800b9b6:	4770      	bx	lr
 800b9b8:	08010765 	.word	0x08010765

0800b9bc <GetElement.constprop.0>:
        return true;
    }
    return false;
}

static MlmeConfirmQueue_t* GetElement( Mlme_t request, MlmeConfirmQueue_t* bufferStart, MlmeConfirmQueue_t* bufferEnd )
 800b9bc:	b570      	push	{r4, r5, r6, lr}
{
    MlmeConfirmQueue_t* element = bufferStart;

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 800b9be:	4b0d      	ldr	r3, [pc, #52]	@ (800b9f4 <GetElement.constprop.0+0x38>)
static MlmeConfirmQueue_t* GetElement( Mlme_t request, MlmeConfirmQueue_t* bufferStart, MlmeConfirmQueue_t* bufferEnd )
 800b9c0:	0004      	movs	r4, r0
    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 800b9c2:	7fda      	ldrb	r2, [r3, #31]
static MlmeConfirmQueue_t* GetElement( Mlme_t request, MlmeConfirmQueue_t* bufferStart, MlmeConfirmQueue_t* bufferEnd )
 800b9c4:	0008      	movs	r0, r1
    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 800b9c6:	490c      	ldr	r1, [pc, #48]	@ (800b9f8 <GetElement.constprop.0+0x3c>)
    if( count == 0 )
 800b9c8:	2a00      	cmp	r2, #0
 800b9ca:	d011      	beq.n	800b9f0 <GetElement.constprop.0+0x34>
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 800b9cc:	000d      	movs	r5, r1
    {
        return NULL;
    }

    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 800b9ce:	2300      	movs	r3, #0
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 800b9d0:	351c      	adds	r5, #28
    {
        if( element->Request == request )
 800b9d2:	7806      	ldrb	r6, [r0, #0]
 800b9d4:	42a6      	cmp	r6, r4
 800b9d6:	d007      	beq.n	800b9e8 <GetElement.constprop.0+0x2c>
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 800b9d8:	42a8      	cmp	r0, r5
 800b9da:	d006      	beq.n	800b9ea <GetElement.constprop.0+0x2e>
        bufferPointer++;
 800b9dc:	3004      	adds	r0, #4
    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 800b9de:	3301      	adds	r3, #1
 800b9e0:	b2db      	uxtb	r3, r3
 800b9e2:	429a      	cmp	r2, r3
 800b9e4:	d1f5      	bne.n	800b9d2 <GetElement.constprop.0+0x16>
        return NULL;
 800b9e6:	2000      	movs	r0, #0
        }
        element = IncreaseBufferPointer( element );
    }

    return NULL;
}
 800b9e8:	bd70      	pop	{r4, r5, r6, pc}
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 800b9ea:	0008      	movs	r0, r1
 800b9ec:	300c      	adds	r0, #12
 800b9ee:	e7f6      	b.n	800b9de <GetElement.constprop.0+0x22>
        return NULL;
 800b9f0:	0010      	movs	r0, r2
 800b9f2:	e7f9      	b.n	800b9e8 <GetElement.constprop.0+0x2c>
 800b9f4:	20001339 	.word	0x20001339
 800b9f8:	20001338 	.word	0x20001338

0800b9fc <LoRaMacConfirmQueueInit>:

void LoRaMacConfirmQueueInit( LoRaMacPrimitives_t* primitives )
{
 800b9fc:	b510      	push	{r4, lr}
    ConfirmQueueCtx.Primitives = primitives;
 800b9fe:	4c08      	ldr	r4, [pc, #32]	@ (800ba20 <LoRaMacConfirmQueueInit+0x24>)

    // Init counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt = 0;
 800ba00:	2200      	movs	r2, #0
    ConfirmQueueCtx.Primitives = primitives;
 800ba02:	6020      	str	r0, [r4, #0]

    // Init buffer
    ConfirmQueueCtx.BufferStart = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 800ba04:	0020      	movs	r0, r4
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt = 0;
 800ba06:	1c63      	adds	r3, r4, #1
    ConfirmQueueCtx.BufferStart = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 800ba08:	300c      	adds	r0, #12
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt = 0;
 800ba0a:	77da      	strb	r2, [r3, #31]
    ConfirmQueueCtx.BufferEnd = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;

    memset1( ( uint8_t* )ConfirmQueueCtx.Nvm.MlmeConfirmQueue, 0xFF, sizeof( ConfirmQueueCtx.Nvm.MlmeConfirmQueue ) );
 800ba0c:	21ff      	movs	r1, #255	@ 0xff
 800ba0e:	3214      	adds	r2, #20
    ConfirmQueueCtx.BufferStart = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 800ba10:	6060      	str	r0, [r4, #4]
    ConfirmQueueCtx.BufferEnd = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 800ba12:	60a0      	str	r0, [r4, #8]
    memset1( ( uint8_t* )ConfirmQueueCtx.Nvm.MlmeConfirmQueue, 0xFF, sizeof( ConfirmQueueCtx.Nvm.MlmeConfirmQueue ) );
 800ba14:	f001 fecb 	bl	800d7ae <memset1>

    // Common status
    ConfirmQueueCtx.Nvm.CommonStatus = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800ba18:	2301      	movs	r3, #1
 800ba1a:	3402      	adds	r4, #2
 800ba1c:	77e3      	strb	r3, [r4, #31]
}
 800ba1e:	bd10      	pop	{r4, pc}
 800ba20:	20001338 	.word	0x20001338

0800ba24 <LoRaMacConfirmQueueAdd>:

bool LoRaMacConfirmQueueAdd( MlmeConfirmQueue_t* mlmeConfirm )
{
 800ba24:	b530      	push	{r4, r5, lr}
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 800ba26:	4d0e      	ldr	r5, [pc, #56]	@ (800ba60 <LoRaMacConfirmQueueAdd+0x3c>)
{
 800ba28:	0002      	movs	r2, r0
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 800ba2a:	7fec      	ldrb	r4, [r5, #31]
    {
        // Protect the buffer against overwrites
        return false;
 800ba2c:	2000      	movs	r0, #0
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 800ba2e:	490d      	ldr	r1, [pc, #52]	@ (800ba64 <LoRaMacConfirmQueueAdd+0x40>)
    if( count >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
 800ba30:	2c04      	cmp	r4, #4
 800ba32:	d813      	bhi.n	800ba5c <LoRaMacConfirmQueueAdd+0x38>
    }

    // Add the element to the ring buffer
    ConfirmQueueCtx.BufferEnd->Request = mlmeConfirm->Request;
 800ba34:	7810      	ldrb	r0, [r2, #0]
 800ba36:	688b      	ldr	r3, [r1, #8]
    ConfirmQueueCtx.BufferEnd->Status = mlmeConfirm->Status;
    ConfirmQueueCtx.BufferEnd->RestrictCommonReadyToHandle = mlmeConfirm->RestrictCommonReadyToHandle;
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = false;
    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt++;
 800ba38:	3401      	adds	r4, #1
    ConfirmQueueCtx.BufferEnd->Request = mlmeConfirm->Request;
 800ba3a:	7018      	strb	r0, [r3, #0]
    ConfirmQueueCtx.BufferEnd->Status = mlmeConfirm->Status;
 800ba3c:	7850      	ldrb	r0, [r2, #1]
 800ba3e:	7058      	strb	r0, [r3, #1]
    ConfirmQueueCtx.BufferEnd->RestrictCommonReadyToHandle = mlmeConfirm->RestrictCommonReadyToHandle;
 800ba40:	78d2      	ldrb	r2, [r2, #3]
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 800ba42:	0008      	movs	r0, r1
    ConfirmQueueCtx.BufferEnd->RestrictCommonReadyToHandle = mlmeConfirm->RestrictCommonReadyToHandle;
 800ba44:	70da      	strb	r2, [r3, #3]
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = false;
 800ba46:	2200      	movs	r2, #0
 800ba48:	709a      	strb	r2, [r3, #2]
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 800ba4a:	000a      	movs	r2, r1
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 800ba4c:	301c      	adds	r0, #28
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt++;
 800ba4e:	77ec      	strb	r4, [r5, #31]
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 800ba50:	320c      	adds	r2, #12
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 800ba52:	4283      	cmp	r3, r0
 800ba54:	d000      	beq.n	800ba58 <LoRaMacConfirmQueueAdd+0x34>
        bufferPointer++;
 800ba56:	1d1a      	adds	r2, r3, #4
    // Update end pointer
    ConfirmQueueCtx.BufferEnd = IncreaseBufferPointer( ConfirmQueueCtx.BufferEnd );

    return true;
 800ba58:	2001      	movs	r0, #1
    ConfirmQueueCtx.BufferEnd = IncreaseBufferPointer( ConfirmQueueCtx.BufferEnd );
 800ba5a:	608a      	str	r2, [r1, #8]
}
 800ba5c:	bd30      	pop	{r4, r5, pc}
 800ba5e:	46c0      	nop			@ (mov r8, r8)
 800ba60:	20001339 	.word	0x20001339
 800ba64:	20001338 	.word	0x20001338

0800ba68 <LoRaMacConfirmQueueRemoveFirst>:
    return true;
}

bool LoRaMacConfirmQueueRemoveFirst( void )
{
    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 800ba68:	4908      	ldr	r1, [pc, #32]	@ (800ba8c <LoRaMacConfirmQueueRemoveFirst+0x24>)
 800ba6a:	4a09      	ldr	r2, [pc, #36]	@ (800ba90 <LoRaMacConfirmQueueRemoveFirst+0x28>)
 800ba6c:	7fcb      	ldrb	r3, [r1, #31]
    {
        return false;
 800ba6e:	1e18      	subs	r0, r3, #0
    if( count == 0 )
 800ba70:	d00b      	beq.n	800ba8a <LoRaMacConfirmQueueRemoveFirst+0x22>
    }

    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt--;
 800ba72:	3b01      	subs	r3, #1
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 800ba74:	0010      	movs	r0, r2
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt--;
 800ba76:	77cb      	strb	r3, [r1, #31]
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 800ba78:	0013      	movs	r3, r2
    // Update start pointer
    ConfirmQueueCtx.BufferStart = IncreaseBufferPointer( ConfirmQueueCtx.BufferStart );
 800ba7a:	6851      	ldr	r1, [r2, #4]
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 800ba7c:	301c      	adds	r0, #28
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 800ba7e:	330c      	adds	r3, #12
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 800ba80:	4281      	cmp	r1, r0
 800ba82:	d000      	beq.n	800ba86 <LoRaMacConfirmQueueRemoveFirst+0x1e>
        bufferPointer++;
 800ba84:	1d0b      	adds	r3, r1, #4

    return true;
 800ba86:	2001      	movs	r0, #1
    ConfirmQueueCtx.BufferStart = IncreaseBufferPointer( ConfirmQueueCtx.BufferStart );
 800ba88:	6053      	str	r3, [r2, #4]
}
 800ba8a:	4770      	bx	lr
 800ba8c:	20001339 	.word	0x20001339
 800ba90:	20001338 	.word	0x20001338

0800ba94 <LoRaMacConfirmQueueSetStatus>:

void LoRaMacConfirmQueueSetStatus( LoRaMacEventInfoStatus_t status, Mlme_t request )
{
 800ba94:	b510      	push	{r4, lr}
    MlmeConfirmQueue_t* element = NULL;

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 800ba96:	4a08      	ldr	r2, [pc, #32]	@ (800bab8 <LoRaMacConfirmQueueSetStatus+0x24>)
{
 800ba98:	0004      	movs	r4, r0
    if( count == 0 )
 800ba9a:	7fd2      	ldrb	r2, [r2, #31]
{
 800ba9c:	0008      	movs	r0, r1
    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 800ba9e:	4b07      	ldr	r3, [pc, #28]	@ (800babc <LoRaMacConfirmQueueSetStatus+0x28>)
    if( count == 0 )
 800baa0:	2a00      	cmp	r2, #0
 800baa2:	d007      	beq.n	800bab4 <LoRaMacConfirmQueueSetStatus+0x20>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 800baa4:	6859      	ldr	r1, [r3, #4]
 800baa6:	f7ff ff89 	bl	800b9bc <GetElement.constprop.0>
        if( element != NULL )
 800baaa:	2800      	cmp	r0, #0
 800baac:	d002      	beq.n	800bab4 <LoRaMacConfirmQueueSetStatus+0x20>
        {
            element->Status = status;
            element->ReadyToHandle = true;
 800baae:	2301      	movs	r3, #1
            element->Status = status;
 800bab0:	7044      	strb	r4, [r0, #1]
            element->ReadyToHandle = true;
 800bab2:	7083      	strb	r3, [r0, #2]
        }
    }
}
 800bab4:	bd10      	pop	{r4, pc}
 800bab6:	46c0      	nop			@ (mov r8, r8)
 800bab8:	20001339 	.word	0x20001339
 800babc:	20001338 	.word	0x20001338

0800bac0 <LoRaMacConfirmQueueGetStatus>:

LoRaMacEventInfoStatus_t LoRaMacConfirmQueueGetStatus( Mlme_t request )
{
 800bac0:	b510      	push	{r4, lr}
    MlmeConfirmQueue_t* element = NULL;

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 800bac2:	4a07      	ldr	r2, [pc, #28]	@ (800bae0 <LoRaMacConfirmQueueGetStatus+0x20>)
 800bac4:	4b07      	ldr	r3, [pc, #28]	@ (800bae4 <LoRaMacConfirmQueueGetStatus+0x24>)
    if( count == 0 )
 800bac6:	7fd1      	ldrb	r1, [r2, #31]
        if( element != NULL )
        {
            return element->Status;
        }
    }
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 800bac8:	2201      	movs	r2, #1
    if( count == 0 )
 800baca:	2900      	cmp	r1, #0
 800bacc:	d006      	beq.n	800badc <LoRaMacConfirmQueueGetStatus+0x1c>
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 800bace:	6859      	ldr	r1, [r3, #4]
 800bad0:	f7ff ff74 	bl	800b9bc <GetElement.constprop.0>
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 800bad4:	2201      	movs	r2, #1
        if( element != NULL )
 800bad6:	2800      	cmp	r0, #0
 800bad8:	d000      	beq.n	800badc <LoRaMacConfirmQueueGetStatus+0x1c>
            return element->Status;
 800bada:	7842      	ldrb	r2, [r0, #1]
}
 800badc:	0010      	movs	r0, r2
 800bade:	bd10      	pop	{r4, pc}
 800bae0:	20001339 	.word	0x20001339
 800bae4:	20001338 	.word	0x20001338

0800bae8 <LoRaMacConfirmQueueSetStatusCmn>:

void LoRaMacConfirmQueueSetStatusCmn( LoRaMacEventInfoStatus_t status )
{
 800bae8:	b570      	push	{r4, r5, r6, lr}
    MlmeConfirmQueue_t* element = ConfirmQueueCtx.BufferStart;
 800baea:	4a0d      	ldr	r2, [pc, #52]	@ (800bb20 <LoRaMacConfirmQueueSetStatusCmn+0x38>)

    ConfirmQueueCtx.Nvm.CommonStatus = status;
 800baec:	1c91      	adds	r1, r2, #2
 800baee:	77c8      	strb	r0, [r1, #31]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 800baf0:	1c51      	adds	r1, r2, #1
    if( count == 0 )
 800baf2:	7fc9      	ldrb	r1, [r1, #31]
    MlmeConfirmQueue_t* element = ConfirmQueueCtx.BufferStart;
 800baf4:	6853      	ldr	r3, [r2, #4]
    if( count == 0 )
 800baf6:	2900      	cmp	r1, #0
 800baf8:	d00d      	beq.n	800bb16 <LoRaMacConfirmQueueSetStatusCmn+0x2e>
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 800bafa:	0014      	movs	r4, r2
            element->Status = status;
            // Set the status if it is allowed to set it with a call to
            // LoRaMacConfirmQueueSetStatusCmn.
            if( element->RestrictCommonReadyToHandle == false )
            {
                element->ReadyToHandle = true;
 800bafc:	2501      	movs	r5, #1
            }
            element = IncreaseBufferPointer( element );
        }while( element != ConfirmQueueCtx.BufferEnd );
 800bafe:	6891      	ldr	r1, [r2, #8]
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 800bb00:	341c      	adds	r4, #28
            if( element->RestrictCommonReadyToHandle == false )
 800bb02:	78de      	ldrb	r6, [r3, #3]
            element->Status = status;
 800bb04:	7058      	strb	r0, [r3, #1]
            if( element->RestrictCommonReadyToHandle == false )
 800bb06:	2e00      	cmp	r6, #0
 800bb08:	d100      	bne.n	800bb0c <LoRaMacConfirmQueueSetStatusCmn+0x24>
                element->ReadyToHandle = true;
 800bb0a:	709d      	strb	r5, [r3, #2]
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 800bb0c:	42a3      	cmp	r3, r4
 800bb0e:	d003      	beq.n	800bb18 <LoRaMacConfirmQueueSetStatusCmn+0x30>
        bufferPointer++;
 800bb10:	3304      	adds	r3, #4
        }while( element != ConfirmQueueCtx.BufferEnd );
 800bb12:	4299      	cmp	r1, r3
 800bb14:	d1f5      	bne.n	800bb02 <LoRaMacConfirmQueueSetStatusCmn+0x1a>
    }
}
 800bb16:	bd70      	pop	{r4, r5, r6, pc}
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 800bb18:	0013      	movs	r3, r2
 800bb1a:	330c      	adds	r3, #12
 800bb1c:	e7f9      	b.n	800bb12 <LoRaMacConfirmQueueSetStatusCmn+0x2a>
 800bb1e:	46c0      	nop			@ (mov r8, r8)
 800bb20:	20001338 	.word	0x20001338

0800bb24 <LoRaMacConfirmQueueIsCmdActive>:
    return ConfirmQueueCtx.Nvm.CommonStatus;
}

bool LoRaMacConfirmQueueIsCmdActive( Mlme_t request )
{
    if( GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd ) != NULL )
 800bb24:	4b04      	ldr	r3, [pc, #16]	@ (800bb38 <LoRaMacConfirmQueueIsCmdActive+0x14>)
{
 800bb26:	b510      	push	{r4, lr}
    if( GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd ) != NULL )
 800bb28:	6859      	ldr	r1, [r3, #4]
 800bb2a:	f7ff ff47 	bl	800b9bc <GetElement.constprop.0>
 800bb2e:	1e43      	subs	r3, r0, #1
 800bb30:	4198      	sbcs	r0, r3
    {
        return true;
    }
    return false;
}
 800bb32:	b2c0      	uxtb	r0, r0
 800bb34:	bd10      	pop	{r4, pc}
 800bb36:	46c0      	nop			@ (mov r8, r8)
 800bb38:	20001338 	.word	0x20001338

0800bb3c <LoRaMacConfirmQueueHandleCb>:

void LoRaMacConfirmQueueHandleCb( MlmeConfirm_t* mlmeConfirm )
{
 800bb3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bb3e:	0005      	movs	r5, r0
    uint8_t nbElements = ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
    bool readyToHandle = false;
    MlmeConfirmQueue_t mlmeConfirmToStore;

    for( uint8_t i = 0; i < nbElements; i++ )
 800bb40:	2400      	movs	r4, #0
    uint8_t nbElements = ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 800bb42:	4b13      	ldr	r3, [pc, #76]	@ (800bb90 <LoRaMacConfirmQueueHandleCb+0x54>)
{
 800bb44:	b085      	sub	sp, #20
    uint8_t nbElements = ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 800bb46:	7fdb      	ldrb	r3, [r3, #31]
 800bb48:	4f12      	ldr	r7, [pc, #72]	@ (800bb94 <LoRaMacConfirmQueueHandleCb+0x58>)
 800bb4a:	9301      	str	r3, [sp, #4]
    for( uint8_t i = 0; i < nbElements; i++ )
 800bb4c:	9b01      	ldr	r3, [sp, #4]
 800bb4e:	429c      	cmp	r4, r3
 800bb50:	d101      	bne.n	800bb56 <LoRaMacConfirmQueueHandleCb+0x1a>
        {
            // Add a request which has not been finished again to the queue
            LoRaMacConfirmQueueAdd( &mlmeConfirmToStore );
        }
    }
}
 800bb52:	b005      	add	sp, #20
 800bb54:	bdf0      	pop	{r4, r5, r6, r7, pc}
        mlmeConfirm->MlmeRequest = ConfirmQueueCtx.BufferStart->Request;
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	7819      	ldrb	r1, [r3, #0]
 800bb5a:	7029      	strb	r1, [r5, #0]
        mlmeConfirm->Status = ConfirmQueueCtx.BufferStart->Status;
 800bb5c:	785a      	ldrb	r2, [r3, #1]
 800bb5e:	706a      	strb	r2, [r5, #1]
        if( readyToHandle == true )
 800bb60:	7898      	ldrb	r0, [r3, #2]
 800bb62:	2800      	cmp	r0, #0
 800bb64:	d008      	beq.n	800bb78 <LoRaMacConfirmQueueHandleCb+0x3c>
            ConfirmQueueCtx.Primitives->MacMlmeConfirm( mlmeConfirm );
 800bb66:	683b      	ldr	r3, [r7, #0]
 800bb68:	0028      	movs	r0, r5
 800bb6a:	689b      	ldr	r3, [r3, #8]
 800bb6c:	4798      	blx	r3
        LoRaMacConfirmQueueRemoveFirst( );
 800bb6e:	f7ff ff7b 	bl	800ba68 <LoRaMacConfirmQueueRemoveFirst>
    for( uint8_t i = 0; i < nbElements; i++ )
 800bb72:	3401      	adds	r4, #1
 800bb74:	b2e4      	uxtb	r4, r4
 800bb76:	e7e9      	b.n	800bb4c <LoRaMacConfirmQueueHandleCb+0x10>
            mlmeConfirmToStore.Request = ConfirmQueueCtx.BufferStart->Request;
 800bb78:	ae03      	add	r6, sp, #12
 800bb7a:	7031      	strb	r1, [r6, #0]
            mlmeConfirmToStore.Status = ConfirmQueueCtx.BufferStart->Status;
 800bb7c:	7072      	strb	r2, [r6, #1]
            mlmeConfirmToStore.RestrictCommonReadyToHandle = ConfirmQueueCtx.BufferStart->RestrictCommonReadyToHandle;
 800bb7e:	78db      	ldrb	r3, [r3, #3]
 800bb80:	70f3      	strb	r3, [r6, #3]
        LoRaMacConfirmQueueRemoveFirst( );
 800bb82:	f7ff ff71 	bl	800ba68 <LoRaMacConfirmQueueRemoveFirst>
            LoRaMacConfirmQueueAdd( &mlmeConfirmToStore );
 800bb86:	0030      	movs	r0, r6
 800bb88:	f7ff ff4c 	bl	800ba24 <LoRaMacConfirmQueueAdd>
 800bb8c:	e7f1      	b.n	800bb72 <LoRaMacConfirmQueueHandleCb+0x36>
 800bb8e:	46c0      	nop			@ (mov r8, r8)
 800bb90:	20001339 	.word	0x20001339
 800bb94:	20001338 	.word	0x20001338

0800bb98 <LoRaMacConfirmQueueGetCnt>:

uint8_t LoRaMacConfirmQueueGetCnt( void )
{
    return ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 800bb98:	4b01      	ldr	r3, [pc, #4]	@ (800bba0 <LoRaMacConfirmQueueGetCnt+0x8>)
 800bb9a:	7fd8      	ldrb	r0, [r3, #31]
}
 800bb9c:	4770      	bx	lr
 800bb9e:	46c0      	nop			@ (mov r8, r8)
 800bba0:	20001339 	.word	0x20001339

0800bba4 <LoRaMacConfirmQueueIsFull>:
    }
    else
    {
        return false;
    }
}
 800bba4:	2004      	movs	r0, #4
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 800bba6:	4b03      	ldr	r3, [pc, #12]	@ (800bbb4 <LoRaMacConfirmQueueIsFull+0x10>)
    if( count >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
 800bba8:	7fdb      	ldrb	r3, [r3, #31]
}
 800bbaa:	4298      	cmp	r0, r3
 800bbac:	4180      	sbcs	r0, r0
 800bbae:	4240      	negs	r0, r0
 800bbb0:	4770      	bx	lr
 800bbb2:	46c0      	nop			@ (mov r8, r8)
 800bbb4:	20001339 	.word	0x20001339

0800bbb8 <DeriveSessionKey10x>:
 * \param[IN]  netID          - Network Identifier
 * \param[IN]  deviceNonce    - Device nonce
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t DeriveSessionKey10x( KeyIdentifier_t keyID, uint32_t joinNonce, uint32_t netID, uint16_t devNonce )
{
 800bbb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bbba:	b085      	sub	sp, #20
 800bbbc:	000c      	movs	r4, r1
 800bbbe:	0007      	movs	r7, r0
 800bbc0:	0016      	movs	r6, r2
    uint8_t compBase[16] = { 0 };
 800bbc2:	2100      	movs	r1, #0
 800bbc4:	220c      	movs	r2, #12
 800bbc6:	a801      	add	r0, sp, #4
{
 800bbc8:	001d      	movs	r5, r3
    uint8_t compBase[16] = { 0 };
 800bbca:	f004 f8f1 	bl	800fdb0 <memset>

    /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
    switch( keyID )
 800bbce:	466a      	mov	r2, sp
 800bbd0:	1e7b      	subs	r3, r7, #1
 800bbd2:	7013      	strb	r3, [r2, #0]
        default:
            return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
    }
   /* ST_WORKAROUND_END */

    compBase[1] = ( uint8_t )( ( joinNonce >> 0 ) & 0xFF );
 800bbd4:	7054      	strb	r4, [r2, #1]
    compBase[2] = ( uint8_t )( ( joinNonce >> 8 ) & 0xFF );
 800bbd6:	0a23      	lsrs	r3, r4, #8
    compBase[3] = ( uint8_t )( ( joinNonce >> 16 ) & 0xFF );

    compBase[4] = ( uint8_t )( ( netID >> 0 ) & 0xFF );
 800bbd8:	8096      	strh	r6, [r2, #4]
    compBase[5] = ( uint8_t )( ( netID >> 8 ) & 0xFF );
    compBase[6] = ( uint8_t )( ( netID >> 16 ) & 0xFF );

    compBase[7] = ( uint8_t )( ( devNonce >> 0 ) & 0xFF );
 800bbda:	71d5      	strb	r5, [r2, #7]
    compBase[3] = ( uint8_t )( ( joinNonce >> 16 ) & 0xFF );
 800bbdc:	0c24      	lsrs	r4, r4, #16
    compBase[6] = ( uint8_t )( ( netID >> 16 ) & 0xFF );
 800bbde:	0c36      	lsrs	r6, r6, #16
    compBase[8] = ( uint8_t )( ( devNonce >> 8 ) & 0xFF );
 800bbe0:	0a2d      	lsrs	r5, r5, #8
    compBase[2] = ( uint8_t )( ( joinNonce >> 8 ) & 0xFF );
 800bbe2:	7093      	strb	r3, [r2, #2]
    compBase[3] = ( uint8_t )( ( joinNonce >> 16 ) & 0xFF );
 800bbe4:	70d4      	strb	r4, [r2, #3]
    compBase[6] = ( uint8_t )( ( netID >> 16 ) & 0xFF );
 800bbe6:	7196      	strb	r6, [r2, #6]
    compBase[8] = ( uint8_t )( ( devNonce >> 8 ) & 0xFF );
 800bbe8:	7215      	strb	r5, [r2, #8]

    if( SecureElementDeriveAndStoreKey( compBase, NWK_KEY, keyID ) != SECURE_ELEMENT_SUCCESS )
 800bbea:	2101      	movs	r1, #1
 800bbec:	003a      	movs	r2, r7
 800bbee:	4668      	mov	r0, sp
 800bbf0:	f7fb ff7f 	bl	8007af2 <SecureElementDeriveAndStoreKey>
 800bbf4:	2800      	cmp	r0, #0
 800bbf6:	d000      	beq.n	800bbfa <DeriveSessionKey10x+0x42>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800bbf8:	200f      	movs	r0, #15
    }

    return LORAMAC_CRYPTO_SUCCESS;
}
 800bbfa:	b005      	add	sp, #20
 800bbfc:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800bbfe <PayloadEncrypt>:
{
 800bbfe:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bc00:	b08d      	sub	sp, #52	@ 0x34
 800bc02:	001e      	movs	r6, r3
 800bc04:	ab12      	add	r3, sp, #72	@ 0x48
 800bc06:	781b      	ldrb	r3, [r3, #0]
 800bc08:	9001      	str	r0, [sp, #4]
 800bc0a:	9303      	str	r3, [sp, #12]
    if( buffer == 0 )
 800bc0c:	9b01      	ldr	r3, [sp, #4]
{
 800bc0e:	000c      	movs	r4, r1
        return LORAMAC_CRYPTO_ERROR_NPE;
 800bc10:	200a      	movs	r0, #10
{
 800bc12:	9202      	str	r2, [sp, #8]
    if( buffer == 0 )
 800bc14:	2b00      	cmp	r3, #0
 800bc16:	d026      	beq.n	800bc66 <PayloadEncrypt+0x68>
    uint8_t sBlock[16] = { 0 };
 800bc18:	2700      	movs	r7, #0
 800bc1a:	220c      	movs	r2, #12
 800bc1c:	0039      	movs	r1, r7
 800bc1e:	a805      	add	r0, sp, #20
 800bc20:	9704      	str	r7, [sp, #16]
 800bc22:	f004 f8c5 	bl	800fdb0 <memset>
    uint8_t aBlock[16] = { 0 };
 800bc26:	220c      	movs	r2, #12
 800bc28:	0039      	movs	r1, r7
 800bc2a:	a809      	add	r0, sp, #36	@ 0x24
 800bc2c:	9708      	str	r7, [sp, #32]
 800bc2e:	f004 f8bf 	bl	800fdb0 <memset>
    aBlock[0] = 0x01;
 800bc32:	2201      	movs	r2, #1
    aBlock[5] = dir;
 800bc34:	9b03      	ldr	r3, [sp, #12]
    uint8_t aBlock[16] = { 0 };
 800bc36:	ad08      	add	r5, sp, #32
    aBlock[5] = dir;
 800bc38:	716b      	strb	r3, [r5, #5]
    aBlock[6] = address & 0xFF;
 800bc3a:	80ee      	strh	r6, [r5, #6]
    aBlock[8] = ( address >> 16 ) & 0xFF;
 800bc3c:	0c33      	lsrs	r3, r6, #16
    aBlock[9] = ( address >> 24 ) & 0xFF;
 800bc3e:	0e36      	lsrs	r6, r6, #24
 800bc40:	726e      	strb	r6, [r5, #9]
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 800bc42:	2710      	movs	r7, #16
    uint16_t ctr = 1;
 800bc44:	0016      	movs	r6, r2
    aBlock[8] = ( address >> 16 ) & 0xFF;
 800bc46:	722b      	strb	r3, [r5, #8]
    aBlock[10] = frameCounter & 0xFF;
 800bc48:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
    aBlock[0] = 0x01;
 800bc4a:	702a      	strb	r2, [r5, #0]
    aBlock[10] = frameCounter & 0xFF;
 800bc4c:	816b      	strh	r3, [r5, #10]
    aBlock[12] = ( frameCounter >> 16 ) & 0xFF;
 800bc4e:	0c1b      	lsrs	r3, r3, #16
 800bc50:	732b      	strb	r3, [r5, #12]
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
 800bc52:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800bc54:	0e1b      	lsrs	r3, r3, #24
 800bc56:	736b      	strb	r3, [r5, #13]
    while( size > 0 )
 800bc58:	b2f3      	uxtb	r3, r6
 800bc5a:	011d      	lsls	r5, r3, #4
 800bc5c:	3d10      	subs	r5, #16
 800bc5e:	b2ed      	uxtb	r5, r5
 800bc60:	2c00      	cmp	r4, #0
 800bc62:	dc02      	bgt.n	800bc6a <PayloadEncrypt+0x6c>
    return LORAMAC_CRYPTO_SUCCESS;
 800bc64:	2000      	movs	r0, #0
}
 800bc66:	b00d      	add	sp, #52	@ 0x34
 800bc68:	bdf0      	pop	{r4, r5, r6, r7, pc}
        aBlock[15] = ctr & 0xFF;
 800bc6a:	a808      	add	r0, sp, #32
 800bc6c:	73c3      	strb	r3, [r0, #15]
        ctr++;
 800bc6e:	3601      	adds	r6, #1
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 800bc70:	2110      	movs	r1, #16
 800bc72:	9a02      	ldr	r2, [sp, #8]
 800bc74:	ab04      	add	r3, sp, #16
        ctr++;
 800bc76:	b2b6      	uxth	r6, r6
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 800bc78:	f7fb fecb 	bl	8007a12 <SecureElementAesEncrypt>
 800bc7c:	2800      	cmp	r0, #0
 800bc7e:	d113      	bne.n	800bca8 <PayloadEncrypt+0xaa>
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 800bc80:	1c21      	adds	r1, r4, #0
 800bc82:	2c10      	cmp	r4, #16
 800bc84:	dd00      	ble.n	800bc88 <PayloadEncrypt+0x8a>
 800bc86:	1c39      	adds	r1, r7, #0
 800bc88:	9b01      	ldr	r3, [sp, #4]
 800bc8a:	b209      	sxth	r1, r1
 800bc8c:	195d      	adds	r5, r3, r5
 800bc8e:	2300      	movs	r3, #0
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 800bc90:	a804      	add	r0, sp, #16
 800bc92:	782a      	ldrb	r2, [r5, #0]
 800bc94:	5c18      	ldrb	r0, [r3, r0]
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 800bc96:	3301      	adds	r3, #1
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 800bc98:	4042      	eors	r2, r0
 800bc9a:	702a      	strb	r2, [r5, #0]
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 800bc9c:	3501      	adds	r5, #1
 800bc9e:	428b      	cmp	r3, r1
 800bca0:	dbf6      	blt.n	800bc90 <PayloadEncrypt+0x92>
        size -= 16;
 800bca2:	3c10      	subs	r4, #16
 800bca4:	b224      	sxth	r4, r4
        bufferIndex += 16;
 800bca6:	e7d7      	b.n	800bc58 <PayloadEncrypt+0x5a>
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800bca8:	200f      	movs	r0, #15
 800bcaa:	e7dc      	b.n	800bc66 <PayloadEncrypt+0x68>

0800bcac <LoRaMacCryptoDeriveMcKEKey.part.0>:
    }

    return LORAMAC_CRYPTO_SUCCESS;
}

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveMcKEKey( KeyIdentifier_t keyID )
 800bcac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    // Prevent other keys than McRootKey
    if( keyID != MC_ROOT_KEY )
    {
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
    }
    uint8_t compBase[16] = { 0 };
 800bcae:	2100      	movs	r1, #0
 800bcb0:	220c      	movs	r2, #12
 800bcb2:	a801      	add	r0, sp, #4
 800bcb4:	9100      	str	r1, [sp, #0]
 800bcb6:	f004 f87b 	bl	800fdb0 <memset>

    if( SecureElementDeriveAndStoreKey( compBase, keyID, MC_KE_KEY ) != SECURE_ELEMENT_SUCCESS )
 800bcba:	227f      	movs	r2, #127	@ 0x7f
 800bcbc:	2104      	movs	r1, #4
 800bcbe:	4668      	mov	r0, sp
 800bcc0:	f7fb ff17 	bl	8007af2 <SecureElementDeriveAndStoreKey>
 800bcc4:	2800      	cmp	r0, #0
 800bcc6:	d000      	beq.n	800bcca <LoRaMacCryptoDeriveMcKEKey.part.0+0x1e>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800bcc8:	200f      	movs	r0, #15
    }

    return LORAMAC_CRYPTO_SUCCESS;
}
 800bcca:	b005      	add	sp, #20
 800bccc:	bd00      	pop	{pc}
	...

0800bcd0 <GetLastFcntDown.constprop.0>:
    switch( fCntID )
 800bcd0:	3801      	subs	r0, #1
 800bcd2:	2305      	movs	r3, #5
static LoRaMacCryptoStatus_t GetLastFcntDown( FCntIdentifier_t fCntID, uint32_t* lastDown )
 800bcd4:	b500      	push	{lr}
    switch( fCntID )
 800bcd6:	2803      	cmp	r0, #3
 800bcd8:	d809      	bhi.n	800bcee <GetLastFcntDown.constprop.0+0x1e>
 800bcda:	4b09      	ldr	r3, [pc, #36]	@ (800bd00 <GetLastFcntDown.constprop.0+0x30>)
            *lastDown = CryptoNvm->FCntList.McFCntDown[0];
 800bcdc:	681b      	ldr	r3, [r3, #0]
    switch( fCntID )
 800bcde:	f7f4 fa25 	bl	800012c <__gnu_thumb1_case_uqi>
 800bce2:	0802      	.short	0x0802
 800bce4:	0c0a      	.short	0x0c0a
            *lastDown = CryptoNvm->FCntList.NFCntDown;
 800bce6:	691a      	ldr	r2, [r3, #16]
            *lastDown = CryptoNvm->FCntList.FCntDown;
 800bce8:	600a      	str	r2, [r1, #0]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.FCntDown;
 800bcea:	621a      	str	r2, [r3, #32]
    return LORAMAC_CRYPTO_SUCCESS;
 800bcec:	2300      	movs	r3, #0
}
 800bcee:	0018      	movs	r0, r3
 800bcf0:	bd00      	pop	{pc}
            *lastDown = CryptoNvm->FCntList.AFCntDown;
 800bcf2:	695a      	ldr	r2, [r3, #20]
 800bcf4:	e7f8      	b.n	800bce8 <GetLastFcntDown.constprop.0+0x18>
            *lastDown = CryptoNvm->FCntList.FCntDown;
 800bcf6:	699a      	ldr	r2, [r3, #24]
 800bcf8:	e7f6      	b.n	800bce8 <GetLastFcntDown.constprop.0+0x18>
            *lastDown = CryptoNvm->FCntList.McFCntDown[0];
 800bcfa:	69db      	ldr	r3, [r3, #28]
 800bcfc:	600b      	str	r3, [r1, #0]
            break;
 800bcfe:	e7f5      	b.n	800bcec <GetLastFcntDown.constprop.0+0x1c>
 800bd00:	2000135c 	.word	0x2000135c

0800bd04 <VerifyCmacB0.constprop.0.isra.0>:
static LoRaMacCryptoStatus_t VerifyCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t expectedCmac )
 800bd04:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bd06:	b0c7      	sub	sp, #284	@ 0x11c
 800bd08:	0007      	movs	r7, r0
 800bd0a:	000c      	movs	r4, r1
 800bd0c:	001d      	movs	r5, r3
        return LORAMAC_CRYPTO_ERROR_NPE;
 800bd0e:	200a      	movs	r0, #10
static LoRaMacCryptoStatus_t VerifyCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t expectedCmac )
 800bd10:	9201      	str	r2, [sp, #4]
    if( msg == 0 )
 800bd12:	2f00      	cmp	r7, #0
 800bd14:	d02f      	beq.n	800bd76 <VerifyCmacB0.constprop.0.isra.0+0x72>
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 800bd16:	2680      	movs	r6, #128	@ 0x80
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 800bd18:	3004      	adds	r0, #4
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 800bd1a:	0076      	lsls	r6, r6, #1
 800bd1c:	42b1      	cmp	r1, r6
 800bd1e:	d82a      	bhi.n	800bd76 <VerifyCmacB0.constprop.0.isra.0+0x72>
    memset1( micBuff, 0, CRYPTO_BUFFER_SIZE );
 800bd20:	2288      	movs	r2, #136	@ 0x88
 800bd22:	2100      	movs	r1, #0
 800bd24:	0052      	lsls	r2, r2, #1
 800bd26:	a802      	add	r0, sp, #8
 800bd28:	f001 fd41 	bl	800d7ae <memset1>
    b0[0] = 0x49;
 800bd2c:	2349      	movs	r3, #73	@ 0x49
 800bd2e:	9302      	str	r3, [sp, #8]
    b0[4] = 0x00;
 800bd30:	ab02      	add	r3, sp, #8
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 800bd32:	aa02      	add	r2, sp, #8
    b0[4] = 0x00;
 800bd34:	809e      	strh	r6, [r3, #4]
    b0[6] = devAddr & 0xFF;
 800bd36:	80dd      	strh	r5, [r3, #6]
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 800bd38:	0c2b      	lsrs	r3, r5, #16
 800bd3a:	7213      	strb	r3, [r2, #8]
    b0[10] = fCnt & 0xFF;
 800bd3c:	9b4c      	ldr	r3, [sp, #304]	@ 0x130
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 800bd3e:	0e2d      	lsrs	r5, r5, #24
    b0[10] = fCnt & 0xFF;
 800bd40:	8153      	strh	r3, [r2, #10]
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 800bd42:	0c1b      	lsrs	r3, r3, #16
 800bd44:	7313      	strb	r3, [r2, #12]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 800bd46:	9b4c      	ldr	r3, [sp, #304]	@ 0x130
    b0[15] = msgLen & 0xFF;
 800bd48:	73d4      	strb	r4, [r2, #15]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 800bd4a:	0e1e      	lsrs	r6, r3, #24
    b0[14] = 0x00;
 800bd4c:	2300      	movs	r3, #0
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
 800bd4e:	0039      	movs	r1, r7
    b0[14] = 0x00;
 800bd50:	7393      	strb	r3, [r2, #14]
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 800bd52:	7255      	strb	r5, [r2, #9]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 800bd54:	7356      	strb	r6, [r2, #13]
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
 800bd56:	a806      	add	r0, sp, #24
 800bd58:	0022      	movs	r2, r4
    retval = SecureElementVerifyAesCmac( micBuff, ( len + MIC_BLOCK_BX_SIZE ), expectedCmac, keyID );
 800bd5a:	3410      	adds	r4, #16
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
 800bd5c:	f001 fd12 	bl	800d784 <memcpy1>
    retval = SecureElementVerifyAesCmac( micBuff, ( len + MIC_BLOCK_BX_SIZE ), expectedCmac, keyID );
 800bd60:	9b01      	ldr	r3, [sp, #4]
 800bd62:	9a4d      	ldr	r2, [sp, #308]	@ 0x134
 800bd64:	b2a1      	uxth	r1, r4
 800bd66:	a802      	add	r0, sp, #8
 800bd68:	f7fb fe3b 	bl	80079e2 <SecureElementVerifyAesCmac>
    if( retval == SECURE_ELEMENT_SUCCESS )
 800bd6c:	2800      	cmp	r0, #0
 800bd6e:	d002      	beq.n	800bd76 <VerifyCmacB0.constprop.0.isra.0+0x72>
    else if( retval == SECURE_ELEMENT_FAIL_CMAC )
 800bd70:	2801      	cmp	r0, #1
 800bd72:	d000      	beq.n	800bd76 <VerifyCmacB0.constprop.0.isra.0+0x72>
    return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800bd74:	200f      	movs	r0, #15
}
 800bd76:	b047      	add	sp, #284	@ 0x11c
 800bd78:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800bd7c <LoRaMacCryptoInit>:
        return LORAMAC_CRYPTO_FAIL_PARAM;
 800bd7c:	2309      	movs	r3, #9
{
 800bd7e:	b510      	push	{r4, lr}
    if( nvm == NULL )
 800bd80:	2800      	cmp	r0, #0
 800bd82:	d012      	beq.n	800bdaa <LoRaMacCryptoInit+0x2e>
    CryptoNvm = nvm;
 800bd84:	4c0a      	ldr	r4, [pc, #40]	@ (800bdb0 <LoRaMacCryptoInit+0x34>)
    memset1( ( uint8_t* )CryptoNvm, 0, sizeof( LoRaMacCryptoNvmData_t ) );
 800bd86:	2228      	movs	r2, #40	@ 0x28
 800bd88:	2100      	movs	r1, #0
    CryptoNvm = nvm;
 800bd8a:	6020      	str	r0, [r4, #0]
    memset1( ( uint8_t* )CryptoNvm, 0, sizeof( LoRaMacCryptoNvmData_t ) );
 800bd8c:	f001 fd0f 	bl	800d7ae <memset1>
    CryptoNvm->LrWanVersion.Fields.Major = 1;
 800bd90:	6823      	ldr	r3, [r4, #0]
    CryptoNvm->LrWanVersion.Fields.Revision = 0;
 800bd92:	4a08      	ldr	r2, [pc, #32]	@ (800bdb4 <LoRaMacCryptoInit+0x38>)
    CryptoNvm->FCntList.FCntUp = 0;
 800bd94:	2000      	movs	r0, #0
    CryptoNvm->LrWanVersion.Fields.Revision = 0;
 800bd96:	601a      	str	r2, [r3, #0]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 800bd98:	2201      	movs	r2, #1
 800bd9a:	4252      	negs	r2, r2
    CryptoNvm->FCntList.FCntUp = 0;
 800bd9c:	60d8      	str	r0, [r3, #12]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 800bd9e:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITAL_VALUE;
 800bda0:	615a      	str	r2, [r3, #20]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 800bda2:	619a      	str	r2, [r3, #24]
    CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.FCntDown;
 800bda4:	621a      	str	r2, [r3, #32]
        CryptoNvm->FCntList.McFCntDown[i] = FCNT_DOWN_INITAL_VALUE;
 800bda6:	61da      	str	r2, [r3, #28]
    return LORAMAC_CRYPTO_SUCCESS;
 800bda8:	0003      	movs	r3, r0
}
 800bdaa:	0018      	movs	r0, r3
 800bdac:	bd10      	pop	{r4, pc}
 800bdae:	46c0      	nop			@ (mov r8, r8)
 800bdb0:	2000135c 	.word	0x2000135c
 800bdb4:	01010100 	.word	0x01010100

0800bdb8 <LoRaMacCryptoSetLrWanVersion>:
    CryptoNvm->LrWanVersion = version;
 800bdb8:	4b02      	ldr	r3, [pc, #8]	@ (800bdc4 <LoRaMacCryptoSetLrWanVersion+0xc>)
 800bdba:	681b      	ldr	r3, [r3, #0]
 800bdbc:	6018      	str	r0, [r3, #0]
}
 800bdbe:	2000      	movs	r0, #0
 800bdc0:	4770      	bx	lr
 800bdc2:	46c0      	nop			@ (mov r8, r8)
 800bdc4:	2000135c 	.word	0x2000135c

0800bdc8 <LoRaMacCryptoGetFCntUp>:
{
 800bdc8:	0003      	movs	r3, r0
        return LORAMAC_CRYPTO_ERROR_NPE;
 800bdca:	200a      	movs	r0, #10
    if( currentUp == NULL )
 800bdcc:	2b00      	cmp	r3, #0
 800bdce:	d005      	beq.n	800bddc <LoRaMacCryptoGetFCntUp+0x14>
    return LORAMAC_CRYPTO_SUCCESS;
 800bdd0:	2000      	movs	r0, #0
    *currentUp = CryptoNvm->FCntList.FCntUp + 1;
 800bdd2:	4a03      	ldr	r2, [pc, #12]	@ (800bde0 <LoRaMacCryptoGetFCntUp+0x18>)
 800bdd4:	6812      	ldr	r2, [r2, #0]
 800bdd6:	68d2      	ldr	r2, [r2, #12]
 800bdd8:	3201      	adds	r2, #1
 800bdda:	601a      	str	r2, [r3, #0]
}
 800bddc:	4770      	bx	lr
 800bdde:	46c0      	nop			@ (mov r8, r8)
 800bde0:	2000135c 	.word	0x2000135c

0800bde4 <LoRaMacCryptoGetFCntDown>:
{
 800bde4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bde6:	001f      	movs	r7, r3
    uint32_t lastDown = 0;
 800bde8:	2300      	movs	r3, #0
{
 800bdea:	b085      	sub	sp, #20
 800bdec:	0015      	movs	r5, r2
        return LORAMAC_CRYPTO_ERROR_NPE;
 800bdee:	240a      	movs	r4, #10
{
 800bdf0:	9101      	str	r1, [sp, #4]
    uint32_t lastDown = 0;
 800bdf2:	9303      	str	r3, [sp, #12]
    if( currentDown == NULL )
 800bdf4:	429f      	cmp	r7, r3
 800bdf6:	d027      	beq.n	800be48 <LoRaMacCryptoGetFCntDown+0x64>
    cryptoStatus = GetLastFcntDown( fCntID, &lastDown );
 800bdf8:	a903      	add	r1, sp, #12
 800bdfa:	f7ff ff69 	bl	800bcd0 <GetLastFcntDown.constprop.0>
 800bdfe:	1e04      	subs	r4, r0, #0
    if( cryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800be00:	d122      	bne.n	800be48 <LoRaMacCryptoGetFCntDown+0x64>
    if( lastDown == FCNT_DOWN_INITAL_VALUE )
 800be02:	9e03      	ldr	r6, [sp, #12]
 800be04:	1c73      	adds	r3, r6, #1
 800be06:	d004      	beq.n	800be12 <LoRaMacCryptoGetFCntDown+0x2e>
        fCntDiff = ( int32_t )( ( int64_t )frameFcnt - ( int64_t )( lastDown & 0x0000FFFF ) );
 800be08:	b2b3      	uxth	r3, r6
 800be0a:	1aeb      	subs	r3, r5, r3
        if( fCntDiff > 0 )
 800be0c:	2b00      	cmp	r3, #0
 800be0e:	dd17      	ble.n	800be40 <LoRaMacCryptoGetFCntDown+0x5c>
            *currentDown = lastDown + fCntDiff;
 800be10:	18f5      	adds	r5, r6, r3
    if( CryptoNvm->LrWanVersion.Fields.Minor == 0 )
 800be12:	4b12      	ldr	r3, [pc, #72]	@ (800be5c <LoRaMacCryptoGetFCntDown+0x78>)
        *currentDown = frameFcnt;
 800be14:	603d      	str	r5, [r7, #0]
    if( CryptoNvm->LrWanVersion.Fields.Minor == 0 )
 800be16:	681b      	ldr	r3, [r3, #0]
 800be18:	789f      	ldrb	r7, [r3, #2]
 800be1a:	2f00      	cmp	r7, #0
 800be1c:	d114      	bne.n	800be48 <LoRaMacCryptoGetFCntDown+0x64>
        if( ( ( int64_t )*currentDown - ( int64_t )lastDown ) >= maxFCntGap )
 800be1e:	002a      	movs	r2, r5
 800be20:	003b      	movs	r3, r7
 800be22:	0030      	movs	r0, r6
 800be24:	0039      	movs	r1, r7
 800be26:	1a12      	subs	r2, r2, r0
 800be28:	418b      	sbcs	r3, r1
 800be2a:	2401      	movs	r4, #1
 800be2c:	429f      	cmp	r7, r3
 800be2e:	dc03      	bgt.n	800be38 <LoRaMacCryptoGetFCntDown+0x54>
 800be30:	d103      	bne.n	800be3a <LoRaMacCryptoGetFCntDown+0x56>
 800be32:	9901      	ldr	r1, [sp, #4]
 800be34:	4291      	cmp	r1, r2
 800be36:	d900      	bls.n	800be3a <LoRaMacCryptoGetFCntDown+0x56>
 800be38:	2400      	movs	r4, #0
 800be3a:	00e4      	lsls	r4, r4, #3
 800be3c:	b2e4      	uxtb	r4, r4
 800be3e:	e003      	b.n	800be48 <LoRaMacCryptoGetFCntDown+0x64>
        else if( fCntDiff == 0 )
 800be40:	2b00      	cmp	r3, #0
 800be42:	d104      	bne.n	800be4e <LoRaMacCryptoGetFCntDown+0x6a>
            return LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED;
 800be44:	2407      	movs	r4, #7
            *currentDown = lastDown;
 800be46:	603e      	str	r6, [r7, #0]
}
 800be48:	0020      	movs	r0, r4
 800be4a:	b005      	add	sp, #20
 800be4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
            *currentDown = ( lastDown & 0xFFFF0000 ) + 0x10000 + frameFcnt;
 800be4e:	2280      	movs	r2, #128	@ 0x80
 800be50:	0c33      	lsrs	r3, r6, #16
 800be52:	041b      	lsls	r3, r3, #16
 800be54:	0252      	lsls	r2, r2, #9
 800be56:	189b      	adds	r3, r3, r2
 800be58:	18ed      	adds	r5, r5, r3
 800be5a:	e7da      	b.n	800be12 <LoRaMacCryptoGetFCntDown+0x2e>
 800be5c:	2000135c 	.word	0x2000135c

0800be60 <LoRaMacCryptoSetMulticastReference>:
{
 800be60:	0003      	movs	r3, r0
        return LORAMAC_CRYPTO_ERROR_NPE;
 800be62:	200a      	movs	r0, #10
    if( multicastList == NULL )
 800be64:	2b00      	cmp	r3, #0
 800be66:	d004      	beq.n	800be72 <LoRaMacCryptoSetMulticastReference+0x12>
    return LORAMAC_CRYPTO_SUCCESS;
 800be68:	2000      	movs	r0, #0
        multicastList[i].DownLinkCounter = &CryptoNvm->FCntList.McFCntDown[i];
 800be6a:	4a02      	ldr	r2, [pc, #8]	@ (800be74 <LoRaMacCryptoSetMulticastReference+0x14>)
 800be6c:	6812      	ldr	r2, [r2, #0]
 800be6e:	321c      	adds	r2, #28
 800be70:	621a      	str	r2, [r3, #32]
}
 800be72:	4770      	bx	lr
 800be74:	2000135c 	.word	0x2000135c

0800be78 <LoRaMacCryptoPrepareJoinRequest>:
{
 800be78:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800be7a:	0004      	movs	r4, r0
        return LORAMAC_CRYPTO_ERROR_NPE;
 800be7c:	200a      	movs	r0, #10
    if( macMsg == 0 )
 800be7e:	2c00      	cmp	r4, #0
 800be80:	d010      	beq.n	800bea4 <LoRaMacCryptoPrepareJoinRequest+0x2c>
    uint32_t devNonce = 0;
 800be82:	2300      	movs	r3, #0
    SecureElementRandomNumber( &devNonce );
 800be84:	a803      	add	r0, sp, #12
    uint32_t devNonce = 0;
 800be86:	9303      	str	r3, [sp, #12]
    SecureElementRandomNumber( &devNonce );
 800be88:	f7fb fe92 	bl	8007bb0 <SecureElementRandomNumber>
    CryptoNvm->DevNonce = devNonce;
 800be8c:	4a0f      	ldr	r2, [pc, #60]	@ (800becc <LoRaMacCryptoPrepareJoinRequest+0x54>)
 800be8e:	9b03      	ldr	r3, [sp, #12]
 800be90:	6812      	ldr	r2, [r2, #0]
 800be92:	b29b      	uxth	r3, r3
 800be94:	8093      	strh	r3, [r2, #4]
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 800be96:	0020      	movs	r0, r4
    macMsg->DevNonce = CryptoNvm->DevNonce;
 800be98:	82e3      	strh	r3, [r4, #22]
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 800be9a:	f000 fa2b 	bl	800c2f4 <LoRaMacSerializerJoinRequest>
 800be9e:	2800      	cmp	r0, #0
 800bea0:	d002      	beq.n	800bea8 <LoRaMacCryptoPrepareJoinRequest+0x30>
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 800bea2:	2011      	movs	r0, #17
}
 800bea4:	b004      	add	sp, #16
 800bea6:	bd10      	pop	{r4, pc}
    if( SecureElementComputeAesCmac( NULL, macMsg->Buffer, ( LORAMAC_JOIN_REQ_MSG_SIZE - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, &macMsg->MIC ) != SECURE_ELEMENT_SUCCESS )
 800bea8:	0023      	movs	r3, r4
 800beaa:	3318      	adds	r3, #24
 800beac:	9300      	str	r3, [sp, #0]
 800beae:	2213      	movs	r2, #19
 800beb0:	2301      	movs	r3, #1
 800beb2:	6821      	ldr	r1, [r4, #0]
 800beb4:	f7fb fd8a 	bl	80079cc <SecureElementComputeAesCmac>
 800beb8:	0003      	movs	r3, r0
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800beba:	200f      	movs	r0, #15
    if( SecureElementComputeAesCmac( NULL, macMsg->Buffer, ( LORAMAC_JOIN_REQ_MSG_SIZE - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, &macMsg->MIC ) != SECURE_ELEMENT_SUCCESS )
 800bebc:	2b00      	cmp	r3, #0
 800bebe:	d1f1      	bne.n	800bea4 <LoRaMacCryptoPrepareJoinRequest+0x2c>
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 800bec0:	0020      	movs	r0, r4
 800bec2:	f000 fa17 	bl	800c2f4 <LoRaMacSerializerJoinRequest>
 800bec6:	2800      	cmp	r0, #0
 800bec8:	d0ec      	beq.n	800bea4 <LoRaMacCryptoPrepareJoinRequest+0x2c>
 800beca:	e7ea      	b.n	800bea2 <LoRaMacCryptoPrepareJoinRequest+0x2a>
 800becc:	2000135c 	.word	0x2000135c

0800bed0 <LoRaMacCryptoSecureMessage>:
{
 800bed0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bed2:	0005      	movs	r5, r0
 800bed4:	001c      	movs	r4, r3
 800bed6:	b089      	sub	sp, #36	@ 0x24
    if( macMsg == NULL )
 800bed8:	2b00      	cmp	r3, #0
 800beda:	d102      	bne.n	800bee2 <LoRaMacCryptoSecureMessage+0x12>
        return LORAMAC_CRYPTO_ERROR_NPE;
 800bedc:	200a      	movs	r0, #10
}
 800bede:	b009      	add	sp, #36	@ 0x24
 800bee0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if( fCntUp < CryptoNvm->FCntList.FCntUp )
 800bee2:	4b2b      	ldr	r3, [pc, #172]	@ (800bf90 <LoRaMacCryptoSecureMessage+0xc0>)
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 800bee4:	2006      	movs	r0, #6
    if( fCntUp < CryptoNvm->FCntList.FCntUp )
 800bee6:	681b      	ldr	r3, [r3, #0]
 800bee8:	68db      	ldr	r3, [r3, #12]
 800beea:	42ab      	cmp	r3, r5
 800beec:	d8f7      	bhi.n	800bede <LoRaMacCryptoSecureMessage+0xe>
    if( macMsg->FPort == 0 )
 800beee:	1c62      	adds	r2, r4, #1
 800bef0:	7fd2      	ldrb	r2, [r2, #31]
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 800bef2:	1e51      	subs	r1, r2, #1
 800bef4:	418a      	sbcs	r2, r1
 800bef6:	3202      	adds	r2, #2
    if( fCntUp > CryptoNvm->FCntList.FCntUp )
 800bef8:	42ab      	cmp	r3, r5
 800befa:	d306      	bcc.n	800bf0a <LoRaMacCryptoSecureMessage+0x3a>
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 800befc:	0020      	movs	r0, r4
 800befe:	f000 fa2e 	bl	800c35e <LoRaMacSerializerData>
 800bf02:	1e03      	subs	r3, r0, #0
 800bf04:	d00e      	beq.n	800bf24 <LoRaMacCryptoSecureMessage+0x54>
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 800bf06:	2011      	movs	r0, #17
 800bf08:	e7e9      	b.n	800bede <LoRaMacCryptoSecureMessage+0xe>
        retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, macMsg->FHDR.DevAddr, UPLINK, fCntUp );
 800bf0a:	0023      	movs	r3, r4
 800bf0c:	3328      	adds	r3, #40	@ 0x28
 800bf0e:	7819      	ldrb	r1, [r3, #0]
 800bf10:	2300      	movs	r3, #0
 800bf12:	9501      	str	r5, [sp, #4]
 800bf14:	9300      	str	r3, [sp, #0]
 800bf16:	68a3      	ldr	r3, [r4, #8]
 800bf18:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800bf1a:	f7ff fe70 	bl	800bbfe <PayloadEncrypt>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 800bf1e:	2800      	cmp	r0, #0
 800bf20:	d0ec      	beq.n	800befc <LoRaMacCryptoSecureMessage+0x2c>
 800bf22:	e7dc      	b.n	800bede <LoRaMacCryptoSecureMessage+0xe>
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), payloadDecryptionKeyID, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 800bf24:	7926      	ldrb	r6, [r4, #4]
 800bf26:	8920      	ldrh	r0, [r4, #8]
 800bf28:	3e04      	subs	r6, #4
 800bf2a:	6821      	ldr	r1, [r4, #0]
 800bf2c:	b2b2      	uxth	r2, r6
 800bf2e:	68a7      	ldr	r7, [r4, #8]
 800bf30:	9202      	str	r2, [sp, #8]
 800bf32:	9003      	str	r0, [sp, #12]
    if( ( msg == 0 ) || ( cmac == 0 ) )
 800bf34:	2900      	cmp	r1, #0
 800bf36:	d0d1      	beq.n	800bedc <LoRaMacCryptoSecureMessage+0xc>
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 800bf38:	2080      	movs	r0, #128	@ 0x80
 800bf3a:	0040      	lsls	r0, r0, #1
 800bf3c:	4684      	mov	ip, r0
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 800bf3e:	38f2      	subs	r0, #242	@ 0xf2
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 800bf40:	4562      	cmp	r2, ip
 800bf42:	d8cc      	bhi.n	800bede <LoRaMacCryptoSecureMessage+0xe>
    b0[0] = 0x49;
 800bf44:	303b      	adds	r0, #59	@ 0x3b
 800bf46:	9004      	str	r0, [sp, #16]
    b0[4] = 0x00;
 800bf48:	a804      	add	r0, sp, #16
 800bf4a:	8083      	strh	r3, [r0, #4]
    b0[14] = 0x00;
 800bf4c:	7383      	strb	r3, [r0, #14]
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), payloadDecryptionKeyID, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 800bf4e:	0023      	movs	r3, r4
    b0[6] = devAddr & 0xFF;
 800bf50:	9a03      	ldr	r2, [sp, #12]
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), payloadDecryptionKeyID, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 800bf52:	332c      	adds	r3, #44	@ 0x2c
    b0[6] = devAddr & 0xFF;
 800bf54:	80c2      	strh	r2, [r0, #6]
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 800bf56:	0c3a      	lsrs	r2, r7, #16
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 800bf58:	0e3f      	lsrs	r7, r7, #24
 800bf5a:	7247      	strb	r7, [r0, #9]
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 800bf5c:	0c2f      	lsrs	r7, r5, #16
 800bf5e:	7307      	strb	r7, [r0, #12]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 800bf60:	0e2f      	lsrs	r7, r5, #24
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 800bf62:	7202      	strb	r2, [r0, #8]
    b0[10] = fCnt & 0xFF;
 800bf64:	8145      	strh	r5, [r0, #10]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 800bf66:	7347      	strb	r7, [r0, #13]
    b0[15] = msgLen & 0xFF;
 800bf68:	73c6      	strb	r6, [r0, #15]
    if( SecureElementComputeAesCmac( micBuff, msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
 800bf6a:	9a02      	ldr	r2, [sp, #8]
 800bf6c:	9300      	str	r3, [sp, #0]
 800bf6e:	2302      	movs	r3, #2
 800bf70:	f7fb fd2c 	bl	80079cc <SecureElementComputeAesCmac>
 800bf74:	2800      	cmp	r0, #0
 800bf76:	d001      	beq.n	800bf7c <LoRaMacCryptoSecureMessage+0xac>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800bf78:	200f      	movs	r0, #15
 800bf7a:	e7b0      	b.n	800bede <LoRaMacCryptoSecureMessage+0xe>
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 800bf7c:	0020      	movs	r0, r4
 800bf7e:	f000 f9ee 	bl	800c35e <LoRaMacSerializerData>
 800bf82:	2800      	cmp	r0, #0
 800bf84:	d1bf      	bne.n	800bf06 <LoRaMacCryptoSecureMessage+0x36>
    CryptoNvm->FCntList.FCntUp = fCntUp;
 800bf86:	4b02      	ldr	r3, [pc, #8]	@ (800bf90 <LoRaMacCryptoSecureMessage+0xc0>)
 800bf88:	681b      	ldr	r3, [r3, #0]
 800bf8a:	60dd      	str	r5, [r3, #12]
    return LORAMAC_CRYPTO_SUCCESS;
 800bf8c:	e7a7      	b.n	800bede <LoRaMacCryptoSecureMessage+0xe>
 800bf8e:	46c0      	nop			@ (mov r8, r8)
 800bf90:	2000135c 	.word	0x2000135c

0800bf94 <LoRaMacCryptoUnsecureMessage>:
{
 800bf94:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bf96:	b087      	sub	sp, #28
 800bf98:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 800bf9a:	001c      	movs	r4, r3
 800bf9c:	0007      	movs	r7, r0
 800bf9e:	000e      	movs	r6, r1
        return LORAMAC_CRYPTO_ERROR_NPE;
 800bfa0:	230a      	movs	r3, #10
{
 800bfa2:	9203      	str	r2, [sp, #12]
    if( macMsg == 0 )
 800bfa4:	2d00      	cmp	r5, #0
 800bfa6:	d008      	beq.n	800bfba <LoRaMacCryptoUnsecureMessage+0x26>
    uint32_t lastDown = 0;
 800bfa8:	2300      	movs	r3, #0
    if( GetLastFcntDown( fCntID, &lastDown ) != LORAMAC_CRYPTO_SUCCESS )
 800bfaa:	0010      	movs	r0, r2
 800bfac:	a905      	add	r1, sp, #20
    uint32_t lastDown = 0;
 800bfae:	9305      	str	r3, [sp, #20]
    if( GetLastFcntDown( fCntID, &lastDown ) != LORAMAC_CRYPTO_SUCCESS )
 800bfb0:	f7ff fe8e 	bl	800bcd0 <GetLastFcntDown.constprop.0>
 800bfb4:	2800      	cmp	r0, #0
 800bfb6:	d003      	beq.n	800bfc0 <LoRaMacCryptoUnsecureMessage+0x2c>
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 800bfb8:	2306      	movs	r3, #6
}
 800bfba:	0018      	movs	r0, r3
 800bfbc:	b007      	add	sp, #28
 800bfbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if( ( currentDown > lastDown ) ||
 800bfc0:	9b05      	ldr	r3, [sp, #20]
 800bfc2:	429c      	cmp	r4, r3
 800bfc4:	d801      	bhi.n	800bfca <LoRaMacCryptoUnsecureMessage+0x36>
 800bfc6:	3301      	adds	r3, #1
 800bfc8:	d1f6      	bne.n	800bfb8 <LoRaMacCryptoUnsecureMessage+0x24>
    if( LoRaMacParserData( macMsg ) != LORAMAC_PARSER_SUCCESS )
 800bfca:	0028      	movs	r0, r5
 800bfcc:	f000 f938 	bl	800c240 <LoRaMacParserData>
        return LORAMAC_CRYPTO_ERROR_PARSER;
 800bfd0:	2310      	movs	r3, #16
    if( LoRaMacParserData( macMsg ) != LORAMAC_PARSER_SUCCESS )
 800bfd2:	2800      	cmp	r0, #0
 800bfd4:	d1f1      	bne.n	800bfba <LoRaMacCryptoUnsecureMessage+0x26>
        if( KeyAddrList[i].AddrID == addrID )
 800bfd6:	4a20      	ldr	r2, [pc, #128]	@ (800c058 <LoRaMacCryptoUnsecureMessage+0xc4>)
 800bfd8:	7813      	ldrb	r3, [r2, #0]
 800bfda:	42bb      	cmp	r3, r7
 800bfdc:	d004      	beq.n	800bfe8 <LoRaMacCryptoUnsecureMessage+0x54>
 800bfde:	7911      	ldrb	r1, [r2, #4]
    return LORAMAC_CRYPTO_ERROR_INVALID_ADDR_ID;
 800bfe0:	230c      	movs	r3, #12
        if( KeyAddrList[i].AddrID == addrID )
 800bfe2:	42b9      	cmp	r1, r7
 800bfe4:	d1e9      	bne.n	800bfba <LoRaMacCryptoUnsecureMessage+0x26>
 800bfe6:	3001      	adds	r0, #1
    if( address != macMsg->FHDR.DevAddr )
 800bfe8:	68a9      	ldr	r1, [r5, #8]
        return LORAMAC_CRYPTO_FAIL_ADDRESS;
 800bfea:	2302      	movs	r3, #2
    if( address != macMsg->FHDR.DevAddr )
 800bfec:	42b1      	cmp	r1, r6
 800bfee:	d1e4      	bne.n	800bfba <LoRaMacCryptoUnsecureMessage+0x26>
    payloadDecryptionKeyID = curItem->AppSkey;
 800bff0:	4098      	lsls	r0, r3
    retval = VerifyCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, isAck, DOWNLINK, address, fCntDown, macMsg->MIC );
 800bff2:	7929      	ldrb	r1, [r5, #4]
 800bff4:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
    payloadDecryptionKeyID = curItem->AppSkey;
 800bff6:	1812      	adds	r2, r2, r0
 800bff8:	7857      	ldrb	r7, [r2, #1]
    retval = VerifyCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, isAck, DOWNLINK, address, fCntDown, macMsg->MIC );
 800bffa:	3904      	subs	r1, #4
 800bffc:	7892      	ldrb	r2, [r2, #2]
 800bffe:	9301      	str	r3, [sp, #4]
 800c000:	9400      	str	r4, [sp, #0]
 800c002:	0033      	movs	r3, r6
 800c004:	6828      	ldr	r0, [r5, #0]
 800c006:	b289      	uxth	r1, r1
 800c008:	f7ff fe7c 	bl	800bd04 <VerifyCmacB0.constprop.0.isra.0>
 800c00c:	1e03      	subs	r3, r0, #0
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800c00e:	d1d4      	bne.n	800bfba <LoRaMacCryptoUnsecureMessage+0x26>
    if( macMsg->FPort == 0 )
 800c010:	1c6b      	adds	r3, r5, #1
 800c012:	7fdb      	ldrb	r3, [r3, #31]
 800c014:	2b00      	cmp	r3, #0
 800c016:	d100      	bne.n	800c01a <LoRaMacCryptoUnsecureMessage+0x86>
        payloadDecryptionKeyID = NWK_S_KEY;
 800c018:	2702      	movs	r7, #2
    retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, address, DOWNLINK, fCntDown );
 800c01a:	002b      	movs	r3, r5
 800c01c:	3328      	adds	r3, #40	@ 0x28
 800c01e:	7819      	ldrb	r1, [r3, #0]
 800c020:	2301      	movs	r3, #1
 800c022:	9401      	str	r4, [sp, #4]
 800c024:	9300      	str	r3, [sp, #0]
 800c026:	003a      	movs	r2, r7
 800c028:	0033      	movs	r3, r6
 800c02a:	6a68      	ldr	r0, [r5, #36]	@ 0x24
 800c02c:	f7ff fde7 	bl	800bbfe <PayloadEncrypt>
 800c030:	1e03      	subs	r3, r0, #0
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800c032:	d1c2      	bne.n	800bfba <LoRaMacCryptoUnsecureMessage+0x26>
    switch( fCntID )
 800c034:	9803      	ldr	r0, [sp, #12]
 800c036:	3801      	subs	r0, #1
 800c038:	2803      	cmp	r0, #3
 800c03a:	d8be      	bhi.n	800bfba <LoRaMacCryptoUnsecureMessage+0x26>
 800c03c:	4a07      	ldr	r2, [pc, #28]	@ (800c05c <LoRaMacCryptoUnsecureMessage+0xc8>)
            CryptoNvm->FCntList.McFCntDown[0] = currentDown;
 800c03e:	6812      	ldr	r2, [r2, #0]
    switch( fCntID )
 800c040:	f7f4 f874 	bl	800012c <__gnu_thumb1_case_uqi>
 800c044:	08060402 	.word	0x08060402
            CryptoNvm->FCntList.NFCntDown = currentDown;
 800c048:	6114      	str	r4, [r2, #16]
            break;
 800c04a:	e7b6      	b.n	800bfba <LoRaMacCryptoUnsecureMessage+0x26>
            CryptoNvm->FCntList.AFCntDown = currentDown;
 800c04c:	6154      	str	r4, [r2, #20]
            break;
 800c04e:	e7b4      	b.n	800bfba <LoRaMacCryptoUnsecureMessage+0x26>
            CryptoNvm->FCntList.FCntDown = currentDown;
 800c050:	6194      	str	r4, [r2, #24]
            break;
 800c052:	e7b2      	b.n	800bfba <LoRaMacCryptoUnsecureMessage+0x26>
            CryptoNvm->FCntList.McFCntDown[0] = currentDown;
 800c054:	61d4      	str	r4, [r2, #28]
            break;
 800c056:	e7b0      	b.n	800bfba <LoRaMacCryptoUnsecureMessage+0x26>
 800c058:	20000108 	.word	0x20000108
 800c05c:	2000135c 	.word	0x2000135c

0800c060 <LoRaMacCryptoDeriveMcRootKey>:
{
 800c060:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c062:	0004      	movs	r4, r0
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 800c064:	200b      	movs	r0, #11
    if( keyID != APP_KEY )
 800c066:	2900      	cmp	r1, #0
 800c068:	d111      	bne.n	800c08e <LoRaMacCryptoDeriveMcRootKey+0x2e>
    uint8_t compBase[16] = { 0 };
 800c06a:	220c      	movs	r2, #12
 800c06c:	a801      	add	r0, sp, #4
 800c06e:	9100      	str	r1, [sp, #0]
 800c070:	f003 fe9e 	bl	800fdb0 <memset>
    if( versionMinor == 1 )
 800c074:	2c01      	cmp	r4, #1
 800c076:	d102      	bne.n	800c07e <LoRaMacCryptoDeriveMcRootKey+0x1e>
        compBase[0] = 0x20;
 800c078:	2320      	movs	r3, #32
 800c07a:	466a      	mov	r2, sp
 800c07c:	7013      	strb	r3, [r2, #0]
    if( SecureElementDeriveAndStoreKey( compBase, keyID, MC_ROOT_KEY ) != SECURE_ELEMENT_SUCCESS )
 800c07e:	2204      	movs	r2, #4
 800c080:	2100      	movs	r1, #0
 800c082:	4668      	mov	r0, sp
 800c084:	f7fb fd35 	bl	8007af2 <SecureElementDeriveAndStoreKey>
 800c088:	2800      	cmp	r0, #0
 800c08a:	d000      	beq.n	800c08e <LoRaMacCryptoDeriveMcRootKey+0x2e>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800c08c:	200f      	movs	r0, #15
}
 800c08e:	b004      	add	sp, #16
 800c090:	bd10      	pop	{r4, pc}
	...

0800c094 <LoRaMacCryptoSetKey>:
{
 800c094:	b570      	push	{r4, r5, r6, lr}
 800c096:	0005      	movs	r5, r0
    if( SecureElementSetKey( keyID, key ) != SECURE_ELEMENT_SUCCESS )
 800c098:	f7fb fd22 	bl	8007ae0 <SecureElementSetKey>
 800c09c:	1e04      	subs	r4, r0, #0
 800c09e:	d002      	beq.n	800c0a6 <LoRaMacCryptoSetKey+0x12>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800c0a0:	240f      	movs	r4, #15
}
 800c0a2:	0020      	movs	r0, r4
 800c0a4:	bd70      	pop	{r4, r5, r6, pc}
    if( keyID == APP_KEY )
 800c0a6:	2d00      	cmp	r5, #0
 800c0a8:	d1fb      	bne.n	800c0a2 <LoRaMacCryptoSetKey+0xe>
        if( LoRaMacCryptoDeriveMcRootKey( CryptoNvm->LrWanVersion.Fields.Minor, keyID ) != LORAMAC_CRYPTO_SUCCESS )
 800c0aa:	4b06      	ldr	r3, [pc, #24]	@ (800c0c4 <LoRaMacCryptoSetKey+0x30>)
 800c0ac:	0021      	movs	r1, r4
 800c0ae:	681b      	ldr	r3, [r3, #0]
 800c0b0:	7898      	ldrb	r0, [r3, #2]
 800c0b2:	f7ff ffd5 	bl	800c060 <LoRaMacCryptoDeriveMcRootKey>
 800c0b6:	2800      	cmp	r0, #0
 800c0b8:	d1f2      	bne.n	800c0a0 <LoRaMacCryptoSetKey+0xc>
    if( keyID != MC_ROOT_KEY )
 800c0ba:	f7ff fdf7 	bl	800bcac <LoRaMacCryptoDeriveMcKEKey.part.0>
        if( LoRaMacCryptoDeriveMcKEKey( MC_ROOT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 800c0be:	2800      	cmp	r0, #0
 800c0c0:	d0ef      	beq.n	800c0a2 <LoRaMacCryptoSetKey+0xe>
 800c0c2:	e7ed      	b.n	800c0a0 <LoRaMacCryptoSetKey+0xc>
 800c0c4:	2000135c 	.word	0x2000135c

0800c0c8 <LoRaMacCryptoHandleJoinAccept>:
{
 800c0c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c0ca:	b091      	sub	sp, #68	@ 0x44
 800c0cc:	9005      	str	r0, [sp, #20]
 800c0ce:	000e      	movs	r6, r1
 800c0d0:	0014      	movs	r4, r2
        return LORAMAC_CRYPTO_ERROR_NPE;
 800c0d2:	200a      	movs	r0, #10
    if( ( macMsg == 0 ) || ( joinEUI == 0 ) )
 800c0d4:	2a00      	cmp	r2, #0
 800c0d6:	d062      	beq.n	800c19e <LoRaMacCryptoHandleJoinAccept+0xd6>
 800c0d8:	2900      	cmp	r1, #0
 800c0da:	d060      	beq.n	800c19e <LoRaMacCryptoHandleJoinAccept+0xd6>
    uint8_t decJoinAccept[LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE] = { 0 };
 800c0dc:	2700      	movs	r7, #0
    uint8_t versionMinor         = 0;
 800c0de:	2513      	movs	r5, #19
    uint8_t decJoinAccept[LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE] = { 0 };
 800c0e0:	0039      	movs	r1, r7
 800c0e2:	221d      	movs	r2, #29
 800c0e4:	a808      	add	r0, sp, #32
 800c0e6:	9707      	str	r7, [sp, #28]
 800c0e8:	f003 fe62 	bl	800fdb0 <memset>
    uint8_t versionMinor         = 0;
 800c0ec:	ab02      	add	r3, sp, #8
 800c0ee:	18ed      	adds	r5, r5, r3
 800c0f0:	702f      	strb	r7, [r5, #0]
    uint16_t nonce               = CryptoNvm->DevNonce;
 800c0f2:	4f2c      	ldr	r7, [pc, #176]	@ (800c1a4 <LoRaMacCryptoHandleJoinAccept+0xdc>)
    if( SecureElementProcessJoinAccept( joinReqType, joinEUI, nonce, macMsg->Buffer,
 800c0f4:	0031      	movs	r1, r6
    uint16_t nonce               = CryptoNvm->DevNonce;
 800c0f6:	683b      	ldr	r3, [r7, #0]
    if( SecureElementProcessJoinAccept( joinReqType, joinEUI, nonce, macMsg->Buffer,
 800c0f8:	9805      	ldr	r0, [sp, #20]
    uint16_t nonce               = CryptoNvm->DevNonce;
 800c0fa:	889b      	ldrh	r3, [r3, #4]
    if( SecureElementProcessJoinAccept( joinReqType, joinEUI, nonce, macMsg->Buffer,
 800c0fc:	9502      	str	r5, [sp, #8]
    uint16_t nonce               = CryptoNvm->DevNonce;
 800c0fe:	9304      	str	r3, [sp, #16]
    if( SecureElementProcessJoinAccept( joinReqType, joinEUI, nonce, macMsg->Buffer,
 800c100:	ab07      	add	r3, sp, #28
 800c102:	9301      	str	r3, [sp, #4]
 800c104:	7923      	ldrb	r3, [r4, #4]
 800c106:	9a04      	ldr	r2, [sp, #16]
 800c108:	9300      	str	r3, [sp, #0]
 800c10a:	6823      	ldr	r3, [r4, #0]
 800c10c:	f7fb fd11 	bl	8007b32 <SecureElementProcessJoinAccept>
 800c110:	0003      	movs	r3, r0
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800c112:	200f      	movs	r0, #15
    if( SecureElementProcessJoinAccept( joinReqType, joinEUI, nonce, macMsg->Buffer,
 800c114:	2b00      	cmp	r3, #0
 800c116:	d142      	bne.n	800c19e <LoRaMacCryptoHandleJoinAccept+0xd6>
    memcpy1( macMsg->Buffer, decJoinAccept, macMsg->BufSize );
 800c118:	a907      	add	r1, sp, #28
 800c11a:	7922      	ldrb	r2, [r4, #4]
 800c11c:	6820      	ldr	r0, [r4, #0]
 800c11e:	f001 fb31 	bl	800d784 <memcpy1>
    if( LoRaMacParserJoinAccept( macMsg ) != LORAMAC_PARSER_SUCCESS )
 800c122:	0020      	movs	r0, r4
 800c124:	f000 f840 	bl	800c1a8 <LoRaMacParserJoinAccept>
 800c128:	0001      	movs	r1, r0
        return LORAMAC_CRYPTO_ERROR_PARSER;
 800c12a:	2010      	movs	r0, #16
    if( LoRaMacParserJoinAccept( macMsg ) != LORAMAC_PARSER_SUCCESS )
 800c12c:	2900      	cmp	r1, #0
 800c12e:	d136      	bne.n	800c19e <LoRaMacCryptoHandleJoinAccept+0xd6>
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[2] << 16 );
 800c130:	7a22      	ldrb	r2, [r4, #8]
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[1] << 8 );
 800c132:	79e6      	ldrb	r6, [r4, #7]
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[2] << 16 );
 800c134:	4082      	lsls	r2, r0
    currentJoinNonce = ( uint32_t )macMsg->JoinNonce[0];
 800c136:	79a3      	ldrb	r3, [r4, #6]
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[1] << 8 );
 800c138:	0236      	lsls	r6, r6, #8
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[2] << 16 );
 800c13a:	4316      	orrs	r6, r2
 800c13c:	431e      	orrs	r6, r3
    if( currentJoinNonce != CryptoNvm->JoinNonce )
 800c13e:	683b      	ldr	r3, [r7, #0]
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
 800c140:	380d      	subs	r0, #13
    if( currentJoinNonce != CryptoNvm->JoinNonce )
 800c142:	689a      	ldr	r2, [r3, #8]
 800c144:	42b2      	cmp	r2, r6
 800c146:	d02a      	beq.n	800c19e <LoRaMacCryptoHandleJoinAccept+0xd6>
    retval = LoRaMacCryptoDeriveMcRootKey( versionMinor, APP_KEY );
 800c148:	7828      	ldrb	r0, [r5, #0]
        CryptoNvm->JoinNonce = currentJoinNonce;
 800c14a:	609e      	str	r6, [r3, #8]
    retval = LoRaMacCryptoDeriveMcRootKey( versionMinor, APP_KEY );
 800c14c:	f7ff ff88 	bl	800c060 <LoRaMacCryptoDeriveMcRootKey>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800c150:	2800      	cmp	r0, #0
 800c152:	d124      	bne.n	800c19e <LoRaMacCryptoHandleJoinAccept+0xd6>
    if( keyID != MC_ROOT_KEY )
 800c154:	f7ff fdaa 	bl	800bcac <LoRaMacCryptoDeriveMcKEKey.part.0>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800c158:	2800      	cmp	r0, #0
 800c15a:	d120      	bne.n	800c19e <LoRaMacCryptoHandleJoinAccept+0xd6>
        netID |= ( ( uint32_t )macMsg->NetID[1] << 8 );
 800c15c:	7aa3      	ldrb	r3, [r4, #10]
        netID |= ( ( uint32_t )macMsg->NetID[2] << 16 );
 800c15e:	7ae2      	ldrb	r2, [r4, #11]
        netID = ( uint32_t )macMsg->NetID[0];
 800c160:	7a61      	ldrb	r1, [r4, #9]
        netID |= ( ( uint32_t )macMsg->NetID[2] << 16 );
 800c162:	0412      	lsls	r2, r2, #16
        netID |= ( ( uint32_t )macMsg->NetID[1] << 8 );
 800c164:	021b      	lsls	r3, r3, #8
        netID |= ( ( uint32_t )macMsg->NetID[2] << 16 );
 800c166:	4313      	orrs	r3, r2
 800c168:	430b      	orrs	r3, r1
 800c16a:	001c      	movs	r4, r3
        retval = DeriveSessionKey10x( APP_S_KEY, currentJoinNonce, netID, nonce );
 800c16c:	0031      	movs	r1, r6
 800c16e:	0022      	movs	r2, r4
 800c170:	9b04      	ldr	r3, [sp, #16]
 800c172:	3003      	adds	r0, #3
 800c174:	f7ff fd20 	bl	800bbb8 <DeriveSessionKey10x>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 800c178:	2800      	cmp	r0, #0
 800c17a:	d110      	bne.n	800c19e <LoRaMacCryptoHandleJoinAccept+0xd6>
        retval = DeriveSessionKey10x( NWK_S_KEY, currentJoinNonce, netID, nonce );
 800c17c:	0022      	movs	r2, r4
 800c17e:	0031      	movs	r1, r6
 800c180:	9b04      	ldr	r3, [sp, #16]
 800c182:	3002      	adds	r0, #2
 800c184:	f7ff fd18 	bl	800bbb8 <DeriveSessionKey10x>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 800c188:	2800      	cmp	r0, #0
 800c18a:	d108      	bne.n	800c19e <LoRaMacCryptoHandleJoinAccept+0xd6>
    CryptoNvm->LrWanVersion.Fields.Minor = versionMinor;
 800c18c:	683b      	ldr	r3, [r7, #0]
 800c18e:	782a      	ldrb	r2, [r5, #0]
    CryptoNvm->FCntList.FCntUp = 0;
 800c190:	60d8      	str	r0, [r3, #12]
    CryptoNvm->LrWanVersion.Fields.Minor = versionMinor;
 800c192:	709a      	strb	r2, [r3, #2]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 800c194:	2201      	movs	r2, #1
 800c196:	4252      	negs	r2, r2
 800c198:	619a      	str	r2, [r3, #24]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 800c19a:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITAL_VALUE;
 800c19c:	615a      	str	r2, [r3, #20]
}
 800c19e:	b011      	add	sp, #68	@ 0x44
 800c1a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c1a2:	46c0      	nop			@ (mov r8, r8)
 800c1a4:	2000135c 	.word	0x2000135c

0800c1a8 <LoRaMacParserJoinAccept>:
 */
#include "LoRaMacParser.h"
#include "utilities.h"

LoRaMacParserStatus_t LoRaMacParserJoinAccept( LoRaMacMessageJoinAccept_t* macMsg )
{
 800c1a8:	b510      	push	{r4, lr}
 800c1aa:	0004      	movs	r4, r0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
    {
        return LORAMAC_PARSER_ERROR_NPE;
 800c1ac:	2002      	movs	r0, #2
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800c1ae:	2c00      	cmp	r4, #0
 800c1b0:	d040      	beq.n	800c234 <LoRaMacParserJoinAccept+0x8c>
 800c1b2:	6821      	ldr	r1, [r4, #0]
 800c1b4:	2900      	cmp	r1, #0
 800c1b6:	d03d      	beq.n	800c234 <LoRaMacParserJoinAccept+0x8c>
    }

    uint16_t bufItr = 0;

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 800c1b8:	780b      	ldrb	r3, [r1, #0]

    memcpy1( macMsg->JoinNonce, &macMsg->Buffer[bufItr], 3 );
 800c1ba:	2203      	movs	r2, #3
    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 800c1bc:	7163      	strb	r3, [r4, #5]
    memcpy1( macMsg->JoinNonce, &macMsg->Buffer[bufItr], 3 );
 800c1be:	3101      	adds	r1, #1
 800c1c0:	1da0      	adds	r0, r4, #6
 800c1c2:	f001 fadf 	bl	800d784 <memcpy1>
    bufItr = bufItr + 3;

    memcpy1( macMsg->NetID, &macMsg->Buffer[bufItr], 3 );
 800c1c6:	0020      	movs	r0, r4
 800c1c8:	6821      	ldr	r1, [r4, #0]
 800c1ca:	2203      	movs	r2, #3
 800c1cc:	3104      	adds	r1, #4
 800c1ce:	3009      	adds	r0, #9
 800c1d0:	f001 fad8 	bl	800d784 <memcpy1>
    bufItr = bufItr + 3;

    macMsg->DevAddr = ( uint32_t ) macMsg->Buffer[bufItr++];
 800c1d4:	6821      	ldr	r1, [r4, #0]
 800c1d6:	79cb      	ldrb	r3, [r1, #7]
 800c1d8:	60e3      	str	r3, [r4, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 800c1da:	7a0a      	ldrb	r2, [r1, #8]
 800c1dc:	0212      	lsls	r2, r2, #8
 800c1de:	431a      	orrs	r2, r3
 800c1e0:	60e2      	str	r2, [r4, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 800c1e2:	7a4b      	ldrb	r3, [r1, #9]
 800c1e4:	041b      	lsls	r3, r3, #16
 800c1e6:	4313      	orrs	r3, r2
 800c1e8:	60e3      	str	r3, [r4, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 800c1ea:	7a8a      	ldrb	r2, [r1, #10]
 800c1ec:	0612      	lsls	r2, r2, #24
 800c1ee:	4313      	orrs	r3, r2
 800c1f0:	60e3      	str	r3, [r4, #12]

    macMsg->DLSettings.Value = macMsg->Buffer[bufItr++];
 800c1f2:	7acb      	ldrb	r3, [r1, #11]
 800c1f4:	7423      	strb	r3, [r4, #16]

    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 800c1f6:	7b0b      	ldrb	r3, [r1, #12]
 800c1f8:	7463      	strb	r3, [r4, #17]

    if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) == LORAMAC_CF_LIST_FIELD_SIZE )
 800c1fa:	7923      	ldrb	r3, [r4, #4]
 800c1fc:	2b21      	cmp	r3, #33	@ 0x21
 800c1fe:	d11a      	bne.n	800c236 <LoRaMacParserJoinAccept+0x8e>
    {
        memcpy1( macMsg->CFList, &macMsg->Buffer[bufItr], LORAMAC_CF_LIST_FIELD_SIZE );
 800c200:	0020      	movs	r0, r4
 800c202:	2210      	movs	r2, #16
 800c204:	310d      	adds	r1, #13
 800c206:	3012      	adds	r0, #18
 800c208:	f001 fabc 	bl	800d784 <memcpy1>
        bufItr = bufItr + LORAMAC_CF_LIST_FIELD_SIZE;
 800c20c:	231d      	movs	r3, #29
    else if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) > 0 )
    {
        return LORAMAC_PARSER_FAIL;
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[bufItr++];
 800c20e:	6820      	ldr	r0, [r4, #0]
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 800c210:	1c59      	adds	r1, r3, #1
    macMsg->MIC = ( uint32_t ) macMsg->Buffer[bufItr++];
 800c212:	5cc2      	ldrb	r2, [r0, r3]
 800c214:	6262      	str	r2, [r4, #36]	@ 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 800c216:	5c41      	ldrb	r1, [r0, r1]
 800c218:	0209      	lsls	r1, r1, #8
 800c21a:	4311      	orrs	r1, r2
 800c21c:	6261      	str	r1, [r4, #36]	@ 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 800c21e:	1c9a      	adds	r2, r3, #2
 800c220:	5c82      	ldrb	r2, [r0, r2]
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 800c222:	3303      	adds	r3, #3
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 800c224:	0412      	lsls	r2, r2, #16
 800c226:	430a      	orrs	r2, r1
 800c228:	6262      	str	r2, [r4, #36]	@ 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 800c22a:	5cc3      	ldrb	r3, [r0, r3]

    return LORAMAC_PARSER_SUCCESS;
 800c22c:	2000      	movs	r0, #0
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 800c22e:	061b      	lsls	r3, r3, #24
 800c230:	4313      	orrs	r3, r2
 800c232:	6263      	str	r3, [r4, #36]	@ 0x24
}
 800c234:	bd10      	pop	{r4, pc}
        return LORAMAC_PARSER_FAIL;
 800c236:	2001      	movs	r0, #1
    else if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) > 0 )
 800c238:	2b11      	cmp	r3, #17
 800c23a:	dcfb      	bgt.n	800c234 <LoRaMacParserJoinAccept+0x8c>
    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 800c23c:	230d      	movs	r3, #13
 800c23e:	e7e6      	b.n	800c20e <LoRaMacParserJoinAccept+0x66>

0800c240 <LoRaMacParserData>:

LoRaMacParserStatus_t LoRaMacParserData( LoRaMacMessageData_t* macMsg )
{
 800c240:	b570      	push	{r4, r5, r6, lr}
 800c242:	0004      	movs	r4, r0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
    {
        return LORAMAC_PARSER_ERROR_NPE;
 800c244:	2002      	movs	r0, #2
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800c246:	2c00      	cmp	r4, #0
 800c248:	d053      	beq.n	800c2f2 <LoRaMacParserData+0xb2>
 800c24a:	6821      	ldr	r1, [r4, #0]
 800c24c:	2900      	cmp	r1, #0
 800c24e:	d050      	beq.n	800c2f2 <LoRaMacParserData+0xb2>
    }

    uint16_t bufItr = 0;

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 800c250:	780b      	ldrb	r3, [r1, #0]
    macMsg->FHDR.FCnt = macMsg->Buffer[bufItr++];
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;

    if( macMsg->FHDR.FCtrl.Bits.FOptsLen <= 15 )
    {
        memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 800c252:	0020      	movs	r0, r4
    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 800c254:	7163      	strb	r3, [r4, #5]
    macMsg->FHDR.DevAddr = macMsg->Buffer[bufItr++];
 800c256:	784b      	ldrb	r3, [r1, #1]
        memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 800c258:	3010      	adds	r0, #16
    macMsg->FHDR.DevAddr = macMsg->Buffer[bufItr++];
 800c25a:	60a3      	str	r3, [r4, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 800c25c:	788a      	ldrb	r2, [r1, #2]
    {
        return LORAMAC_PARSER_FAIL;
    }

    // Initialize anyway with zero.
    macMsg->FPort = 0;
 800c25e:	1c65      	adds	r5, r4, #1
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 800c260:	0212      	lsls	r2, r2, #8
 800c262:	431a      	orrs	r2, r3
 800c264:	60a2      	str	r2, [r4, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 800c266:	78cb      	ldrb	r3, [r1, #3]
 800c268:	041b      	lsls	r3, r3, #16
 800c26a:	4313      	orrs	r3, r2
 800c26c:	60a3      	str	r3, [r4, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 800c26e:	790a      	ldrb	r2, [r1, #4]
 800c270:	0612      	lsls	r2, r2, #24
 800c272:	4313      	orrs	r3, r2
 800c274:	60a3      	str	r3, [r4, #8]
    macMsg->FHDR.FCtrl.Value = macMsg->Buffer[bufItr++];
 800c276:	794b      	ldrb	r3, [r1, #5]
 800c278:	7323      	strb	r3, [r4, #12]
    macMsg->FHDR.FCnt = macMsg->Buffer[bufItr++];
 800c27a:	798b      	ldrb	r3, [r1, #6]
 800c27c:	81e3      	strh	r3, [r4, #14]
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;
 800c27e:	79ca      	ldrb	r2, [r1, #7]
        memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 800c280:	3108      	adds	r1, #8
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;
 800c282:	0212      	lsls	r2, r2, #8
 800c284:	4313      	orrs	r3, r2
        memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 800c286:	7b22      	ldrb	r2, [r4, #12]
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;
 800c288:	81e3      	strh	r3, [r4, #14]
        memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 800c28a:	0712      	lsls	r2, r2, #28
 800c28c:	0f12      	lsrs	r2, r2, #28
 800c28e:	f001 fa79 	bl	800d784 <memcpy1>
        bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 800c292:	7b23      	ldrb	r3, [r4, #12]
    macMsg->FRMPayloadSize = 0;
 800c294:	0020      	movs	r0, r4
    macMsg->FPort = 0;
 800c296:	2200      	movs	r2, #0
        bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 800c298:	071b      	lsls	r3, r3, #28
 800c29a:	0f1b      	lsrs	r3, r3, #28
 800c29c:	001e      	movs	r6, r3
    macMsg->FRMPayloadSize = 0;
 800c29e:	3028      	adds	r0, #40	@ 0x28
    macMsg->FPort = 0;
 800c2a0:	77ea      	strb	r2, [r5, #31]
    macMsg->FRMPayloadSize = 0;
 800c2a2:	7002      	strb	r2, [r0, #0]

    if( ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE ) > 0 )
 800c2a4:	7922      	ldrb	r2, [r4, #4]
        bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 800c2a6:	3608      	adds	r6, #8
    if( ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE ) > 0 )
 800c2a8:	1b91      	subs	r1, r2, r6
 800c2aa:	2904      	cmp	r1, #4
 800c2ac:	dd0b      	ble.n	800c2c6 <LoRaMacParserData+0x86>
    {
        macMsg->FPort = macMsg->Buffer[bufItr++];
 800c2ae:	6821      	ldr	r1, [r4, #0]
 800c2b0:	3309      	adds	r3, #9

        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
 800c2b2:	3a04      	subs	r2, #4
        macMsg->FPort = macMsg->Buffer[bufItr++];
 800c2b4:	5d8e      	ldrb	r6, [r1, r6]
        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
 800c2b6:	1ad2      	subs	r2, r2, r3
 800c2b8:	b2d2      	uxtb	r2, r2
        macMsg->FPort = macMsg->Buffer[bufItr++];
 800c2ba:	77ee      	strb	r6, [r5, #31]
        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
 800c2bc:	7002      	strb	r2, [r0, #0]
        memcpy1( macMsg->FRMPayload, &macMsg->Buffer[bufItr], macMsg->FRMPayloadSize );
 800c2be:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800c2c0:	18c9      	adds	r1, r1, r3
 800c2c2:	f001 fa5f 	bl	800d784 <memcpy1>
    macMsg->MIC = ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE )];
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 1] << 8 );
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 2] << 16 );
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 3] << 24 );

    return LORAMAC_PARSER_SUCCESS;
 800c2c6:	2000      	movs	r0, #0
    macMsg->MIC = ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE )];
 800c2c8:	7922      	ldrb	r2, [r4, #4]
 800c2ca:	6823      	ldr	r3, [r4, #0]
 800c2cc:	189b      	adds	r3, r3, r2
 800c2ce:	1f1a      	subs	r2, r3, #4
 800c2d0:	7812      	ldrb	r2, [r2, #0]
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 1] << 8 );
 800c2d2:	1ed9      	subs	r1, r3, #3
    macMsg->MIC = ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE )];
 800c2d4:	62e2      	str	r2, [r4, #44]	@ 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 1] << 8 );
 800c2d6:	7809      	ldrb	r1, [r1, #0]
 800c2d8:	0209      	lsls	r1, r1, #8
 800c2da:	4311      	orrs	r1, r2
 800c2dc:	62e1      	str	r1, [r4, #44]	@ 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 2] << 16 );
 800c2de:	1e9a      	subs	r2, r3, #2
 800c2e0:	7812      	ldrb	r2, [r2, #0]
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 3] << 24 );
 800c2e2:	3b01      	subs	r3, #1
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 2] << 16 );
 800c2e4:	0412      	lsls	r2, r2, #16
 800c2e6:	430a      	orrs	r2, r1
 800c2e8:	62e2      	str	r2, [r4, #44]	@ 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 3] << 24 );
 800c2ea:	781b      	ldrb	r3, [r3, #0]
 800c2ec:	061b      	lsls	r3, r3, #24
 800c2ee:	4313      	orrs	r3, r2
 800c2f0:	62e3      	str	r3, [r4, #44]	@ 0x2c
}
 800c2f2:	bd70      	pop	{r4, r5, r6, pc}

0800c2f4 <LoRaMacSerializerJoinRequest>:
 */
#include "LoRaMacSerializer.h"
#include "utilities.h"

LoRaMacSerializerStatus_t LoRaMacSerializerJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 800c2f4:	b510      	push	{r4, lr}
 800c2f6:	0004      	movs	r4, r0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 800c2f8:	2001      	movs	r0, #1
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800c2fa:	2c00      	cmp	r4, #0
 800c2fc:	d02e      	beq.n	800c35c <LoRaMacSerializerJoinRequest+0x68>
 800c2fe:	6823      	ldr	r3, [r4, #0]
 800c300:	2b00      	cmp	r3, #0
 800c302:	d02b      	beq.n	800c35c <LoRaMacSerializerJoinRequest+0x68>
    }

    uint16_t bufItr = 0;

    // Check macMsg->BufSize
    if( macMsg->BufSize < LORAMAC_JOIN_REQ_MSG_SIZE )
 800c304:	7922      	ldrb	r2, [r4, #4]
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 800c306:	1800      	adds	r0, r0, r0
    if( macMsg->BufSize < LORAMAC_JOIN_REQ_MSG_SIZE )
 800c308:	2a16      	cmp	r2, #22
 800c30a:	d927      	bls.n	800c35c <LoRaMacSerializerJoinRequest+0x68>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 800c30c:	7962      	ldrb	r2, [r4, #5]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->JoinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
 800c30e:	1da1      	adds	r1, r4, #6
    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 800c310:	701a      	strb	r2, [r3, #0]
    memcpyr( &macMsg->Buffer[bufItr], macMsg->JoinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
 800c312:	6820      	ldr	r0, [r4, #0]
 800c314:	2208      	movs	r2, #8
 800c316:	3001      	adds	r0, #1
 800c318:	f001 fa3d 	bl	800d796 <memcpyr>
    bufItr += LORAMAC_JOIN_EUI_FIELD_SIZE;

    memcpyr( &macMsg->Buffer[bufItr], macMsg->DevEUI, LORAMAC_DEV_EUI_FIELD_SIZE );
 800c31c:	0021      	movs	r1, r4
 800c31e:	6820      	ldr	r0, [r4, #0]
 800c320:	2208      	movs	r2, #8
 800c322:	3009      	adds	r0, #9
 800c324:	310e      	adds	r1, #14
 800c326:	f001 fa36 	bl	800d796 <memcpyr>
    bufItr += LORAMAC_DEV_EUI_FIELD_SIZE;

    macMsg->Buffer[bufItr++] = macMsg->DevNonce & 0xFF;
 800c32a:	6823      	ldr	r3, [r4, #0]
 800c32c:	8ae2      	ldrh	r2, [r4, #22]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;

    macMsg->BufSize = bufItr;

    return LORAMAC_SERIALIZER_SUCCESS;
 800c32e:	2000      	movs	r0, #0
    macMsg->Buffer[bufItr++] = macMsg->DevNonce & 0xFF;
 800c330:	745a      	strb	r2, [r3, #17]
    macMsg->Buffer[bufItr++] = ( macMsg->DevNonce >> 8 ) & 0xFF;
 800c332:	8ae3      	ldrh	r3, [r4, #22]
 800c334:	6822      	ldr	r2, [r4, #0]
 800c336:	0a1b      	lsrs	r3, r3, #8
 800c338:	7493      	strb	r3, [r2, #18]
    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 800c33a:	6823      	ldr	r3, [r4, #0]
 800c33c:	69a2      	ldr	r2, [r4, #24]
 800c33e:	74da      	strb	r2, [r3, #19]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 800c340:	69a3      	ldr	r3, [r4, #24]
 800c342:	6822      	ldr	r2, [r4, #0]
 800c344:	0a1b      	lsrs	r3, r3, #8
 800c346:	7513      	strb	r3, [r2, #20]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 800c348:	69a3      	ldr	r3, [r4, #24]
 800c34a:	6822      	ldr	r2, [r4, #0]
 800c34c:	0c1b      	lsrs	r3, r3, #16
 800c34e:	7553      	strb	r3, [r2, #21]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 800c350:	69a3      	ldr	r3, [r4, #24]
 800c352:	6822      	ldr	r2, [r4, #0]
 800c354:	0e1b      	lsrs	r3, r3, #24
 800c356:	7593      	strb	r3, [r2, #22]
    macMsg->BufSize = bufItr;
 800c358:	2317      	movs	r3, #23
 800c35a:	7123      	strb	r3, [r4, #4]
}
 800c35c:	bd10      	pop	{r4, pc}

0800c35e <LoRaMacSerializerData>:

    return LORAMAC_SERIALIZER_SUCCESS;
}

LoRaMacSerializerStatus_t LoRaMacSerializerData( LoRaMacMessageData_t* macMsg )
{
 800c35e:	b570      	push	{r4, r5, r6, lr}
 800c360:	0004      	movs	r4, r0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 800c362:	2001      	movs	r0, #1
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800c364:	2c00      	cmp	r4, #0
 800c366:	d068      	beq.n	800c43a <LoRaMacSerializerData+0xdc>
 800c368:	6821      	ldr	r1, [r4, #0]
        return LORAMAC_SERIALIZER_ERROR_NPE;
 800c36a:	2001      	movs	r0, #1
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800c36c:	2900      	cmp	r1, #0
 800c36e:	d064      	beq.n	800c43a <LoRaMacSerializerData+0xdc>
                               + LORAMAC_FHDR_F_CTRL_FIELD_SIZE
                               + LORAMAC_FHDR_F_CNT_FIELD_SIZE;

    computedBufSize += macMsg->FHDR.FCtrl.Bits.FOptsLen;

    if( macMsg->FRMPayloadSize > 0 )
 800c370:	0025      	movs	r5, r4
 800c372:	3528      	adds	r5, #40	@ 0x28
 800c374:	7828      	ldrb	r0, [r5, #0]
    computedBufSize += macMsg->FHDR.FCtrl.Bits.FOptsLen;
 800c376:	7b22      	ldrb	r2, [r4, #12]
 800c378:	0003      	movs	r3, r0
 800c37a:	1e5e      	subs	r6, r3, #1
 800c37c:	41b3      	sbcs	r3, r6
 800c37e:	0712      	lsls	r2, r2, #28
 800c380:	0f12      	lsrs	r2, r2, #28
 800c382:	189b      	adds	r3, r3, r2
    {
        computedBufSize += LORAMAC_F_PORT_FIELD_SIZE;
    }

    computedBufSize += macMsg->FRMPayloadSize;
    computedBufSize += LORAMAC_MIC_FIELD_SIZE;
 800c384:	3004      	adds	r0, #4
    computedBufSize += macMsg->FHDR.FCtrl.Bits.FOptsLen;
 800c386:	3308      	adds	r3, #8
    computedBufSize += LORAMAC_MIC_FIELD_SIZE;
 800c388:	181b      	adds	r3, r3, r0

    if( macMsg->BufSize < computedBufSize )
 800c38a:	7922      	ldrb	r2, [r4, #4]
 800c38c:	b29b      	uxth	r3, r3
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 800c38e:	2002      	movs	r0, #2
    if( macMsg->BufSize < computedBufSize )
 800c390:	429a      	cmp	r2, r3
 800c392:	d352      	bcc.n	800c43a <LoRaMacSerializerData+0xdc>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 800c394:	7963      	ldrb	r3, [r4, #5]
 800c396:	700b      	strb	r3, [r1, #0]
    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCtrl.Value;

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCnt & 0xFF;
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.FCnt >> 8 ) & 0xFF;

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FHDR.FOpts, macMsg->FHDR.FCtrl.Bits.FOptsLen );
 800c398:	0021      	movs	r1, r4
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr ) & 0xFF;
 800c39a:	6823      	ldr	r3, [r4, #0]
 800c39c:	68a2      	ldr	r2, [r4, #8]
    memcpy1( &macMsg->Buffer[bufItr], macMsg->FHDR.FOpts, macMsg->FHDR.FCtrl.Bits.FOptsLen );
 800c39e:	3110      	adds	r1, #16
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr ) & 0xFF;
 800c3a0:	705a      	strb	r2, [r3, #1]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 8 ) & 0xFF;
 800c3a2:	68a3      	ldr	r3, [r4, #8]
 800c3a4:	6822      	ldr	r2, [r4, #0]
 800c3a6:	0a1b      	lsrs	r3, r3, #8
 800c3a8:	7093      	strb	r3, [r2, #2]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 16 ) & 0xFF;
 800c3aa:	68a3      	ldr	r3, [r4, #8]
 800c3ac:	6822      	ldr	r2, [r4, #0]
 800c3ae:	0c1b      	lsrs	r3, r3, #16
 800c3b0:	70d3      	strb	r3, [r2, #3]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 24 ) & 0xFF;
 800c3b2:	68a3      	ldr	r3, [r4, #8]
 800c3b4:	6822      	ldr	r2, [r4, #0]
 800c3b6:	0e1b      	lsrs	r3, r3, #24
 800c3b8:	7113      	strb	r3, [r2, #4]
    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCtrl.Value;
 800c3ba:	6823      	ldr	r3, [r4, #0]
 800c3bc:	7b22      	ldrb	r2, [r4, #12]
 800c3be:	715a      	strb	r2, [r3, #5]
    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCnt & 0xFF;
 800c3c0:	6823      	ldr	r3, [r4, #0]
 800c3c2:	89e2      	ldrh	r2, [r4, #14]
 800c3c4:	719a      	strb	r2, [r3, #6]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.FCnt >> 8 ) & 0xFF;
 800c3c6:	89e3      	ldrh	r3, [r4, #14]
 800c3c8:	6822      	ldr	r2, [r4, #0]
 800c3ca:	0a1b      	lsrs	r3, r3, #8
 800c3cc:	71d3      	strb	r3, [r2, #7]
    memcpy1( &macMsg->Buffer[bufItr], macMsg->FHDR.FOpts, macMsg->FHDR.FCtrl.Bits.FOptsLen );
 800c3ce:	7b22      	ldrb	r2, [r4, #12]
 800c3d0:	6820      	ldr	r0, [r4, #0]
 800c3d2:	0712      	lsls	r2, r2, #28
 800c3d4:	0f12      	lsrs	r2, r2, #28
 800c3d6:	3008      	adds	r0, #8
 800c3d8:	f001 f9d4 	bl	800d784 <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 800c3dc:	7b23      	ldrb	r3, [r4, #12]

    if( macMsg->FRMPayloadSize > 0 )
 800c3de:	782a      	ldrb	r2, [r5, #0]
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 800c3e0:	071b      	lsls	r3, r3, #28
 800c3e2:	0f1b      	lsrs	r3, r3, #28
 800c3e4:	001e      	movs	r6, r3
 800c3e6:	3608      	adds	r6, #8
    if( macMsg->FRMPayloadSize > 0 )
 800c3e8:	2a00      	cmp	r2, #0
 800c3ea:	d005      	beq.n	800c3f8 <LoRaMacSerializerData+0x9a>
    {
        macMsg->Buffer[bufItr++] = macMsg->FPort;
 800c3ec:	1c62      	adds	r2, r4, #1
 800c3ee:	7fd1      	ldrb	r1, [r2, #31]
 800c3f0:	6822      	ldr	r2, [r4, #0]
 800c3f2:	3309      	adds	r3, #9
 800c3f4:	5591      	strb	r1, [r2, r6]
 800c3f6:	001e      	movs	r6, r3
    }

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FRMPayload, macMsg->FRMPayloadSize );
 800c3f8:	6820      	ldr	r0, [r4, #0]
 800c3fa:	782a      	ldrb	r2, [r5, #0]
 800c3fc:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800c3fe:	1980      	adds	r0, r0, r6
 800c400:	f001 f9c0 	bl	800d784 <memcpy1>
    bufItr = bufItr + macMsg->FRMPayloadSize;
 800c404:	782b      	ldrb	r3, [r5, #0]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 800c406:	6822      	ldr	r2, [r4, #0]
 800c408:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
    bufItr = bufItr + macMsg->FRMPayloadSize;
 800c40a:	18f3      	adds	r3, r6, r3
 800c40c:	b29b      	uxth	r3, r3
    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 800c40e:	54d1      	strb	r1, [r2, r3]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 800c410:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800c412:	6820      	ldr	r0, [r4, #0]
    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 800c414:	1c5a      	adds	r2, r3, #1
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 800c416:	b292      	uxth	r2, r2
 800c418:	0a09      	lsrs	r1, r1, #8
 800c41a:	5481      	strb	r1, [r0, r2]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 800c41c:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800c41e:	6820      	ldr	r0, [r4, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 800c420:	1c9a      	adds	r2, r3, #2
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 800c422:	b292      	uxth	r2, r2
 800c424:	0c09      	lsrs	r1, r1, #16
 800c426:	5481      	strb	r1, [r0, r2]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 800c428:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800c42a:	6820      	ldr	r0, [r4, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 800c42c:	1cda      	adds	r2, r3, #3
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 800c42e:	b292      	uxth	r2, r2
 800c430:	0e09      	lsrs	r1, r1, #24
 800c432:	5481      	strb	r1, [r0, r2]

    macMsg->BufSize = bufItr;

    return LORAMAC_SERIALIZER_SUCCESS;
 800c434:	2000      	movs	r0, #0
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 800c436:	3304      	adds	r3, #4
    macMsg->BufSize = bufItr;
 800c438:	7123      	strb	r3, [r4, #4]
}
 800c43a:	bd70      	pop	{r4, r5, r6, pc}

0800c43c <RegionIsActive>:
#define RU864_RX_BEACON_SETUP( )
#endif

bool RegionIsActive( LoRaMacRegion_t region )
{
    switch( region )
 800c43c:	3805      	subs	r0, #5
 800c43e:	4243      	negs	r3, r0
 800c440:	4158      	adcs	r0, r3
        default:
        {
            return false;
        }
    }
}
 800c442:	b2c0      	uxtb	r0, r0
 800c444:	4770      	bx	lr

0800c446 <RegionGetPhyParam>:

PhyParam_t RegionGetPhyParam( LoRaMacRegion_t region, GetPhyParams_t* getPhy )
{
 800c446:	b507      	push	{r0, r1, r2, lr}
    PhyParam_t phyParam = { 0 };
    switch( region )
 800c448:	2805      	cmp	r0, #5
 800c44a:	d105      	bne.n	800c458 <RegionGetPhyParam+0x12>
        AS923_GET_PHY_PARAM( );
        AU915_GET_PHY_PARAM( );
        CN470_GET_PHY_PARAM( );
        CN779_GET_PHY_PARAM( );
        EU433_GET_PHY_PARAM( );
        EU868_GET_PHY_PARAM( );
 800c44c:	0008      	movs	r0, r1
 800c44e:	f000 fcab 	bl	800cda8 <RegionEU868GetPhyParam>
 800c452:	9001      	str	r0, [sp, #4]
        default:
        {
            return phyParam;
        }
    }
}
 800c454:	9801      	ldr	r0, [sp, #4]
 800c456:	bd0e      	pop	{r1, r2, r3, pc}
            return phyParam;
 800c458:	2300      	movs	r3, #0
 800c45a:	9301      	str	r3, [sp, #4]
 800c45c:	e7fa      	b.n	800c454 <RegionGetPhyParam+0xe>

0800c45e <RegionSetBandTxDone>:

void RegionSetBandTxDone( LoRaMacRegion_t region, SetBandTxDoneParams_t* txDone )
{
 800c45e:	b510      	push	{r4, lr}
    switch( region )
 800c460:	2805      	cmp	r0, #5
 800c462:	d102      	bne.n	800c46a <RegionSetBandTxDone+0xc>
        AS923_SET_BAND_TX_DONE( );
        AU915_SET_BAND_TX_DONE( );
        CN470_SET_BAND_TX_DONE( );
        CN779_SET_BAND_TX_DONE( );
        EU433_SET_BAND_TX_DONE( );
        EU868_SET_BAND_TX_DONE( );
 800c464:	0008      	movs	r0, r1
 800c466:	f000 fd37 	bl	800ced8 <RegionEU868SetBandTxDone>
        default:
        {
            return;
        }
    }
}
 800c46a:	bd10      	pop	{r4, pc}

0800c46c <RegionInitDefaults>:

void RegionInitDefaults( LoRaMacRegion_t region, InitDefaultsParams_t* params )
{
 800c46c:	b510      	push	{r4, lr}
    switch( region )
 800c46e:	2805      	cmp	r0, #5
 800c470:	d102      	bne.n	800c478 <RegionInitDefaults+0xc>
        AS923_INIT_DEFAULTS( );
        AU915_INIT_DEFAULTS( );
        CN470_INIT_DEFAULTS( );
        CN779_INIT_DEFAULTS( );
        EU433_INIT_DEFAULTS( );
        EU868_INIT_DEFAULTS( );
 800c472:	0008      	movs	r0, r1
 800c474:	f000 fd48 	bl	800cf08 <RegionEU868InitDefaults>
        default:
        {
            break;
        }
    }
}
 800c478:	bd10      	pop	{r4, pc}

0800c47a <RegionVerify>:

bool RegionVerify( LoRaMacRegion_t region, VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 800c47a:	b510      	push	{r4, lr}
        IN865_VERIFY( );
        US915_VERIFY( );
        RU864_VERIFY( );
        default:
        {
            return false;
 800c47c:	2300      	movs	r3, #0
{
 800c47e:	0004      	movs	r4, r0
 800c480:	0008      	movs	r0, r1
 800c482:	0011      	movs	r1, r2
    switch( region )
 800c484:	2c05      	cmp	r4, #5
 800c486:	d102      	bne.n	800c48e <RegionVerify+0x14>
        EU868_VERIFY( );
 800c488:	f000 fd9e 	bl	800cfc8 <RegionEU868Verify>
 800c48c:	0003      	movs	r3, r0
        }
    }
}
 800c48e:	0018      	movs	r0, r3
 800c490:	bd10      	pop	{r4, pc}

0800c492 <RegionApplyCFList>:

void RegionApplyCFList( LoRaMacRegion_t region, ApplyCFListParams_t* applyCFList )
{
 800c492:	b510      	push	{r4, lr}
    switch( region )
 800c494:	2805      	cmp	r0, #5
 800c496:	d102      	bne.n	800c49e <RegionApplyCFList+0xc>
        AS923_APPLY_CF_LIST( );
        AU915_APPLY_CF_LIST( );
        CN470_APPLY_CF_LIST( );
        CN779_APPLY_CF_LIST( );
        EU433_APPLY_CF_LIST( );
        EU868_APPLY_CF_LIST( );
 800c498:	0008      	movs	r0, r1
 800c49a:	f001 f8cb 	bl	800d634 <RegionEU868ApplyCFList>
        default:
        {
            break;
        }
    }
}
 800c49e:	bd10      	pop	{r4, pc}

0800c4a0 <RegionChanMaskSet>:
        IN865_CHAN_MASK_SET( );
        US915_CHAN_MASK_SET( );
        RU864_CHAN_MASK_SET( );
        default:
        {
            return false;
 800c4a0:	2300      	movs	r3, #0
{
 800c4a2:	b510      	push	{r4, lr}
    switch( region )
 800c4a4:	2805      	cmp	r0, #5
 800c4a6:	d103      	bne.n	800c4b0 <RegionChanMaskSet+0x10>
        EU868_CHAN_MASK_SET( );
 800c4a8:	0008      	movs	r0, r1
 800c4aa:	f000 fdb5 	bl	800d018 <RegionEU868ChanMaskSet>
 800c4ae:	0003      	movs	r3, r0
        }
    }
}
 800c4b0:	0018      	movs	r0, r3
 800c4b2:	bd10      	pop	{r4, pc}

0800c4b4 <RegionComputeRxWindowParameters>:

void RegionComputeRxWindowParameters( LoRaMacRegion_t region, int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 800c4b4:	b510      	push	{r4, lr}
 800c4b6:	0004      	movs	r4, r0
 800c4b8:	0008      	movs	r0, r1
 800c4ba:	0011      	movs	r1, r2
 800c4bc:	001a      	movs	r2, r3
    switch( region )
 800c4be:	2c05      	cmp	r4, #5
 800c4c0:	d102      	bne.n	800c4c8 <RegionComputeRxWindowParameters+0x14>
        AS923_COMPUTE_RX_WINDOW_PARAMETERS( );
        AU915_COMPUTE_RX_WINDOW_PARAMETERS( );
        CN470_COMPUTE_RX_WINDOW_PARAMETERS( );
        CN779_COMPUTE_RX_WINDOW_PARAMETERS( );
        EU433_COMPUTE_RX_WINDOW_PARAMETERS( );
        EU868_COMPUTE_RX_WINDOW_PARAMETERS( );
 800c4c2:	9b02      	ldr	r3, [sp, #8]
 800c4c4:	f000 fdc0 	bl	800d048 <RegionEU868ComputeRxWindowParameters>
        default:
        {
            break;
        }
    }
}
 800c4c8:	bd10      	pop	{r4, pc}

0800c4ca <RegionRxConfig>:

bool RegionRxConfig( LoRaMacRegion_t region, RxConfigParams_t* rxConfig, int8_t* datarate )
{
 800c4ca:	b510      	push	{r4, lr}
        IN865_RX_CONFIG( );
        US915_RX_CONFIG( );
        RU864_RX_CONFIG( );
        default:
        {
            return false;
 800c4cc:	2300      	movs	r3, #0
{
 800c4ce:	0004      	movs	r4, r0
 800c4d0:	0008      	movs	r0, r1
 800c4d2:	0011      	movs	r1, r2
    switch( region )
 800c4d4:	2c05      	cmp	r4, #5
 800c4d6:	d102      	bne.n	800c4de <RegionRxConfig+0x14>
        EU868_RX_CONFIG( );
 800c4d8:	f000 fdea 	bl	800d0b0 <RegionEU868RxConfig>
 800c4dc:	0003      	movs	r3, r0
        }
    }
}
 800c4de:	0018      	movs	r0, r3
 800c4e0:	bd10      	pop	{r4, pc}

0800c4e2 <RegionTxConfig>:

bool RegionTxConfig( LoRaMacRegion_t region, TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 800c4e2:	b570      	push	{r4, r5, r6, lr}
 800c4e4:	0005      	movs	r5, r0
        IN865_TX_CONFIG( );
        US915_TX_CONFIG( );
        RU864_TX_CONFIG( );
        default:
        {
            return false;
 800c4e6:	2400      	movs	r4, #0
{
 800c4e8:	0008      	movs	r0, r1
 800c4ea:	0011      	movs	r1, r2
 800c4ec:	001a      	movs	r2, r3
    switch( region )
 800c4ee:	2d05      	cmp	r5, #5
 800c4f0:	d102      	bne.n	800c4f8 <RegionTxConfig+0x16>
        EU868_TX_CONFIG( );
 800c4f2:	f000 fe53 	bl	800d19c <RegionEU868TxConfig>
 800c4f6:	0004      	movs	r4, r0
        }
    }
}
 800c4f8:	0020      	movs	r0, r4
 800c4fa:	bd70      	pop	{r4, r5, r6, pc}

0800c4fc <RegionLinkAdrReq>:

uint8_t RegionLinkAdrReq( LoRaMacRegion_t region, LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 800c4fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c4fe:	0005      	movs	r5, r0
        IN865_LINK_ADR_REQ( );
        US915_LINK_ADR_REQ( );
        RU864_LINK_ADR_REQ( );
        default:
        {
            return 0;
 800c500:	2400      	movs	r4, #0
{
 800c502:	0008      	movs	r0, r1
 800c504:	0011      	movs	r1, r2
 800c506:	001a      	movs	r2, r3
    switch( region )
 800c508:	2d05      	cmp	r5, #5
 800c50a:	d105      	bne.n	800c518 <RegionLinkAdrReq+0x1c>
        EU868_LINK_ADR_REQ( );
 800c50c:	9b07      	ldr	r3, [sp, #28]
 800c50e:	9300      	str	r3, [sp, #0]
 800c510:	9b06      	ldr	r3, [sp, #24]
 800c512:	f000 fec3 	bl	800d29c <RegionEU868LinkAdrReq>
 800c516:	0004      	movs	r4, r0
        }
    }
}
 800c518:	0020      	movs	r0, r4
 800c51a:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0800c51c <RegionRxParamSetupReq>:
        IN865_RX_PARAM_SETUP_REQ( );
        US915_RX_PARAM_SETUP_REQ( );
        RU864_RX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 800c51c:	2300      	movs	r3, #0
{
 800c51e:	b510      	push	{r4, lr}
    switch( region )
 800c520:	2805      	cmp	r0, #5
 800c522:	d103      	bne.n	800c52c <RegionRxParamSetupReq+0x10>
        EU868_RX_PARAM_SETUP_REQ( );
 800c524:	0008      	movs	r0, r1
 800c526:	f000 ff5b 	bl	800d3e0 <RegionEU868RxParamSetupReq>
 800c52a:	0003      	movs	r3, r0
        }
    }
}
 800c52c:	0018      	movs	r0, r3
 800c52e:	bd10      	pop	{r4, pc}

0800c530 <RegionNewChannelReq>:
        IN865_NEW_CHANNEL_REQ( );
        US915_NEW_CHANNEL_REQ( );
        RU864_NEW_CHANNEL_REQ( );
        default:
        {
            return 0;
 800c530:	2300      	movs	r3, #0
{
 800c532:	b510      	push	{r4, lr}
    switch( region )
 800c534:	2805      	cmp	r0, #5
 800c536:	d103      	bne.n	800c540 <RegionNewChannelReq+0x10>
        EU868_NEW_CHANNEL_REQ( );
 800c538:	0008      	movs	r0, r1
 800c53a:	f001 f8b4 	bl	800d6a6 <RegionEU868NewChannelReq>
 800c53e:	0003      	movs	r3, r0
        }
    }
}
 800c540:	0018      	movs	r0, r3
 800c542:	bd10      	pop	{r4, pc}

0800c544 <RegionTxParamSetupReq>:
        IN865_TX_PARAM_SETUP_REQ( );
        US915_TX_PARAM_SETUP_REQ( );
        RU864_TX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 800c544:	2300      	movs	r3, #0
{
 800c546:	b510      	push	{r4, lr}
    switch( region )
 800c548:	2805      	cmp	r0, #5
 800c54a:	d103      	bne.n	800c554 <RegionTxParamSetupReq+0x10>
        EU868_TX_PARAM_SETUP_REQ( );
 800c54c:	0008      	movs	r0, r1
 800c54e:	f000 ff66 	bl	800d41e <RegionEU868TxParamSetupReq>
 800c552:	0003      	movs	r3, r0
        }
    }
}
 800c554:	0018      	movs	r0, r3
 800c556:	bd10      	pop	{r4, pc}

0800c558 <RegionDlChannelReq>:
        IN865_DL_CHANNEL_REQ( );
        US915_DL_CHANNEL_REQ( );
        RU864_DL_CHANNEL_REQ( );
        default:
        {
            return 0;
 800c558:	2300      	movs	r3, #0
{
 800c55a:	b510      	push	{r4, lr}
    switch( region )
 800c55c:	2805      	cmp	r0, #5
 800c55e:	d103      	bne.n	800c568 <RegionDlChannelReq+0x10>
        EU868_DL_CHANNEL_REQ( );
 800c560:	0008      	movs	r0, r1
 800c562:	f000 ff5f 	bl	800d424 <RegionEU868DlChannelReq>
 800c566:	0003      	movs	r3, r0
        }
    }
}
 800c568:	0018      	movs	r0, r3
 800c56a:	bd10      	pop	{r4, pc}

0800c56c <RegionAlternateDr>:

int8_t RegionAlternateDr( LoRaMacRegion_t region, int8_t currentDr, AlternateDrType_t type )
{
 800c56c:	b510      	push	{r4, lr}
        IN865_ALTERNATE_DR( );
        US915_ALTERNATE_DR( );
        RU864_ALTERNATE_DR( );
        default:
        {
            return 0;
 800c56e:	2300      	movs	r3, #0
{
 800c570:	0004      	movs	r4, r0
 800c572:	0008      	movs	r0, r1
 800c574:	0011      	movs	r1, r2
    switch( region )
 800c576:	2c05      	cmp	r4, #5
 800c578:	d102      	bne.n	800c580 <RegionAlternateDr+0x14>
        EU868_ALTERNATE_DR( );
 800c57a:	f000 ff73 	bl	800d464 <RegionEU868AlternateDr>
 800c57e:	0003      	movs	r3, r0
        }
    }
}
 800c580:	0018      	movs	r0, r3
 800c582:	bd10      	pop	{r4, pc}

0800c584 <RegionNextChannel>:

LoRaMacStatus_t RegionNextChannel( LoRaMacRegion_t region, NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 800c584:	b570      	push	{r4, r5, r6, lr}
 800c586:	0005      	movs	r5, r0
        IN865_NEXT_CHANNEL( );
        US915_NEXT_CHANNEL( );
        RU864_NEXT_CHANNEL( );
        default:
        {
            return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 800c588:	2409      	movs	r4, #9
{
 800c58a:	0008      	movs	r0, r1
 800c58c:	0011      	movs	r1, r2
 800c58e:	001a      	movs	r2, r3
    switch( region )
 800c590:	2d05      	cmp	r5, #5
 800c592:	d103      	bne.n	800c59c <RegionNextChannel+0x18>
        EU868_NEXT_CHANNEL( );
 800c594:	9b04      	ldr	r3, [sp, #16]
 800c596:	f000 ff67 	bl	800d468 <RegionEU868NextChannel>
 800c59a:	0004      	movs	r4, r0
        }
    }
}
 800c59c:	0020      	movs	r0, r4
 800c59e:	bd70      	pop	{r4, r5, r6, pc}

0800c5a0 <RegionSetContinuousWave>:
        }
    }
}

void RegionSetContinuousWave( LoRaMacRegion_t region, ContinuousWaveParams_t* continuousWave )
{
 800c5a0:	b510      	push	{r4, lr}
    switch( region )
 800c5a2:	2805      	cmp	r0, #5
 800c5a4:	d102      	bne.n	800c5ac <RegionSetContinuousWave+0xc>
        AS923_SET_CONTINUOUS_WAVE( );
        AU915_SET_CONTINUOUS_WAVE( );
        CN470_SET_CONTINUOUS_WAVE( );
        CN779_SET_CONTINUOUS_WAVE( );
        EU433_SET_CONTINUOUS_WAVE( );
        EU868_SET_CONTINUOUS_WAVE( );
 800c5a6:	0008      	movs	r0, r1
 800c5a8:	f001 f89c 	bl	800d6e4 <RegionEU868SetContinuousWave>
        default:
        {
            break;
        }
    }
}
 800c5ac:	bd10      	pop	{r4, pc}

0800c5ae <RegionApplyDrOffset>:

uint8_t RegionApplyDrOffset( LoRaMacRegion_t region, uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 800c5ae:	b570      	push	{r4, r5, r6, lr}
 800c5b0:	0005      	movs	r5, r0
 800c5b2:	0008      	movs	r0, r1
 800c5b4:	0011      	movs	r1, r2
 800c5b6:	001a      	movs	r2, r3
        IN865_APPLY_DR_OFFSET( );
        US915_APPLY_DR_OFFSET( );
        RU864_APPLY_DR_OFFSET( );
        default:
        {
            return dr;
 800c5b8:	b2cc      	uxtb	r4, r1
    switch( region )
 800c5ba:	2d05      	cmp	r5, #5
 800c5bc:	d102      	bne.n	800c5c4 <RegionApplyDrOffset+0x16>
        EU868_APPLY_DR_OFFSET( );
 800c5be:	f001 f8b7 	bl	800d730 <RegionEU868ApplyDrOffset>
 800c5c2:	0004      	movs	r4, r0
        }
    }
}
 800c5c4:	0020      	movs	r0, r4
 800c5c6:	bd70      	pop	{r4, r5, r6, pc}

0800c5c8 <RegionGetVersion>:
    Version_t version;

    version.Value = REGION_VERSION;

    return version;
}
 800c5c8:	4800      	ldr	r0, [pc, #0]	@ (800c5cc <RegionGetVersion+0x4>)
 800c5ca:	4770      	bx	lr
 800c5cc:	01000300 	.word	0x01000300

0800c5d0 <RegionCommonChanVerifyDr>:
    }
    return nbActiveBits;
}

bool RegionCommonChanVerifyDr( uint8_t nbChannels, uint16_t* channelsMask, int8_t dr, int8_t minDr, int8_t maxDr, ChannelParams_t* channels )
{
 800c5d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c5d2:	9101      	str	r1, [sp, #4]
 800c5d4:	a908      	add	r1, sp, #32
 800c5d6:	7809      	ldrb	r1, [r1, #0]
 800c5d8:	9000      	str	r0, [sp, #0]
 800c5da:	b249      	sxtb	r1, r1
    if( RegionCommonValueInRange( dr, minDr, maxDr ) == 0 )
    {
        return false;
 800c5dc:	2000      	movs	r0, #0
    return false;
}

uint8_t RegionCommonValueInRange( int8_t value, int8_t min, int8_t max )
{
    if( ( value >= min ) && ( value <= max ) )
 800c5de:	429a      	cmp	r2, r3
 800c5e0:	db28      	blt.n	800c634 <RegionCommonChanVerifyDr+0x64>
 800c5e2:	428a      	cmp	r2, r1
 800c5e4:	dc26      	bgt.n	800c634 <RegionCommonChanVerifyDr+0x64>
            if( ( ( channelsMask[k] & ( 1 << j ) ) != 0 ) )
 800c5e6:	2701      	movs	r7, #1
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 800c5e8:	260f      	movs	r6, #15
 800c5ea:	e01d      	b.n	800c628 <RegionCommonChanVerifyDr+0x58>
            if( ( ( channelsMask[k] & ( 1 << j ) ) != 0 ) )
 800c5ec:	9c01      	ldr	r4, [sp, #4]
 800c5ee:	0041      	lsls	r1, r0, #1
 800c5f0:	5b09      	ldrh	r1, [r1, r4]
 800c5f2:	2400      	movs	r4, #0
 800c5f4:	468c      	mov	ip, r1
 800c5f6:	210c      	movs	r1, #12
 800c5f8:	434b      	muls	r3, r1
 800c5fa:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c5fc:	18cd      	adds	r5, r1, r3
 800c5fe:	4663      	mov	r3, ip
 800c600:	4123      	asrs	r3, r4
 800c602:	423b      	tst	r3, r7
 800c604:	d00a      	beq.n	800c61c <RegionCommonChanVerifyDr+0x4c>
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 800c606:	7a2b      	ldrb	r3, [r5, #8]
 800c608:	0719      	lsls	r1, r3, #28
 800c60a:	1709      	asrs	r1, r1, #28
    if( ( value >= min ) && ( value <= max ) )
 800c60c:	4031      	ands	r1, r6
 800c60e:	4291      	cmp	r1, r2
 800c610:	dc04      	bgt.n	800c61c <RegionCommonChanVerifyDr+0x4c>
                                                  ( channels[i + j].DrRange.Fields.Max & 0x0F ) ) == 1 )
 800c612:	b25b      	sxtb	r3, r3
 800c614:	111b      	asrs	r3, r3, #4
    if( ( value >= min ) && ( value <= max ) )
 800c616:	4033      	ands	r3, r6
 800c618:	4293      	cmp	r3, r2
 800c61a:	da0c      	bge.n	800c636 <RegionCommonChanVerifyDr+0x66>
        for( uint8_t j = 0; j < 16; j++ )
 800c61c:	3401      	adds	r4, #1
 800c61e:	350c      	adds	r5, #12
 800c620:	2c10      	cmp	r4, #16
 800c622:	d1ec      	bne.n	800c5fe <RegionCommonChanVerifyDr+0x2e>
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 800c624:	3001      	adds	r0, #1
 800c626:	b2c0      	uxtb	r0, r0
 800c628:	0103      	lsls	r3, r0, #4
 800c62a:	9900      	ldr	r1, [sp, #0]
 800c62c:	b2db      	uxtb	r3, r3
 800c62e:	4299      	cmp	r1, r3
 800c630:	d8dc      	bhi.n	800c5ec <RegionCommonChanVerifyDr+0x1c>
        return false;
 800c632:	2000      	movs	r0, #0
}
 800c634:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
                    return true;
 800c636:	2001      	movs	r0, #1
 800c638:	e7fc      	b.n	800c634 <RegionCommonChanVerifyDr+0x64>

0800c63a <RegionCommonValueInRange>:
{
 800c63a:	0003      	movs	r3, r0
    {
        return 1;
    }
    return 0;
 800c63c:	2000      	movs	r0, #0
    if( ( value >= min ) && ( value <= max ) )
 800c63e:	428b      	cmp	r3, r1
 800c640:	db04      	blt.n	800c64c <RegionCommonValueInRange+0x12>
 800c642:	0fd8      	lsrs	r0, r3, #31
 800c644:	17d1      	asrs	r1, r2, #31
 800c646:	429a      	cmp	r2, r3
 800c648:	4148      	adcs	r0, r1
 800c64a:	b2c0      	uxtb	r0, r0
}
 800c64c:	4770      	bx	lr

0800c64e <RegionCommonChanDisable>:

bool RegionCommonChanDisable( uint16_t* channelsMask, uint8_t id, uint8_t maxChannels )
{
 800c64e:	b530      	push	{r4, r5, lr}
    uint8_t index = id / 16;
 800c650:	090b      	lsrs	r3, r1, #4
{
 800c652:	0004      	movs	r4, r0

    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
 800c654:	0915      	lsrs	r5, r2, #4
    {
        return false;
 800c656:	2000      	movs	r0, #0
    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
 800c658:	429d      	cmp	r5, r3
 800c65a:	d30b      	bcc.n	800c674 <RegionCommonChanDisable+0x26>
 800c65c:	4291      	cmp	r1, r2
 800c65e:	d209      	bcs.n	800c674 <RegionCommonChanDisable+0x26>
    }

    // Deactivate channel
    channelsMask[index] &= ~( 1 << ( id % 16 ) );
 800c660:	220f      	movs	r2, #15
 800c662:	3001      	adds	r0, #1
 800c664:	4011      	ands	r1, r2
 800c666:	0002      	movs	r2, r0
 800c668:	408a      	lsls	r2, r1
 800c66a:	0011      	movs	r1, r2
 800c66c:	005b      	lsls	r3, r3, #1
 800c66e:	5ae2      	ldrh	r2, [r4, r3]
 800c670:	438a      	bics	r2, r1
 800c672:	52e2      	strh	r2, [r4, r3]

    return true;
}
 800c674:	bd30      	pop	{r4, r5, pc}

0800c676 <RegionCommonCountChannels>:

uint8_t RegionCommonCountChannels( uint16_t* channelsMask, uint8_t startIdx, uint8_t stopIdx )
{
 800c676:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c678:	9201      	str	r2, [sp, #4]
    uint8_t nbChannels = 0;

    if( channelsMask == NULL )
 800c67a:	2800      	cmp	r0, #0
 800c67c:	d005      	beq.n	800c68a <RegionCommonCountChannels+0x14>
 800c67e:	004a      	lsls	r2, r1, #1
 800c680:	1883      	adds	r3, r0, r2
    uint8_t nbChannels = 0;
 800c682:	2000      	movs	r0, #0
    {
        return 0;
    }

    for( uint8_t i = startIdx; i < stopIdx; i++ )
 800c684:	9a01      	ldr	r2, [sp, #4]
 800c686:	4291      	cmp	r1, r2
 800c688:	d300      	bcc.n	800c68c <RegionCommonCountChannels+0x16>
    {
        nbChannels += CountChannels( channelsMask[i], 16 );
    }

    return nbChannels;
}
 800c68a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        nbChannels += CountChannels( channelsMask[i], 16 );
 800c68c:	2400      	movs	r4, #0
    uint8_t nbActiveBits = 0;
 800c68e:	0022      	movs	r2, r4
        nbChannels += CountChannels( channelsMask[i], 16 );
 800c690:	881f      	ldrh	r7, [r3, #0]
        if( ( mask & ( 1 << j ) ) == ( 1 << j ) )
 800c692:	2501      	movs	r5, #1
 800c694:	40a5      	lsls	r5, r4
 800c696:	002e      	movs	r6, r5
 800c698:	403e      	ands	r6, r7
 800c69a:	42b5      	cmp	r5, r6
 800c69c:	d101      	bne.n	800c6a2 <RegionCommonCountChannels+0x2c>
            nbActiveBits++;
 800c69e:	3201      	adds	r2, #1
 800c6a0:	b2d2      	uxtb	r2, r2
    for( uint8_t j = 0; j < nbBits; j++ )
 800c6a2:	3401      	adds	r4, #1
 800c6a4:	2c10      	cmp	r4, #16
 800c6a6:	d1f4      	bne.n	800c692 <RegionCommonCountChannels+0x1c>
        nbChannels += CountChannels( channelsMask[i], 16 );
 800c6a8:	1880      	adds	r0, r0, r2
    for( uint8_t i = startIdx; i < stopIdx; i++ )
 800c6aa:	3101      	adds	r1, #1
        nbChannels += CountChannels( channelsMask[i], 16 );
 800c6ac:	b2c0      	uxtb	r0, r0
    for( uint8_t i = startIdx; i < stopIdx; i++ )
 800c6ae:	b2c9      	uxtb	r1, r1
 800c6b0:	3302      	adds	r3, #2
 800c6b2:	e7e7      	b.n	800c684 <RegionCommonCountChannels+0xe>

0800c6b4 <RegionCommonChanMaskCopy>:

void RegionCommonChanMaskCopy( uint16_t* channelsMaskDest, uint16_t* channelsMaskSrc, uint8_t len )
{
 800c6b4:	b510      	push	{r4, lr}
    if( ( channelsMaskDest != NULL ) && ( channelsMaskSrc != NULL ) )
 800c6b6:	2800      	cmp	r0, #0
 800c6b8:	d005      	beq.n	800c6c6 <RegionCommonChanMaskCopy+0x12>
 800c6ba:	2900      	cmp	r1, #0
 800c6bc:	d003      	beq.n	800c6c6 <RegionCommonChanMaskCopy+0x12>
 800c6be:	2300      	movs	r3, #0
 800c6c0:	0052      	lsls	r2, r2, #1
    {
        for( uint8_t i = 0; i < len; i++ )
 800c6c2:	4293      	cmp	r3, r2
 800c6c4:	d100      	bne.n	800c6c8 <RegionCommonChanMaskCopy+0x14>
        {
            channelsMaskDest[i] = channelsMaskSrc[i];
        }
    }
}
 800c6c6:	bd10      	pop	{r4, pc}
            channelsMaskDest[i] = channelsMaskSrc[i];
 800c6c8:	5acc      	ldrh	r4, [r1, r3]
 800c6ca:	52c4      	strh	r4, [r0, r3]
        for( uint8_t i = 0; i < len; i++ )
 800c6cc:	3302      	adds	r3, #2
 800c6ce:	e7f8      	b.n	800c6c2 <RegionCommonChanMaskCopy+0xe>

0800c6d0 <RegionCommonSetBandTxDone>:

void RegionCommonSetBandTxDone( Band_t* band, TimerTime_t lastTxAirTime, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 800c6d0:	b082      	sub	sp, #8
 800c6d2:	b570      	push	{r4, r5, r6, lr}
 800c6d4:	001d      	movs	r5, r3
 800c6d6:	8804      	ldrh	r4, [r0, #0]
 800c6d8:	9305      	str	r3, [sp, #20]
    if( joined == false )
 800c6da:	2a00      	cmp	r2, #0
 800c6dc:	d11c      	bne.n	800c718 <RegionCommonSetBandTxDone+0x48>
        if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_1_HOUR_IN_S )
 800c6de:	23e1      	movs	r3, #225	@ 0xe1
            joinDutyCycle = BACKOFF_DC_1_HOUR;
 800c6e0:	3264      	adds	r2, #100	@ 0x64
        if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_1_HOUR_IN_S )
 800c6e2:	011b      	lsls	r3, r3, #4
 800c6e4:	429d      	cmp	r5, r3
 800c6e6:	d307      	bcc.n	800c6f8 <RegionCommonSetBandTxDone+0x28>
            joinDutyCycle = BACKOFF_DC_10_HOURS;
 800c6e8:	4a0e      	ldr	r2, [pc, #56]	@ (800c724 <RegionCommonSetBandTxDone+0x54>)
 800c6ea:	4b0f      	ldr	r3, [pc, #60]	@ (800c728 <RegionCommonSetBandTxDone+0x58>)
 800c6ec:	42aa      	cmp	r2, r5
 800c6ee:	4192      	sbcs	r2, r2
 800c6f0:	401a      	ands	r2, r3
 800c6f2:	23fa      	movs	r3, #250	@ 0xfa
 800c6f4:	009b      	lsls	r3, r3, #2
 800c6f6:	18d2      	adds	r2, r2, r3
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
 800c6f8:	1c23      	adds	r3, r4, #0
 800c6fa:	4294      	cmp	r4, r2
 800c6fc:	d200      	bcs.n	800c700 <RegionCommonSetBandTxDone+0x30>
 800c6fe:	1c13      	adds	r3, r2, #0
 800c700:	b29b      	uxth	r3, r3
    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    uint16_t dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );

    // Reduce with transmission time
    if( band->TimeCredits > ( lastTxAirTime * dutyCycle ) )
 800c702:	4359      	muls	r1, r3
 800c704:	68c2      	ldr	r2, [r0, #12]
        // Reduce time credits by the time of air
        band->TimeCredits -= ( lastTxAirTime * dutyCycle );
    }
    else
    {
        band->TimeCredits = 0;
 800c706:	2300      	movs	r3, #0
    if( band->TimeCredits > ( lastTxAirTime * dutyCycle ) )
 800c708:	428a      	cmp	r2, r1
 800c70a:	d900      	bls.n	800c70e <RegionCommonSetBandTxDone+0x3e>
        band->TimeCredits -= ( lastTxAirTime * dutyCycle );
 800c70c:	1a53      	subs	r3, r2, r1
 800c70e:	60c3      	str	r3, [r0, #12]
    }
}
 800c710:	bc70      	pop	{r4, r5, r6}
 800c712:	bc08      	pop	{r3}
 800c714:	b002      	add	sp, #8
 800c716:	4718      	bx	r3
    if( dutyCycle == 0 )
 800c718:	1c23      	adds	r3, r4, #0
 800c71a:	2c00      	cmp	r4, #0
 800c71c:	d1f0      	bne.n	800c700 <RegionCommonSetBandTxDone+0x30>
 800c71e:	2301      	movs	r3, #1
 800c720:	e7ee      	b.n	800c700 <RegionCommonSetBandTxDone+0x30>
 800c722:	46c0      	nop			@ (mov r8, r8)
 800c724:	00009aaf 	.word	0x00009aaf
 800c728:	00002328 	.word	0x00002328

0800c72c <RegionCommonUpdateBandTimeOff>:

TimerTime_t RegionCommonUpdateBandTimeOff( bool joined, Band_t* bands,
                                           uint8_t nbBands, bool dutyCycleEnabled,
                                           bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                           TimerTime_t expectedTimeOnAir )
{
 800c72c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c72e:	b093      	sub	sp, #76	@ 0x4c
 800c730:	9306      	str	r3, [sp, #24]
 800c732:	ab18      	add	r3, sp, #96	@ 0x60
 800c734:	781b      	ldrb	r3, [r3, #0]
 800c736:	0015      	movs	r5, r2
 800c738:	000c      	movs	r4, r1
 800c73a:	9e19      	ldr	r6, [sp, #100]	@ 0x64
 800c73c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c73e:	9003      	str	r0, [sp, #12]
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
    TimerTime_t currentTime = TimerGetCurrentTime( );
 800c740:	f002 ffae 	bl	800f6a0 <UTIL_TIMER_GetCurrentTime>
                timeDiff.Seconds = ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S;
 800c744:	4b6f      	ldr	r3, [pc, #444]	@ (800c904 <RegionCommonUpdateBandTimeOff+0x1d8>)
    TimerTime_t currentTime = TimerGetCurrentTime( );
 800c746:	9009      	str	r0, [sp, #36]	@ 0x24
                timeDiff.Seconds *= BACKOFF_24_HOURS_IN_S;
 800c748:	496f      	ldr	r1, [pc, #444]	@ (800c908 <RegionCommonUpdateBandTimeOff+0x1dc>)
                timeDiff.Seconds = ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S;
 800c74a:	18f0      	adds	r0, r6, r3
                timeDiff.Seconds *= BACKOFF_24_HOURS_IN_S;
 800c74c:	f7f3 fd0c 	bl	8000168 <__udivsi3>
 800c750:	4b6d      	ldr	r3, [pc, #436]	@ (800c908 <RegionCommonUpdateBandTimeOff+0x1dc>)
 800c752:	4343      	muls	r3, r0
 800c754:	9307      	str	r3, [sp, #28]
                timeDiff.Seconds += BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 800c756:	9a07      	ldr	r2, [sp, #28]
 800c758:	4b6c      	ldr	r3, [pc, #432]	@ (800c90c <RegionCommonUpdateBandTimeOff+0x1e0>)
 800c75a:	4694      	mov	ip, r2
 800c75c:	4463      	add	r3, ip
 800c75e:	9308      	str	r3, [sp, #32]
 800c760:	2318      	movs	r3, #24
 800c762:	436b      	muls	r3, r5
 800c764:	18e3      	adds	r3, r4, r3
 800c766:	930a      	str	r3, [sp, #40]	@ 0x28
    TimerTime_t creditCosts = 0;
    uint16_t dutyCycle = 1;
    uint8_t validBands = 0;
 800c768:	2300      	movs	r3, #0
 800c76a:	9304      	str	r3, [sp, #16]
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
 800c76c:	3b01      	subs	r3, #1
 800c76e:	9305      	str	r3, [sp, #20]

    for( uint8_t i = 0; i < nbBands; i++ )
 800c770:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c772:	429c      	cmp	r4, r3
 800c774:	d107      	bne.n	800c786 <RegionCommonUpdateBandTimeOff+0x5a>
            }
        }
    }


    if( validBands == 0 )
 800c776:	9b04      	ldr	r3, [sp, #16]
 800c778:	2b00      	cmp	r3, #0
 800c77a:	d101      	bne.n	800c780 <RegionCommonUpdateBandTimeOff+0x54>
    {
        // There is no valid band available to handle a transmission
        // in the given DUTY_CYCLE_TIME_PERIOD.
        return TIMERTIME_T_MAX;
 800c77c:	3b01      	subs	r3, #1
 800c77e:	9305      	str	r3, [sp, #20]
    }
    return minTimeToWait;
}
 800c780:	9805      	ldr	r0, [sp, #20]
 800c782:	b013      	add	sp, #76	@ 0x4c
 800c784:	bdf0      	pop	{r4, r5, r6, r7, pc}
        dutyCycle = UpdateTimeCredits( &bands[i], joined, dutyCycleEnabled,
 800c786:	9619      	str	r6, [sp, #100]	@ 0x64
 800c788:	ab19      	add	r3, sp, #100	@ 0x64
 800c78a:	2204      	movs	r2, #4
 800c78c:	5e9a      	ldrsh	r2, [r3, r2]
    uint16_t dutyCycle = SetMaxTimeCredits( band, joined, elapsedTimeSinceStartup,
 800c78e:	ab0c      	add	r3, sp, #48	@ 0x30
 800c790:	809a      	strh	r2, [r3, #4]
    TimerTime_t elapsedTime = SysTimeToMs( elapsedTimeSinceStartup );
 800c792:	0030      	movs	r0, r6
 800c794:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800c796:	960c      	str	r6, [sp, #48]	@ 0x30
 800c798:	f002 fe78 	bl	800f48c <SysTimeToMs>
    if( joined == false )
 800c79c:	9b03      	ldr	r3, [sp, #12]
 800c79e:	8822      	ldrh	r2, [r4, #0]
 800c7a0:	2b00      	cmp	r3, #0
 800c7a2:	d164      	bne.n	800c86e <RegionCommonUpdateBandTimeOff+0x142>
        if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_1_HOUR_IN_S )
 800c7a4:	21e1      	movs	r1, #225	@ 0xe1
            joinDutyCycle = BACKOFF_DC_1_HOUR;
 800c7a6:	3364      	adds	r3, #100	@ 0x64
        if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_1_HOUR_IN_S )
 800c7a8:	0109      	lsls	r1, r1, #4
 800c7aa:	428e      	cmp	r6, r1
 800c7ac:	d308      	bcc.n	800c7c0 <RegionCommonUpdateBandTimeOff+0x94>
        else if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_10_HOURS_IN_S )
 800c7ae:	4b58      	ldr	r3, [pc, #352]	@ (800c910 <RegionCommonUpdateBandTimeOff+0x1e4>)
            joinDutyCycle = BACKOFF_DC_24_HOURS;
 800c7b0:	9903      	ldr	r1, [sp, #12]
 800c7b2:	42b3      	cmp	r3, r6
 800c7b4:	4149      	adcs	r1, r1
 800c7b6:	424b      	negs	r3, r1
 800c7b8:	4956      	ldr	r1, [pc, #344]	@ (800c914 <RegionCommonUpdateBandTimeOff+0x1e8>)
 800c7ba:	400b      	ands	r3, r1
 800c7bc:	4956      	ldr	r1, [pc, #344]	@ (800c918 <RegionCommonUpdateBandTimeOff+0x1ec>)
 800c7be:	185b      	adds	r3, r3, r1
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
 800c7c0:	1c15      	adds	r5, r2, #0
 800c7c2:	429a      	cmp	r2, r3
 800c7c4:	d200      	bcs.n	800c7c8 <RegionCommonUpdateBandTimeOff+0x9c>
 800c7c6:	1c1d      	adds	r5, r3, #0
 800c7c8:	b2ad      	uxth	r5, r5
        if( dutyCycle == BACKOFF_DC_1_HOUR )
 800c7ca:	2d64      	cmp	r5, #100	@ 0x64
 800c7cc:	d15b      	bne.n	800c886 <RegionCommonUpdateBandTimeOff+0x15a>
            maxCredits = DUTY_CYCLE_TIME_PERIOD;
 800c7ce:	4f53      	ldr	r7, [pc, #332]	@ (800c91c <RegionCommonUpdateBandTimeOff+0x1f0>)
            band->LastMaxCreditAssignTime = elapsedTime;
 800c7d0:	60a0      	str	r0, [r4, #8]
        timeDiff = SysTimeSub( elapsedTimeSinceStartup, SysTimeFromMs( band->LastMaxCreditAssignTime ) );
 800c7d2:	68a1      	ldr	r1, [r4, #8]
 800c7d4:	a810      	add	r0, sp, #64	@ 0x40
 800c7d6:	f002 fe77 	bl	800f4c8 <SysTimeFromMs>
 800c7da:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800c7dc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800c7de:	9300      	str	r3, [sp, #0]
 800c7e0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800c7e2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800c7e4:	a80e      	add	r0, sp, #56	@ 0x38
 800c7e6:	f002 fddb 	bl	800f3a0 <SysTimeSub>
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 800c7ea:	9b06      	ldr	r3, [sp, #24]
        timeDiff = SysTimeSub( elapsedTimeSinceStartup, SysTimeFromMs( band->LastMaxCreditAssignTime ) );
 800c7ec:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 800c7ee:	2b00      	cmp	r3, #0
 800c7f0:	d102      	bne.n	800c7f8 <RegionCommonUpdateBandTimeOff+0xcc>
 800c7f2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c7f4:	2b00      	cmp	r3, #0
 800c7f6:	d005      	beq.n	800c804 <RegionCommonUpdateBandTimeOff+0xd8>
 800c7f8:	6923      	ldr	r3, [r4, #16]
 800c7fa:	42bb      	cmp	r3, r7
 800c7fc:	d102      	bne.n	800c804 <RegionCommonUpdateBandTimeOff+0xd8>
            ( band->MaxTimeCredits != maxCredits ) ||
 800c7fe:	4b48      	ldr	r3, [pc, #288]	@ (800c920 <RegionCommonUpdateBandTimeOff+0x1f4>)
 800c800:	429a      	cmp	r2, r3
 800c802:	d90d      	bls.n	800c820 <RegionCommonUpdateBandTimeOff+0xf4>
            if( elapsedTimeSinceStartup.Seconds >= BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 800c804:	4b47      	ldr	r3, [pc, #284]	@ (800c924 <RegionCommonUpdateBandTimeOff+0x1f8>)
            band->TimeCredits = maxCredits;
 800c806:	60e7      	str	r7, [r4, #12]
            if( elapsedTimeSinceStartup.Seconds >= BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 800c808:	429e      	cmp	r6, r3
 800c80a:	d909      	bls.n	800c820 <RegionCommonUpdateBandTimeOff+0xf4>
                timeDiff.SubSeconds = 0;
 800c80c:	2200      	movs	r2, #0
 800c80e:	ab0e      	add	r3, sp, #56	@ 0x38
 800c810:	809a      	strh	r2, [r3, #4]
                band->LastMaxCreditAssignTime = SysTimeToMs( timeDiff );
 800c812:	9a08      	ldr	r2, [sp, #32]
 800c814:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800c816:	0010      	movs	r0, r2
 800c818:	920e      	str	r2, [sp, #56]	@ 0x38
 800c81a:	f002 fe37 	bl	800f48c <SysTimeToMs>
 800c81e:	60a0      	str	r0, [r4, #8]
    if( band->LastBandUpdateTime == 0 )
 800c820:	6860      	ldr	r0, [r4, #4]
 800c822:	2800      	cmp	r0, #0
 800c824:	d100      	bne.n	800c828 <RegionCommonUpdateBandTimeOff+0xfc>
        band->TimeCredits = maxCredits;
 800c826:	60e7      	str	r7, [r4, #12]
    if( joined == true )
 800c828:	9b03      	ldr	r3, [sp, #12]
    band->MaxTimeCredits = maxCredits;
 800c82a:	6127      	str	r7, [r4, #16]
    if( joined == true )
 800c82c:	2b00      	cmp	r3, #0
 800c82e:	d004      	beq.n	800c83a <RegionCommonUpdateBandTimeOff+0x10e>
        band->TimeCredits += TimerGetElapsedTime( band->LastBandUpdateTime );
 800c830:	f002 ff40 	bl	800f6b4 <UTIL_TIMER_GetElapsedTime>
 800c834:	68e3      	ldr	r3, [r4, #12]
 800c836:	181b      	adds	r3, r3, r0
 800c838:	60e3      	str	r3, [r4, #12]
    if( band->TimeCredits > band->MaxTimeCredits )
 800c83a:	6922      	ldr	r2, [r4, #16]
 800c83c:	68e3      	ldr	r3, [r4, #12]
 800c83e:	4293      	cmp	r3, r2
 800c840:	d900      	bls.n	800c844 <RegionCommonUpdateBandTimeOff+0x118>
        band->TimeCredits = band->MaxTimeCredits;
 800c842:	60e2      	str	r2, [r4, #12]
    band->LastBandUpdateTime = currentTime;
 800c844:	9b09      	ldr	r3, [sp, #36]	@ 0x24
        if( ( bands[i].TimeCredits > creditCosts ) ||
 800c846:	68e1      	ldr	r1, [r4, #12]
    band->LastBandUpdateTime = currentTime;
 800c848:	6063      	str	r3, [r4, #4]
        creditCosts = expectedTimeOnAir * dutyCycle;
 800c84a:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800c84c:	436b      	muls	r3, r5
        if( ( bands[i].TimeCredits > creditCosts ) ||
 800c84e:	4299      	cmp	r1, r3
 800c850:	d805      	bhi.n	800c85e <RegionCommonUpdateBandTimeOff+0x132>
 800c852:	9806      	ldr	r0, [sp, #24]
 800c854:	2800      	cmp	r0, #0
 800c856:	d11f      	bne.n	800c898 <RegionCommonUpdateBandTimeOff+0x16c>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 800c858:	9803      	ldr	r0, [sp, #12]
 800c85a:	2800      	cmp	r0, #0
 800c85c:	d01c      	beq.n	800c898 <RegionCommonUpdateBandTimeOff+0x16c>
            bands[i].ReadyForTransmission = true;
 800c85e:	2301      	movs	r3, #1
 800c860:	7523      	strb	r3, [r4, #20]
            validBands++;
 800c862:	9b04      	ldr	r3, [sp, #16]
 800c864:	3301      	adds	r3, #1
 800c866:	b2db      	uxtb	r3, r3
 800c868:	9304      	str	r3, [sp, #16]
    for( uint8_t i = 0; i < nbBands; i++ )
 800c86a:	3418      	adds	r4, #24
 800c86c:	e780      	b.n	800c770 <RegionCommonUpdateBandTimeOff+0x44>
        if( dutyCycleEnabled == false )
 800c86e:	9b06      	ldr	r3, [sp, #24]
 800c870:	2b00      	cmp	r3, #0
 800c872:	d101      	bne.n	800c878 <RegionCommonUpdateBandTimeOff+0x14c>
            band->TimeCredits = maxCredits;
 800c874:	4b29      	ldr	r3, [pc, #164]	@ (800c91c <RegionCommonUpdateBandTimeOff+0x1f0>)
 800c876:	60e3      	str	r3, [r4, #12]
 800c878:	1c15      	adds	r5, r2, #0
 800c87a:	2a00      	cmp	r2, #0
 800c87c:	d100      	bne.n	800c880 <RegionCommonUpdateBandTimeOff+0x154>
 800c87e:	2501      	movs	r5, #1
    TimerTime_t maxCredits = DUTY_CYCLE_TIME_PERIOD;
 800c880:	4f26      	ldr	r7, [pc, #152]	@ (800c91c <RegionCommonUpdateBandTimeOff+0x1f0>)
 800c882:	b2ad      	uxth	r5, r5
 800c884:	e7cc      	b.n	800c820 <RegionCommonUpdateBandTimeOff+0xf4>
        else if( dutyCycle == BACKOFF_DC_10_HOURS )
 800c886:	23fa      	movs	r3, #250	@ 0xfa
 800c888:	009b      	lsls	r3, r3, #2
 800c88a:	429d      	cmp	r5, r3
 800c88c:	d102      	bne.n	800c894 <RegionCommonUpdateBandTimeOff+0x168>
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 10;
 800c88e:	4f26      	ldr	r7, [pc, #152]	@ (800c928 <RegionCommonUpdateBandTimeOff+0x1fc>)
            band->LastMaxCreditAssignTime = elapsedTime;
 800c890:	60a0      	str	r0, [r4, #8]
 800c892:	e79e      	b.n	800c7d2 <RegionCommonUpdateBandTimeOff+0xa6>
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 24;
 800c894:	4f25      	ldr	r7, [pc, #148]	@ (800c92c <RegionCommonUpdateBandTimeOff+0x200>)
 800c896:	e79c      	b.n	800c7d2 <RegionCommonUpdateBandTimeOff+0xa6>
            bands[i].ReadyForTransmission = false;
 800c898:	2000      	movs	r0, #0
 800c89a:	7520      	strb	r0, [r4, #20]
            if( bands[i].MaxTimeCredits > creditCosts )
 800c89c:	4293      	cmp	r3, r2
 800c89e:	d208      	bcs.n	800c8b2 <RegionCommonUpdateBandTimeOff+0x186>
                minTimeToWait = MIN( minTimeToWait, ( creditCosts - bands[i].TimeCredits ) );
 800c8a0:	9a05      	ldr	r2, [sp, #20]
 800c8a2:	1a5b      	subs	r3, r3, r1
 800c8a4:	429a      	cmp	r2, r3
 800c8a6:	d900      	bls.n	800c8aa <RegionCommonUpdateBandTimeOff+0x17e>
 800c8a8:	9305      	str	r3, [sp, #20]
                validBands++;
 800c8aa:	9b04      	ldr	r3, [sp, #16]
 800c8ac:	3301      	adds	r3, #1
 800c8ae:	b2db      	uxtb	r3, r3
 800c8b0:	9304      	str	r3, [sp, #16]
            if( joined == false )
 800c8b2:	9b03      	ldr	r3, [sp, #12]
 800c8b4:	2b00      	cmp	r3, #0
 800c8b6:	d1d8      	bne.n	800c86a <RegionCommonUpdateBandTimeOff+0x13e>
                SysTime_t backoffTimeRange = {
 800c8b8:	9a03      	ldr	r2, [sp, #12]
 800c8ba:	ab0e      	add	r3, sp, #56	@ 0x38
 800c8bc:	809a      	strh	r2, [r3, #4]
                if( dutyCycle == BACKOFF_DC_1_HOUR )
 800c8be:	4b13      	ldr	r3, [pc, #76]	@ (800c90c <RegionCommonUpdateBandTimeOff+0x1e0>)
 800c8c0:	2d64      	cmp	r5, #100	@ 0x64
 800c8c2:	d01c      	beq.n	800c8fe <RegionCommonUpdateBandTimeOff+0x1d2>
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_10_HOURS_IN_S;
 800c8c4:	4a1a      	ldr	r2, [pc, #104]	@ (800c930 <RegionCommonUpdateBandTimeOff+0x204>)
 800c8c6:	18a9      	adds	r1, r5, r2
 800c8c8:	1e4a      	subs	r2, r1, #1
 800c8ca:	4191      	sbcs	r1, r2
 800c8cc:	4a0e      	ldr	r2, [pc, #56]	@ (800c908 <RegionCommonUpdateBandTimeOff+0x1dc>)
 800c8ce:	4249      	negs	r1, r1
 800c8d0:	4011      	ands	r1, r2
 800c8d2:	4a18      	ldr	r2, [pc, #96]	@ (800c934 <RegionCommonUpdateBandTimeOff+0x208>)
 800c8d4:	1889      	adds	r1, r1, r2
                if( elapsedTimeSinceStartup.Seconds > BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 800c8d6:	429e      	cmp	r6, r3
 800c8d8:	d903      	bls.n	800c8e2 <RegionCommonUpdateBandTimeOff+0x1b6>
                    backoffTimeRange.Seconds += BACKOFF_24_HOURS_IN_S * ( ( ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S ) + 1 );
 800c8da:	9b07      	ldr	r3, [sp, #28]
 800c8dc:	4a0a      	ldr	r2, [pc, #40]	@ (800c908 <RegionCommonUpdateBandTimeOff+0x1dc>)
 800c8de:	189b      	adds	r3, r3, r2
 800c8e0:	18c9      	adds	r1, r1, r3
                backoffTimeRange  = SysTimeSub( backoffTimeRange, elapsedTimeSinceStartup );
 800c8e2:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 800c8e4:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800c8e6:	9300      	str	r3, [sp, #0]
 800c8e8:	a80e      	add	r0, sp, #56	@ 0x38
 800c8ea:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c8ec:	910e      	str	r1, [sp, #56]	@ 0x38
 800c8ee:	f002 fd57 	bl	800f3a0 <SysTimeSub>
                minTimeToWait = SysTimeToMs( backoffTimeRange );
 800c8f2:	980e      	ldr	r0, [sp, #56]	@ 0x38
 800c8f4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800c8f6:	f002 fdc9 	bl	800f48c <SysTimeToMs>
 800c8fa:	9005      	str	r0, [sp, #20]
 800c8fc:	e7b5      	b.n	800c86a <RegionCommonUpdateBandTimeOff+0x13e>
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_1_HOUR_IN_S;
 800c8fe:	21e1      	movs	r1, #225	@ 0xe1
 800c900:	0109      	lsls	r1, r1, #4
 800c902:	e7e8      	b.n	800c8d6 <RegionCommonUpdateBandTimeOff+0x1aa>
 800c904:	fffe13d0 	.word	0xfffe13d0
 800c908:	00015180 	.word	0x00015180
 800c90c:	0001ec30 	.word	0x0001ec30
 800c910:	00009aaf 	.word	0x00009aaf
 800c914:	ffffdcd8 	.word	0xffffdcd8
 800c918:	00002710 	.word	0x00002710
 800c91c:	001b7740 	.word	0x001b7740
 800c920:	0001517f 	.word	0x0001517f
 800c924:	0001ec2f 	.word	0x0001ec2f
 800c928:	0112a880 	.word	0x0112a880
 800c92c:	02932e00 	.word	0x02932e00
 800c930:	fffffc18 	.word	0xfffffc18
 800c934:	00009ab0 	.word	0x00009ab0

0800c938 <RegionCommonParseLinkAdrReq>:

uint8_t RegionCommonParseLinkAdrReq( uint8_t* payload, RegionCommonLinkAdrParams_t* linkAdrParams )
{
 800c938:	b510      	push	{r4, lr}
    uint8_t retIndex = 0;

    if( payload[0] == SRV_MAC_LINK_ADR_REQ )
 800c93a:	7802      	ldrb	r2, [r0, #0]
{
 800c93c:	0003      	movs	r3, r0
    uint8_t retIndex = 0;
 800c93e:	2000      	movs	r0, #0
    if( payload[0] == SRV_MAC_LINK_ADR_REQ )
 800c940:	2a03      	cmp	r2, #3
 800c942:	d113      	bne.n	800c96c <RegionCommonParseLinkAdrReq+0x34>
    {
        // Parse datarate and tx power
        linkAdrParams->Datarate = payload[1];
 800c944:	785a      	ldrb	r2, [r3, #1]
        linkAdrParams->TxPower = linkAdrParams->Datarate & 0x0F;
 800c946:	300f      	adds	r0, #15
 800c948:	0014      	movs	r4, r2
        linkAdrParams->Datarate = ( linkAdrParams->Datarate >> 4 ) & 0x0F;
 800c94a:	0912      	lsrs	r2, r2, #4
        linkAdrParams->TxPower = linkAdrParams->Datarate & 0x0F;
 800c94c:	4004      	ands	r4, r0
 800c94e:	708c      	strb	r4, [r1, #2]
        linkAdrParams->Datarate = ( linkAdrParams->Datarate >> 4 ) & 0x0F;
 800c950:	704a      	strb	r2, [r1, #1]
        // Parse ChMask
        linkAdrParams->ChMask = ( uint16_t )payload[2];
 800c952:	789a      	ldrb	r2, [r3, #2]
 800c954:	808a      	strh	r2, [r1, #4]
        linkAdrParams->ChMask |= ( uint16_t )payload[3] << 8;
 800c956:	78dc      	ldrb	r4, [r3, #3]
 800c958:	0224      	lsls	r4, r4, #8
 800c95a:	4322      	orrs	r2, r4
 800c95c:	808a      	strh	r2, [r1, #4]
        // Parse ChMaskCtrl and nbRep
        linkAdrParams->NbRep = payload[4];
 800c95e:	791b      	ldrb	r3, [r3, #4]
        linkAdrParams->ChMaskCtrl = ( linkAdrParams->NbRep >> 4 ) & 0x07;
 800c960:	065a      	lsls	r2, r3, #25
 800c962:	0f52      	lsrs	r2, r2, #29
        linkAdrParams->NbRep &= 0x0F;
 800c964:	4003      	ands	r3, r0
        linkAdrParams->ChMaskCtrl = ( linkAdrParams->NbRep >> 4 ) & 0x07;
 800c966:	70ca      	strb	r2, [r1, #3]
        linkAdrParams->NbRep &= 0x0F;
 800c968:	700b      	strb	r3, [r1, #0]

        // LinkAdrReq has 4 bytes length + 1 byte CMD
        retIndex = 5;
 800c96a:	380a      	subs	r0, #10
    }
    return retIndex;
}
 800c96c:	bd10      	pop	{r4, pc}

0800c96e <RegionCommonLinkAdrReqVerifyParams>:

uint8_t RegionCommonLinkAdrReqVerifyParams( RegionCommonLinkAdrReqVerifyParams_t* verifyParams, int8_t* dr, int8_t* txPow, uint8_t* nbRep )
{
 800c96e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c970:	b087      	sub	sp, #28
 800c972:	9305      	str	r3, [sp, #20]
    uint8_t status = verifyParams->Status;
    int8_t datarate = verifyParams->Datarate;
 800c974:	2306      	movs	r3, #6
    int8_t txPower = verifyParams->TxPower;
 800c976:	2607      	movs	r6, #7
{
 800c978:	9103      	str	r1, [sp, #12]
 800c97a:	9204      	str	r2, [sp, #16]
    int8_t datarate = verifyParams->Datarate;
 800c97c:	56c3      	ldrsb	r3, [r0, r3]
    uint8_t status = verifyParams->Status;
 800c97e:	7905      	ldrb	r5, [r0, #4]
    int8_t datarate = verifyParams->Datarate;
 800c980:	9302      	str	r3, [sp, #8]
    int8_t nbRepetitions = verifyParams->NbRep;

    // Handle the case when ADR is off.
    if( verifyParams->AdrEnabled == false )
 800c982:	7943      	ldrb	r3, [r0, #5]
{
 800c984:	0004      	movs	r4, r0
    int8_t txPower = verifyParams->TxPower;
 800c986:	5786      	ldrsb	r6, [r0, r6]
    if( verifyParams->AdrEnabled == false )
 800c988:	2b00      	cmp	r3, #0
 800c98a:	d027      	beq.n	800c9dc <RegionCommonLinkAdrReqVerifyParams+0x6e>
    int8_t nbRepetitions = verifyParams->NbRep;
 800c98c:	2708      	movs	r7, #8
 800c98e:	57c7      	ldrsb	r7, [r0, r7]
        nbRepetitions = verifyParams->CurrentNbRep;
        datarate =  verifyParams->CurrentDatarate;
        txPower =  verifyParams->CurrentTxPower;
    }

    if( status != 0 )
 800c990:	2d00      	cmp	r5, #0
 800c992:	d019      	beq.n	800c9c8 <RegionCommonLinkAdrReqVerifyParams+0x5a>
    {
        // Verify datarate. The variable phyParam. Value contains the minimum allowed datarate.
        if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 800c994:	2314      	movs	r3, #20
 800c996:	69a2      	ldr	r2, [r4, #24]
 800c998:	56e3      	ldrsb	r3, [r4, r3]
 800c99a:	7b20      	ldrb	r0, [r4, #12]
 800c99c:	9201      	str	r2, [sp, #4]
 800c99e:	2215      	movs	r2, #21
 800c9a0:	56a2      	ldrsb	r2, [r4, r2]
 800c9a2:	9200      	str	r2, [sp, #0]
 800c9a4:	6921      	ldr	r1, [r4, #16]
 800c9a6:	9a02      	ldr	r2, [sp, #8]
 800c9a8:	f7ff fe12 	bl	800c5d0 <RegionCommonChanVerifyDr>
 800c9ac:	2800      	cmp	r0, #0
 800c9ae:	d101      	bne.n	800c9b4 <RegionCommonLinkAdrReqVerifyParams+0x46>
                                      verifyParams->MinDatarate, verifyParams->MaxDatarate, verifyParams->Channels  ) == false )
        {
            status &= 0xFD; // Datarate KO
 800c9b0:	2302      	movs	r3, #2
 800c9b2:	439d      	bics	r5, r3
        }

        // Verify tx power
        if( RegionCommonValueInRange( txPower, verifyParams->MaxTxPower, verifyParams->MinTxPower ) == 0 )
 800c9b4:	231d      	movs	r3, #29
 800c9b6:	56e3      	ldrsb	r3, [r4, r3]
    if( ( value >= min ) && ( value <= max ) )
 800c9b8:	42b3      	cmp	r3, r6
 800c9ba:	dc17      	bgt.n	800c9ec <RegionCommonLinkAdrReqVerifyParams+0x7e>
 800c9bc:	231c      	movs	r3, #28
 800c9be:	56e3      	ldrsb	r3, [r4, r3]
 800c9c0:	42b3      	cmp	r3, r6
 800c9c2:	da14      	bge.n	800c9ee <RegionCommonLinkAdrReqVerifyParams+0x80>
            { // Apply maximum TX power. Accept TX power.
                txPower = verifyParams->MaxTxPower;
            }
            else
            {
                status &= 0xFB; // TxPower KO
 800c9c4:	2304      	movs	r3, #4
 800c9c6:	439d      	bics	r5, r3
    *dr = datarate;
    *txPow = txPower;
    *nbRep = nbRepetitions;

    return status;
}
 800c9c8:	0028      	movs	r0, r5
    *dr = datarate;
 800c9ca:	9b03      	ldr	r3, [sp, #12]
 800c9cc:	9a02      	ldr	r2, [sp, #8]
 800c9ce:	701a      	strb	r2, [r3, #0]
    *txPow = txPower;
 800c9d0:	9b04      	ldr	r3, [sp, #16]
 800c9d2:	701e      	strb	r6, [r3, #0]
    *nbRep = nbRepetitions;
 800c9d4:	9b05      	ldr	r3, [sp, #20]
 800c9d6:	701f      	strb	r7, [r3, #0]
}
 800c9d8:	b007      	add	sp, #28
 800c9da:	bdf0      	pop	{r4, r5, r6, r7, pc}
        datarate =  verifyParams->CurrentDatarate;
 800c9dc:	2309      	movs	r3, #9
        nbRepetitions = verifyParams->CurrentNbRep;
 800c9de:	270b      	movs	r7, #11
        txPower =  verifyParams->CurrentTxPower;
 800c9e0:	260a      	movs	r6, #10
        datarate =  verifyParams->CurrentDatarate;
 800c9e2:	56c3      	ldrsb	r3, [r0, r3]
        nbRepetitions = verifyParams->CurrentNbRep;
 800c9e4:	57c7      	ldrsb	r7, [r0, r7]
        datarate =  verifyParams->CurrentDatarate;
 800c9e6:	9302      	str	r3, [sp, #8]
        txPower =  verifyParams->CurrentTxPower;
 800c9e8:	5786      	ldrsb	r6, [r0, r6]
 800c9ea:	e7d1      	b.n	800c990 <RegionCommonLinkAdrReqVerifyParams+0x22>
 800c9ec:	001e      	movs	r6, r3
    if( status == 0x07 )
 800c9ee:	2d07      	cmp	r5, #7
 800c9f0:	d1ea      	bne.n	800c9c8 <RegionCommonLinkAdrReqVerifyParams+0x5a>
        if( nbRepetitions == 0 )
 800c9f2:	2f00      	cmp	r7, #0
 800c9f4:	d1e8      	bne.n	800c9c8 <RegionCommonLinkAdrReqVerifyParams+0x5a>
            nbRepetitions = 1;
 800c9f6:	3701      	adds	r7, #1
 800c9f8:	e7e6      	b.n	800c9c8 <RegionCommonLinkAdrReqVerifyParams+0x5a>
	...

0800c9fc <RegionCommonComputeSymbolTimeLoRa>:

uint32_t RegionCommonComputeSymbolTimeLoRa( uint8_t phyDr, uint32_t bandwidthInHz )
{
    return ( 1 << phyDr ) * 1000000 / bandwidthInHz;
 800c9fc:	4b03      	ldr	r3, [pc, #12]	@ (800ca0c <RegionCommonComputeSymbolTimeLoRa+0x10>)
{
 800c9fe:	b510      	push	{r4, lr}
    return ( 1 << phyDr ) * 1000000 / bandwidthInHz;
 800ca00:	4083      	lsls	r3, r0
 800ca02:	0018      	movs	r0, r3
 800ca04:	f7f3 fbb0 	bl	8000168 <__udivsi3>
}
 800ca08:	bd10      	pop	{r4, pc}
 800ca0a:	46c0      	nop			@ (mov r8, r8)
 800ca0c:	000f4240 	.word	0x000f4240

0800ca10 <RegionCommonComputeSymbolTimeFsk>:

uint32_t RegionCommonComputeSymbolTimeFsk( uint8_t phyDrInKbps )
{
 800ca10:	0001      	movs	r1, r0
    return 8000 / ( uint32_t )phyDrInKbps; // 1 symbol equals 1 byte
 800ca12:	20fa      	movs	r0, #250	@ 0xfa
{
 800ca14:	b510      	push	{r4, lr}
    return 8000 / ( uint32_t )phyDrInKbps; // 1 symbol equals 1 byte
 800ca16:	0140      	lsls	r0, r0, #5
 800ca18:	f7f3 fba6 	bl	8000168 <__udivsi3>
}
 800ca1c:	bd10      	pop	{r4, pc}
	...

0800ca20 <RegionCommonComputeRxWindowParameters>:

void RegionCommonComputeRxWindowParameters( uint32_t tSymbolInUs, uint8_t minRxSymbols, uint32_t rxErrorInMs, uint32_t wakeUpTimeInMs, uint32_t* windowTimeoutInSymbols, int32_t* windowOffsetInMs )
{
 800ca20:	b570      	push	{r4, r5, r6, lr}
 800ca22:	001e      	movs	r6, r3
    *windowTimeoutInSymbols = MAX( DIV_CEIL( ( ( 2 * minRxSymbols - 8 ) * tSymbolInUs + 2 * ( rxErrorInMs * 1000 ) ),  tSymbolInUs ), minRxSymbols ); // Computed number of symbols
 800ca24:	23fa      	movs	r3, #250	@ 0xfa
{
 800ca26:	0004      	movs	r4, r0
    *windowTimeoutInSymbols = MAX( DIV_CEIL( ( ( 2 * minRxSymbols - 8 ) * tSymbolInUs + 2 * ( rxErrorInMs * 1000 ) ),  tSymbolInUs ), minRxSymbols ); // Computed number of symbols
 800ca28:	009b      	lsls	r3, r3, #2
 800ca2a:	1f08      	subs	r0, r1, #4
 800ca2c:	4360      	muls	r0, r4
 800ca2e:	4353      	muls	r3, r2
 800ca30:	18c0      	adds	r0, r0, r3
{
 800ca32:	000d      	movs	r5, r1
    *windowTimeoutInSymbols = MAX( DIV_CEIL( ( ( 2 * minRxSymbols - 8 ) * tSymbolInUs + 2 * ( rxErrorInMs * 1000 ) ),  tSymbolInUs ), minRxSymbols ); // Computed number of symbols
 800ca34:	0040      	lsls	r0, r0, #1
 800ca36:	d004      	beq.n	800ca42 <RegionCommonComputeRxWindowParameters+0x22>
 800ca38:	1e63      	subs	r3, r4, #1
 800ca3a:	0021      	movs	r1, r4
 800ca3c:	1818      	adds	r0, r3, r0
 800ca3e:	f7f3 fb93 	bl	8000168 <__udivsi3>
 800ca42:	4285      	cmp	r5, r0
 800ca44:	d200      	bcs.n	800ca48 <RegionCommonComputeRxWindowParameters+0x28>
 800ca46:	0005      	movs	r5, r0
 800ca48:	9b04      	ldr	r3, [sp, #16]
    *windowOffsetInMs = ( int32_t )DIV_CEIL( ( int32_t )( 4 * tSymbolInUs ) -
 800ca4a:	00a0      	lsls	r0, r4, #2
    *windowTimeoutInSymbols = MAX( DIV_CEIL( ( ( 2 * minRxSymbols - 8 ) * tSymbolInUs + 2 * ( rxErrorInMs * 1000 ) ),  tSymbolInUs ), minRxSymbols ); // Computed number of symbols
 800ca4c:	601d      	str	r5, [r3, #0]
    *windowOffsetInMs = ( int32_t )DIV_CEIL( ( int32_t )( 4 * tSymbolInUs ) -
 800ca4e:	2300      	movs	r3, #0
 800ca50:	436c      	muls	r4, r5
 800ca52:	429c      	cmp	r4, r3
 800ca54:	d001      	beq.n	800ca5a <RegionCommonComputeRxWindowParameters+0x3a>
 800ca56:	3401      	adds	r4, #1
 800ca58:	0863      	lsrs	r3, r4, #1
 800ca5a:	21fa      	movs	r1, #250	@ 0xfa
 800ca5c:	0089      	lsls	r1, r1, #2
 800ca5e:	434e      	muls	r6, r1
 800ca60:	1ac0      	subs	r0, r0, r3
 800ca62:	1b80      	subs	r0, r0, r6
 800ca64:	2800      	cmp	r0, #0
 800ca66:	dd01      	ble.n	800ca6c <RegionCommonComputeRxWindowParameters+0x4c>
 800ca68:	4b03      	ldr	r3, [pc, #12]	@ (800ca78 <RegionCommonComputeRxWindowParameters+0x58>)
 800ca6a:	18c0      	adds	r0, r0, r3
 800ca6c:	f7f3 fc06 	bl	800027c <__divsi3>
 800ca70:	9b05      	ldr	r3, [sp, #20]
 800ca72:	6018      	str	r0, [r3, #0]
                                               ( int32_t )DIV_CEIL( ( *windowTimeoutInSymbols * tSymbolInUs ), 2 ) -
                                               ( int32_t )( wakeUpTimeInMs * 1000 ), 1000 );
}
 800ca74:	bd70      	pop	{r4, r5, r6, pc}
 800ca76:	46c0      	nop			@ (mov r8, r8)
 800ca78:	000003e7 	.word	0x000003e7

0800ca7c <RegionCommonComputeTxPower>:

int8_t RegionCommonComputeTxPower( int8_t txPowerIndex, float maxEirp, float antennaGain )
{
 800ca7c:	b570      	push	{r4, r5, r6, lr}
    int8_t phyTxPower = 0;

    phyTxPower = ( int8_t )floor( ( maxEirp - ( txPowerIndex * 2U ) ) - antennaGain );
 800ca7e:	0040      	lsls	r0, r0, #1
{
 800ca80:	1c14      	adds	r4, r2, #0
 800ca82:	1c0d      	adds	r5, r1, #0
    phyTxPower = ( int8_t )floor( ( maxEirp - ( txPowerIndex * 2U ) ) - antennaGain );
 800ca84:	f7f3 ffe2 	bl	8000a4c <__aeabi_ui2f>
 800ca88:	1c01      	adds	r1, r0, #0
 800ca8a:	1c28      	adds	r0, r5, #0
 800ca8c:	f7f3 fe3a 	bl	8000704 <__aeabi_fsub>
 800ca90:	1c21      	adds	r1, r4, #0
 800ca92:	f7f3 fe37 	bl	8000704 <__aeabi_fsub>
 800ca96:	f7f4 fce5 	bl	8001464 <__aeabi_f2d>
 800ca9a:	f003 f9d1 	bl	800fe40 <floor>
 800ca9e:	f7f4 fca5 	bl	80013ec <__aeabi_d2iz>

    return phyTxPower;
 800caa2:	b240      	sxtb	r0, r0
}
 800caa4:	bd70      	pop	{r4, r5, r6, pc}

0800caa6 <RegionCommonCountNbOfEnabledChannels>:
    /* ST_WORKAROUND_END */
}

void RegionCommonCountNbOfEnabledChannels( RegionCommonCountNbOfEnabledChannelsParams_t* countNbOfEnabledChannelsParams,
                                           uint8_t* enabledChannels, uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels )
{
 800caa6:	b5f0      	push	{r4, r5, r6, r7, lr}
 800caa8:	b087      	sub	sp, #28
 800caaa:	9305      	str	r3, [sp, #20]
    uint8_t nbChannelCount = 0;
    uint8_t nbRestrictedChannelsCount = 0;

    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 800caac:	2300      	movs	r3, #0
    uint8_t nbRestrictedChannelsCount = 0;
 800caae:	469c      	mov	ip, r3
    uint8_t nbChannelCount = 0;
 800cab0:	001d      	movs	r5, r3
{
 800cab2:	9103      	str	r1, [sp, #12]
 800cab4:	9204      	str	r2, [sp, #16]
 800cab6:	011a      	lsls	r2, r3, #4
 800cab8:	b2d2      	uxtb	r2, r2
 800caba:	9201      	str	r2, [sp, #4]
    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 800cabc:	9901      	ldr	r1, [sp, #4]
 800cabe:	8a02      	ldrh	r2, [r0, #16]
 800cac0:	428a      	cmp	r2, r1
 800cac2:	d945      	bls.n	800cb50 <RegionCommonCountNbOfEnabledChannels+0xaa>
    {
        for( uint8_t j = 0; j < 16; j++ )
 800cac4:	260c      	movs	r6, #12
        {
            if( ( countNbOfEnabledChannelsParams->ChannelsMask[k] & ( 1 << j ) ) != 0 )
 800cac6:	005a      	lsls	r2, r3, #1
 800cac8:	9202      	str	r2, [sp, #8]
 800caca:	2200      	movs	r2, #0
 800cacc:	434e      	muls	r6, r1
 800cace:	9600      	str	r6, [sp, #0]
 800cad0:	6841      	ldr	r1, [r0, #4]
 800cad2:	9c02      	ldr	r4, [sp, #8]
 800cad4:	2701      	movs	r7, #1
 800cad6:	5b09      	ldrh	r1, [r1, r4]
 800cad8:	4111      	asrs	r1, r2
 800cada:	4239      	tst	r1, r7
 800cadc:	d028      	beq.n	800cb30 <RegionCommonCountNbOfEnabledChannels+0x8a>
            {
                if( countNbOfEnabledChannelsParams->Channels[i + j].Frequency == 0 )
 800cade:	9900      	ldr	r1, [sp, #0]
 800cae0:	6884      	ldr	r4, [r0, #8]
 800cae2:	1864      	adds	r4, r4, r1
 800cae4:	6821      	ldr	r1, [r4, #0]
 800cae6:	2900      	cmp	r1, #0
 800cae8:	d022      	beq.n	800cb30 <RegionCommonCountNbOfEnabledChannels+0x8a>
                { // Check if the channel is enabled
                    continue;
                }
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 800caea:	7801      	ldrb	r1, [r0, #0]
 800caec:	2900      	cmp	r1, #0
 800caee:	d107      	bne.n	800cb00 <RegionCommonCountNbOfEnabledChannels+0x5a>
                    ( countNbOfEnabledChannelsParams->JoinChannels != NULL ) )
 800caf0:	6941      	ldr	r1, [r0, #20]
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 800caf2:	2900      	cmp	r1, #0
 800caf4:	d004      	beq.n	800cb00 <RegionCommonCountNbOfEnabledChannels+0x5a>
                {
                    if( ( countNbOfEnabledChannelsParams->JoinChannels[k] & ( 1 << j ) ) == 0 )
 800caf6:	9e02      	ldr	r6, [sp, #8]
 800caf8:	5b89      	ldrh	r1, [r1, r6]
 800cafa:	4111      	asrs	r1, r2
 800cafc:	4239      	tst	r1, r7
 800cafe:	d017      	beq.n	800cb30 <RegionCommonCountNbOfEnabledChannels+0x8a>
                    {
                        continue;
                    }
                }
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 800cb00:	2101      	movs	r1, #1
 800cb02:	5641      	ldrsb	r1, [r0, r1]
 800cb04:	000e      	movs	r6, r1
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Min,
 800cb06:	7a21      	ldrb	r1, [r4, #8]
 800cb08:	070f      	lsls	r7, r1, #28
    if( ( value >= min ) && ( value <= max ) )
 800cb0a:	173f      	asrs	r7, r7, #28
 800cb0c:	42be      	cmp	r6, r7
 800cb0e:	db0f      	blt.n	800cb30 <RegionCommonCountNbOfEnabledChannels+0x8a>
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Max ) == false )
 800cb10:	b249      	sxtb	r1, r1
    if( ( value >= min ) && ( value <= max ) )
 800cb12:	1109      	asrs	r1, r1, #4
 800cb14:	428e      	cmp	r6, r1
 800cb16:	dc0b      	bgt.n	800cb30 <RegionCommonCountNbOfEnabledChannels+0x8a>
                { // Check if the current channel selection supports the given datarate
                    continue;
                }
                if( countNbOfEnabledChannelsParams->Bands[countNbOfEnabledChannelsParams->Channels[i + j].Band].ReadyForTransmission == false )
 800cb18:	2618      	movs	r6, #24
 800cb1a:	7a64      	ldrb	r4, [r4, #9]
 800cb1c:	68c1      	ldr	r1, [r0, #12]
 800cb1e:	4374      	muls	r4, r6
 800cb20:	1909      	adds	r1, r1, r4
 800cb22:	7d09      	ldrb	r1, [r1, #20]
 800cb24:	2900      	cmp	r1, #0
 800cb26:	d10c      	bne.n	800cb42 <RegionCommonCountNbOfEnabledChannels+0x9c>
                { // Check if the band is available for transmission
                    nbRestrictedChannelsCount++;
 800cb28:	4661      	mov	r1, ip
 800cb2a:	3101      	adds	r1, #1
 800cb2c:	b2c9      	uxtb	r1, r1
 800cb2e:	468c      	mov	ip, r1
        for( uint8_t j = 0; j < 16; j++ )
 800cb30:	9900      	ldr	r1, [sp, #0]
 800cb32:	3201      	adds	r2, #1
 800cb34:	310c      	adds	r1, #12
 800cb36:	9100      	str	r1, [sp, #0]
 800cb38:	2a10      	cmp	r2, #16
 800cb3a:	d1c9      	bne.n	800cad0 <RegionCommonCountNbOfEnabledChannels+0x2a>
    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 800cb3c:	3301      	adds	r3, #1
 800cb3e:	b2db      	uxtb	r3, r3
 800cb40:	e7b9      	b.n	800cab6 <RegionCommonCountNbOfEnabledChannels+0x10>
                    continue;
                }
                enabledChannels[nbChannelCount++] = i + j;
 800cb42:	9c01      	ldr	r4, [sp, #4]
 800cb44:	9e03      	ldr	r6, [sp, #12]
 800cb46:	1c69      	adds	r1, r5, #1
 800cb48:	18a4      	adds	r4, r4, r2
 800cb4a:	5574      	strb	r4, [r6, r5]
 800cb4c:	b2cd      	uxtb	r5, r1
 800cb4e:	e7ef      	b.n	800cb30 <RegionCommonCountNbOfEnabledChannels+0x8a>
            }
        }
    }
    *nbEnabledChannels = nbChannelCount;
    *nbRestrictedChannels = nbRestrictedChannelsCount;
 800cb50:	4662      	mov	r2, ip
    *nbEnabledChannels = nbChannelCount;
 800cb52:	9b04      	ldr	r3, [sp, #16]
 800cb54:	701d      	strb	r5, [r3, #0]
    *nbRestrictedChannels = nbRestrictedChannelsCount;
 800cb56:	9b05      	ldr	r3, [sp, #20]
 800cb58:	701a      	strb	r2, [r3, #0]
}
 800cb5a:	b007      	add	sp, #28
 800cb5c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800cb5e <RegionCommonIdentifyChannels>:

LoRaMacStatus_t RegionCommonIdentifyChannels( RegionCommonIdentifyChannelsParam_t* identifyChannelsParam,
                                              TimerTime_t* aggregatedTimeOff, uint8_t* enabledChannels,
                                              uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels,
                                              TimerTime_t* nextTxDelay )
{
 800cb5e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cb60:	0004      	movs	r4, r0
 800cb62:	b089      	sub	sp, #36	@ 0x24
    TimerTime_t elapsed = TimerGetElapsedTime( identifyChannelsParam->LastAggrTx );
 800cb64:	6840      	ldr	r0, [r0, #4]
{
 800cb66:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 800cb68:	9205      	str	r2, [sp, #20]
 800cb6a:	9304      	str	r3, [sp, #16]
 800cb6c:	000e      	movs	r6, r1
    TimerTime_t elapsed = TimerGetElapsedTime( identifyChannelsParam->LastAggrTx );
 800cb6e:	f002 fda1 	bl	800f6b4 <UTIL_TIMER_GetElapsedTime>
    *nextTxDelay = identifyChannelsParam->AggrTimeOff - elapsed;
 800cb72:	6823      	ldr	r3, [r4, #0]
    *nbRestrictedChannels = 1;
    *nbEnabledChannels = 0;
 800cb74:	2700      	movs	r7, #0
    *nextTxDelay = identifyChannelsParam->AggrTimeOff - elapsed;
 800cb76:	1a1b      	subs	r3, r3, r0
 800cb78:	602b      	str	r3, [r5, #0]
    *nbRestrictedChannels = 1;
 800cb7a:	2301      	movs	r3, #1
 800cb7c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800cb7e:	7013      	strb	r3, [r2, #0]
    *nbEnabledChannels = 0;
 800cb80:	9b04      	ldr	r3, [sp, #16]
 800cb82:	701f      	strb	r7, [r3, #0]

    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 800cb84:	6863      	ldr	r3, [r4, #4]
 800cb86:	42bb      	cmp	r3, r7
 800cb88:	d002      	beq.n	800cb90 <RegionCommonIdentifyChannels+0x32>
 800cb8a:	6823      	ldr	r3, [r4, #0]
 800cb8c:	4283      	cmp	r3, r0
 800cb8e:	d825      	bhi.n	800cbdc <RegionCommonIdentifyChannels+0x7e>
        ( identifyChannelsParam->AggrTimeOff <= elapsed ) )
    {
        // Reset Aggregated time off
        *aggregatedTimeOff = 0;
 800cb90:	6037      	str	r7, [r6, #0]

        // Update bands Time OFF
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 800cb92:	7a23      	ldrb	r3, [r4, #8]
 800cb94:	69e0      	ldr	r0, [r4, #28]
 800cb96:	9306      	str	r3, [sp, #24]
 800cb98:	7a62      	ldrb	r2, [r4, #9]
 800cb9a:	7803      	ldrb	r3, [r0, #0]
 800cb9c:	4694      	mov	ip, r2
 800cb9e:	69a2      	ldr	r2, [r4, #24]
 800cba0:	9307      	str	r3, [sp, #28]
 800cba2:	9203      	str	r2, [sp, #12]
 800cba4:	0022      	movs	r2, r4
 800cba6:	a901      	add	r1, sp, #4
 800cba8:	320c      	adds	r2, #12
 800cbaa:	ca48      	ldmia	r2!, {r3, r6}
 800cbac:	c148      	stmia	r1!, {r3, r6}
 800cbae:	7d22      	ldrb	r2, [r4, #20]
 800cbb0:	9b06      	ldr	r3, [sp, #24]
 800cbb2:	9200      	str	r2, [sp, #0]
 800cbb4:	68c1      	ldr	r1, [r0, #12]
 800cbb6:	4662      	mov	r2, ip
 800cbb8:	9807      	ldr	r0, [sp, #28]
 800cbba:	f7ff fdb7 	bl	800c72c <RegionCommonUpdateBandTimeOff>
                                                      identifyChannelsParam->DutyCycleEnabled,
                                                      identifyChannelsParam->LastTxIsJoinRequest,
                                                      identifyChannelsParam->ElapsedTimeSinceStartUp,
                                                      identifyChannelsParam->ExpectedTimeOnAir );

        RegionCommonCountNbOfEnabledChannels( identifyChannelsParam->CountNbOfEnabledChannelsParam, enabledChannels,
 800cbbe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 800cbc0:	6028      	str	r0, [r5, #0]
        RegionCommonCountNbOfEnabledChannels( identifyChannelsParam->CountNbOfEnabledChannelsParam, enabledChannels,
 800cbc2:	9a04      	ldr	r2, [sp, #16]
 800cbc4:	9905      	ldr	r1, [sp, #20]
 800cbc6:	69e0      	ldr	r0, [r4, #28]
 800cbc8:	f7ff ff6d 	bl	800caa6 <RegionCommonCountNbOfEnabledChannels>
                                              nbEnabledChannels, nbRestrictedChannels );
    }

    if( *nbEnabledChannels > 0 )
 800cbcc:	9b04      	ldr	r3, [sp, #16]
 800cbce:	781b      	ldrb	r3, [r3, #0]
 800cbd0:	2b00      	cmp	r3, #0
 800cbd2:	d003      	beq.n	800cbdc <RegionCommonIdentifyChannels+0x7e>
    {
        *nextTxDelay = 0;
        return LORAMAC_STATUS_OK;
 800cbd4:	2000      	movs	r0, #0
        *nextTxDelay = 0;
 800cbd6:	602f      	str	r7, [r5, #0]
    }
    else
    {
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
    }
}
 800cbd8:	b009      	add	sp, #36	@ 0x24
 800cbda:	bdf0      	pop	{r4, r5, r6, r7, pc}
    else if( *nbRestrictedChannels > 0 )
 800cbdc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cbde:	7818      	ldrb	r0, [r3, #0]
        return LORAMAC_STATUS_DUTYCYCLE_RESTRICTED;
 800cbe0:	4243      	negs	r3, r0
 800cbe2:	4158      	adcs	r0, r3
 800cbe4:	300b      	adds	r0, #11
 800cbe6:	e7f7      	b.n	800cbd8 <RegionCommonIdentifyChannels+0x7a>

0800cbe8 <RegionCommonGetNextLowerTxDr>:

int8_t RegionCommonGetNextLowerTxDr( RegionCommonGetNextLowerTxDrParams_t *params )
{
 800cbe8:	b573      	push	{r0, r1, r4, r5, r6, lr}
    int8_t drLocal = params->CurrentDr;
 800cbea:	2400      	movs	r4, #0

    if( params->CurrentDr == params->MinDr )
 800cbec:	2602      	movs	r6, #2
    int8_t drLocal = params->CurrentDr;
 800cbee:	5704      	ldrsb	r4, [r0, r4]
    if( params->CurrentDr == params->MinDr )
 800cbf0:	5786      	ldrsb	r6, [r0, r6]
{
 800cbf2:	0005      	movs	r5, r0
    if( params->CurrentDr == params->MinDr )
 800cbf4:	42a6      	cmp	r6, r4
 800cbf6:	d010      	beq.n	800cc1a <RegionCommonGetNextLowerTxDr+0x32>
    }
    else
    {
        do
        {
            drLocal = ( drLocal - 1 );
 800cbf8:	3c01      	subs	r4, #1
 800cbfa:	b264      	sxtb	r4, r4
        } while( ( drLocal != params->MinDr ) &&
 800cbfc:	42a6      	cmp	r6, r4
 800cbfe:	d00c      	beq.n	800cc1a <RegionCommonGetNextLowerTxDr+0x32>
                 ( RegionCommonChanVerifyDr( params->NbChannels, params->ChannelsMask, drLocal, params->MinDr, params->MaxDr, params->Channels  ) == false ) );
 800cc00:	68ab      	ldr	r3, [r5, #8]
 800cc02:	78e8      	ldrb	r0, [r5, #3]
 800cc04:	9301      	str	r3, [sp, #4]
 800cc06:	2301      	movs	r3, #1
 800cc08:	56eb      	ldrsb	r3, [r5, r3]
 800cc0a:	0022      	movs	r2, r4
 800cc0c:	9300      	str	r3, [sp, #0]
 800cc0e:	6869      	ldr	r1, [r5, #4]
 800cc10:	0033      	movs	r3, r6
 800cc12:	f7ff fcdd 	bl	800c5d0 <RegionCommonChanVerifyDr>
        } while( ( drLocal != params->MinDr ) &&
 800cc16:	2800      	cmp	r0, #0
 800cc18:	d0ee      	beq.n	800cbf8 <RegionCommonGetNextLowerTxDr+0x10>

        return drLocal;
    }
}
 800cc1a:	0020      	movs	r0, r4
 800cc1c:	bd76      	pop	{r1, r2, r4, r5, r6, pc}

0800cc1e <RegionCommonLimitTxPower>:

int8_t RegionCommonLimitTxPower( int8_t txPower, int8_t maxBandTxPower )
{
    // Limit tx power to the band max
    return MAX( txPower, maxBandTxPower );
 800cc1e:	1c0b      	adds	r3, r1, #0
 800cc20:	4281      	cmp	r1, r0
 800cc22:	da00      	bge.n	800cc26 <RegionCommonLimitTxPower+0x8>
 800cc24:	1c03      	adds	r3, r0, #0
 800cc26:	b258      	sxtb	r0, r3
}
 800cc28:	4770      	bx	lr
	...

0800cc2c <RegionCommonGetBandwidth>:

uint32_t RegionCommonGetBandwidth( uint32_t drIndex, const uint32_t* bandwidths )
{
    switch( bandwidths[drIndex] )
 800cc2c:	0080      	lsls	r0, r0, #2
 800cc2e:	5843      	ldr	r3, [r0, r1]
 800cc30:	4a04      	ldr	r2, [pc, #16]	@ (800cc44 <RegionCommonGetBandwidth+0x18>)
 800cc32:	2001      	movs	r0, #1
 800cc34:	4293      	cmp	r3, r2
 800cc36:	d004      	beq.n	800cc42 <RegionCommonGetBandwidth+0x16>
 800cc38:	4a03      	ldr	r2, [pc, #12]	@ (800cc48 <RegionCommonGetBandwidth+0x1c>)
 800cc3a:	189b      	adds	r3, r3, r2
 800cc3c:	425a      	negs	r2, r3
 800cc3e:	4153      	adcs	r3, r2
 800cc40:	0058      	lsls	r0, r3, #1
        case 250000:
            return 1;
        case 500000:
            return 2;
    }
}
 800cc42:	4770      	bx	lr
 800cc44:	0003d090 	.word	0x0003d090
 800cc48:	fff85ee0 	.word	0xfff85ee0

0800cc4c <RegionCommonRxConfigPrint>:

/* ST_WORKAROUND_BEGIN: Print Tx/Rx config */
void RegionCommonRxConfigPrint(LoRaMacRxSlot_t rxSlot, uint32_t frequency, int8_t dr)
{
 800cc4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cc4e:	b08b      	sub	sp, #44	@ 0x2c
    const char *slotStrings[] = { "1", "2", "C", "Multi_C", "P", "Multi_P" };
 800cc50:	ad04      	add	r5, sp, #16
 800cc52:	002c      	movs	r4, r5
 800cc54:	4b0f      	ldr	r3, [pc, #60]	@ (800cc94 <RegionCommonRxConfigPrint+0x48>)
{
 800cc56:	4694      	mov	ip, r2
    const char *slotStrings[] = { "1", "2", "C", "Multi_C", "P", "Multi_P" };
 800cc58:	cbc4      	ldmia	r3!, {r2, r6, r7}
 800cc5a:	c4c4      	stmia	r4!, {r2, r6, r7}
 800cc5c:	cbc4      	ldmia	r3!, {r2, r6, r7}
 800cc5e:	c4c4      	stmia	r4!, {r2, r6, r7}

    if ( rxSlot < RX_SLOT_NONE )
 800cc60:	2805      	cmp	r0, #5
 800cc62:	d80d      	bhi.n	800cc80 <RegionCommonRxConfigPrint+0x34>
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX_%s on freq %d Hz at DR %d\r\n", slotStrings[rxSlot], frequency, dr );
 800cc64:	4662      	mov	r2, ip
 800cc66:	9101      	str	r1, [sp, #4]
 800cc68:	0080      	lsls	r0, r0, #2
 800cc6a:	9202      	str	r2, [sp, #8]
 800cc6c:	5942      	ldr	r2, [r0, r5]
 800cc6e:	2100      	movs	r1, #0
 800cc70:	9200      	str	r2, [sp, #0]
 800cc72:	2002      	movs	r0, #2
 800cc74:	2201      	movs	r2, #1
 800cc76:	4b08      	ldr	r3, [pc, #32]	@ (800cc98 <RegionCommonRxConfigPrint+0x4c>)
 800cc78:	f002 f94c 	bl	800ef14 <UTIL_ADV_TRACE_COND_FSend>
    }
    else
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
    }
}
 800cc7c:	b00b      	add	sp, #44	@ 0x2c
 800cc7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
 800cc80:	4662      	mov	r2, ip
 800cc82:	9100      	str	r1, [sp, #0]
 800cc84:	9201      	str	r2, [sp, #4]
 800cc86:	2100      	movs	r1, #0
 800cc88:	2201      	movs	r2, #1
 800cc8a:	4b04      	ldr	r3, [pc, #16]	@ (800cc9c <RegionCommonRxConfigPrint+0x50>)
 800cc8c:	2002      	movs	r0, #2
 800cc8e:	f002 f941 	bl	800ef14 <UTIL_ADV_TRACE_COND_FSend>
}
 800cc92:	e7f3      	b.n	800cc7c <RegionCommonRxConfigPrint+0x30>
 800cc94:	08010778 	.word	0x08010778
 800cc98:	080121e4 	.word	0x080121e4
 800cc9c:	08012203 	.word	0x08012203

0800cca0 <RegionCommonTxConfigPrint>:

void RegionCommonTxConfigPrint(uint32_t frequency, int8_t dr)
{
 800cca0:	b507      	push	{r0, r1, r2, lr}
    MW_LOG(TS_ON, VLEVEL_M,  "TX on freq %d Hz at DR %d\r\n", frequency, dr );
 800cca2:	4b04      	ldr	r3, [pc, #16]	@ (800ccb4 <RegionCommonTxConfigPrint+0x14>)
 800cca4:	9101      	str	r1, [sp, #4]
 800cca6:	9000      	str	r0, [sp, #0]
 800cca8:	2201      	movs	r2, #1
 800ccaa:	2100      	movs	r1, #0
 800ccac:	2002      	movs	r0, #2
 800ccae:	f002 f931 	bl	800ef14 <UTIL_ADV_TRACE_COND_FSend>
}
 800ccb2:	bd07      	pop	{r0, r1, r2, pc}
 800ccb4:	0801221f 	.word	0x0801221f

0800ccb8 <GetTimeOnAir>:
    }
    return true;
}

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 800ccb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ccba:	000c      	movs	r4, r1
    int8_t phyDr = DataratesEU868[datarate];
 800ccbc:	4911      	ldr	r1, [pc, #68]	@ (800cd04 <GetTimeOnAir+0x4c>)
{
 800ccbe:	b085      	sub	sp, #20
    int8_t phyDr = DataratesEU868[datarate];
 800ccc0:	560f      	ldrsb	r7, [r1, r0]
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsEU868 );
 800ccc2:	3108      	adds	r1, #8
{
 800ccc4:	0005      	movs	r5, r0
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsEU868 );
 800ccc6:	f7ff ffb1 	bl	800cc2c <RegionCommonGetBandwidth>
    TimerTime_t timeOnAir = 0;

    if( datarate == DR_7 )
    { // High Speed FSK channel
        timeOnAir = Radio.TimeOnAir( MODEM_FSK, bandwidth, phyDr * 1000, 0, 5, false, pktLen, true );
 800ccca:	4b0f      	ldr	r3, [pc, #60]	@ (800cd08 <GetTimeOnAir+0x50>)
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsEU868 );
 800cccc:	0001      	movs	r1, r0
        timeOnAir = Radio.TimeOnAir( MODEM_FSK, bandwidth, phyDr * 1000, 0, 5, false, pktLen, true );
 800ccce:	6a5e      	ldr	r6, [r3, #36]	@ 0x24
 800ccd0:	2001      	movs	r0, #1
 800ccd2:	b2e4      	uxtb	r4, r4
    if( datarate == DR_7 )
 800ccd4:	2d07      	cmp	r5, #7
 800ccd6:	d10c      	bne.n	800ccf2 <GetTimeOnAir+0x3a>
        timeOnAir = Radio.TimeOnAir( MODEM_FSK, bandwidth, phyDr * 1000, 0, 5, false, pktLen, true );
 800ccd8:	2305      	movs	r3, #5
 800ccda:	9003      	str	r0, [sp, #12]
 800ccdc:	2000      	movs	r0, #0
 800ccde:	22fa      	movs	r2, #250	@ 0xfa
 800cce0:	9300      	str	r3, [sp, #0]
 800cce2:	0003      	movs	r3, r0
 800cce4:	0092      	lsls	r2, r2, #2
 800cce6:	437a      	muls	r2, r7
 800cce8:	9402      	str	r4, [sp, #8]
 800ccea:	9001      	str	r0, [sp, #4]
    }
    else
    {
        timeOnAir = Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 800ccec:	47b0      	blx	r6
    }
    return timeOnAir;
}
 800ccee:	b005      	add	sp, #20
 800ccf0:	bdf0      	pop	{r4, r5, r6, r7, pc}
        timeOnAir = Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 800ccf2:	2300      	movs	r3, #0
 800ccf4:	9301      	str	r3, [sp, #4]
 800ccf6:	3308      	adds	r3, #8
 800ccf8:	9300      	str	r3, [sp, #0]
 800ccfa:	003a      	movs	r2, r7
 800ccfc:	0003      	movs	r3, r0
 800ccfe:	9003      	str	r0, [sp, #12]
 800cd00:	9402      	str	r4, [sp, #8]
 800cd02:	e7f3      	b.n	800ccec <GetTimeOnAir+0x34>
 800cd04:	08010790 	.word	0x08010790
 800cd08:	080108d8 	.word	0x080108d8

0800cd0c <VerifyRfFreq>:
    if( Radio.CheckRfFrequency( freq ) == false )
 800cd0c:	4b19      	ldr	r3, [pc, #100]	@ (800cd74 <VerifyRfFreq+0x68>)
{
 800cd0e:	b570      	push	{r4, r5, r6, lr}
    if( Radio.CheckRfFrequency( freq ) == false )
 800cd10:	6a1b      	ldr	r3, [r3, #32]
{
 800cd12:	0004      	movs	r4, r0
 800cd14:	000d      	movs	r5, r1
    if( Radio.CheckRfFrequency( freq ) == false )
 800cd16:	4798      	blx	r3
 800cd18:	2800      	cmp	r0, #0
 800cd1a:	d00b      	beq.n	800cd34 <VerifyRfFreq+0x28>
    if( ( freq >= 863000000 ) && ( freq < 865000000 ) )
 800cd1c:	4b16      	ldr	r3, [pc, #88]	@ (800cd78 <VerifyRfFreq+0x6c>)
 800cd1e:	4a17      	ldr	r2, [pc, #92]	@ (800cd7c <VerifyRfFreq+0x70>)
 800cd20:	18e3      	adds	r3, r4, r3
 800cd22:	4293      	cmp	r3, r2
 800cd24:	d907      	bls.n	800cd36 <VerifyRfFreq+0x2a>
    else if( ( freq >= 865000000 ) && ( freq <= 868000000 ) )
 800cd26:	4b16      	ldr	r3, [pc, #88]	@ (800cd80 <VerifyRfFreq+0x74>)
 800cd28:	4a16      	ldr	r2, [pc, #88]	@ (800cd84 <VerifyRfFreq+0x78>)
 800cd2a:	18e3      	adds	r3, r4, r3
 800cd2c:	4293      	cmp	r3, r2
 800cd2e:	d80a      	bhi.n	800cd46 <VerifyRfFreq+0x3a>
 800cd30:	2300      	movs	r3, #0
        *band = 0;
 800cd32:	702b      	strb	r3, [r5, #0]
}
 800cd34:	bd70      	pop	{r4, r5, r6, pc}
 800cd36:	2302      	movs	r3, #2
 800cd38:	e7fb      	b.n	800cd32 <VerifyRfFreq+0x26>
 800cd3a:	2301      	movs	r3, #1
 800cd3c:	e7f9      	b.n	800cd32 <VerifyRfFreq+0x26>
 800cd3e:	2305      	movs	r3, #5
 800cd40:	e7f7      	b.n	800cd32 <VerifyRfFreq+0x26>
 800cd42:	2303      	movs	r3, #3
 800cd44:	e7f5      	b.n	800cd32 <VerifyRfFreq+0x26>
    else if( ( freq > 868000000 ) && ( freq <= 868600000 ) )
 800cd46:	4b10      	ldr	r3, [pc, #64]	@ (800cd88 <VerifyRfFreq+0x7c>)
 800cd48:	4a10      	ldr	r2, [pc, #64]	@ (800cd8c <VerifyRfFreq+0x80>)
 800cd4a:	18e3      	adds	r3, r4, r3
 800cd4c:	4293      	cmp	r3, r2
 800cd4e:	d9f4      	bls.n	800cd3a <VerifyRfFreq+0x2e>
    else if( ( freq >= 868700000 ) && ( freq <= 869200000 ) )
 800cd50:	4b0f      	ldr	r3, [pc, #60]	@ (800cd90 <VerifyRfFreq+0x84>)
 800cd52:	4a10      	ldr	r2, [pc, #64]	@ (800cd94 <VerifyRfFreq+0x88>)
 800cd54:	18e3      	adds	r3, r4, r3
 800cd56:	4293      	cmp	r3, r2
 800cd58:	d9f1      	bls.n	800cd3e <VerifyRfFreq+0x32>
    else if( ( freq >= 869400000 ) && ( freq <= 869650000 ) )
 800cd5a:	4b0f      	ldr	r3, [pc, #60]	@ (800cd98 <VerifyRfFreq+0x8c>)
 800cd5c:	4a0f      	ldr	r2, [pc, #60]	@ (800cd9c <VerifyRfFreq+0x90>)
 800cd5e:	18e3      	adds	r3, r4, r3
 800cd60:	4293      	cmp	r3, r2
 800cd62:	d9ee      	bls.n	800cd42 <VerifyRfFreq+0x36>
    else if( ( freq >= 869700000 ) && ( freq <= 870000000 ) )
 800cd64:	4b0e      	ldr	r3, [pc, #56]	@ (800cda0 <VerifyRfFreq+0x94>)
 800cd66:	4a0f      	ldr	r2, [pc, #60]	@ (800cda4 <VerifyRfFreq+0x98>)
 800cd68:	18e4      	adds	r4, r4, r3
 800cd6a:	2304      	movs	r3, #4
 800cd6c:	4294      	cmp	r4, r2
 800cd6e:	d9e0      	bls.n	800cd32 <VerifyRfFreq+0x26>
        return false;
 800cd70:	2000      	movs	r0, #0
 800cd72:	e7df      	b.n	800cd34 <VerifyRfFreq+0x28>
 800cd74:	080108d8 	.word	0x080108d8
 800cd78:	cc8faa40 	.word	0xcc8faa40
 800cd7c:	001e847f 	.word	0x001e847f
 800cd80:	cc7125c0 	.word	0xcc7125c0
 800cd84:	002dc6c0 	.word	0x002dc6c0
 800cd88:	cc435eff 	.word	0xcc435eff
 800cd8c:	000927bf 	.word	0x000927bf
 800cd90:	cc38b0a0 	.word	0xcc38b0a0
 800cd94:	0007a120 	.word	0x0007a120
 800cd98:	cc2e0240 	.word	0xcc2e0240
 800cd9c:	0003d090 	.word	0x0003d090
 800cda0:	cc296e60 	.word	0xcc296e60
 800cda4:	000493e0 	.word	0x000493e0

0800cda8 <RegionEU868GetPhyParam>:
#endif /* REGION_EU868 */

PhyParam_t RegionEU868GetPhyParam( GetPhyParams_t* getPhy )
{
 800cda8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    PhyParam_t phyParam = { 0 };
 800cdaa:	2200      	movs	r2, #0
{
 800cdac:	0003      	movs	r3, r0

#if defined( REGION_EU868 )
    switch( getPhy->Attribute )
 800cdae:	7800      	ldrb	r0, [r0, #0]
    PhyParam_t phyParam = { 0 };
 800cdb0:	9200      	str	r2, [sp, #0]
    switch( getPhy->Attribute )
 800cdb2:	380b      	subs	r0, #11
 800cdb4:	282e      	cmp	r0, #46	@ 0x2e
 800cdb6:	d863      	bhi.n	800ce80 <RegionEU868GetPhyParam+0xd8>
 800cdb8:	f7f3 f9b8 	bl	800012c <__gnu_thumb1_case_uqi>
 800cdbc:	342f2d2a 	.word	0x342f2d2a
 800cdc0:	3d3a3836 	.word	0x3d3a3836
 800cdc4:	47444240 	.word	0x47444240
 800cdc8:	52625062 	.word	0x52625062
 800cdcc:	625c5a56 	.word	0x625c5a56
 800cdd0:	18655f62 	.word	0x18655f62
 800cdd4:	62626262 	.word	0x62626262
 800cdd8:	62626262 	.word	0x62626262
 800cddc:	62626262 	.word	0x62626262
 800cde0:	6b675062 	.word	0x6b675062
 800cde4:	6b506262 	.word	0x6b506262
 800cde8:	6d62      	.short	0x6d62
 800cdea:	6f          	.byte	0x6f
 800cdeb:	00          	.byte	0x00
            phyParam.Value = EU868_DEFAULT_DATARATE;
            break;
        }
        case PHY_NEXT_LOWER_TX_DR:
        {
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 800cdec:	785b      	ldrb	r3, [r3, #1]
 800cdee:	a801      	add	r0, sp, #4
 800cdf0:	7003      	strb	r3, [r0, #0]
 800cdf2:	2307      	movs	r3, #7
 800cdf4:	7043      	strb	r3, [r0, #1]
 800cdf6:	2380      	movs	r3, #128	@ 0x80
 800cdf8:	015b      	lsls	r3, r3, #5
 800cdfa:	8043      	strh	r3, [r0, #2]
            {
                .CurrentDr = getPhy->Datarate,
                .MaxDr = ( int8_t )EU868_TX_MAX_DATARATE,
                .MinDr = ( int8_t )EU868_TX_MIN_DATARATE,
                .NbChannels = EU868_MAX_NB_CHANNELS,
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
 800cdfc:	4b2a      	ldr	r3, [pc, #168]	@ (800cea8 <RegionEU868GetPhyParam+0x100>)
 800cdfe:	681b      	ldr	r3, [r3, #0]
 800ce00:	001a      	movs	r2, r3
 800ce02:	32c0      	adds	r2, #192	@ 0xc0
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 800ce04:	6042      	str	r2, [r0, #4]
 800ce06:	6083      	str	r3, [r0, #8]
                .Channels = RegionNvmGroup2->Channels,
            };
            phyParam.Value = RegionCommonGetNextLowerTxDr( &nextLowerTxDrParams );
 800ce08:	f7ff feee 	bl	800cbe8 <RegionCommonGetNextLowerTxDr>
            phyParam.Value = DataratesEU868[getPhy->Datarate];
            break;
        }
        case PHY_BW_FROM_DR:
        {
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsEU868 );
 800ce0c:	9000      	str	r0, [sp, #0]
            break;
 800ce0e:	e037      	b.n	800ce80 <RegionEU868GetPhyParam+0xd8>
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_LIMIT;
 800ce10:	2340      	movs	r3, #64	@ 0x40
            phyParam.Value = DataratesEU868[getPhy->Datarate];
 800ce12:	9300      	str	r3, [sp, #0]
            break;
 800ce14:	e034      	b.n	800ce80 <RegionEU868GetPhyParam+0xd8>
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_DELAY;
 800ce16:	2320      	movs	r3, #32
 800ce18:	e7fb      	b.n	800ce12 <RegionEU868GetPhyParam+0x6a>
            phyParam.Value = MaxPayloadOfDatarateEU868[getPhy->Datarate];
 800ce1a:	4a24      	ldr	r2, [pc, #144]	@ (800ceac <RegionEU868GetPhyParam+0x104>)
            phyParam.Value = DataratesEU868[getPhy->Datarate];
 800ce1c:	785b      	ldrb	r3, [r3, #1]
 800ce1e:	b25b      	sxtb	r3, r3
 800ce20:	5cd3      	ldrb	r3, [r2, r3]
 800ce22:	e7f6      	b.n	800ce12 <RegionEU868GetPhyParam+0x6a>
            phyParam.Value = MaxPayloadOfDatarateRepeaterEU868[getPhy->Datarate];
 800ce24:	4a22      	ldr	r2, [pc, #136]	@ (800ceb0 <RegionEU868GetPhyParam+0x108>)
 800ce26:	e7f9      	b.n	800ce1c <RegionEU868GetPhyParam+0x74>
            phyParam.Value = EU868_DUTY_CYCLE_ENABLED;
 800ce28:	2301      	movs	r3, #1
 800ce2a:	e7f2      	b.n	800ce12 <RegionEU868GetPhyParam+0x6a>
            phyParam.Value = EU868_MAX_RX_WINDOW;
 800ce2c:	4b21      	ldr	r3, [pc, #132]	@ (800ceb4 <RegionEU868GetPhyParam+0x10c>)
 800ce2e:	e7f0      	b.n	800ce12 <RegionEU868GetPhyParam+0x6a>
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY1;
 800ce30:	23fa      	movs	r3, #250	@ 0xfa
 800ce32:	009b      	lsls	r3, r3, #2
 800ce34:	e7ed      	b.n	800ce12 <RegionEU868GetPhyParam+0x6a>
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY2;
 800ce36:	23fa      	movs	r3, #250	@ 0xfa
 800ce38:	00db      	lsls	r3, r3, #3
 800ce3a:	e7ea      	b.n	800ce12 <RegionEU868GetPhyParam+0x6a>
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY1;
 800ce3c:	4b1e      	ldr	r3, [pc, #120]	@ (800ceb8 <RegionEU868GetPhyParam+0x110>)
 800ce3e:	e7e8      	b.n	800ce12 <RegionEU868GetPhyParam+0x6a>
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY2;
 800ce40:	4b1e      	ldr	r3, [pc, #120]	@ (800cebc <RegionEU868GetPhyParam+0x114>)
 800ce42:	e7e6      	b.n	800ce12 <RegionEU868GetPhyParam+0x6a>
            phyParam.Value = REGION_COMMON_DEFAULT_MAX_FCNT_GAP;
 800ce44:	2380      	movs	r3, #128	@ 0x80
 800ce46:	01db      	lsls	r3, r3, #7
 800ce48:	e7e3      	b.n	800ce12 <RegionEU868GetPhyParam+0x6a>
            phyParam.Value = ( REGION_COMMON_DEFAULT_ACK_TIMEOUT + randr( -REGION_COMMON_DEFAULT_ACK_TIMEOUT_RND, REGION_COMMON_DEFAULT_ACK_TIMEOUT_RND ) );
 800ce4a:	21fa      	movs	r1, #250	@ 0xfa
 800ce4c:	481c      	ldr	r0, [pc, #112]	@ (800cec0 <RegionEU868GetPhyParam+0x118>)
 800ce4e:	0089      	lsls	r1, r1, #2
 800ce50:	f000 fc7c 	bl	800d74c <randr>
 800ce54:	23fa      	movs	r3, #250	@ 0xfa
 800ce56:	00db      	lsls	r3, r3, #3
 800ce58:	18c0      	adds	r0, r0, r3
 800ce5a:	e7d7      	b.n	800ce0c <RegionEU868GetPhyParam+0x64>
            phyParam.Value = EU868_RX_WND_2_FREQ;
 800ce5c:	4b19      	ldr	r3, [pc, #100]	@ (800cec4 <RegionEU868GetPhyParam+0x11c>)
 800ce5e:	e7d8      	b.n	800ce12 <RegionEU868GetPhyParam+0x6a>
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 800ce60:	4b11      	ldr	r3, [pc, #68]	@ (800cea8 <RegionEU868GetPhyParam+0x100>)
 800ce62:	681b      	ldr	r3, [r3, #0]
 800ce64:	33c0      	adds	r3, #192	@ 0xc0
 800ce66:	e7d4      	b.n	800ce12 <RegionEU868GetPhyParam+0x6a>
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsDefaultMask;
 800ce68:	4b0f      	ldr	r3, [pc, #60]	@ (800cea8 <RegionEU868GetPhyParam+0x100>)
 800ce6a:	681b      	ldr	r3, [r3, #0]
 800ce6c:	33c2      	adds	r3, #194	@ 0xc2
 800ce6e:	e7d0      	b.n	800ce12 <RegionEU868GetPhyParam+0x6a>
            phyParam.Value = EU868_MAX_NB_CHANNELS;
 800ce70:	2310      	movs	r3, #16
 800ce72:	e7ce      	b.n	800ce12 <RegionEU868GetPhyParam+0x6a>
            phyParam.Channels = RegionNvmGroup2->Channels;
 800ce74:	4b0c      	ldr	r3, [pc, #48]	@ (800cea8 <RegionEU868GetPhyParam+0x100>)
 800ce76:	681b      	ldr	r3, [r3, #0]
 800ce78:	e7cb      	b.n	800ce12 <RegionEU868GetPhyParam+0x6a>
            phyParam.fValue = EU868_DEFAULT_MAX_EIRP;
 800ce7a:	2383      	movs	r3, #131	@ 0x83
 800ce7c:	05db      	lsls	r3, r3, #23
            phyParam.fValue = EU868_DEFAULT_ANTENNA_GAIN;
 800ce7e:	9300      	str	r3, [sp, #0]
            break;
        }
    }

#endif /* REGION_EU868 */
    return phyParam;
 800ce80:	9800      	ldr	r0, [sp, #0]
}
 800ce82:	b005      	add	sp, #20
 800ce84:	bd00      	pop	{pc}
            phyParam.fValue = EU868_DEFAULT_ANTENNA_GAIN;
 800ce86:	4b10      	ldr	r3, [pc, #64]	@ (800cec8 <RegionEU868GetPhyParam+0x120>)
 800ce88:	e7f9      	b.n	800ce7e <RegionEU868GetPhyParam+0xd6>
            phyParam.BeaconFormat.BeaconSize = EU868_BEACON_SIZE;
 800ce8a:	466a      	mov	r2, sp
 800ce8c:	4b0f      	ldr	r3, [pc, #60]	@ (800cecc <RegionEU868GetPhyParam+0x124>)
 800ce8e:	8013      	strh	r3, [r2, #0]
            break;
 800ce90:	e7f6      	b.n	800ce80 <RegionEU868GetPhyParam+0xd8>
            phyParam.Value = EU868_BEACON_CHANNEL_DR;
 800ce92:	2303      	movs	r3, #3
 800ce94:	e7bd      	b.n	800ce12 <RegionEU868GetPhyParam+0x6a>
            phyParam.Value = DataratesEU868[getPhy->Datarate];
 800ce96:	4a0e      	ldr	r2, [pc, #56]	@ (800ced0 <RegionEU868GetPhyParam+0x128>)
 800ce98:	e7c0      	b.n	800ce1c <RegionEU868GetPhyParam+0x74>
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsEU868 );
 800ce9a:	2001      	movs	r0, #1
 800ce9c:	490d      	ldr	r1, [pc, #52]	@ (800ced4 <RegionEU868GetPhyParam+0x12c>)
 800ce9e:	5618      	ldrsb	r0, [r3, r0]
 800cea0:	f7ff fec4 	bl	800cc2c <RegionCommonGetBandwidth>
 800cea4:	e7b2      	b.n	800ce0c <RegionEU868GetPhyParam+0x64>
 800cea6:	46c0      	nop			@ (mov r8, r8)
 800cea8:	20001360 	.word	0x20001360
 800ceac:	080107b8 	.word	0x080107b8
 800ceb0:	080107c0 	.word	0x080107c0
 800ceb4:	00000bb8 	.word	0x00000bb8
 800ceb8:	00001388 	.word	0x00001388
 800cebc:	00001770 	.word	0x00001770
 800cec0:	fffffc18 	.word	0xfffffc18
 800cec4:	33d3e608 	.word	0x33d3e608
 800cec8:	4009999a 	.word	0x4009999a
 800cecc:	00000211 	.word	0x00000211
 800ced0:	08010790 	.word	0x08010790
 800ced4:	08010798 	.word	0x08010798

0800ced8 <RegionEU868SetBandTxDone>:

void RegionEU868SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 800ced8:	b537      	push	{r0, r1, r2, r4, r5, lr}
#if defined( REGION_EU868 )
    RegionCommonSetBandTxDone( &RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txDone->Channel].Band],
 800ceda:	7805      	ldrb	r5, [r0, #0]
{
 800cedc:	0001      	movs	r1, r0
    RegionCommonSetBandTxDone( &RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txDone->Channel].Band],
 800cede:	7842      	ldrb	r2, [r0, #1]
 800cee0:	200c      	movs	r0, #12
 800cee2:	4c08      	ldr	r4, [pc, #32]	@ (800cf04 <RegionEU868SetBandTxDone+0x2c>)
 800cee4:	4368      	muls	r0, r5
 800cee6:	6823      	ldr	r3, [r4, #0]
 800cee8:	181b      	adds	r3, r3, r0
 800ceea:	7a58      	ldrb	r0, [r3, #9]
 800ceec:	2318      	movs	r3, #24
 800ceee:	4343      	muls	r3, r0
 800cef0:	6860      	ldr	r0, [r4, #4]
 800cef2:	18c0      	adds	r0, r0, r3
 800cef4:	690b      	ldr	r3, [r1, #16]
 800cef6:	9300      	str	r3, [sp, #0]
 800cef8:	68cb      	ldr	r3, [r1, #12]
 800cefa:	6889      	ldr	r1, [r1, #8]
 800cefc:	f7ff fbe8 	bl	800c6d0 <RegionCommonSetBandTxDone>
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#endif /* REGION_EU868 */
}
 800cf00:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
 800cf02:	46c0      	nop			@ (mov r8, r8)
 800cf04:	20001360 	.word	0x20001360

0800cf08 <RegionEU868InitDefaults>:

void RegionEU868InitDefaults( InitDefaultsParams_t* params )
{
 800cf08:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cf0a:	b0a5      	sub	sp, #148	@ 0x94
#if defined( REGION_EU868 )
    Band_t bands[EU868_MAX_NB_BANDS] =
 800cf0c:	466b      	mov	r3, sp
{
 800cf0e:	0004      	movs	r4, r0
    Band_t bands[EU868_MAX_NB_BANDS] =
 800cf10:	228e      	movs	r2, #142	@ 0x8e
 800cf12:	2100      	movs	r1, #0
 800cf14:	1c98      	adds	r0, r3, #2
 800cf16:	f002 ff4b 	bl	800fdb0 <memset>
 800cf1a:	2364      	movs	r3, #100	@ 0x64
 800cf1c:	466a      	mov	r2, sp
 800cf1e:	8013      	strh	r3, [r2, #0]
 800cf20:	8313      	strh	r3, [r2, #24]
 800cf22:	22fa      	movs	r2, #250	@ 0xfa
 800cf24:	4669      	mov	r1, sp
 800cf26:	200a      	movs	r0, #10
 800cf28:	0092      	lsls	r2, r2, #2
 800cf2a:	860a      	strh	r2, [r1, #48]	@ 0x30
 800cf2c:	a912      	add	r1, sp, #72	@ 0x48
 800cf2e:	8008      	strh	r0, [r1, #0]
 800cf30:	a918      	add	r1, sp, #96	@ 0x60
 800cf32:	800b      	strh	r3, [r1, #0]
 800cf34:	ab1e      	add	r3, sp, #120	@ 0x78
 800cf36:	801a      	strh	r2, [r3, #0]
        EU868_BAND3,
        EU868_BAND4,
        EU868_BAND5,
    };

    switch( params->Type )
 800cf38:	7a22      	ldrb	r2, [r4, #8]
 800cf3a:	2a01      	cmp	r2, #1
 800cf3c:	d029      	beq.n	800cf92 <RegionEU868InitDefaults+0x8a>
 800cf3e:	2a02      	cmp	r2, #2
 800cf40:	d031      	beq.n	800cfa6 <RegionEU868InitDefaults+0x9e>
 800cf42:	2a00      	cmp	r2, #0
 800cf44:	d123      	bne.n	800cf8e <RegionEU868InitDefaults+0x86>
    {
        case INIT_TYPE_DEFAULTS:
        {
            if( ( params->NvmGroup1 == NULL ) || ( params->NvmGroup2 == NULL ) )
 800cf46:	6820      	ldr	r0, [r4, #0]
 800cf48:	2800      	cmp	r0, #0
 800cf4a:	d020      	beq.n	800cf8e <RegionEU868InitDefaults+0x86>
 800cf4c:	6863      	ldr	r3, [r4, #4]
 800cf4e:	2b00      	cmp	r3, #0
 800cf50:	d01d      	beq.n	800cf8e <RegionEU868InitDefaults+0x86>
            {
                return;
            }

            RegionNvmGroup1 = (RegionNvmDataGroup1_t*) params->NvmGroup1;
 800cf52:	4c1a      	ldr	r4, [pc, #104]	@ (800cfbc <RegionEU868InitDefaults+0xb4>)
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;

            // Default bands
            memcpy1( ( uint8_t* )RegionNvmGroup1->Bands, ( uint8_t* )bands, sizeof( Band_t ) * EU868_MAX_NB_BANDS );
 800cf54:	4669      	mov	r1, sp
 800cf56:	3290      	adds	r2, #144	@ 0x90
            RegionNvmGroup1 = (RegionNvmDataGroup1_t*) params->NvmGroup1;
 800cf58:	6060      	str	r0, [r4, #4]
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
 800cf5a:	6023      	str	r3, [r4, #0]
            memcpy1( ( uint8_t* )RegionNvmGroup1->Bands, ( uint8_t* )bands, sizeof( Band_t ) * EU868_MAX_NB_BANDS );
 800cf5c:	f000 fc12 	bl	800d784 <memcpy1>

            // Default channels
            RegionNvmGroup2->Channels[0] = ( ChannelParams_t ) EU868_LC1;
 800cf60:	6820      	ldr	r0, [r4, #0]
 800cf62:	4b17      	ldr	r3, [pc, #92]	@ (800cfc0 <RegionEU868InitDefaults+0xb8>)
 800cf64:	0001      	movs	r1, r0
 800cf66:	4a17      	ldr	r2, [pc, #92]	@ (800cfc4 <RegionEU868InitDefaults+0xbc>)
 800cf68:	ca70      	ldmia	r2!, {r4, r5, r6}
 800cf6a:	c170      	stmia	r1!, {r4, r5, r6}
            RegionNvmGroup2->Channels[1] = ( ChannelParams_t ) EU868_LC2;
 800cf6c:	001a      	movs	r2, r3
 800cf6e:	3244      	adds	r2, #68	@ 0x44
 800cf70:	cae0      	ldmia	r2!, {r5, r6, r7}
 800cf72:	c1e0      	stmia	r1!, {r5, r6, r7}
            RegionNvmGroup2->Channels[2] = ( ChannelParams_t ) EU868_LC3;
 800cf74:	0002      	movs	r2, r0
 800cf76:	3350      	adds	r3, #80	@ 0x50
 800cf78:	3218      	adds	r2, #24
 800cf7a:	cb32      	ldmia	r3!, {r1, r4, r5}
 800cf7c:	c232      	stmia	r2!, {r1, r4, r5}

            // Default ChannelsMask
            RegionNvmGroup2->ChannelsDefaultMask[0] = LC( 1 ) + LC( 2 ) + LC( 3 );
 800cf7e:	0001      	movs	r1, r0
 800cf80:	2307      	movs	r3, #7

            // Update the channels mask
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 800cf82:	2201      	movs	r2, #1
            RegionNvmGroup2->ChannelsDefaultMask[0] = LC( 1 ) + LC( 2 ) + LC( 3 );
 800cf84:	31c2      	adds	r1, #194	@ 0xc2
 800cf86:	800b      	strh	r3, [r1, #0]
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 800cf88:	30c0      	adds	r0, #192	@ 0xc0
            // Reset Channels Rx1Frequency to default 0
            RegionNvmGroup2->Channels[0].Rx1Frequency = 0;
            RegionNvmGroup2->Channels[1].Rx1Frequency = 0;
            RegionNvmGroup2->Channels[2].Rx1Frequency = 0;
            // Update the channels mask
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 800cf8a:	f7ff fb93 	bl	800c6b4 <RegionCommonChanMaskCopy>
        {
            break;
        }
    }
#endif /* REGION_EU868 */
}
 800cf8e:	b025      	add	sp, #148	@ 0x94
 800cf90:	bdf0      	pop	{r4, r5, r6, r7, pc}
            RegionNvmGroup2->Channels[0].Rx1Frequency = 0;
 800cf92:	4b0a      	ldr	r3, [pc, #40]	@ (800cfbc <RegionEU868InitDefaults+0xb4>)
 800cf94:	6818      	ldr	r0, [r3, #0]
 800cf96:	2300      	movs	r3, #0
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 800cf98:	0001      	movs	r1, r0
            RegionNvmGroup2->Channels[0].Rx1Frequency = 0;
 800cf9a:	6043      	str	r3, [r0, #4]
            RegionNvmGroup2->Channels[1].Rx1Frequency = 0;
 800cf9c:	6103      	str	r3, [r0, #16]
            RegionNvmGroup2->Channels[2].Rx1Frequency = 0;
 800cf9e:	61c3      	str	r3, [r0, #28]
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 800cfa0:	31c2      	adds	r1, #194	@ 0xc2
 800cfa2:	30c0      	adds	r0, #192	@ 0xc0
 800cfa4:	e7f1      	b.n	800cf8a <RegionEU868InitDefaults+0x82>
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
 800cfa6:	4b05      	ldr	r3, [pc, #20]	@ (800cfbc <RegionEU868InitDefaults+0xb4>)
 800cfa8:	681b      	ldr	r3, [r3, #0]
 800cfaa:	0019      	movs	r1, r3
 800cfac:	33c2      	adds	r3, #194	@ 0xc2
 800cfae:	31c0      	adds	r1, #192	@ 0xc0
 800cfb0:	880a      	ldrh	r2, [r1, #0]
 800cfb2:	881b      	ldrh	r3, [r3, #0]
 800cfb4:	4313      	orrs	r3, r2
 800cfb6:	800b      	strh	r3, [r1, #0]
            break;
 800cfb8:	e7e9      	b.n	800cf8e <RegionEU868InitDefaults+0x86>
 800cfba:	46c0      	nop			@ (mov r8, r8)
 800cfbc:	20001360 	.word	0x20001360
 800cfc0:	08010790 	.word	0x08010790
 800cfc4:	080107c8 	.word	0x080107c8

0800cfc8 <RegionEU868Verify>:

bool RegionEU868Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 800cfc8:	0003      	movs	r3, r0
 800cfca:	b507      	push	{r0, r1, r2, lr}
 800cfcc:	0008      	movs	r0, r1
#if defined( REGION_EU868 )
    switch( phyAttribute )
 800cfce:	290f      	cmp	r1, #15
 800cfd0:	d81f      	bhi.n	800d012 <RegionEU868Verify+0x4a>
 800cfd2:	f7f3 f8ab 	bl	800012c <__gnu_thumb1_case_uqi>
 800cfd6:	1e0a      	.short	0x1e0a
 800cfd8:	1a1e1e1e 	.word	0x1a1e1e1e
 800cfdc:	1a1e1a10 	.word	0x1a1e1a10
 800cfe0:	1e1e1e1a 	.word	0x1e1e1e1a
 800cfe4:	081e      	.short	0x081e
            // Remark: switched min and max!
            return RegionCommonValueInRange( verify->TxPower, EU868_MAX_TX_POWER, EU868_MIN_TX_POWER );
        }
        case PHY_DUTY_CYCLE:
        {
            return EU868_DUTY_CYCLE_ENABLED;
 800cfe6:	2001      	movs	r0, #1
            return false;
    }
#else
    return false;
#endif /* REGION_EU868 */
}
 800cfe8:	bd0e      	pop	{r1, r2, r3, pc}
            return VerifyRfFreq( verify->Frequency, &band );
 800cfea:	466a      	mov	r2, sp
 800cfec:	6818      	ldr	r0, [r3, #0]
 800cfee:	1dd1      	adds	r1, r2, #7
 800cff0:	f7ff fe8c 	bl	800cd0c <VerifyRfFreq>
 800cff4:	e7f8      	b.n	800cfe8 <RegionEU868Verify+0x20>
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
 800cff6:	2000      	movs	r0, #0
 800cff8:	2205      	movs	r2, #5
 800cffa:	5618      	ldrsb	r0, [r3, r0]
 800cffc:	2100      	movs	r1, #0
 800cffe:	f7ff fb1c 	bl	800c63a <RegionCommonValueInRange>
 800d002:	1e43      	subs	r3, r0, #1
 800d004:	4198      	sbcs	r0, r3
 800d006:	b2c0      	uxtb	r0, r0
 800d008:	e7ee      	b.n	800cfe8 <RegionEU868Verify+0x20>
            return RegionCommonValueInRange( verify->TxPower, EU868_MAX_TX_POWER, EU868_MIN_TX_POWER );
 800d00a:	2000      	movs	r0, #0
 800d00c:	2207      	movs	r2, #7
 800d00e:	5618      	ldrsb	r0, [r3, r0]
 800d010:	e7f4      	b.n	800cffc <RegionEU868Verify+0x34>
    switch( phyAttribute )
 800d012:	2000      	movs	r0, #0
 800d014:	e7e8      	b.n	800cfe8 <RegionEU868Verify+0x20>
	...

0800d018 <RegionEU868ChanMaskSet>:
    }
#endif /* REGION_EU868 */
}

bool RegionEU868ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 800d018:	b510      	push	{r4, lr}
#if defined( REGION_EU868 )
    switch( chanMaskSet->ChannelsMaskType )
 800d01a:	7902      	ldrb	r2, [r0, #4]
{
 800d01c:	0003      	movs	r3, r0
    switch( chanMaskSet->ChannelsMaskType )
 800d01e:	2a00      	cmp	r2, #0
 800d020:	d006      	beq.n	800d030 <RegionEU868ChanMaskSet+0x18>
 800d022:	2000      	movs	r0, #0
 800d024:	2a01      	cmp	r2, #1
 800d026:	d10b      	bne.n	800d040 <RegionEU868ChanMaskSet+0x28>
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
            break;
        }
        case CHANNELS_DEFAULT_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 800d028:	4906      	ldr	r1, [pc, #24]	@ (800d044 <RegionEU868ChanMaskSet+0x2c>)
 800d02a:	6808      	ldr	r0, [r1, #0]
 800d02c:	30c2      	adds	r0, #194	@ 0xc2
 800d02e:	e003      	b.n	800d038 <RegionEU868ChanMaskSet+0x20>
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 800d030:	4a04      	ldr	r2, [pc, #16]	@ (800d044 <RegionEU868ChanMaskSet+0x2c>)
 800d032:	6810      	ldr	r0, [r2, #0]
 800d034:	2201      	movs	r2, #1
 800d036:	30c0      	adds	r0, #192	@ 0xc0
 800d038:	6819      	ldr	r1, [r3, #0]
 800d03a:	f7ff fb3b 	bl	800c6b4 <RegionCommonChanMaskCopy>
            break;
        }
        default:
            return false;
    }
    return true;
 800d03e:	2001      	movs	r0, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 800d040:	bd10      	pop	{r4, pc}
 800d042:	46c0      	nop			@ (mov r8, r8)
 800d044:	20001360 	.word	0x20001360

0800d048 <RegionEU868ComputeRxWindowParameters>:

void RegionEU868ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 800d048:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d04a:	001c      	movs	r4, r3
 800d04c:	000e      	movs	r6, r1
 800d04e:	0017      	movs	r7, r2
#if defined( REGION_EU868 )
    uint32_t tSymbolInUs = 0;

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, EU868_RX_MAX_DATARATE );
 800d050:	1c03      	adds	r3, r0, #0
 800d052:	2807      	cmp	r0, #7
 800d054:	dd00      	ble.n	800d058 <RegionEU868ComputeRxWindowParameters+0x10>
 800d056:	2307      	movs	r3, #7
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsEU868 );
 800d058:	4912      	ldr	r1, [pc, #72]	@ (800d0a4 <RegionEU868ComputeRxWindowParameters+0x5c>)
    rxConfigParams->Datarate = MIN( datarate, EU868_RX_MAX_DATARATE );
 800d05a:	b258      	sxtb	r0, r3
 800d05c:	7063      	strb	r3, [r4, #1]
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsEU868 );
 800d05e:	4d12      	ldr	r5, [pc, #72]	@ (800d0a8 <RegionEU868ComputeRxWindowParameters+0x60>)
 800d060:	f7ff fde4 	bl	800cc2c <RegionCommonGetBandwidth>

    if( rxConfigParams->Datarate == DR_7 )
 800d064:	2201      	movs	r2, #1
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsEU868 );
 800d066:	70a0      	strb	r0, [r4, #2]
    if( rxConfigParams->Datarate == DR_7 )
 800d068:	56a2      	ldrsb	r2, [r4, r2]
 800d06a:	2a07      	cmp	r2, #7
 800d06c:	d112      	bne.n	800d094 <RegionEU868ComputeRxWindowParameters+0x4c>
    { // FSK
        tSymbolInUs = RegionCommonComputeSymbolTimeFsk( DataratesEU868[rxConfigParams->Datarate] );
 800d06e:	2032      	movs	r0, #50	@ 0x32
 800d070:	f7ff fcce 	bl	800ca10 <RegionCommonComputeSymbolTimeFsk>
    else
    { // LoRa
        tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesEU868[rxConfigParams->Datarate], BandwidthsEU868[rxConfigParams->Datarate] );
    }

    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 800d074:	4b0d      	ldr	r3, [pc, #52]	@ (800d0ac <RegionEU868ComputeRxWindowParameters+0x64>)
        tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesEU868[rxConfigParams->Datarate], BandwidthsEU868[rxConfigParams->Datarate] );
 800d076:	0005      	movs	r5, r0
    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 800d078:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d07a:	4798      	blx	r3
 800d07c:	0022      	movs	r2, r4
 800d07e:	3408      	adds	r4, #8
 800d080:	320c      	adds	r2, #12
 800d082:	0003      	movs	r3, r0
 800d084:	0031      	movs	r1, r6
 800d086:	0028      	movs	r0, r5
 800d088:	9201      	str	r2, [sp, #4]
 800d08a:	9400      	str	r4, [sp, #0]
 800d08c:	003a      	movs	r2, r7
 800d08e:	f7ff fcc7 	bl	800ca20 <RegionCommonComputeRxWindowParameters>
#endif /* REGION_EU868 */
}
 800d092:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
        tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesEU868[rxConfigParams->Datarate], BandwidthsEU868[rxConfigParams->Datarate] );
 800d094:	0093      	lsls	r3, r2, #2
 800d096:	18eb      	adds	r3, r5, r3
 800d098:	5ca8      	ldrb	r0, [r5, r2]
 800d09a:	6899      	ldr	r1, [r3, #8]
 800d09c:	f7ff fcae 	bl	800c9fc <RegionCommonComputeSymbolTimeLoRa>
 800d0a0:	e7e8      	b.n	800d074 <RegionEU868ComputeRxWindowParameters+0x2c>
 800d0a2:	46c0      	nop			@ (mov r8, r8)
 800d0a4:	08010798 	.word	0x08010798
 800d0a8:	08010790 	.word	0x08010790
 800d0ac:	080108d8 	.word	0x080108d8

0800d0b0 <RegionEU868RxConfig>:

bool RegionEU868RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 800d0b0:	b5f0      	push	{r4, r5, r6, r7, lr}
#if defined( REGION_EU868 )
    RadioModems_t modem;
    int8_t dr = rxConfig->Datarate;
 800d0b2:	2601      	movs	r6, #1
    uint8_t maxPayload = 0;
    int8_t phyDr = 0;
    uint32_t frequency = rxConfig->Frequency;
 800d0b4:	6843      	ldr	r3, [r0, #4]
{
 800d0b6:	b08f      	sub	sp, #60	@ 0x3c

    if( Radio.GetStatus( ) != RF_IDLE )
 800d0b8:	4f33      	ldr	r7, [pc, #204]	@ (800d188 <RegionEU868RxConfig+0xd8>)
{
 800d0ba:	910d      	str	r1, [sp, #52]	@ 0x34
    int8_t dr = rxConfig->Datarate;
 800d0bc:	5786      	ldrsb	r6, [r0, r6]
    uint32_t frequency = rxConfig->Frequency;
 800d0be:	930b      	str	r3, [sp, #44]	@ 0x2c
    if( Radio.GetStatus( ) != RF_IDLE )
 800d0c0:	687b      	ldr	r3, [r7, #4]
{
 800d0c2:	0004      	movs	r4, r0
    if( Radio.GetStatus( ) != RF_IDLE )
 800d0c4:	4798      	blx	r3
 800d0c6:	0005      	movs	r5, r0
    {
        return false;
 800d0c8:	2000      	movs	r0, #0
    if( Radio.GetStatus( ) != RF_IDLE )
 800d0ca:	4285      	cmp	r5, r0
 800d0cc:	d143      	bne.n	800d156 <RegionEU868RxConfig+0xa6>
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 800d0ce:	7ce3      	ldrb	r3, [r4, #19]
 800d0d0:	4283      	cmp	r3, r0
 800d0d2:	d10b      	bne.n	800d0ec <RegionEU868RxConfig+0x3c>
    {
        // Apply window 1 frequency
        frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Frequency;
        // Apply the alternative RX 1 window frequency, if it is available
        if( RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency != 0 )
 800d0d4:	220c      	movs	r2, #12
 800d0d6:	7821      	ldrb	r1, [r4, #0]
        frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Frequency;
 800d0d8:	4b2c      	ldr	r3, [pc, #176]	@ (800d18c <RegionEU868RxConfig+0xdc>)
 800d0da:	434a      	muls	r2, r1
 800d0dc:	681b      	ldr	r3, [r3, #0]
 800d0de:	189b      	adds	r3, r3, r2
        if( RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency != 0 )
 800d0e0:	685a      	ldr	r2, [r3, #4]
 800d0e2:	920b      	str	r2, [sp, #44]	@ 0x2c
 800d0e4:	4282      	cmp	r2, r0
 800d0e6:	d101      	bne.n	800d0ec <RegionEU868RxConfig+0x3c>
        frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Frequency;
 800d0e8:	681b      	ldr	r3, [r3, #0]
 800d0ea:	930b      	str	r3, [sp, #44]	@ 0x2c
            frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency;
        }
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesEU868[dr];
 800d0ec:	4b28      	ldr	r3, [pc, #160]	@ (800d190 <RegionEU868RxConfig+0xe0>)

    Radio.SetChannel( frequency );
 800d0ee:	980b      	ldr	r0, [sp, #44]	@ 0x2c
    phyDr = DataratesEU868[dr];
 800d0f0:	579b      	ldrsb	r3, [r3, r6]
 800d0f2:	930c      	str	r3, [sp, #48]	@ 0x30
    Radio.SetChannel( frequency );
 800d0f4:	68fb      	ldr	r3, [r7, #12]
 800d0f6:	4798      	blx	r3

    // Radio configuration
    if( dr == DR_7 )
    {
        modem = MODEM_FSK;
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
 800d0f8:	69bf      	ldr	r7, [r7, #24]
 800d0fa:	7ca3      	ldrb	r3, [r4, #18]
    if( dr == DR_7 )
 800d0fc:	2e07      	cmp	r6, #7
 800d0fe:	d12c      	bne.n	800d15a <RegionEU868RxConfig+0xaa>
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
 800d100:	2000      	movs	r0, #0
 800d102:	9309      	str	r3, [sp, #36]	@ 0x24
 800d104:	2301      	movs	r3, #1
 800d106:	9008      	str	r0, [sp, #32]
 800d108:	9007      	str	r0, [sp, #28]
 800d10a:	9006      	str	r0, [sp, #24]
 800d10c:	9305      	str	r3, [sp, #20]
 800d10e:	9004      	str	r0, [sp, #16]
 800d110:	9003      	str	r0, [sp, #12]
 800d112:	68a3      	ldr	r3, [r4, #8]
 800d114:	22fa      	movs	r2, #250	@ 0xfa
 800d116:	b29b      	uxth	r3, r3
 800d118:	9302      	str	r3, [sp, #8]
 800d11a:	2305      	movs	r3, #5
 800d11c:	9301      	str	r3, [sp, #4]
 800d11e:	4b1d      	ldr	r3, [pc, #116]	@ (800d194 <RegionEU868RxConfig+0xe4>)
 800d120:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800d122:	9300      	str	r3, [sp, #0]
 800d124:	0003      	movs	r3, r0
 800d126:	0092      	lsls	r2, r2, #2
 800d128:	434a      	muls	r2, r1
 800d12a:	491b      	ldr	r1, [pc, #108]	@ (800d198 <RegionEU868RxConfig+0xe8>)
    }
    else
    {
        modem = MODEM_LORA;
        Radio.SetRxConfig( modem, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 800d12c:	47b8      	blx	r7
    }

    /* ST_WORKAROUND_BEGIN: Keep repeater feature */
    if( rxConfig->RepeaterSupport == true )
 800d12e:	7c62      	ldrb	r2, [r4, #17]
 800d130:	4b17      	ldr	r3, [pc, #92]	@ (800d190 <RegionEU868RxConfig+0xe0>)
 800d132:	2a00      	cmp	r2, #0
 800d134:	d025      	beq.n	800d182 <RegionEU868RxConfig+0xd2>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterEU868[dr];
 800d136:	3330      	adds	r3, #48	@ 0x30
    }
    else
    {
        maxPayload = MaxPayloadOfDatarateEU868[dr];
 800d138:	5d99      	ldrb	r1, [r3, r6]
    }

    Radio.SetMaxPayloadLength( modem, maxPayload + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 800d13a:	4b13      	ldr	r3, [pc, #76]	@ (800d188 <RegionEU868RxConfig+0xd8>)
 800d13c:	310d      	adds	r1, #13
 800d13e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d140:	0028      	movs	r0, r5
 800d142:	b2c9      	uxtb	r1, r1
 800d144:	4798      	blx	r3
    /* ST_WORKAROUND_END */

    /* ST_WORKAROUND_BEGIN: Print Rx config */
    RegionCommonRxConfigPrint(rxConfig->RxSlot, frequency, dr);
 800d146:	7ce0      	ldrb	r0, [r4, #19]
 800d148:	0032      	movs	r2, r6
 800d14a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d14c:	f7ff fd7e 	bl	800cc4c <RegionCommonRxConfigPrint>
    /* ST_WORKAROUND_END */

    *datarate = (uint8_t) dr;
    return true;
 800d150:	2001      	movs	r0, #1
    *datarate = (uint8_t) dr;
 800d152:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d154:	701e      	strb	r6, [r3, #0]
#else
    return false;
#endif /* REGION_EU868 */
}
 800d156:	b00f      	add	sp, #60	@ 0x3c
 800d158:	bdf0      	pop	{r4, r5, r6, r7, pc}
        Radio.SetRxConfig( modem, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 800d15a:	78a1      	ldrb	r1, [r4, #2]
 800d15c:	2501      	movs	r5, #1
 800d15e:	9309      	str	r3, [sp, #36]	@ 0x24
 800d160:	2300      	movs	r3, #0
 800d162:	9508      	str	r5, [sp, #32]
 800d164:	9307      	str	r3, [sp, #28]
 800d166:	9306      	str	r3, [sp, #24]
 800d168:	9305      	str	r3, [sp, #20]
 800d16a:	9304      	str	r3, [sp, #16]
 800d16c:	9303      	str	r3, [sp, #12]
 800d16e:	68a2      	ldr	r2, [r4, #8]
 800d170:	0028      	movs	r0, r5
 800d172:	b292      	uxth	r2, r2
 800d174:	9202      	str	r2, [sp, #8]
 800d176:	2208      	movs	r2, #8
 800d178:	9300      	str	r3, [sp, #0]
 800d17a:	9201      	str	r2, [sp, #4]
 800d17c:	002b      	movs	r3, r5
 800d17e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800d180:	e7d4      	b.n	800d12c <RegionEU868RxConfig+0x7c>
        maxPayload = MaxPayloadOfDatarateEU868[dr];
 800d182:	3328      	adds	r3, #40	@ 0x28
 800d184:	e7d8      	b.n	800d138 <RegionEU868RxConfig+0x88>
 800d186:	46c0      	nop			@ (mov r8, r8)
 800d188:	080108d8 	.word	0x080108d8
 800d18c:	20001360 	.word	0x20001360
 800d190:	08010790 	.word	0x08010790
 800d194:	00014585 	.word	0x00014585
 800d198:	0000c350 	.word	0x0000c350

0800d19c <RegionEU868TxConfig>:

bool RegionEU868TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 800d19c:	b5f0      	push	{r4, r5, r6, r7, lr}
#if defined( REGION_EU868 )
    RadioModems_t modem;
    int8_t phyDr = DataratesEU868[txConfig->Datarate];
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
 800d19e:	250c      	movs	r5, #12
{
 800d1a0:	b091      	sub	sp, #68	@ 0x44
 800d1a2:	910e      	str	r1, [sp, #56]	@ 0x38
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
 800d1a4:	7801      	ldrb	r1, [r0, #0]
 800d1a6:	4e39      	ldr	r6, [pc, #228]	@ (800d28c <RegionEU868TxConfig+0xf0>)
 800d1a8:	4369      	muls	r1, r5
{
 800d1aa:	920f      	str	r2, [sp, #60]	@ 0x3c
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
 800d1ac:	6832      	ldr	r2, [r6, #0]
    int8_t phyDr = DataratesEU868[txConfig->Datarate];
 800d1ae:	2301      	movs	r3, #1
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
 800d1b0:	1852      	adds	r2, r2, r1
 800d1b2:	7a51      	ldrb	r1, [r2, #9]
 800d1b4:	2218      	movs	r2, #24
{
 800d1b6:	0004      	movs	r4, r0
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
 800d1b8:	434a      	muls	r2, r1
    int8_t phyDr = DataratesEU868[txConfig->Datarate];
 800d1ba:	56c3      	ldrsb	r3, [r0, r3]
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
 800d1bc:	2102      	movs	r1, #2
 800d1be:	2002      	movs	r0, #2
    int8_t phyDr = DataratesEU868[txConfig->Datarate];
 800d1c0:	4f33      	ldr	r7, [pc, #204]	@ (800d290 <RegionEU868TxConfig+0xf4>)
 800d1c2:	56fb      	ldrsb	r3, [r7, r3]
 800d1c4:	930a      	str	r3, [sp, #40]	@ 0x28
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
 800d1c6:	6873      	ldr	r3, [r6, #4]
 800d1c8:	5620      	ldrsb	r0, [r4, r0]
 800d1ca:	189b      	adds	r3, r3, r2
 800d1cc:	5659      	ldrsb	r1, [r3, r1]
 800d1ce:	f7ff fd26 	bl	800cc1e <RegionCommonLimitTxPower>
    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsEU868 );
 800d1d2:	0039      	movs	r1, r7
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
 800d1d4:	900c      	str	r0, [sp, #48]	@ 0x30
    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsEU868 );
 800d1d6:	2001      	movs	r0, #1
 800d1d8:	3108      	adds	r1, #8
 800d1da:	5620      	ldrsb	r0, [r4, r0]
 800d1dc:	f7ff fd26 	bl	800cc2c <RegionCommonGetBandwidth>
    int8_t phyTxPower = 0;

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 800d1e0:	68a2      	ldr	r2, [r4, #8]
 800d1e2:	6861      	ldr	r1, [r4, #4]
    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsEU868 );
 800d1e4:	900b      	str	r0, [sp, #44]	@ 0x2c
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 800d1e6:	980c      	ldr	r0, [sp, #48]	@ 0x30
 800d1e8:	f7ff fc48 	bl	800ca7c <RegionCommonComputeTxPower>

    // Setup the radio frequency
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 800d1ec:	7823      	ldrb	r3, [r4, #0]
 800d1ee:	6832      	ldr	r2, [r6, #0]
 800d1f0:	435d      	muls	r5, r3
 800d1f2:	4e28      	ldr	r6, [pc, #160]	@ (800d294 <RegionEU868TxConfig+0xf8>)
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 800d1f4:	900d      	str	r0, [sp, #52]	@ 0x34
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 800d1f6:	68f3      	ldr	r3, [r6, #12]
 800d1f8:	58a8      	ldr	r0, [r5, r2]
 800d1fa:	4798      	blx	r3

    if( txConfig->Datarate == DR_7 )
 800d1fc:	2201      	movs	r2, #1
 800d1fe:	23fa      	movs	r3, #250	@ 0xfa
 800d200:	2500      	movs	r5, #0
 800d202:	56a2      	ldrsb	r2, [r4, r2]
 800d204:	011b      	lsls	r3, r3, #4
    { // High Speed FSK channel
        modem = MODEM_FSK;
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
 800d206:	69f7      	ldr	r7, [r6, #28]
 800d208:	9308      	str	r3, [sp, #32]
 800d20a:	9507      	str	r5, [sp, #28]
 800d20c:	9506      	str	r5, [sp, #24]
 800d20e:	9505      	str	r5, [sp, #20]
    if( txConfig->Datarate == DR_7 )
 800d210:	2a07      	cmp	r2, #7
 800d212:	d12c      	bne.n	800d26e <RegionEU868TxConfig+0xd2>
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
 800d214:	2301      	movs	r3, #1
 800d216:	9304      	str	r3, [sp, #16]
 800d218:	3304      	adds	r3, #4
 800d21a:	9302      	str	r3, [sp, #8]
 800d21c:	23fa      	movs	r3, #250	@ 0xfa
 800d21e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d220:	009b      	lsls	r3, r3, #2
 800d222:	4353      	muls	r3, r2
 800d224:	0028      	movs	r0, r5
 800d226:	9300      	str	r3, [sp, #0]
 800d228:	4a1b      	ldr	r2, [pc, #108]	@ (800d298 <RegionEU868TxConfig+0xfc>)
 800d22a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d22c:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800d22e:	9503      	str	r5, [sp, #12]
 800d230:	9501      	str	r5, [sp, #4]
 800d232:	47b8      	blx	r7
        modem = MODEM_FSK;
 800d234:	002e      	movs	r6, r5
    {
        modem = MODEM_LORA;
        Radio.SetTxConfig( modem, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
    }
    /* ST_WORKAROUND_BEGIN: Print Tx config */
    RegionCommonTxConfigPrint(RegionNvmGroup2->Channels[txConfig->Channel].Frequency, txConfig->Datarate);
 800d236:	4b15      	ldr	r3, [pc, #84]	@ (800d28c <RegionEU868TxConfig+0xf0>)
 800d238:	2101      	movs	r1, #1
 800d23a:	681a      	ldr	r2, [r3, #0]
 800d23c:	230c      	movs	r3, #12
 800d23e:	7820      	ldrb	r0, [r4, #0]
 800d240:	5661      	ldrsb	r1, [r4, r1]
 800d242:	4343      	muls	r3, r0
 800d244:	5898      	ldr	r0, [r3, r2]
 800d246:	f7ff fd2b 	bl	800cca0 <RegionCommonTxConfigPrint>
    /* ST_WORKAROUND_END */

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 800d24a:	2001      	movs	r0, #1
 800d24c:	89a1      	ldrh	r1, [r4, #12]
 800d24e:	5620      	ldrsb	r0, [r4, r0]
 800d250:	f7ff fd32 	bl	800ccb8 <GetTimeOnAir>
 800d254:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d256:	6018      	str	r0, [r3, #0]

    // Setup maximum payload length of the radio driver
    Radio.SetMaxPayloadLength( modem, txConfig->PktLen );
 800d258:	4b0e      	ldr	r3, [pc, #56]	@ (800d294 <RegionEU868TxConfig+0xf8>)
 800d25a:	0030      	movs	r0, r6
 800d25c:	7b21      	ldrb	r1, [r4, #12]
 800d25e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d260:	4798      	blx	r3
    *txPower = txPowerLimited;
    return true;
#else
    return false;
#endif /* REGION_EU868 */
}
 800d262:	2001      	movs	r0, #1
    *txPower = txPowerLimited;
 800d264:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d266:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800d268:	701a      	strb	r2, [r3, #0]
}
 800d26a:	b011      	add	sp, #68	@ 0x44
 800d26c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        Radio.SetTxConfig( modem, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 800d26e:	2308      	movs	r3, #8
 800d270:	2601      	movs	r6, #1
 800d272:	9302      	str	r3, [sp, #8]
 800d274:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d276:	002a      	movs	r2, r5
 800d278:	9300      	str	r3, [sp, #0]
 800d27a:	0030      	movs	r0, r6
 800d27c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d27e:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800d280:	9604      	str	r6, [sp, #16]
 800d282:	9503      	str	r5, [sp, #12]
 800d284:	9601      	str	r6, [sp, #4]
 800d286:	47b8      	blx	r7
 800d288:	e7d5      	b.n	800d236 <RegionEU868TxConfig+0x9a>
 800d28a:	46c0      	nop			@ (mov r8, r8)
 800d28c:	20001360 	.word	0x20001360
 800d290:	08010790 	.word	0x08010790
 800d294:	080108d8 	.word	0x080108d8
 800d298:	000061a8 	.word	0x000061a8

0800d29c <RegionEU868LinkAdrReq>:

uint8_t RegionEU868LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 800d29c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d29e:	b093      	sub	sp, #76	@ 0x4c
 800d2a0:	9103      	str	r1, [sp, #12]
 800d2a2:	9204      	str	r2, [sp, #16]
 800d2a4:	0004      	movs	r4, r0
    uint8_t status = 0x07;
#if defined( REGION_EU868 )
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 800d2a6:	2206      	movs	r2, #6
 800d2a8:	2100      	movs	r1, #0
 800d2aa:	a808      	add	r0, sp, #32
{
 800d2ac:	9305      	str	r3, [sp, #20]
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 800d2ae:	f002 fd7f 	bl	800fdb0 <memset>
    uint8_t nextIndex = 0;
    uint8_t bytesProcessed = 0;
    uint16_t chMask = 0;
 800d2b2:	2300      	movs	r3, #0
    uint8_t status = 0x07;
 800d2b4:	2507      	movs	r5, #7
    uint16_t chMask = 0;
 800d2b6:	aa06      	add	r2, sp, #24
 800d2b8:	80d3      	strh	r3, [r2, #6]
    uint8_t bytesProcessed = 0;
 800d2ba:	9301      	str	r3, [sp, #4]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    while( bytesProcessed < linkAdrReq->PayloadSize )
 800d2bc:	7a23      	ldrb	r3, [r4, #8]
 800d2be:	9a01      	ldr	r2, [sp, #4]
 800d2c0:	4293      	cmp	r3, r2
 800d2c2:	d907      	bls.n	800d2d4 <RegionEU868LinkAdrReq+0x38>
    {
        // Get ADR request parameters
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 800d2c4:	6860      	ldr	r0, [r4, #4]
 800d2c6:	9b01      	ldr	r3, [sp, #4]
 800d2c8:	a908      	add	r1, sp, #32
 800d2ca:	18c0      	adds	r0, r0, r3
 800d2cc:	f7ff fb34 	bl	800c938 <RegionCommonParseLinkAdrReq>

        if( nextIndex == 0 )
 800d2d0:	2800      	cmp	r0, #0
 800d2d2:	d144      	bne.n	800d35e <RegionEU868LinkAdrReq+0xc2>
    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
    phyParam = RegionEU868GetPhyParam( &getPhy );

    linkAdrVerifyParams.Status = status;
 800d2d4:	a80a      	add	r0, sp, #40	@ 0x28
 800d2d6:	7105      	strb	r5, [r0, #4]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 800d2d8:	7aa3      	ldrb	r3, [r4, #10]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 800d2da:	ad08      	add	r5, sp, #32
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 800d2dc:	7143      	strb	r3, [r0, #5]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 800d2de:	786b      	ldrb	r3, [r5, #1]
    linkAdrVerifyParams.MinTxPower = EU868_MIN_TX_POWER;
    linkAdrVerifyParams.MaxTxPower = EU868_MAX_TX_POWER;
    linkAdrVerifyParams.Version = linkAdrReq->Version;

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 800d2e0:	220a      	movs	r2, #10
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 800d2e2:	7183      	strb	r3, [r0, #6]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 800d2e4:	78ab      	ldrb	r3, [r5, #2]
    linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
 800d2e6:	4e3d      	ldr	r6, [pc, #244]	@ (800d3dc <RegionEU868LinkAdrReq+0x140>)
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 800d2e8:	71c3      	strb	r3, [r0, #7]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 800d2ea:	782b      	ldrb	r3, [r5, #0]
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 800d2ec:	a906      	add	r1, sp, #24
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 800d2ee:	7203      	strb	r3, [r0, #8]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 800d2f0:	7ae3      	ldrb	r3, [r4, #11]
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 800d2f2:	1852      	adds	r2, r2, r1
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 800d2f4:	7243      	strb	r3, [r0, #9]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 800d2f6:	7b23      	ldrb	r3, [r4, #12]
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 800d2f8:	2109      	movs	r1, #9
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 800d2fa:	7283      	strb	r3, [r0, #10]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 800d2fc:	7b63      	ldrb	r3, [r4, #13]
 800d2fe:	72c3      	strb	r3, [r0, #11]
    linkAdrVerifyParams.NbChannels = EU868_MAX_NB_CHANNELS;
 800d300:	2310      	movs	r3, #16
 800d302:	7303      	strb	r3, [r0, #12]
    linkAdrVerifyParams.ChannelsMask = &chMask;
 800d304:	ab06      	add	r3, sp, #24
 800d306:	1d9f      	adds	r7, r3, #6
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 800d308:	23e0      	movs	r3, #224	@ 0xe0
 800d30a:	00db      	lsls	r3, r3, #3
 800d30c:	8283      	strh	r3, [r0, #20]
    linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
 800d30e:	6833      	ldr	r3, [r6, #0]
    linkAdrVerifyParams.ChannelsMask = &chMask;
 800d310:	6107      	str	r7, [r0, #16]
    linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
 800d312:	6183      	str	r3, [r0, #24]
    linkAdrVerifyParams.MinTxPower = EU868_MIN_TX_POWER;
 800d314:	2307      	movs	r3, #7
 800d316:	8383      	strh	r3, [r0, #28]
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 800d318:	6823      	ldr	r3, [r4, #0]
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 800d31a:	ac06      	add	r4, sp, #24
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 800d31c:	930a      	str	r3, [sp, #40]	@ 0x28
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 800d31e:	1909      	adds	r1, r1, r4
 800d320:	002b      	movs	r3, r5
 800d322:	f7ff fb24 	bl	800c96e <RegionCommonLinkAdrReqVerifyParams>
 800d326:	0004      	movs	r4, r0

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 800d328:	2807      	cmp	r0, #7
 800d32a:	d109      	bne.n	800d340 <RegionEU868LinkAdrReq+0xa4>
    {
        // Set the channels mask to a default value
        memset1( ( uint8_t* ) RegionNvmGroup2->ChannelsMask, 0, sizeof( RegionNvmGroup2->ChannelsMask ) );
 800d32c:	6830      	ldr	r0, [r6, #0]
 800d32e:	2202      	movs	r2, #2
 800d330:	2100      	movs	r1, #0
 800d332:	30c0      	adds	r0, #192	@ 0xc0
 800d334:	f000 fa3b 	bl	800d7ae <memset1>
        // Update the channels mask
        RegionNvmGroup2->ChannelsMask[0] = chMask;
 800d338:	6833      	ldr	r3, [r6, #0]
 800d33a:	883a      	ldrh	r2, [r7, #0]
 800d33c:	33c0      	adds	r3, #192	@ 0xc0
 800d33e:	801a      	strh	r2, [r3, #0]
    *nbRepOut = linkAdrParams.NbRep;
    *nbBytesParsed = bytesProcessed;

#endif /* REGION_EU868 */
    return status;
}
 800d340:	0020      	movs	r0, r4
    *drOut = linkAdrParams.Datarate;
 800d342:	786b      	ldrb	r3, [r5, #1]
 800d344:	9a03      	ldr	r2, [sp, #12]
 800d346:	7013      	strb	r3, [r2, #0]
    *txPowOut = linkAdrParams.TxPower;
 800d348:	78ab      	ldrb	r3, [r5, #2]
 800d34a:	9a04      	ldr	r2, [sp, #16]
 800d34c:	7013      	strb	r3, [r2, #0]
    *nbRepOut = linkAdrParams.NbRep;
 800d34e:	782b      	ldrb	r3, [r5, #0]
 800d350:	9a05      	ldr	r2, [sp, #20]
 800d352:	7013      	strb	r3, [r2, #0]
    *nbBytesParsed = bytesProcessed;
 800d354:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 800d356:	9a01      	ldr	r2, [sp, #4]
 800d358:	701a      	strb	r2, [r3, #0]
}
 800d35a:	b013      	add	sp, #76	@ 0x4c
 800d35c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        bytesProcessed += nextIndex;
 800d35e:	9b01      	ldr	r3, [sp, #4]
        chMask = linkAdrParams.ChMask;
 800d360:	aa06      	add	r2, sp, #24
        bytesProcessed += nextIndex;
 800d362:	1818      	adds	r0, r3, r0
 800d364:	b2c3      	uxtb	r3, r0
 800d366:	9301      	str	r3, [sp, #4]
        chMask = linkAdrParams.ChMask;
 800d368:	ab06      	add	r3, sp, #24
 800d36a:	899b      	ldrh	r3, [r3, #12]
 800d36c:	80d3      	strh	r3, [r2, #6]
        if( ( linkAdrParams.ChMaskCtrl == 0 ) && ( chMask == 0 ) )
 800d36e:	aa06      	add	r2, sp, #24
 800d370:	7ad0      	ldrb	r0, [r2, #11]
 800d372:	2800      	cmp	r0, #0
 800d374:	d11f      	bne.n	800d3b6 <RegionEU868LinkAdrReq+0x11a>
            status &= 0xFE; // Channel mask KO
 800d376:	2506      	movs	r5, #6
        if( ( linkAdrParams.ChMaskCtrl == 0 ) && ( chMask == 0 ) )
 800d378:	2b00      	cmp	r3, #0
 800d37a:	d09f      	beq.n	800d2bc <RegionEU868LinkAdrReq+0x20>
                        status &= 0xFE; // Channel mask KO
 800d37c:	2706      	movs	r7, #6
                        ( RegionNvmGroup2->Channels[i].Frequency == 0 ) )
 800d37e:	4a17      	ldr	r2, [pc, #92]	@ (800d3dc <RegionEU868LinkAdrReq+0x140>)
 800d380:	2507      	movs	r5, #7
 800d382:	6811      	ldr	r1, [r2, #0]
 800d384:	2200      	movs	r2, #0
                        status &= 0xFE; // Channel mask KO
 800d386:	46bc      	mov	ip, r7
                        ( RegionNvmGroup2->Channels[i].Frequency == 0 ) )
 800d388:	9202      	str	r2, [sp, #8]
                if( linkAdrParams.ChMaskCtrl == 6 )
 800d38a:	2806      	cmp	r0, #6
 800d38c:	d11c      	bne.n	800d3c8 <RegionEU868LinkAdrReq+0x12c>
                    if( RegionNvmGroup2->Channels[i].Frequency != 0 )
 800d38e:	680f      	ldr	r7, [r1, #0]
 800d390:	2f00      	cmp	r7, #0
 800d392:	d005      	beq.n	800d3a0 <RegionEU868LinkAdrReq+0x104>
                        chMask |= 1 << i;
 800d394:	2601      	movs	r6, #1
 800d396:	4096      	lsls	r6, r2
 800d398:	4333      	orrs	r3, r6
 800d39a:	2601      	movs	r6, #1
 800d39c:	b29b      	uxth	r3, r3
 800d39e:	9602      	str	r6, [sp, #8]
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 800d3a0:	3201      	adds	r2, #1
 800d3a2:	310c      	adds	r1, #12
 800d3a4:	2a10      	cmp	r2, #16
 800d3a6:	d1f0      	bne.n	800d38a <RegionEU868LinkAdrReq+0xee>
 800d3a8:	9a02      	ldr	r2, [sp, #8]
 800d3aa:	2a00      	cmp	r2, #0
 800d3ac:	d100      	bne.n	800d3b0 <RegionEU868LinkAdrReq+0x114>
 800d3ae:	e785      	b.n	800d2bc <RegionEU868LinkAdrReq+0x20>
 800d3b0:	aa06      	add	r2, sp, #24
 800d3b2:	80d3      	strh	r3, [r2, #6]
 800d3b4:	e782      	b.n	800d2bc <RegionEU868LinkAdrReq+0x20>
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 800d3b6:	1e42      	subs	r2, r0, #1
            status &= 0xFE; // Channel mask KO
 800d3b8:	2506      	movs	r5, #6
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 800d3ba:	2a04      	cmp	r2, #4
 800d3bc:	d800      	bhi.n	800d3c0 <RegionEU868LinkAdrReq+0x124>
 800d3be:	e77d      	b.n	800d2bc <RegionEU868LinkAdrReq+0x20>
 800d3c0:	42a8      	cmp	r0, r5
 800d3c2:	d000      	beq.n	800d3c6 <RegionEU868LinkAdrReq+0x12a>
 800d3c4:	e77a      	b.n	800d2bc <RegionEU868LinkAdrReq+0x20>
 800d3c6:	e7d9      	b.n	800d37c <RegionEU868LinkAdrReq+0xe0>
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 800d3c8:	001f      	movs	r7, r3
 800d3ca:	2601      	movs	r6, #1
 800d3cc:	4117      	asrs	r7, r2
 800d3ce:	4237      	tst	r7, r6
 800d3d0:	d0e6      	beq.n	800d3a0 <RegionEU868LinkAdrReq+0x104>
 800d3d2:	680f      	ldr	r7, [r1, #0]
 800d3d4:	2f00      	cmp	r7, #0
 800d3d6:	d1e3      	bne.n	800d3a0 <RegionEU868LinkAdrReq+0x104>
                        status &= 0xFE; // Channel mask KO
 800d3d8:	4665      	mov	r5, ip
 800d3da:	e7e1      	b.n	800d3a0 <RegionEU868LinkAdrReq+0x104>
 800d3dc:	20001360 	.word	0x20001360

0800d3e0 <RegionEU868RxParamSetupReq>:

uint8_t RegionEU868RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 800d3e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
    uint8_t status = 0x07;
#if defined( REGION_EU868 )
    uint8_t band = 0;

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency, &band ) == false )
 800d3e2:	466b      	mov	r3, sp
{
 800d3e4:	0005      	movs	r5, r0
    if( VerifyRfFreq( rxParamSetupReq->Frequency, &band ) == false )
 800d3e6:	1dd9      	adds	r1, r3, #7
 800d3e8:	6840      	ldr	r0, [r0, #4]
 800d3ea:	f7ff fc8f 	bl	800cd0c <VerifyRfFreq>
 800d3ee:	3006      	adds	r0, #6
 800d3f0:	b2c4      	uxtb	r4, r0
    {
        status &= 0xFE; // Channel frequency KO
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE ) == false )
 800d3f2:	2000      	movs	r0, #0
 800d3f4:	2207      	movs	r2, #7
 800d3f6:	2100      	movs	r1, #0
 800d3f8:	5628      	ldrsb	r0, [r5, r0]
 800d3fa:	f7ff f91e 	bl	800c63a <RegionCommonValueInRange>
 800d3fe:	2800      	cmp	r0, #0
 800d400:	d101      	bne.n	800d406 <RegionEU868RxParamSetupReq+0x26>
    {
        status &= 0xFD; // Datarate KO
 800d402:	2302      	movs	r3, #2
 800d404:	439c      	bics	r4, r3
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, EU868_MIN_RX1_DR_OFFSET, EU868_MAX_RX1_DR_OFFSET ) == false )
 800d406:	2001      	movs	r0, #1
 800d408:	2205      	movs	r2, #5
 800d40a:	2100      	movs	r1, #0
 800d40c:	5628      	ldrsb	r0, [r5, r0]
 800d40e:	f7ff f914 	bl	800c63a <RegionCommonValueInRange>
 800d412:	2800      	cmp	r0, #0
 800d414:	d101      	bne.n	800d41a <RegionEU868RxParamSetupReq+0x3a>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 800d416:	2304      	movs	r3, #4
 800d418:	439c      	bics	r4, r3
    }

#endif /* REGION_EU868 */
    return status;
}
 800d41a:	0020      	movs	r0, r4
 800d41c:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0800d41e <RegionEU868TxParamSetupReq>:
}

int8_t RegionEU868TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
    // Do not accept the request
    return -1;
 800d41e:	2001      	movs	r0, #1
}
 800d420:	4240      	negs	r0, r0
 800d422:	4770      	bx	lr

0800d424 <RegionEU868DlChannelReq>:

int8_t RegionEU868DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
 800d424:	b513      	push	{r0, r1, r4, lr}
    uint8_t status = 0x03;
#if defined( REGION_EU868 )
    uint8_t band = 0;

    // Verify if the frequency is supported
    if( VerifyRfFreq( dlChannelReq->Rx1Frequency, &band ) == false )
 800d426:	466b      	mov	r3, sp
{
 800d428:	0004      	movs	r4, r0
    if( VerifyRfFreq( dlChannelReq->Rx1Frequency, &band ) == false )
 800d42a:	1dd9      	adds	r1, r3, #7
 800d42c:	6840      	ldr	r0, [r0, #4]
 800d42e:	f7ff fc6d 	bl	800cd0c <VerifyRfFreq>
 800d432:	210c      	movs	r1, #12
 800d434:	3002      	adds	r0, #2
 800d436:	b2c3      	uxtb	r3, r0
    {
        status &= 0xFE;
    }

    // Verify if an uplink frequency exists
    if( RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Frequency == 0 )
 800d438:	7820      	ldrb	r0, [r4, #0]
 800d43a:	4a09      	ldr	r2, [pc, #36]	@ (800d460 <RegionEU868DlChannelReq+0x3c>)
 800d43c:	4341      	muls	r1, r0
 800d43e:	6812      	ldr	r2, [r2, #0]
 800d440:	1852      	adds	r2, r2, r1
 800d442:	6811      	ldr	r1, [r2, #0]
 800d444:	2900      	cmp	r1, #0
 800d446:	d103      	bne.n	800d450 <RegionEU868DlChannelReq+0x2c>
    {
        status &= 0xFD;
 800d448:	2202      	movs	r2, #2
 800d44a:	4393      	bics	r3, r2
    {
        RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
    }

#endif /* REGION_EU868 */
    return status;
 800d44c:	b258      	sxtb	r0, r3
}
 800d44e:	bd16      	pop	{r1, r2, r4, pc}
    if( status == 0x03 )
 800d450:	2b03      	cmp	r3, #3
 800d452:	d102      	bne.n	800d45a <RegionEU868DlChannelReq+0x36>
        RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
 800d454:	6861      	ldr	r1, [r4, #4]
 800d456:	6051      	str	r1, [r2, #4]
 800d458:	e7f8      	b.n	800d44c <RegionEU868DlChannelReq+0x28>
 800d45a:	2302      	movs	r3, #2
 800d45c:	e7f6      	b.n	800d44c <RegionEU868DlChannelReq+0x28>
 800d45e:	46c0      	nop			@ (mov r8, r8)
 800d460:	20001360 	.word	0x20001360

0800d464 <RegionEU868AlternateDr>:
#if defined( REGION_EU868 )
    return currentDr;
#else
    return -1;
#endif /* REGION_EU868 */
}
 800d464:	4770      	bx	lr
	...

0800d468 <RegionEU868NextChannel>:

LoRaMacStatus_t RegionEU868NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 800d468:	b5f0      	push	{r4, r5, r6, r7, lr}
#if defined( REGION_EU868 )
    uint8_t nbEnabledChannels = 0;
 800d46a:	2500      	movs	r5, #0
{
 800d46c:	b09b      	sub	sp, #108	@ 0x6c
 800d46e:	9305      	str	r3, [sp, #20]
    uint8_t nbEnabledChannels = 0;
 800d470:	ab07      	add	r3, sp, #28
 800d472:	701d      	strb	r5, [r3, #0]
    uint8_t nbRestrictedChannels = 0;
 800d474:	230d      	movs	r3, #13
{
 800d476:	9204      	str	r2, [sp, #16]
    uint8_t nbRestrictedChannels = 0;
 800d478:	aa04      	add	r2, sp, #16
 800d47a:	189b      	adds	r3, r3, r2
{
 800d47c:	9103      	str	r1, [sp, #12]
    uint8_t enabledChannels[EU868_MAX_NB_CHANNELS] = { 0 };
 800d47e:	220c      	movs	r2, #12
 800d480:	0029      	movs	r1, r5
{
 800d482:	0004      	movs	r4, r0
    uint8_t enabledChannels[EU868_MAX_NB_CHANNELS] = { 0 };
 800d484:	a809      	add	r0, sp, #36	@ 0x24
    uint8_t nbRestrictedChannels = 0;
 800d486:	701d      	strb	r5, [r3, #0]
    uint8_t enabledChannels[EU868_MAX_NB_CHANNELS] = { 0 };
 800d488:	9508      	str	r5, [sp, #32]
 800d48a:	f002 fc91 	bl	800fdb0 <memset>
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;
    uint16_t joinChannels = EU868_JOIN_CHANNELS;
 800d48e:	230e      	movs	r3, #14
 800d490:	2607      	movs	r6, #7

    if( RegionCommonCountChannels( RegionNvmGroup2->ChannelsMask, 0, 1 ) == 0 )
 800d492:	4f2f      	ldr	r7, [pc, #188]	@ (800d550 <RegionEU868NextChannel+0xe8>)
    uint16_t joinChannels = EU868_JOIN_CHANNELS;
 800d494:	aa04      	add	r2, sp, #16
    if( RegionCommonCountChannels( RegionNvmGroup2->ChannelsMask, 0, 1 ) == 0 )
 800d496:	6838      	ldr	r0, [r7, #0]
    uint16_t joinChannels = EU868_JOIN_CHANNELS;
 800d498:	189b      	adds	r3, r3, r2
    if( RegionCommonCountChannels( RegionNvmGroup2->ChannelsMask, 0, 1 ) == 0 )
 800d49a:	0029      	movs	r1, r5
 800d49c:	2201      	movs	r2, #1
 800d49e:	30c0      	adds	r0, #192	@ 0xc0
    uint16_t joinChannels = EU868_JOIN_CHANNELS;
 800d4a0:	801e      	strh	r6, [r3, #0]
    if( RegionCommonCountChannels( RegionNvmGroup2->ChannelsMask, 0, 1 ) == 0 )
 800d4a2:	f7ff f8e8 	bl	800c676 <RegionCommonCountChannels>
 800d4a6:	42a8      	cmp	r0, r5
 800d4a8:	d104      	bne.n	800d4b4 <RegionEU868NextChannel+0x4c>
    { // Reactivate default channels
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 800d4aa:	683b      	ldr	r3, [r7, #0]
 800d4ac:	33c0      	adds	r3, #192	@ 0xc0
 800d4ae:	881a      	ldrh	r2, [r3, #0]
 800d4b0:	4316      	orrs	r6, r2
 800d4b2:	801e      	strh	r6, [r3, #0]
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
 800d4b4:	7a63      	ldrb	r3, [r4, #9]
 800d4b6:	ad0c      	add	r5, sp, #48	@ 0x30
 800d4b8:	702b      	strb	r3, [r5, #0]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 800d4ba:	2308      	movs	r3, #8
    countChannelsParams.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 800d4bc:	4f24      	ldr	r7, [pc, #144]	@ (800d550 <RegionEU868NextChannel+0xe8>)
    countChannelsParams.Datarate = nextChanParams->Datarate;
 800d4be:	56e3      	ldrsb	r3, [r4, r3]
    countChannelsParams.Channels = RegionNvmGroup2->Channels;
    countChannelsParams.Bands = RegionNvmGroup1->Bands;
    countChannelsParams.MaxNbChannels = EU868_MAX_NB_CHANNELS;
    countChannelsParams.JoinChannels = &joinChannels;

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 800d4c0:	ae12      	add	r6, sp, #72	@ 0x48
    countChannelsParams.Datarate = nextChanParams->Datarate;
 800d4c2:	706b      	strb	r3, [r5, #1]
 800d4c4:	469c      	mov	ip, r3
    countChannelsParams.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 800d4c6:	683b      	ldr	r3, [r7, #0]
    countChannelsParams.Channels = RegionNvmGroup2->Channels;
 800d4c8:	930e      	str	r3, [sp, #56]	@ 0x38
    countChannelsParams.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 800d4ca:	001a      	movs	r2, r3
    countChannelsParams.Bands = RegionNvmGroup1->Bands;
 800d4cc:	687b      	ldr	r3, [r7, #4]
    countChannelsParams.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 800d4ce:	32c0      	adds	r2, #192	@ 0xc0
    countChannelsParams.Bands = RegionNvmGroup1->Bands;
 800d4d0:	930f      	str	r3, [sp, #60]	@ 0x3c
    countChannelsParams.MaxNbChannels = EU868_MAX_NB_CHANNELS;
 800d4d2:	2310      	movs	r3, #16
    countChannelsParams.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 800d4d4:	920d      	str	r2, [sp, #52]	@ 0x34
    countChannelsParams.MaxNbChannels = EU868_MAX_NB_CHANNELS;
 800d4d6:	822b      	strh	r3, [r5, #16]
    countChannelsParams.JoinChannels = &joinChannels;
 800d4d8:	aa04      	add	r2, sp, #16
 800d4da:	3b02      	subs	r3, #2
 800d4dc:	189b      	adds	r3, r3, r2
 800d4de:	9311      	str	r3, [sp, #68]	@ 0x44
    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 800d4e0:	6823      	ldr	r3, [r4, #0]
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
    identifyChannelsParam.MaxBands = EU868_MAX_NB_BANDS;

    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 800d4e2:	0022      	movs	r2, r4
    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 800d4e4:	9312      	str	r3, [sp, #72]	@ 0x48
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 800d4e6:	6863      	ldr	r3, [r4, #4]
    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 800d4e8:	320c      	adds	r2, #12
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 800d4ea:	9313      	str	r3, [sp, #76]	@ 0x4c
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 800d4ec:	7aa3      	ldrb	r3, [r4, #10]
 800d4ee:	7233      	strb	r3, [r6, #8]
    identifyChannelsParam.MaxBands = EU868_MAX_NB_BANDS;
 800d4f0:	2306      	movs	r3, #6
 800d4f2:	7273      	strb	r3, [r6, #9]
    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 800d4f4:	ab15      	add	r3, sp, #84	@ 0x54
 800d4f6:	ca03      	ldmia	r2!, {r0, r1}
 800d4f8:	c303      	stmia	r3!, {r0, r1}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 800d4fa:	7d23      	ldrb	r3, [r4, #20]
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 800d4fc:	4660      	mov	r0, ip
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 800d4fe:	7533      	strb	r3, [r6, #20]
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 800d500:	8ae1      	ldrh	r1, [r4, #22]
 800d502:	f7ff fbd9 	bl	800ccb8 <GetTimeOnAir>

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 800d506:	9b04      	ldr	r3, [sp, #16]
 800d508:	aa04      	add	r2, sp, #16
 800d50a:	9301      	str	r3, [sp, #4]
 800d50c:	230d      	movs	r3, #13
    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 800d50e:	9519      	str	r5, [sp, #100]	@ 0x64
    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 800d510:	189b      	adds	r3, r3, r2
 800d512:	ad07      	add	r5, sp, #28
 800d514:	ac08      	add	r4, sp, #32
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 800d516:	9018      	str	r0, [sp, #96]	@ 0x60
    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 800d518:	9300      	str	r3, [sp, #0]
 800d51a:	0030      	movs	r0, r6
 800d51c:	002b      	movs	r3, r5
 800d51e:	0022      	movs	r2, r4
 800d520:	9905      	ldr	r1, [sp, #20]
 800d522:	f7ff fb1c 	bl	800cb5e <RegionCommonIdentifyChannels>
 800d526:	1e06      	subs	r6, r0, #0
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 800d528:	d109      	bne.n	800d53e <RegionEU868NextChannel+0xd6>
    {
        // We found a valid channel
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 800d52a:	7829      	ldrb	r1, [r5, #0]
 800d52c:	3901      	subs	r1, #1
 800d52e:	f000 f90d 	bl	800d74c <randr>
 800d532:	9a03      	ldr	r2, [sp, #12]
 800d534:	5c23      	ldrb	r3, [r4, r0]
 800d536:	7013      	strb	r3, [r2, #0]
    }
    return status;
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_EU868 */
}
 800d538:	0030      	movs	r0, r6
 800d53a:	b01b      	add	sp, #108	@ 0x6c
 800d53c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    else if( status == LORAMAC_STATUS_NO_CHANNEL_FOUND )
 800d53e:	280c      	cmp	r0, #12
 800d540:	d1fa      	bne.n	800d538 <RegionEU868NextChannel+0xd0>
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 800d542:	2207      	movs	r2, #7
 800d544:	683b      	ldr	r3, [r7, #0]
 800d546:	33c0      	adds	r3, #192	@ 0xc0
 800d548:	8819      	ldrh	r1, [r3, #0]
 800d54a:	430a      	orrs	r2, r1
 800d54c:	801a      	strh	r2, [r3, #0]
 800d54e:	e7f3      	b.n	800d538 <RegionEU868NextChannel+0xd0>
 800d550:	20001360 	.word	0x20001360

0800d554 <RegionEU868ChannelAdd>:

LoRaMacStatus_t RegionEU868ChannelAdd( ChannelAddParams_t* channelAdd )
{
 800d554:	b5f0      	push	{r4, r5, r6, r7, lr}
#if defined( REGION_EU868 )
    uint8_t band = 0;
 800d556:	2500      	movs	r5, #0
{
 800d558:	b085      	sub	sp, #20
    uint8_t band = 0;
 800d55a:	ab02      	add	r3, sp, #8
 800d55c:	71dd      	strb	r5, [r3, #7]
    bool drInvalid = false;
    bool freqInvalid = false;
    uint8_t id = channelAdd->ChannelId;
 800d55e:	7906      	ldrb	r6, [r0, #4]
{
 800d560:	0004      	movs	r4, r0

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 800d562:	2006      	movs	r0, #6
    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 800d564:	2e02      	cmp	r6, #2
 800d566:	d92e      	bls.n	800d5c6 <RegionEU868ChannelAdd+0x72>
    }

    if( id >= EU868_MAX_NB_CHANNELS )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800d568:	3803      	subs	r0, #3
    if( id >= EU868_MAX_NB_CHANNELS )
 800d56a:	2e0f      	cmp	r6, #15
 800d56c:	d82b      	bhi.n	800d5c6 <RegionEU868ChannelAdd+0x72>
    }

    // Validate the datarate range
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Min, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 800d56e:	6823      	ldr	r3, [r4, #0]
 800d570:	0029      	movs	r1, r5
 800d572:	7a18      	ldrb	r0, [r3, #8]
 800d574:	2207      	movs	r2, #7
 800d576:	0700      	lsls	r0, r0, #28
 800d578:	1700      	asrs	r0, r0, #28
 800d57a:	f7ff f85e 	bl	800c63a <RegionCommonValueInRange>
 800d57e:	0007      	movs	r7, r0
    {
        drInvalid = true;
    }
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Max, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 800d580:	2008      	movs	r0, #8
 800d582:	6823      	ldr	r3, [r4, #0]
 800d584:	0029      	movs	r1, r5
 800d586:	5618      	ldrsb	r0, [r3, r0]
 800d588:	2207      	movs	r2, #7
 800d58a:	1100      	asrs	r0, r0, #4
 800d58c:	f7ff f855 	bl	800c63a <RegionCommonValueInRange>
    {
        drInvalid = true;
 800d590:	3501      	adds	r5, #1
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Max, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 800d592:	2800      	cmp	r0, #0
 800d594:	d002      	beq.n	800d59c <RegionEU868ChannelAdd+0x48>
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Min, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 800d596:	427b      	negs	r3, r7
 800d598:	415f      	adcs	r7, r3
 800d59a:	b2fd      	uxtb	r5, r7
    }
    if( channelAdd->NewChannel->DrRange.Fields.Min > channelAdd->NewChannel->DrRange.Fields.Max )
 800d59c:	6820      	ldr	r0, [r4, #0]
 800d59e:	7a03      	ldrb	r3, [r0, #8]
 800d5a0:	071a      	lsls	r2, r3, #28
 800d5a2:	b25b      	sxtb	r3, r3
 800d5a4:	1712      	asrs	r2, r2, #28
 800d5a6:	111b      	asrs	r3, r3, #4
 800d5a8:	429a      	cmp	r2, r3
 800d5aa:	dd00      	ble.n	800d5ae <RegionEU868ChannelAdd+0x5a>
    {
        drInvalid = true;
 800d5ac:	2501      	movs	r5, #1
    }

    // Check frequency
    if( freqInvalid == false )
    {
        if( VerifyRfFreq( channelAdd->NewChannel->Frequency, &band ) == false )
 800d5ae:	ab02      	add	r3, sp, #8
 800d5b0:	1dd9      	adds	r1, r3, #7
 800d5b2:	6800      	ldr	r0, [r0, #0]
 800d5b4:	f7ff fbaa 	bl	800cd0c <VerifyRfFreq>
 800d5b8:	2301      	movs	r3, #1
 800d5ba:	4058      	eors	r0, r3
 800d5bc:	b2c3      	uxtb	r3, r0
            freqInvalid = true;
        }
    }

    // Check status
    if( ( drInvalid == true ) && ( freqInvalid == true ) )
 800d5be:	2d00      	cmp	r5, #0
 800d5c0:	d003      	beq.n	800d5ca <RegionEU868ChannelAdd+0x76>
 800d5c2:	3305      	adds	r3, #5
 800d5c4:	b2d8      	uxtb	r0, r3
    RegionNvmGroup2->ChannelsMask[0] |= ( 1 << id );
    return LORAMAC_STATUS_OK;
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_EU868 */
}
 800d5c6:	b005      	add	sp, #20
 800d5c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return LORAMAC_STATUS_FREQUENCY_INVALID;
 800d5ca:	2004      	movs	r0, #4
    if( freqInvalid == true )
 800d5cc:	2b00      	cmp	r3, #0
 800d5ce:	d1fa      	bne.n	800d5c6 <RegionEU868ChannelAdd+0x72>
    memcpy1( ( uint8_t* ) &(RegionNvmGroup2->Channels[id]), ( uint8_t* ) channelAdd->NewChannel, sizeof( RegionNvmGroup2->Channels[id] ) );
 800d5d0:	220c      	movs	r2, #12
 800d5d2:	0013      	movs	r3, r2
 800d5d4:	4f0a      	ldr	r7, [pc, #40]	@ (800d600 <RegionEU868ChannelAdd+0xac>)
 800d5d6:	4373      	muls	r3, r6
 800d5d8:	6838      	ldr	r0, [r7, #0]
 800d5da:	6821      	ldr	r1, [r4, #0]
 800d5dc:	18c0      	adds	r0, r0, r3
 800d5de:	9301      	str	r3, [sp, #4]
 800d5e0:	f000 f8d0 	bl	800d784 <memcpy1>
    RegionNvmGroup2->Channels[id].Band = band;
 800d5e4:	683b      	ldr	r3, [r7, #0]
 800d5e6:	9a01      	ldr	r2, [sp, #4]
 800d5e8:	a902      	add	r1, sp, #8
 800d5ea:	79c9      	ldrb	r1, [r1, #7]
 800d5ec:	189a      	adds	r2, r3, r2
 800d5ee:	7251      	strb	r1, [r2, #9]
    RegionNvmGroup2->ChannelsMask[0] |= ( 1 << id );
 800d5f0:	2201      	movs	r2, #1
 800d5f2:	40b2      	lsls	r2, r6
 800d5f4:	33c0      	adds	r3, #192	@ 0xc0
 800d5f6:	8819      	ldrh	r1, [r3, #0]
    return LORAMAC_STATUS_OK;
 800d5f8:	0028      	movs	r0, r5
    RegionNvmGroup2->ChannelsMask[0] |= ( 1 << id );
 800d5fa:	430a      	orrs	r2, r1
 800d5fc:	801a      	strh	r2, [r3, #0]
    return LORAMAC_STATUS_OK;
 800d5fe:	e7e2      	b.n	800d5c6 <RegionEU868ChannelAdd+0x72>
 800d600:	20001360 	.word	0x20001360

0800d604 <RegionEU868ChannelsRemove>:

bool RegionEU868ChannelsRemove( ChannelRemoveParams_t* channelRemove  )
{
 800d604:	b570      	push	{r4, r5, r6, lr}
#if defined( REGION_EU868 )
    uint8_t id = channelRemove->ChannelId;
 800d606:	7805      	ldrb	r5, [r0, #0]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
    {
        return false;
 800d608:	2100      	movs	r1, #0
    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 800d60a:	2d02      	cmp	r5, #2
 800d60c:	d90e      	bls.n	800d62c <RegionEU868ChannelsRemove+0x28>
    }

    // Remove the channel from the list of channels
    RegionNvmGroup2->Channels[id] = ( ChannelParams_t ){ 0, 0, { 0 }, 0 };
 800d60e:	220c      	movs	r2, #12
 800d610:	0010      	movs	r0, r2
 800d612:	4b07      	ldr	r3, [pc, #28]	@ (800d630 <RegionEU868ChannelsRemove+0x2c>)
 800d614:	4368      	muls	r0, r5
 800d616:	681c      	ldr	r4, [r3, #0]
 800d618:	1820      	adds	r0, r4, r0
 800d61a:	f002 fbc9 	bl	800fdb0 <memset>

    return RegionCommonChanDisable( RegionNvmGroup2->ChannelsMask, id, EU868_MAX_NB_CHANNELS );
 800d61e:	0020      	movs	r0, r4
 800d620:	0029      	movs	r1, r5
 800d622:	2210      	movs	r2, #16
 800d624:	30c0      	adds	r0, #192	@ 0xc0
 800d626:	f7ff f812 	bl	800c64e <RegionCommonChanDisable>
 800d62a:	0001      	movs	r1, r0
#else
    return false;
#endif /* REGION_EU868 */
}
 800d62c:	0008      	movs	r0, r1
 800d62e:	bd70      	pop	{r4, r5, r6, pc}
 800d630:	20001360 	.word	0x20001360

0800d634 <RegionEU868ApplyCFList>:
    newChannel.DrRange.Value = ( DR_5 << 4 ) | DR_0;
 800d634:	2350      	movs	r3, #80	@ 0x50
{
 800d636:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d638:	b087      	sub	sp, #28
    newChannel.DrRange.Value = ( DR_5 << 4 ) | DR_0;
 800d63a:	ac03      	add	r4, sp, #12
 800d63c:	7223      	strb	r3, [r4, #8]
    if( applyCFList->Size != 16 )
 800d63e:	7903      	ldrb	r3, [r0, #4]
{
 800d640:	0007      	movs	r7, r0
    if( applyCFList->Size != 16 )
 800d642:	2b10      	cmp	r3, #16
 800d644:	d12d      	bne.n	800d6a2 <RegionEU868ApplyCFList+0x6e>
    if( applyCFList->Payload[15] != 0 )
 800d646:	6803      	ldr	r3, [r0, #0]
 800d648:	7bde      	ldrb	r6, [r3, #15]
 800d64a:	2e00      	cmp	r6, #0
 800d64c:	d129      	bne.n	800d6a2 <RegionEU868ApplyCFList+0x6e>
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 800d64e:	2503      	movs	r5, #3
        if( chanIdx < ( EU868_NUMB_CHANNELS_CF_LIST + EU868_NUMB_DEFAULT_CHANNELS ) )
 800d650:	2d07      	cmp	r5, #7
 800d652:	d817      	bhi.n	800d684 <RegionEU868ApplyCFList+0x50>
            newChannel.Frequency = (uint32_t) applyCFList->Payload[i];
 800d654:	683b      	ldr	r3, [r7, #0]
 800d656:	5d99      	ldrb	r1, [r3, r6]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 1] << 8 );
 800d658:	199b      	adds	r3, r3, r6
            newChannel.Frequency = (uint32_t) applyCFList->Payload[i];
 800d65a:	6021      	str	r1, [r4, #0]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 1] << 8 );
 800d65c:	785a      	ldrb	r2, [r3, #1]
 800d65e:	0212      	lsls	r2, r2, #8
 800d660:	430a      	orrs	r2, r1
 800d662:	6022      	str	r2, [r4, #0]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 2] << 16 );
 800d664:	789b      	ldrb	r3, [r3, #2]
 800d666:	041b      	lsls	r3, r3, #16
 800d668:	4313      	orrs	r3, r2
            newChannel.Frequency *= 100;
 800d66a:	2264      	movs	r2, #100	@ 0x64
 800d66c:	4353      	muls	r3, r2
            newChannel.Rx1Frequency = 0;
 800d66e:	2200      	movs	r2, #0
            newChannel.Frequency *= 100;
 800d670:	6023      	str	r3, [r4, #0]
            newChannel.Rx1Frequency = 0;
 800d672:	6062      	str	r2, [r4, #4]
        if( newChannel.Frequency != 0 )
 800d674:	4293      	cmp	r3, r2
 800d676:	d10a      	bne.n	800d68e <RegionEU868ApplyCFList+0x5a>
            channelRemove.ChannelId = chanIdx;
 800d678:	466b      	mov	r3, sp
            RegionEU868ChannelsRemove( &channelRemove );
 800d67a:	4668      	mov	r0, sp
            channelRemove.ChannelId = chanIdx;
 800d67c:	701d      	strb	r5, [r3, #0]
            RegionEU868ChannelsRemove( &channelRemove );
 800d67e:	f7ff ffc1 	bl	800d604 <RegionEU868ChannelsRemove>
 800d682:	e009      	b.n	800d698 <RegionEU868ApplyCFList+0x64>
            newChannel.Frequency = 0;
 800d684:	2300      	movs	r3, #0
 800d686:	6023      	str	r3, [r4, #0]
            newChannel.DrRange.Value = 0;
 800d688:	7223      	strb	r3, [r4, #8]
            newChannel.Rx1Frequency = 0;
 800d68a:	6063      	str	r3, [r4, #4]
        if( newChannel.Frequency != 0 )
 800d68c:	e7f4      	b.n	800d678 <RegionEU868ApplyCFList+0x44>
            channelAdd.NewChannel = &newChannel;
 800d68e:	a801      	add	r0, sp, #4
 800d690:	9401      	str	r4, [sp, #4]
            channelAdd.ChannelId = chanIdx;
 800d692:	7105      	strb	r5, [r0, #4]
            RegionEU868ChannelAdd( &channelAdd );
 800d694:	f7ff ff5e 	bl	800d554 <RegionEU868ChannelAdd>
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 800d698:	3501      	adds	r5, #1
 800d69a:	b2ed      	uxtb	r5, r5
 800d69c:	3603      	adds	r6, #3
 800d69e:	2d10      	cmp	r5, #16
 800d6a0:	d1d6      	bne.n	800d650 <RegionEU868ApplyCFList+0x1c>
}
 800d6a2:	b007      	add	sp, #28
 800d6a4:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d6a6 <RegionEU868NewChannelReq>:
{
 800d6a6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    if( newChannelReq->NewChannel->Frequency == 0 )
 800d6a8:	6802      	ldr	r2, [r0, #0]
        channelRemove.ChannelId = newChannelReq->ChannelId;
 800d6aa:	7903      	ldrb	r3, [r0, #4]
    if( newChannelReq->NewChannel->Frequency == 0 )
 800d6ac:	6811      	ldr	r1, [r2, #0]
 800d6ae:	2900      	cmp	r1, #0
 800d6b0:	d109      	bne.n	800d6c6 <RegionEU868NewChannelReq+0x20>
        channelRemove.ChannelId = newChannelReq->ChannelId;
 800d6b2:	a801      	add	r0, sp, #4
 800d6b4:	7003      	strb	r3, [r0, #0]
        if( RegionEU868ChannelsRemove( &channelRemove ) == false )
 800d6b6:	f7ff ffa5 	bl	800d604 <RegionEU868ChannelsRemove>
 800d6ba:	2800      	cmp	r0, #0
 800d6bc:	d010      	beq.n	800d6e0 <RegionEU868NewChannelReq+0x3a>
    uint8_t status = 0x03;
 800d6be:	2303      	movs	r3, #3
    return status;
 800d6c0:	b258      	sxtb	r0, r3
}
 800d6c2:	b005      	add	sp, #20
 800d6c4:	bd00      	pop	{pc}
        channelAdd.NewChannel = newChannelReq->NewChannel;
 800d6c6:	a802      	add	r0, sp, #8
        channelAdd.ChannelId = newChannelReq->ChannelId;
 800d6c8:	7103      	strb	r3, [r0, #4]
        channelAdd.NewChannel = newChannelReq->NewChannel;
 800d6ca:	9202      	str	r2, [sp, #8]
        switch( RegionEU868ChannelAdd( &channelAdd ) )
 800d6cc:	f7ff ff42 	bl	800d554 <RegionEU868ChannelAdd>
                status &= 0xFE;
 800d6d0:	2302      	movs	r3, #2
        switch( RegionEU868ChannelAdd( &channelAdd ) )
 800d6d2:	2804      	cmp	r0, #4
 800d6d4:	d0f4      	beq.n	800d6c0 <RegionEU868NewChannelReq+0x1a>
                status &= 0xFD;
 800d6d6:	3b01      	subs	r3, #1
        switch( RegionEU868ChannelAdd( &channelAdd ) )
 800d6d8:	2805      	cmp	r0, #5
 800d6da:	d0f1      	beq.n	800d6c0 <RegionEU868NewChannelReq+0x1a>
 800d6dc:	2800      	cmp	r0, #0
 800d6de:	d0ee      	beq.n	800d6be <RegionEU868NewChannelReq+0x18>
{
 800d6e0:	2300      	movs	r3, #0
 800d6e2:	e7ed      	b.n	800d6c0 <RegionEU868NewChannelReq+0x1a>

0800d6e4 <RegionEU868SetContinuousWave>:

void RegionEU868SetContinuousWave( ContinuousWaveParams_t* continuousWave )
{
 800d6e4:	b570      	push	{r4, r5, r6, lr}
#if defined( REGION_EU868 )
    int8_t txPowerLimited = RegionCommonLimitTxPower( continuousWave->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[continuousWave->Channel].Band].TxMaxPower );
 800d6e6:	250c      	movs	r5, #12
 800d6e8:	7801      	ldrb	r1, [r0, #0]
 800d6ea:	4e0f      	ldr	r6, [pc, #60]	@ (800d728 <RegionEU868SetContinuousWave+0x44>)
 800d6ec:	4369      	muls	r1, r5
 800d6ee:	6832      	ldr	r2, [r6, #0]
{
 800d6f0:	0004      	movs	r4, r0
    int8_t txPowerLimited = RegionCommonLimitTxPower( continuousWave->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[continuousWave->Channel].Band].TxMaxPower );
 800d6f2:	1852      	adds	r2, r2, r1
 800d6f4:	7a51      	ldrb	r1, [r2, #9]
 800d6f6:	2218      	movs	r2, #24
 800d6f8:	2002      	movs	r0, #2
 800d6fa:	434a      	muls	r2, r1
 800d6fc:	2102      	movs	r1, #2
 800d6fe:	6873      	ldr	r3, [r6, #4]
 800d700:	5620      	ldrsb	r0, [r4, r0]
 800d702:	189b      	adds	r3, r3, r2
 800d704:	5659      	ldrsb	r1, [r3, r1]
 800d706:	f7ff fa8a 	bl	800cc1e <RegionCommonLimitTxPower>
    int8_t phyTxPower = 0;
    uint32_t frequency = RegionNvmGroup2->Channels[continuousWave->Channel].Frequency;
 800d70a:	7822      	ldrb	r2, [r4, #0]
 800d70c:	6833      	ldr	r3, [r6, #0]
 800d70e:	4355      	muls	r5, r2

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, continuousWave->MaxEirp, continuousWave->AntennaGain );
 800d710:	6861      	ldr	r1, [r4, #4]
 800d712:	68a2      	ldr	r2, [r4, #8]
    uint32_t frequency = RegionNvmGroup2->Channels[continuousWave->Channel].Frequency;
 800d714:	58ed      	ldr	r5, [r5, r3]
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, continuousWave->MaxEirp, continuousWave->AntennaGain );
 800d716:	f7ff f9b1 	bl	800ca7c <RegionCommonComputeTxPower>

    Radio.SetTxContinuousWave( frequency, phyTxPower, continuousWave->Timeout );
 800d71a:	4b04      	ldr	r3, [pc, #16]	@ (800d72c <RegionEU868SetContinuousWave+0x48>)
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, continuousWave->MaxEirp, continuousWave->AntennaGain );
 800d71c:	0001      	movs	r1, r0
    Radio.SetTxContinuousWave( frequency, phyTxPower, continuousWave->Timeout );
 800d71e:	89a2      	ldrh	r2, [r4, #12]
 800d720:	0028      	movs	r0, r5
 800d722:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d724:	4798      	blx	r3
#endif /* REGION_EU868 */
}
 800d726:	bd70      	pop	{r4, r5, r6, pc}
 800d728:	20001360 	.word	0x20001360
 800d72c:	080108d8 	.word	0x080108d8

0800d730 <RegionEU868ApplyDrOffset>:

uint8_t RegionEU868ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
#if defined( REGION_EU868 )
    int8_t datarate = dr - drOffset;
 800d730:	1a89      	subs	r1, r1, r2

    if( datarate < 0 )
 800d732:	1c08      	adds	r0, r1, #0
 800d734:	0609      	lsls	r1, r1, #24
 800d736:	d500      	bpl.n	800d73a <RegionEU868ApplyDrOffset+0xa>
 800d738:	2000      	movs	r0, #0
    {
        datarate = DR_0;
    }
    return datarate;
 800d73a:	b2c0      	uxtb	r0, r0
#else
    return 0;
#endif /* REGION_EU868 */
}
 800d73c:	4770      	bx	lr
	...

0800d740 <srand1>:
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
}

void srand1( uint32_t seed )
{
    next = seed;
 800d740:	4b01      	ldr	r3, [pc, #4]	@ (800d748 <srand1+0x8>)
 800d742:	6018      	str	r0, [r3, #0]
}
 800d744:	4770      	bx	lr
 800d746:	46c0      	nop			@ (mov r8, r8)
 800d748:	20000110 	.word	0x20000110

0800d74c <randr>:
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
 800d74c:	4a09      	ldr	r2, [pc, #36]	@ (800d774 <randr+0x28>)
// Standard random functions redefinition end

int32_t randr( int32_t min, int32_t max )
{
 800d74e:	b570      	push	{r4, r5, r6, lr}
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
 800d750:	6813      	ldr	r3, [r2, #0]
{
 800d752:	0005      	movs	r5, r0
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
 800d754:	4808      	ldr	r0, [pc, #32]	@ (800d778 <randr+0x2c>)
{
 800d756:	000c      	movs	r4, r1
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
 800d758:	4358      	muls	r0, r3
 800d75a:	4b08      	ldr	r3, [pc, #32]	@ (800d77c <randr+0x30>)
 800d75c:	4908      	ldr	r1, [pc, #32]	@ (800d780 <randr+0x34>)
 800d75e:	18c0      	adds	r0, r0, r3
 800d760:	6010      	str	r0, [r2, #0]
 800d762:	f7f2 fd87 	bl	8000274 <__aeabi_uidivmod>
 800d766:	0008      	movs	r0, r1
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
 800d768:	1b61      	subs	r1, r4, r5
 800d76a:	3101      	adds	r1, #1
 800d76c:	f7f2 fe6c 	bl	8000448 <__aeabi_idivmod>
 800d770:	1948      	adds	r0, r1, r5
}
 800d772:	bd70      	pop	{r4, r5, r6, pc}
 800d774:	20000110 	.word	0x20000110
 800d778:	41c64e6d 	.word	0x41c64e6d
 800d77c:	00003039 	.word	0x00003039
 800d780:	7fffffff 	.word	0x7fffffff

0800d784 <memcpy1>:

void memcpy1( uint8_t *dst, const uint8_t *src, uint16_t size )
{
    while( size-- )
 800d784:	2300      	movs	r3, #0
{
 800d786:	b510      	push	{r4, lr}
    while( size-- )
 800d788:	4293      	cmp	r3, r2
 800d78a:	d100      	bne.n	800d78e <memcpy1+0xa>
    {
        *dst++ = *src++;
    }
}
 800d78c:	bd10      	pop	{r4, pc}
        *dst++ = *src++;
 800d78e:	5ccc      	ldrb	r4, [r1, r3]
 800d790:	54c4      	strb	r4, [r0, r3]
 800d792:	3301      	adds	r3, #1
 800d794:	e7f8      	b.n	800d788 <memcpy1+0x4>

0800d796 <memcpyr>:

void memcpyr( uint8_t *dst, const uint8_t *src, uint16_t size )
{
    dst = dst + ( size - 1 );
 800d796:	1e53      	subs	r3, r2, #1
 800d798:	18c0      	adds	r0, r0, r3
    while( size-- )
 800d79a:	2300      	movs	r3, #0
{
 800d79c:	b530      	push	{r4, r5, lr}
    while( size-- )
 800d79e:	429a      	cmp	r2, r3
 800d7a0:	d100      	bne.n	800d7a4 <memcpyr+0xe>
    {
        *dst-- = *src++;
    }
}
 800d7a2:	bd30      	pop	{r4, r5, pc}
        *dst-- = *src++;
 800d7a4:	5ccd      	ldrb	r5, [r1, r3]
 800d7a6:	425c      	negs	r4, r3
 800d7a8:	5505      	strb	r5, [r0, r4]
 800d7aa:	3301      	adds	r3, #1
 800d7ac:	e7f7      	b.n	800d79e <memcpyr+0x8>

0800d7ae <memset1>:

void memset1( uint8_t *dst, uint8_t value, uint16_t size )
{
 800d7ae:	b510      	push	{r4, lr}
    while( size-- )
    {
        *dst++ = value;
 800d7b0:	f002 fafe 	bl	800fdb0 <memset>
    }
}
 800d7b4:	bd10      	pop	{r4, pc}
	...

0800d7b8 <Crc32>:
        return '?';
    }
}

uint32_t Crc32( uint8_t *buffer, uint16_t length )
{
 800d7b8:	0002      	movs	r2, r0
 800d7ba:	b5f0      	push	{r4, r5, r6, r7, lr}
    const uint32_t reversedPolynom = 0xEDB88320;

    // CRC initial value
    uint32_t crc = 0xFFFFFFFF;

    if( buffer == NULL )
 800d7bc:	2800      	cmp	r0, #0
 800d7be:	d008      	beq.n	800d7d2 <Crc32+0x1a>
    uint32_t crc = 0xFFFFFFFF;
 800d7c0:	2301      	movs	r3, #1
 800d7c2:	2500      	movs	r5, #0
        return 0;
    }

    for( uint16_t i = 0; i < length; ++i )
    {
        crc ^= ( uint32_t )buffer[i];
 800d7c4:	2608      	movs	r6, #8
        for( uint16_t i = 0; i < 8; i++ )
        {
            crc = ( crc >> 1 ) ^ ( reversedPolynom & ~( ( crc & 0x01 ) - 1 ) );
 800d7c6:	2701      	movs	r7, #1
    uint32_t crc = 0xFFFFFFFF;
 800d7c8:	425b      	negs	r3, r3
    for( uint16_t i = 0; i < length; ++i )
 800d7ca:	b2ac      	uxth	r4, r5
 800d7cc:	428c      	cmp	r4, r1
 800d7ce:	d301      	bcc.n	800d7d4 <Crc32+0x1c>
        }
    }

    return ~crc;
 800d7d0:	43d8      	mvns	r0, r3
}
 800d7d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
        crc ^= ( uint32_t )buffer[i];
 800d7d4:	5d54      	ldrb	r4, [r2, r5]
 800d7d6:	4063      	eors	r3, r4
 800d7d8:	0034      	movs	r4, r6
            crc = ( crc >> 1 ) ^ ( reversedPolynom & ~( ( crc & 0x01 ) - 1 ) );
 800d7da:	0858      	lsrs	r0, r3, #1
 800d7dc:	4684      	mov	ip, r0
 800d7de:	403b      	ands	r3, r7
 800d7e0:	4805      	ldr	r0, [pc, #20]	@ (800d7f8 <Crc32+0x40>)
 800d7e2:	425b      	negs	r3, r3
 800d7e4:	4003      	ands	r3, r0
 800d7e6:	4660      	mov	r0, ip
        for( uint16_t i = 0; i < 8; i++ )
 800d7e8:	3c01      	subs	r4, #1
 800d7ea:	b2a4      	uxth	r4, r4
            crc = ( crc >> 1 ) ^ ( reversedPolynom & ~( ( crc & 0x01 ) - 1 ) );
 800d7ec:	4043      	eors	r3, r0
        for( uint16_t i = 0; i < 8; i++ )
 800d7ee:	2c00      	cmp	r4, #0
 800d7f0:	d1f3      	bne.n	800d7da <Crc32+0x22>
    for( uint16_t i = 0; i < length; ++i )
 800d7f2:	3501      	adds	r5, #1
 800d7f4:	e7e9      	b.n	800d7ca <Crc32+0x12>
 800d7f6:	46c0      	nop			@ (mov r8, r8)
 800d7f8:	edb88320 	.word	0xedb88320

0800d7fc <SX1276GetStatus>:
    return ( uint32_t )Sx_Board_GetWakeUpTime( ) + RADIO_WAKEUP_TIME;
}

RadioState_t SX1276GetStatus( void )
{
    return SX1276.Settings.State;
 800d7fc:	4b01      	ldr	r3, [pc, #4]	@ (800d804 <SX1276GetStatus+0x8>)
 800d7fe:	7918      	ldrb	r0, [r3, #4]
}
 800d800:	4770      	bx	lr
 800d802:	46c0      	nop			@ (mov r8, r8)
 800d804:	20001368 	.word	0x20001368

0800d808 <GetFskBandwidthRegValue>:

static uint8_t GetFskBandwidthRegValue( uint32_t bw )
{
    uint8_t i;

    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
 800d808:	4a09      	ldr	r2, [pc, #36]	@ (800d830 <GetFskBandwidthRegValue+0x28>)
{
 800d80a:	2300      	movs	r3, #0
 800d80c:	0011      	movs	r1, r2
 800d80e:	b510      	push	{r4, lr}
    {
        if( ( bw >= FskBandwidths[i].bandwidth ) && ( bw < FskBandwidths[i + 1].bandwidth ) )
 800d810:	6814      	ldr	r4, [r2, #0]
 800d812:	4284      	cmp	r4, r0
 800d814:	d802      	bhi.n	800d81c <GetFskBandwidthRegValue+0x14>
 800d816:	6894      	ldr	r4, [r2, #8]
 800d818:	4284      	cmp	r4, r0
 800d81a:	d804      	bhi.n	800d826 <GetFskBandwidthRegValue+0x1e>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
 800d81c:	3301      	adds	r3, #1
 800d81e:	3208      	adds	r2, #8
 800d820:	2b15      	cmp	r3, #21
 800d822:	d1f5      	bne.n	800d810 <GetFskBandwidthRegValue+0x8>
        {
            return FskBandwidths[i].RegValue;
        }
    }
    // ERROR: Value not found
    while( 1 );
 800d824:	e7fe      	b.n	800d824 <GetFskBandwidthRegValue+0x1c>
            return FskBandwidths[i].RegValue;
 800d826:	00db      	lsls	r3, r3, #3
 800d828:	18c9      	adds	r1, r1, r3
 800d82a:	7908      	ldrb	r0, [r1, #4]
}
 800d82c:	bd10      	pop	{r4, pc}
 800d82e:	46c0      	nop			@ (mov r8, r8)
 800d830:	08010828 	.word	0x08010828

0800d834 <SX1276GetTimeOnAir>:
{
 800d834:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d836:	000d      	movs	r5, r1
 800d838:	0019      	movs	r1, r3
 800d83a:	ab08      	add	r3, sp, #32
 800d83c:	881e      	ldrh	r6, [r3, #0]
 800d83e:	ab09      	add	r3, sp, #36	@ 0x24
 800d840:	781f      	ldrb	r7, [r3, #0]
 800d842:	ab0a      	add	r3, sp, #40	@ 0x28
 800d844:	781b      	ldrb	r3, [r3, #0]
 800d846:	0014      	movs	r4, r2
 800d848:	aa0b      	add	r2, sp, #44	@ 0x2c
 800d84a:	469c      	mov	ip, r3
 800d84c:	7812      	ldrb	r2, [r2, #0]
    switch( modem )
 800d84e:	2800      	cmp	r0, #0
 800d850:	d009      	beq.n	800d866 <SX1276GetTimeOnAir+0x32>
 800d852:	2801      	cmp	r0, #1
 800d854:	d014      	beq.n	800d880 <SX1276GetTimeOnAir+0x4c>
 800d856:	2401      	movs	r4, #1
 800d858:	2000      	movs	r0, #0
    return ( numerator + denominator - 1 ) / denominator;
 800d85a:	1900      	adds	r0, r0, r4
 800d85c:	0021      	movs	r1, r4
 800d85e:	3801      	subs	r0, #1
 800d860:	f7f2 fc82 	bl	8000168 <__udivsi3>
}
 800d864:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
                                                 uint8_t payloadLen, bool crcOn )
{
    const uint8_t syncWordLength = 3;

    return ( preambleLen << 3 ) +
           ( ( fixLen == false ) ? 8 : 0 ) +
 800d866:	2101      	movs	r1, #1
            numerator   = 1000U * SX1276GetGfskTimeOnAirNumerator( preambleLen, fixLen, payloadLen, crcOn );
 800d868:	20fa      	movs	r0, #250	@ 0xfa
           ( ( fixLen == false ) ? 8 : 0 ) +
 800d86a:	4079      	eors	r1, r7
    return ( preambleLen << 3 ) +
 800d86c:	1871      	adds	r1, r6, r1
             ( syncWordLength << 3 ) +
             ( ( payloadLen +
               ( 0 ) + // Address filter size
               ( ( crcOn == true ) ? 2 : 0 ) 
 800d86e:	0052      	lsls	r2, r2, #1
    return ( preambleLen << 3 ) +
 800d870:	00c9      	lsls	r1, r1, #3
               ( 0 ) + // Address filter size
 800d872:	4462      	add	r2, ip
           ( ( fixLen == false ) ? 8 : 0 ) +
 800d874:	3118      	adds	r1, #24
               ) << 3 
 800d876:	00d2      	lsls	r2, r2, #3
             ( syncWordLength << 3 ) +
 800d878:	188a      	adds	r2, r1, r2
            numerator   = 1000U * SX1276GetGfskTimeOnAirNumerator( preambleLen, fixLen, payloadLen, crcOn );
 800d87a:	0080      	lsls	r0, r0, #2
 800d87c:	4350      	muls	r0, r2
        break;
 800d87e:	e7ec      	b.n	800d85a <SX1276GetTimeOnAir+0x26>
static uint32_t SX1276GetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                              uint32_t datarate, uint8_t coderate,
                              uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                              bool crcOn )
{
    int32_t crDenom           = coderate + 4;
 800d880:	1d0b      	adds	r3, r1, #4
    bool    lowDatareOptimize = false;

    // Ensure that the preamble length is at least 12 symbols when using SF5 or
    // SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 800d882:	1f61      	subs	r1, r4, #5
    int32_t crDenom           = coderate + 4;
 800d884:	9300      	str	r3, [sp, #0]
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 800d886:	2901      	cmp	r1, #1
 800d888:	d804      	bhi.n	800d894 <SX1276GetTimeOnAir+0x60>
    {
        if( preambleLen < 12 )
 800d88a:	1c31      	adds	r1, r6, #0
 800d88c:	2e0c      	cmp	r6, #12
 800d88e:	d200      	bcs.n	800d892 <SX1276GetTimeOnAir+0x5e>
 800d890:	210c      	movs	r1, #12
 800d892:	b28e      	uxth	r6, r1
        {
            preambleLen = 12;
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800d894:	2d00      	cmp	r5, #0
 800d896:	d138      	bne.n	800d90a <SX1276GetTimeOnAir+0xd6>
 800d898:	0021      	movs	r1, r4
 800d89a:	2001      	movs	r0, #1
 800d89c:	002b      	movs	r3, r5
 800d89e:	390b      	subs	r1, #11
 800d8a0:	4288      	cmp	r0, r1
 800d8a2:	416b      	adcs	r3, r5
 800d8a4:	0018      	movs	r0, r3
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 800d8a6:	b2c0      	uxtb	r0, r0
    {
        lowDatareOptimize = true;
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 800d8a8:	4663      	mov	r3, ip
                            ( crcOn ? 16 : 0 ) -
 800d8aa:	0112      	lsls	r2, r2, #4
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 800d8ac:	00db      	lsls	r3, r3, #3
 800d8ae:	189a      	adds	r2, r3, r2
                            ( 4 * datarate ) +
 800d8b0:	00a1      	lsls	r1, r4, #2
                            ( crcOn ? 16 : 0 ) -
 800d8b2:	1a53      	subs	r3, r2, r1
                            ( fixLen ? 0 : 20 );
 800d8b4:	003a      	movs	r2, r7
 800d8b6:	4257      	negs	r7, r2
 800d8b8:	4157      	adcs	r7, r2
                            ( crcOn ? 16 : 0 ) -
 800d8ba:	9301      	str	r3, [sp, #4]
                            ( fixLen ? 0 : 20 );
 800d8bc:	2314      	movs	r3, #20
 800d8be:	427f      	negs	r7, r7
                            ( 4 * datarate ) +
 800d8c0:	9a01      	ldr	r2, [sp, #4]
                            ( fixLen ? 0 : 20 );
 800d8c2:	403b      	ands	r3, r7
                            ( 4 * datarate ) +
 800d8c4:	18d3      	adds	r3, r2, r3
    {
        ceilNumerator += 8;

        if( lowDatareOptimize == true )
        {
            ceilDenominator = 4 * ( datarate - 2 );
 800d8c6:	1ea7      	subs	r7, r4, #2
    if( datarate <= 6 )
 800d8c8:	2c06      	cmp	r4, #6
 800d8ca:	d903      	bls.n	800d8d4 <SX1276GetTimeOnAir+0xa0>
        ceilNumerator += 8;
 800d8cc:	3308      	adds	r3, #8
        if( lowDatareOptimize == true )
 800d8ce:	2800      	cmp	r0, #0
 800d8d0:	d000      	beq.n	800d8d4 <SX1276GetTimeOnAir+0xa0>
            ceilDenominator = 4 * ( datarate - 2 );
 800d8d2:	00b9      	lsls	r1, r7, #2
        {
            ceilDenominator = 4 * datarate;
        }
    }

    if( ceilNumerator < 0 )
 800d8d4:	43da      	mvns	r2, r3
 800d8d6:	17d2      	asrs	r2, r2, #31
 800d8d8:	4013      	ands	r3, r2
        ceilNumerator = 0;
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 800d8da:	1858      	adds	r0, r3, r1
 800d8dc:	3801      	subs	r0, #1
 800d8de:	f7f2 fccd 	bl	800027c <__divsi3>
 800d8e2:	9b00      	ldr	r3, [sp, #0]
 800d8e4:	4343      	muls	r3, r0
 800d8e6:	1998      	adds	r0, r3, r6

    if( datarate <= 6 )
    {
        intermediate += 2;
 800d8e8:	0003      	movs	r3, r0
 800d8ea:	330e      	adds	r3, #14
    if( datarate <= 6 )
 800d8ec:	2c06      	cmp	r4, #6
 800d8ee:	d900      	bls.n	800d8f2 <SX1276GetTimeOnAir+0xbe>
    int32_t intermediate =
 800d8f0:	3b02      	subs	r3, #2
    switch( bw )
 800d8f2:	2d02      	cmp	r5, #2
 800d8f4:	d811      	bhi.n	800d91a <SX1276GetTimeOnAir+0xe6>
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 800d8f6:	009b      	lsls	r3, r3, #2
            numerator   = 1000U * SX1276GetLoRaTimeOnAirNumerator( bandwidth, datarate, coderate, preambleLen, fixLen,
 800d8f8:	20fa      	movs	r0, #250	@ 0xfa
    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 800d8fa:	3301      	adds	r3, #1
 800d8fc:	40bb      	lsls	r3, r7
            numerator   = 1000U * SX1276GetLoRaTimeOnAirNumerator( bandwidth, datarate, coderate, preambleLen, fixLen,
 800d8fe:	0080      	lsls	r0, r0, #2
 800d900:	4358      	muls	r0, r3
 800d902:	4b06      	ldr	r3, [pc, #24]	@ (800d91c <SX1276GetTimeOnAir+0xe8>)
 800d904:	00ad      	lsls	r5, r5, #2
 800d906:	58ec      	ldr	r4, [r5, r3]
 800d908:	e7a7      	b.n	800d85a <SX1276GetTimeOnAir+0x26>
    bool    lowDatareOptimize = false;
 800d90a:	2000      	movs	r0, #0
    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800d90c:	2d01      	cmp	r5, #1
 800d90e:	d1cb      	bne.n	800d8a8 <SX1276GetTimeOnAir+0x74>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 800d910:	0020      	movs	r0, r4
 800d912:	380c      	subs	r0, #12
 800d914:	4241      	negs	r1, r0
 800d916:	4148      	adcs	r0, r1
 800d918:	e7c5      	b.n	800d8a6 <SX1276GetTimeOnAir+0x72>
    return ( numerator + denominator - 1 ) / denominator;
 800d91a:	deff      	udf	#255	@ 0xff
 800d91c:	080107ec 	.word	0x080107ec

0800d920 <SX1276GetWakeupTime>:
{
 800d920:	b510      	push	{r4, lr}
    return ( uint32_t )Sx_Board_GetWakeUpTime( ) + RADIO_WAKEUP_TIME;
 800d922:	f7f6 fb33 	bl	8003f8c <CMWX1ZZABZ0XX_RADIO_GetWakeUpTime>
 800d926:	3002      	adds	r0, #2
}
 800d928:	bd10      	pop	{r4, pc}

0800d92a <SX1276WriteBuffer>:
{
 800d92a:	b570      	push	{r4, r5, r6, lr}
 800d92c:	0006      	movs	r6, r0
    Sx_Board_ChipSelect( 0 );
 800d92e:	2000      	movs	r0, #0
{
 800d930:	000c      	movs	r4, r1
 800d932:	0015      	movs	r5, r2
    Sx_Board_ChipSelect( 0 );
 800d934:	f7f6 fd04 	bl	8004340 <CMWX1ZZABZ0XX_RADIO_ChipSelect>
    Sx_Board_SendRecv( addr | 0x80 );
 800d938:	2080      	movs	r0, #128	@ 0x80
 800d93a:	4330      	orrs	r0, r6
 800d93c:	b280      	uxth	r0, r0
 800d93e:	f7f6 fcf1 	bl	8004324 <CMWX1ZZABZ0XX_RADIO_SendRecv>
    for( i = 0; i < size; i++ )
 800d942:	1965      	adds	r5, r4, r5
 800d944:	42ac      	cmp	r4, r5
 800d946:	d103      	bne.n	800d950 <SX1276WriteBuffer+0x26>
    Sx_Board_ChipSelect( 1 );
 800d948:	2001      	movs	r0, #1
 800d94a:	f7f6 fcf9 	bl	8004340 <CMWX1ZZABZ0XX_RADIO_ChipSelect>
}
 800d94e:	bd70      	pop	{r4, r5, r6, pc}
        Sx_Board_SendRecv( buffer[i] );
 800d950:	7820      	ldrb	r0, [r4, #0]
 800d952:	f7f6 fce7 	bl	8004324 <CMWX1ZZABZ0XX_RADIO_SendRecv>
    for( i = 0; i < size; i++ )
 800d956:	3401      	adds	r4, #1
 800d958:	e7f4      	b.n	800d944 <SX1276WriteBuffer+0x1a>

0800d95a <SX1276Write>:
{
 800d95a:	b507      	push	{r0, r1, r2, lr}
 800d95c:	466b      	mov	r3, sp
 800d95e:	71d9      	strb	r1, [r3, #7]
 800d960:	3307      	adds	r3, #7
    SX1276WriteBuffer( addr, &data, 1 );
 800d962:	2201      	movs	r2, #1
 800d964:	0019      	movs	r1, r3
 800d966:	f7ff ffe0 	bl	800d92a <SX1276WriteBuffer>
}
 800d96a:	bd07      	pop	{r0, r1, r2, pc}

0800d96c <SX1276SetChannel>:
{
 800d96c:	b570      	push	{r4, r5, r6, lr}
           ( ( ( stepsFrac << SX1276_PLL_STEP_SHIFT_AMOUNT ) + ( SX1276_PLL_STEP_SCALED >> 1 ) ) /
 800d96e:	4911      	ldr	r1, [pc, #68]	@ (800d9b4 <SX1276SetChannel+0x48>)
{
 800d970:	0005      	movs	r5, r0
           ( ( ( stepsFrac << SX1276_PLL_STEP_SHIFT_AMOUNT ) + ( SX1276_PLL_STEP_SCALED >> 1 ) ) /
 800d972:	f7f2 fc7f 	bl	8000274 <__aeabi_uidivmod>
 800d976:	4b10      	ldr	r3, [pc, #64]	@ (800d9b8 <SX1276SetChannel+0x4c>)
 800d978:	0208      	lsls	r0, r1, #8
 800d97a:	18c0      	adds	r0, r0, r3
 800d97c:	490d      	ldr	r1, [pc, #52]	@ (800d9b4 <SX1276SetChannel+0x48>)
 800d97e:	f7f2 fbf3 	bl	8000168 <__udivsi3>
    stepsInt = freqInHz / SX1276_PLL_STEP_SCALED;
 800d982:	490c      	ldr	r1, [pc, #48]	@ (800d9b4 <SX1276SetChannel+0x48>)
           ( ( ( stepsFrac << SX1276_PLL_STEP_SHIFT_AMOUNT ) + ( SX1276_PLL_STEP_SCALED >> 1 ) ) /
 800d984:	0004      	movs	r4, r0
    stepsInt = freqInHz / SX1276_PLL_STEP_SCALED;
 800d986:	0028      	movs	r0, r5
 800d988:	f7f2 fbee 	bl	8000168 <__udivsi3>
    return ( stepsInt << SX1276_PLL_STEP_SHIFT_AMOUNT ) + 
 800d98c:	0200      	lsls	r0, r0, #8
 800d98e:	1824      	adds	r4, r4, r0
    SX1276.Settings.Channel = freq;
 800d990:	4b0a      	ldr	r3, [pc, #40]	@ (800d9bc <SX1276SetChannel+0x50>)
    SX1276Write( REG_FRFMSB, ( uint8_t )( ( freqInPllSteps >> 16 ) & 0xFF ) );
 800d992:	0c21      	lsrs	r1, r4, #16
 800d994:	2006      	movs	r0, #6
 800d996:	b2c9      	uxtb	r1, r1
    SX1276.Settings.Channel = freq;
 800d998:	609d      	str	r5, [r3, #8]
    SX1276Write( REG_FRFMSB, ( uint8_t )( ( freqInPllSteps >> 16 ) & 0xFF ) );
 800d99a:	f7ff ffde 	bl	800d95a <SX1276Write>
    SX1276Write( REG_FRFMID, ( uint8_t )( ( freqInPllSteps >> 8 ) & 0xFF ) );
 800d99e:	0a21      	lsrs	r1, r4, #8
 800d9a0:	2007      	movs	r0, #7
 800d9a2:	b2c9      	uxtb	r1, r1
 800d9a4:	f7ff ffd9 	bl	800d95a <SX1276Write>
    SX1276Write( REG_FRFLSB, ( uint8_t )( freqInPllSteps & 0xFF ) );
 800d9a8:	2008      	movs	r0, #8
 800d9aa:	b2e1      	uxtb	r1, r4
 800d9ac:	f7ff ffd5 	bl	800d95a <SX1276Write>
}
 800d9b0:	bd70      	pop	{r4, r5, r6, pc}
 800d9b2:	46c0      	nop			@ (mov r8, r8)
 800d9b4:	00003d09 	.word	0x00003d09
 800d9b8:	00001e84 	.word	0x00001e84
 800d9bc:	20001368 	.word	0x20001368

0800d9c0 <SX1276ReadBuffer>:
{
 800d9c0:	b570      	push	{r4, r5, r6, lr}
 800d9c2:	0005      	movs	r5, r0
    Sx_Board_ChipSelect( 0 );
 800d9c4:	2000      	movs	r0, #0
{
 800d9c6:	000c      	movs	r4, r1
 800d9c8:	0016      	movs	r6, r2
    Sx_Board_ChipSelect( 0 );
 800d9ca:	f7f6 fcb9 	bl	8004340 <CMWX1ZZABZ0XX_RADIO_ChipSelect>
    Sx_Board_SendRecv( addr & 0x7F );
 800d9ce:	207f      	movs	r0, #127	@ 0x7f
 800d9d0:	4028      	ands	r0, r5
 800d9d2:	f7f6 fca7 	bl	8004324 <CMWX1ZZABZ0XX_RADIO_SendRecv>
    for( i = 0; i < size; i++ )
 800d9d6:	19a6      	adds	r6, r4, r6
 800d9d8:	42b4      	cmp	r4, r6
 800d9da:	d103      	bne.n	800d9e4 <SX1276ReadBuffer+0x24>
    Sx_Board_ChipSelect( 1 );
 800d9dc:	2001      	movs	r0, #1
 800d9de:	f7f6 fcaf 	bl	8004340 <CMWX1ZZABZ0XX_RADIO_ChipSelect>
}
 800d9e2:	bd70      	pop	{r4, r5, r6, pc}
        buffer[i] = Sx_Board_SendRecv( 0 );
 800d9e4:	2000      	movs	r0, #0
 800d9e6:	f7f6 fc9d 	bl	8004324 <CMWX1ZZABZ0XX_RADIO_SendRecv>
 800d9ea:	7020      	strb	r0, [r4, #0]
    for( i = 0; i < size; i++ )
 800d9ec:	3401      	adds	r4, #1
 800d9ee:	e7f3      	b.n	800d9d8 <SX1276ReadBuffer+0x18>

0800d9f0 <SX1276Read>:
{
 800d9f0:	b513      	push	{r0, r1, r4, lr}
    SX1276ReadBuffer( addr, &data, 1 );
 800d9f2:	466b      	mov	r3, sp
 800d9f4:	1ddc      	adds	r4, r3, #7
 800d9f6:	2201      	movs	r2, #1
 800d9f8:	0021      	movs	r1, r4
 800d9fa:	f7ff ffe1 	bl	800d9c0 <SX1276ReadBuffer>
    return data;
 800d9fe:	7820      	ldrb	r0, [r4, #0]
}
 800da00:	bd16      	pop	{r1, r2, r4, pc}
	...

0800da04 <SX1276OnDio2Irq>:
            break;
    }
}

static void SX1276OnDio2Irq( void )
{
 800da04:	b570      	push	{r4, r5, r6, lr}
    switch( SX1276.Settings.State )
 800da06:	4c2c      	ldr	r4, [pc, #176]	@ (800dab8 <SX1276OnDio2Irq+0xb4>)
 800da08:	7925      	ldrb	r5, [r4, #4]
 800da0a:	2d01      	cmp	r5, #1
 800da0c:	d002      	beq.n	800da14 <SX1276OnDio2Irq+0x10>
 800da0e:	2d02      	cmp	r5, #2
 800da10:	d049      	beq.n	800daa6 <SX1276OnDio2Irq+0xa2>
            }
            break;
        default:
            break;
    }
}
 800da12:	bd70      	pop	{r4, r5, r6, pc}
            switch( SX1276.Settings.Modem )
 800da14:	7963      	ldrb	r3, [r4, #5]
 800da16:	2b00      	cmp	r3, #0
 800da18:	d017      	beq.n	800da4a <SX1276OnDio2Irq+0x46>
 800da1a:	2b01      	cmp	r3, #1
 800da1c:	d1f9      	bne.n	800da12 <SX1276OnDio2Irq+0xe>
                if( SX1276.Settings.LoRa.FreqHopOn == true )
 800da1e:	3453      	adds	r4, #83	@ 0x53
 800da20:	7823      	ldrb	r3, [r4, #0]
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL );
 800da22:	2102      	movs	r1, #2
                if( SX1276.Settings.LoRa.FreqHopOn == true )
 800da24:	2b00      	cmp	r3, #0
 800da26:	d0f4      	beq.n	800da12 <SX1276OnDio2Irq+0xe>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL );
 800da28:	2012      	movs	r0, #18
 800da2a:	f7ff ff96 	bl	800d95a <SX1276Write>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->FhssChangeChannel != NULL ) )
 800da2e:	4b23      	ldr	r3, [pc, #140]	@ (800dabc <SX1276OnDio2Irq+0xb8>)
 800da30:	681b      	ldr	r3, [r3, #0]
 800da32:	2b00      	cmp	r3, #0
 800da34:	d0ed      	beq.n	800da12 <SX1276OnDio2Irq+0xe>
 800da36:	695c      	ldr	r4, [r3, #20]
 800da38:	2c00      	cmp	r4, #0
 800da3a:	d0ea      	beq.n	800da12 <SX1276OnDio2Irq+0xe>
                        RadioEvents->FhssChangeChannel( ( SX1276Read( REG_LR_HOPCHANNEL ) & RFLR_HOPCHANNEL_CHANNEL_MASK ) );
 800da3c:	201c      	movs	r0, #28
 800da3e:	f7ff ffd7 	bl	800d9f0 <SX1276Read>
 800da42:	233f      	movs	r3, #63	@ 0x3f
 800da44:	4018      	ands	r0, r3
 800da46:	47a0      	blx	r4
}
 800da48:	e7e3      	b.n	800da12 <SX1276OnDio2Irq+0xe>
                SX1276.Settings.FskPacketHandler.PreambleDetected = true;
 800da4a:	0023      	movs	r3, r4
                if( ( SX1276.Settings.FskPacketHandler.PreambleDetected != 0 ) && ( SX1276.Settings.FskPacketHandler.SyncWordDetected == 0 ) )
 800da4c:	0026      	movs	r6, r4
                SX1276.Settings.FskPacketHandler.PreambleDetected = true;
 800da4e:	3330      	adds	r3, #48	@ 0x30
 800da50:	701d      	strb	r5, [r3, #0]
                if( ( SX1276.Settings.FskPacketHandler.PreambleDetected != 0 ) && ( SX1276.Settings.FskPacketHandler.SyncWordDetected == 0 ) )
 800da52:	3631      	adds	r6, #49	@ 0x31
 800da54:	7833      	ldrb	r3, [r6, #0]
 800da56:	2b00      	cmp	r3, #0
 800da58:	d1db      	bne.n	800da12 <SX1276OnDio2Irq+0xe>
                    TimerStop( &RxTimeoutSyncWord );
 800da5a:	0020      	movs	r0, r4
 800da5c:	3068      	adds	r0, #104	@ 0x68
 800da5e:	f001 fe61 	bl	800f724 <UTIL_TIMER_Stop>
                    SX1276.Settings.FskPacketHandler.RssiValue = -( SX1276Read( REG_RSSIVALUE ) >> 1 );
 800da62:	2011      	movs	r0, #17
                    SX1276.Settings.FskPacketHandler.SyncWordDetected = true;
 800da64:	7035      	strb	r5, [r6, #0]
                    SX1276.Settings.FskPacketHandler.RssiValue = -( SX1276Read( REG_RSSIVALUE ) >> 1 );
 800da66:	f7ff ffc3 	bl	800d9f0 <SX1276Read>
 800da6a:	0023      	movs	r3, r4
 800da6c:	0840      	lsrs	r0, r0, #1
 800da6e:	3332      	adds	r3, #50	@ 0x32
 800da70:	4240      	negs	r0, r0
 800da72:	7018      	strb	r0, [r3, #0]
                    SX1276.Settings.FskPacketHandler.AfcValue = ( int32_t )SX1276ConvertPllStepToFreqInHz( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
 800da74:	201b      	movs	r0, #27
 800da76:	f7ff ffbb 	bl	800d9f0 <SX1276Read>
 800da7a:	0005      	movs	r5, r0
                                                                                                           ( uint16_t )SX1276Read( REG_AFCLSB ) );
 800da7c:	201c      	movs	r0, #28
 800da7e:	f7ff ffb7 	bl	800d9f0 <SX1276Read>
                    SX1276.Settings.FskPacketHandler.AfcValue = ( int32_t )SX1276ConvertPllStepToFreqInHz( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
 800da82:	022d      	lsls	r5, r5, #8
           ( ( freqInHzFrac * SX1276_PLL_STEP_SCALED + ( 128 ) ) >> SX1276_PLL_STEP_SHIFT_AMOUNT );
 800da84:	4b0e      	ldr	r3, [pc, #56]	@ (800dac0 <SX1276OnDio2Irq+0xbc>)
                    SX1276.Settings.FskPacketHandler.AfcValue = ( int32_t )SX1276ConvertPllStepToFreqInHz( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
 800da86:	4305      	orrs	r5, r0
           ( ( freqInHzFrac * SX1276_PLL_STEP_SCALED + ( 128 ) ) >> SX1276_PLL_STEP_SHIFT_AMOUNT );
 800da88:	b2c0      	uxtb	r0, r0
 800da8a:	4358      	muls	r0, r3
    freqInHzInt = pllSteps >> SX1276_PLL_STEP_SHIFT_AMOUNT;
 800da8c:	0a2d      	lsrs	r5, r5, #8
    return freqInHzInt * SX1276_PLL_STEP_SCALED + 
 800da8e:	436b      	muls	r3, r5
           ( ( freqInHzFrac * SX1276_PLL_STEP_SCALED + ( 128 ) ) >> SX1276_PLL_STEP_SHIFT_AMOUNT );
 800da90:	3080      	adds	r0, #128	@ 0x80
 800da92:	0a00      	lsrs	r0, r0, #8
    return freqInHzInt * SX1276_PLL_STEP_SCALED + 
 800da94:	18c0      	adds	r0, r0, r3
                    SX1276.Settings.FskPacketHandler.AfcValue = ( int32_t )SX1276ConvertPllStepToFreqInHz( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
 800da96:	6360      	str	r0, [r4, #52]	@ 0x34
                    SX1276.Settings.FskPacketHandler.RxGain = ( SX1276Read( REG_LNA ) >> 5 ) & 0x07;
 800da98:	200c      	movs	r0, #12
 800da9a:	f7ff ffa9 	bl	800d9f0 <SX1276Read>
 800da9e:	3438      	adds	r4, #56	@ 0x38
 800daa0:	0940      	lsrs	r0, r0, #5
 800daa2:	7020      	strb	r0, [r4, #0]
 800daa4:	e7b5      	b.n	800da12 <SX1276OnDio2Irq+0xe>
            switch( SX1276.Settings.Modem )
 800daa6:	7963      	ldrb	r3, [r4, #5]
 800daa8:	2b01      	cmp	r3, #1
 800daaa:	d1b2      	bne.n	800da12 <SX1276OnDio2Irq+0xe>
                if( SX1276.Settings.LoRa.FreqHopOn == true )
 800daac:	3453      	adds	r4, #83	@ 0x53
 800daae:	7823      	ldrb	r3, [r4, #0]
 800dab0:	2b00      	cmp	r3, #0
 800dab2:	d0ae      	beq.n	800da12 <SX1276OnDio2Irq+0xe>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL );
 800dab4:	0029      	movs	r1, r5
 800dab6:	e7b7      	b.n	800da28 <SX1276OnDio2Irq+0x24>
 800dab8:	20001368 	.word	0x20001368
 800dabc:	200013e8 	.word	0x200013e8
 800dac0:	00003d09 	.word	0x00003d09

0800dac4 <SX1276OnDio4Irq>:
    }
}

static void SX1276OnDio4Irq( void )
{
    switch( SX1276.Settings.Modem )
 800dac4:	4b05      	ldr	r3, [pc, #20]	@ (800dadc <SX1276OnDio4Irq+0x18>)
 800dac6:	795a      	ldrb	r2, [r3, #5]
 800dac8:	2a00      	cmp	r2, #0
 800daca:	d105      	bne.n	800dad8 <SX1276OnDio4Irq+0x14>
    {
    case MODEM_FSK:
        {
            if( SX1276.Settings.FskPacketHandler.PreambleDetected == false )
 800dacc:	3330      	adds	r3, #48	@ 0x30
 800dace:	781a      	ldrb	r2, [r3, #0]
 800dad0:	2a00      	cmp	r2, #0
 800dad2:	d101      	bne.n	800dad8 <SX1276OnDio4Irq+0x14>
            {
                SX1276.Settings.FskPacketHandler.PreambleDetected = true;
 800dad4:	3201      	adds	r2, #1
 800dad6:	701a      	strb	r2, [r3, #0]
    case MODEM_LORA:
        break;
    default:
        break;
    }
}
 800dad8:	4770      	bx	lr
 800dada:	46c0      	nop			@ (mov r8, r8)
 800dadc:	20001368 	.word	0x20001368

0800dae0 <SX1276OnDio3Irq>:
{
 800dae0:	b570      	push	{r4, r5, r6, lr}
    switch( SX1276.Settings.Modem )
 800dae2:	4b12      	ldr	r3, [pc, #72]	@ (800db2c <SX1276OnDio3Irq+0x4c>)
 800dae4:	795c      	ldrb	r4, [r3, #5]
 800dae6:	2c01      	cmp	r4, #1
 800dae8:	d112      	bne.n	800db10 <SX1276OnDio3Irq+0x30>
        if( ( SX1276Read( REG_LR_IRQFLAGS ) & RFLR_IRQFLAGS_CADDETECTED ) == RFLR_IRQFLAGS_CADDETECTED )
 800daea:	2012      	movs	r0, #18
 800daec:	f7ff ff80 	bl	800d9f0 <SX1276Read>
 800daf0:	0005      	movs	r5, r0
 800daf2:	4e0f      	ldr	r6, [pc, #60]	@ (800db30 <SX1276OnDio3Irq+0x50>)
 800daf4:	4025      	ands	r5, r4
 800daf6:	4220      	tst	r0, r4
 800daf8:	d00b      	beq.n	800db12 <SX1276OnDio3Irq+0x32>
            SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_CADDETECTED | RFLR_IRQFLAGS_CADDONE );
 800dafa:	2105      	movs	r1, #5
 800dafc:	2012      	movs	r0, #18
 800dafe:	f7ff ff2c 	bl	800d95a <SX1276Write>
            if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 800db02:	6833      	ldr	r3, [r6, #0]
 800db04:	2b00      	cmp	r3, #0
 800db06:	d003      	beq.n	800db10 <SX1276OnDio3Irq+0x30>
 800db08:	699b      	ldr	r3, [r3, #24]
                RadioEvents->CadDone( true );
 800db0a:	0020      	movs	r0, r4
            if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 800db0c:	2b00      	cmp	r3, #0
 800db0e:	d10b      	bne.n	800db28 <SX1276OnDio3Irq+0x48>
}
 800db10:	bd70      	pop	{r4, r5, r6, pc}
            SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_CADDONE );
 800db12:	2104      	movs	r1, #4
 800db14:	2012      	movs	r0, #18
 800db16:	f7ff ff20 	bl	800d95a <SX1276Write>
            if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 800db1a:	6833      	ldr	r3, [r6, #0]
 800db1c:	2b00      	cmp	r3, #0
 800db1e:	d0f7      	beq.n	800db10 <SX1276OnDio3Irq+0x30>
 800db20:	699b      	ldr	r3, [r3, #24]
 800db22:	2b00      	cmp	r3, #0
 800db24:	d0f4      	beq.n	800db10 <SX1276OnDio3Irq+0x30>
                RadioEvents->CadDone( false );
 800db26:	0028      	movs	r0, r5
 800db28:	4798      	blx	r3
}
 800db2a:	e7f1      	b.n	800db10 <SX1276OnDio3Irq+0x30>
 800db2c:	20001368 	.word	0x20001368
 800db30:	200013e8 	.word	0x200013e8

0800db34 <SX1276SetOpMode.part.0>:
static void SX1276SetOpMode( uint8_t opMode )
 800db34:	b570      	push	{r4, r5, r6, lr}
 800db36:	0004      	movs	r4, r0
    else if ( opMode == RF_OPMODE_RECEIVER )
 800db38:	2805      	cmp	r0, #5
 800db3a:	d111      	bne.n	800db60 <SX1276SetOpMode.part.0+0x2c>
      Sx_Board_SetXO( SET ); 
 800db3c:	2001      	movs	r0, #1
 800db3e:	f7f6 fa27 	bl	8003f90 <CMWX1ZZABZ0XX_RADIO_SetXO>
      Sx_Board_SetAntSw( RFSW_RX );
 800db42:	2001      	movs	r0, #1
 800db44:	f7f6 fb9c 	bl	8004280 <CMWX1ZZABZ0XX_RADIO_SetAntSw>
      SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
 800db48:	2001      	movs	r0, #1
 800db4a:	f7ff ff51 	bl	800d9f0 <SX1276Read>
 800db4e:	2307      	movs	r3, #7
 800db50:	0001      	movs	r1, r0
 800db52:	4399      	bics	r1, r3
 800db54:	4321      	orrs	r1, r4
 800db56:	b2c9      	uxtb	r1, r1
      SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
 800db58:	2001      	movs	r0, #1
 800db5a:	f7ff fefe 	bl	800d95a <SX1276Write>
}
 800db5e:	bd70      	pop	{r4, r5, r6, pc}
      uint8_t paConfig =  SX1276Read( REG_PACONFIG );
 800db60:	2009      	movs	r0, #9
 800db62:	f7ff ff45 	bl	800d9f0 <SX1276Read>
 800db66:	0005      	movs	r5, r0
      Sx_Board_SetXO( SET ); 
 800db68:	2001      	movs	r0, #1
 800db6a:	f7f6 fa11 	bl	8003f90 <CMWX1ZZABZ0XX_RADIO_SetXO>
        Sx_Board_SetAntSw( RFSW_RFO_HP );
 800db6e:	2003      	movs	r0, #3
      if( ( paConfig & RF_PACONFIG_PASELECT_PABOOST ) == RF_PACONFIG_PASELECT_PABOOST )
 800db70:	062d      	lsls	r5, r5, #24
 800db72:	d400      	bmi.n	800db76 <SX1276SetOpMode.part.0+0x42>
        Sx_Board_SetAntSw( RFSW_RFO_LP );
 800db74:	2002      	movs	r0, #2
 800db76:	f7f6 fb83 	bl	8004280 <CMWX1ZZABZ0XX_RADIO_SetAntSw>
      SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
 800db7a:	2001      	movs	r0, #1
 800db7c:	f7ff ff38 	bl	800d9f0 <SX1276Read>
 800db80:	2307      	movs	r3, #7
 800db82:	4398      	bics	r0, r3
 800db84:	4304      	orrs	r4, r0
 800db86:	b2e1      	uxtb	r1, r4
 800db88:	e7e6      	b.n	800db58 <SX1276SetOpMode.part.0+0x24>
	...

0800db8c <SX1276SetStby>:
{
 800db8c:	b510      	push	{r4, lr}
    TimerStop( &RxTimeoutTimer );
 800db8e:	4c09      	ldr	r4, [pc, #36]	@ (800dbb4 <SX1276SetStby+0x28>)
 800db90:	4809      	ldr	r0, [pc, #36]	@ (800dbb8 <SX1276SetStby+0x2c>)
 800db92:	f001 fdc7 	bl	800f724 <UTIL_TIMER_Stop>
    TimerStop( &TxTimeoutTimer );
 800db96:	0020      	movs	r0, r4
 800db98:	301c      	adds	r0, #28
 800db9a:	f001 fdc3 	bl	800f724 <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutSyncWord );
 800db9e:	4807      	ldr	r0, [pc, #28]	@ (800dbbc <SX1276SetStby+0x30>)
 800dba0:	4c07      	ldr	r4, [pc, #28]	@ (800dbc0 <SX1276SetStby+0x34>)
 800dba2:	f001 fdbf 	bl	800f724 <UTIL_TIMER_Stop>
    if( opMode == RF_OPMODE_SLEEP )
 800dba6:	2001      	movs	r0, #1
 800dba8:	f7ff ffc4 	bl	800db34 <SX1276SetOpMode.part.0>
    SX1276.Settings.State = RF_IDLE;
 800dbac:	2300      	movs	r3, #0
 800dbae:	7123      	strb	r3, [r4, #4]
}
 800dbb0:	bd10      	pop	{r4, pc}
 800dbb2:	46c0      	nop			@ (mov r8, r8)
 800dbb4:	200013e8 	.word	0x200013e8
 800dbb8:	200013ec 	.word	0x200013ec
 800dbbc:	200013d0 	.word	0x200013d0
 800dbc0:	20001368 	.word	0x20001368

0800dbc4 <SX1276SetRx>:
{
 800dbc4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    TimerStop( &TxTimeoutTimer );
 800dbc6:	4b7a      	ldr	r3, [pc, #488]	@ (800ddb0 <SX1276SetRx+0x1ec>)
{
 800dbc8:	0007      	movs	r7, r0
    TimerStop( &TxTimeoutTimer );
 800dbca:	487a      	ldr	r0, [pc, #488]	@ (800ddb4 <SX1276SetRx+0x1f0>)
 800dbcc:	9301      	str	r3, [sp, #4]
 800dbce:	f001 fda9 	bl	800f724 <UTIL_TIMER_Stop>
    switch( SX1276.Settings.Modem )
 800dbd2:	4c79      	ldr	r4, [pc, #484]	@ (800ddb8 <SX1276SetRx+0x1f4>)
 800dbd4:	7965      	ldrb	r5, [r4, #5]
 800dbd6:	2d00      	cmp	r5, #0
 800dbd8:	d02f      	beq.n	800dc3a <SX1276SetRx+0x76>
 800dbda:	2600      	movs	r6, #0
 800dbdc:	2d01      	cmp	r5, #1
 800dbde:	d151      	bne.n	800dc84 <SX1276SetRx+0xc0>
            if( SX1276.Settings.LoRa.IqInverted == true )
 800dbe0:	0023      	movs	r3, r4
 800dbe2:	3355      	adds	r3, #85	@ 0x55
 800dbe4:	781b      	ldrb	r3, [r3, #0]
 800dbe6:	2641      	movs	r6, #65	@ 0x41
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_ON | RFLR_INVERTIQ_TX_OFF ) );
 800dbe8:	2033      	movs	r0, #51	@ 0x33
            if( SX1276.Settings.LoRa.IqInverted == true )
 800dbea:	2b00      	cmp	r3, #0
 800dbec:	d100      	bne.n	800dbf0 <SX1276SetRx+0x2c>
 800dbee:	e06f      	b.n	800dcd0 <SX1276SetRx+0x10c>
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_ON | RFLR_INVERTIQ_TX_OFF ) );
 800dbf0:	f7ff fefe 	bl	800d9f0 <SX1276Read>
 800dbf4:	4330      	orrs	r0, r6
 800dbf6:	b2c1      	uxtb	r1, r0
 800dbf8:	2033      	movs	r0, #51	@ 0x33
 800dbfa:	f7ff feae 	bl	800d95a <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_ON );
 800dbfe:	2119      	movs	r1, #25
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
 800dc00:	203b      	movs	r0, #59	@ 0x3b
 800dc02:	f7ff feaa 	bl	800d95a <SX1276Write>
            if( SX1276.Settings.LoRa.Bandwidth < 9 )
 800dc06:	6c63      	ldr	r3, [r4, #68]	@ 0x44
                SX1276Write( REG_LR_DETECTOPTIMIZE, SX1276Read( REG_LR_DETECTOPTIMIZE ) & 0x7F );
 800dc08:	2031      	movs	r0, #49	@ 0x31
            if( SX1276.Settings.LoRa.Bandwidth < 9 )
 800dc0a:	2b08      	cmp	r3, #8
 800dc0c:	d900      	bls.n	800dc10 <SX1276SetRx+0x4c>
 800dc0e:	e0b7      	b.n	800dd80 <SX1276SetRx+0x1bc>
                SX1276Write( REG_LR_DETECTOPTIMIZE, SX1276Read( REG_LR_DETECTOPTIMIZE ) & 0x7F );
 800dc10:	f7ff feee 	bl	800d9f0 <SX1276Read>
 800dc14:	217f      	movs	r1, #127	@ 0x7f
 800dc16:	4001      	ands	r1, r0
 800dc18:	2031      	movs	r0, #49	@ 0x31
 800dc1a:	f7ff fe9e 	bl	800d95a <SX1276Write>
                SX1276Write( REG_LR_IFFREQ2, 0x00 );
 800dc1e:	2030      	movs	r0, #48	@ 0x30
 800dc20:	2100      	movs	r1, #0
 800dc22:	f7ff fe9a 	bl	800d95a <SX1276Write>
                switch( SX1276.Settings.LoRa.Bandwidth )
 800dc26:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 800dc28:	2808      	cmp	r0, #8
 800dc2a:	d864      	bhi.n	800dcf6 <SX1276SetRx+0x132>
 800dc2c:	f7f2 fa7e 	bl	800012c <__gnu_thumb1_case_uqi>
 800dc30:	8e87805a 	.word	0x8e87805a
 800dc34:	a3a39c95 	.word	0xa3a39c95
 800dc38:	a3          	.byte	0xa3
 800dc39:	00          	.byte	0x00
            rxContinuous = SX1276.Settings.Fsk.RxContinuous;
 800dc3a:	1de3      	adds	r3, r4, #7
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 800dc3c:	2040      	movs	r0, #64	@ 0x40
            rxContinuous = SX1276.Settings.Fsk.RxContinuous;
 800dc3e:	7fde      	ldrb	r6, [r3, #31]
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 800dc40:	f7ff fed6 	bl	800d9f0 <SX1276Read>
 800dc44:	2303      	movs	r3, #3
 800dc46:	210c      	movs	r1, #12
 800dc48:	4018      	ands	r0, r3
 800dc4a:	4301      	orrs	r1, r0
 800dc4c:	2040      	movs	r0, #64	@ 0x40
 800dc4e:	f7ff fe84 	bl	800d95a <SX1276Write>
            SX1276Write( REG_DIOMAPPING2, ( SX1276Read( REG_DIOMAPPING2 ) & RF_DIOMAPPING2_DIO4_MASK &
 800dc52:	2041      	movs	r0, #65	@ 0x41
 800dc54:	f7ff fecc 	bl	800d9f0 <SX1276Read>
 800dc58:	213f      	movs	r1, #63	@ 0x3f
 800dc5a:	4249      	negs	r1, r1
 800dc5c:	4301      	orrs	r1, r0
 800dc5e:	b2c9      	uxtb	r1, r1
 800dc60:	2041      	movs	r0, #65	@ 0x41
 800dc62:	f7ff fe7a 	bl	800d95a <SX1276Write>
            SX1276.Settings.FskPacketHandler.FifoThresh = SX1276Read( REG_FIFOTHRESH ) & 0x3F;
 800dc66:	2035      	movs	r0, #53	@ 0x35
 800dc68:	f7ff fec2 	bl	800d9f0 <SX1276Read>
 800dc6c:	233f      	movs	r3, #63	@ 0x3f
 800dc6e:	4018      	ands	r0, r3
 800dc70:	0023      	movs	r3, r4
 800dc72:	333e      	adds	r3, #62	@ 0x3e
 800dc74:	7018      	strb	r0, [r3, #0]
            SX1276Write( REG_RXCONFIG, RF_RXCONFIG_AFCAUTO_ON | RF_RXCONFIG_AGCAUTO_ON | RF_RXCONFIG_RXTRIGER_PREAMBLEDETECT );
 800dc76:	211e      	movs	r1, #30
 800dc78:	200d      	movs	r0, #13
 800dc7a:	f7ff fe6e 	bl	800d95a <SX1276Write>
            SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 800dc7e:	8625      	strh	r5, [r4, #48]	@ 0x30
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 800dc80:	87a5      	strh	r5, [r4, #60]	@ 0x3c
            SX1276.Settings.FskPacketHandler.Size = 0;
 800dc82:	8765      	strh	r5, [r4, #58]	@ 0x3a
    memset( RxTxBuffer, 0, ( size_t )RX_TX_BUFFER_SIZE );
 800dc84:	2280      	movs	r2, #128	@ 0x80
 800dc86:	2100      	movs	r1, #0
 800dc88:	484c      	ldr	r0, [pc, #304]	@ (800ddbc <SX1276SetRx+0x1f8>)
 800dc8a:	0052      	lsls	r2, r2, #1
 800dc8c:	f002 f890 	bl	800fdb0 <memset>
    SX1276.Settings.State = RF_RX_RUNNING;
 800dc90:	2301      	movs	r3, #1
 800dc92:	7123      	strb	r3, [r4, #4]
    if( timeout != 0 )
 800dc94:	2f00      	cmp	r7, #0
 800dc96:	d008      	beq.n	800dcaa <SX1276SetRx+0xe6>
        TimerSetValue( &RxTimeoutTimer, timeout );
 800dc98:	9d01      	ldr	r5, [sp, #4]
 800dc9a:	0039      	movs	r1, r7
 800dc9c:	3504      	adds	r5, #4
 800dc9e:	0028      	movs	r0, r5
 800dca0:	f001 fdd2 	bl	800f848 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 800dca4:	0028      	movs	r0, r5
 800dca6:	f001 fd91 	bl	800f7cc <UTIL_TIMER_Start>
    if( SX1276.Settings.Modem == MODEM_FSK )
 800dcaa:	7963      	ldrb	r3, [r4, #5]
 800dcac:	2b00      	cmp	r3, #0
 800dcae:	d000      	beq.n	800dcb2 <SX1276SetRx+0xee>
 800dcb0:	e077      	b.n	800dda2 <SX1276SetRx+0x1de>
    if( opMode == RF_OPMODE_SLEEP )
 800dcb2:	2005      	movs	r0, #5
 800dcb4:	f7ff ff3e 	bl	800db34 <SX1276SetOpMode.part.0>
        if( rxContinuous == false )
 800dcb8:	2e00      	cmp	r6, #0
 800dcba:	d108      	bne.n	800dcce <SX1276SetRx+0x10a>
            TimerSetValue( &RxTimeoutSyncWord, SX1276.Settings.Fsk.RxSingleTimeout );
 800dcbc:	0025      	movs	r5, r4
 800dcbe:	3568      	adds	r5, #104	@ 0x68
 800dcc0:	0028      	movs	r0, r5
 800dcc2:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800dcc4:	f001 fdc0 	bl	800f848 <UTIL_TIMER_SetPeriod>
            TimerStart( &RxTimeoutSyncWord );
 800dcc8:	0028      	movs	r0, r5
 800dcca:	f001 fd7f 	bl	800f7cc <UTIL_TIMER_Start>
}
 800dcce:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_OFF ) );
 800dcd0:	f7ff fe8e 	bl	800d9f0 <SX1276Read>
 800dcd4:	43b0      	bics	r0, r6
 800dcd6:	4305      	orrs	r5, r0
 800dcd8:	b2e9      	uxtb	r1, r5
 800dcda:	2033      	movs	r0, #51	@ 0x33
 800dcdc:	f7ff fe3d 	bl	800d95a <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
 800dce0:	211d      	movs	r1, #29
 800dce2:	e78d      	b.n	800dc00 <SX1276SetRx+0x3c>
                    SX1276Write( REG_LR_IFFREQ1, 0x48 );
 800dce4:	202f      	movs	r0, #47	@ 0x2f
 800dce6:	2148      	movs	r1, #72	@ 0x48
 800dce8:	f7ff fe37 	bl	800d95a <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 7810 );
 800dcec:	68a0      	ldr	r0, [r4, #8]
 800dcee:	4b34      	ldr	r3, [pc, #208]	@ (800ddc0 <SX1276SetRx+0x1fc>)
                    SX1276SetChannel(SX1276.Settings.Channel + 41670 );
 800dcf0:	18c0      	adds	r0, r0, r3
 800dcf2:	f7ff fe3b 	bl	800d96c <SX1276SetChannel>
            rxContinuous = SX1276.Settings.LoRa.RxContinuous;
 800dcf6:	0023      	movs	r3, r4
 800dcf8:	3356      	adds	r3, #86	@ 0x56
 800dcfa:	781e      	ldrb	r6, [r3, #0]
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 800dcfc:	0023      	movs	r3, r4
 800dcfe:	3353      	adds	r3, #83	@ 0x53
 800dd00:	781b      	ldrb	r3, [r3, #0]
 800dd02:	2b00      	cmp	r3, #0
 800dd04:	d044      	beq.n	800dd90 <SX1276SetRx+0x1cc>
                SX1276Write( REG_LR_IRQFLAGSMASK, //RFLR_IRQFLAGS_RXTIMEOUT |
 800dd06:	211d      	movs	r1, #29
 800dd08:	2011      	movs	r0, #17
 800dd0a:	f7ff fe26 	bl	800d95a <SX1276Write>
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK & RFLR_DIOMAPPING1_DIO2_MASK  ) | RFLR_DIOMAPPING1_DIO0_00 | RFLR_DIOMAPPING1_DIO2_00 );
 800dd0e:	2040      	movs	r0, #64	@ 0x40
 800dd10:	f7ff fe6e 	bl	800d9f0 <SX1276Read>
 800dd14:	2133      	movs	r1, #51	@ 0x33
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_00 );
 800dd16:	4001      	ands	r1, r0
 800dd18:	2040      	movs	r0, #64	@ 0x40
 800dd1a:	f7ff fe1e 	bl	800d95a <SX1276Write>
            SX1276Write( REG_LR_FIFORXBASEADDR, 0 );
 800dd1e:	2100      	movs	r1, #0
 800dd20:	200f      	movs	r0, #15
 800dd22:	f7ff fe1a 	bl	800d95a <SX1276Write>
            SX1276Write( REG_LR_FIFOADDRPTR, 0 );
 800dd26:	2100      	movs	r1, #0
 800dd28:	200d      	movs	r0, #13
 800dd2a:	f7ff fe16 	bl	800d95a <SX1276Write>
        break;
 800dd2e:	e7a9      	b.n	800dc84 <SX1276SetRx+0xc0>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 800dd30:	202f      	movs	r0, #47	@ 0x2f
 800dd32:	2144      	movs	r1, #68	@ 0x44
 800dd34:	f7ff fe11 	bl	800d95a <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 10420 );
 800dd38:	68a0      	ldr	r0, [r4, #8]
 800dd3a:	4b22      	ldr	r3, [pc, #136]	@ (800ddc4 <SX1276SetRx+0x200>)
 800dd3c:	e7d8      	b.n	800dcf0 <SX1276SetRx+0x12c>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 800dd3e:	202f      	movs	r0, #47	@ 0x2f
 800dd40:	2144      	movs	r1, #68	@ 0x44
 800dd42:	f7ff fe0a 	bl	800d95a <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 15620 );
 800dd46:	68a0      	ldr	r0, [r4, #8]
 800dd48:	4b1f      	ldr	r3, [pc, #124]	@ (800ddc8 <SX1276SetRx+0x204>)
 800dd4a:	e7d1      	b.n	800dcf0 <SX1276SetRx+0x12c>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 800dd4c:	202f      	movs	r0, #47	@ 0x2f
 800dd4e:	2144      	movs	r1, #68	@ 0x44
 800dd50:	f7ff fe03 	bl	800d95a <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 20830 );
 800dd54:	68a0      	ldr	r0, [r4, #8]
 800dd56:	4b1d      	ldr	r3, [pc, #116]	@ (800ddcc <SX1276SetRx+0x208>)
 800dd58:	e7ca      	b.n	800dcf0 <SX1276SetRx+0x12c>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 800dd5a:	202f      	movs	r0, #47	@ 0x2f
 800dd5c:	2144      	movs	r1, #68	@ 0x44
 800dd5e:	f7ff fdfc 	bl	800d95a <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 31250 );
 800dd62:	68a0      	ldr	r0, [r4, #8]
 800dd64:	4b1a      	ldr	r3, [pc, #104]	@ (800ddd0 <SX1276SetRx+0x20c>)
 800dd66:	e7c3      	b.n	800dcf0 <SX1276SetRx+0x12c>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 800dd68:	202f      	movs	r0, #47	@ 0x2f
 800dd6a:	2144      	movs	r1, #68	@ 0x44
 800dd6c:	f7ff fdf5 	bl	800d95a <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 41670 );
 800dd70:	68a0      	ldr	r0, [r4, #8]
 800dd72:	4b18      	ldr	r3, [pc, #96]	@ (800ddd4 <SX1276SetRx+0x210>)
 800dd74:	e7bc      	b.n	800dcf0 <SX1276SetRx+0x12c>
                    SX1276Write( REG_LR_IFFREQ1, 0x40 );
 800dd76:	2140      	movs	r1, #64	@ 0x40
 800dd78:	202f      	movs	r0, #47	@ 0x2f
                SX1276Write( REG_LR_DETECTOPTIMIZE, SX1276Read( REG_LR_DETECTOPTIMIZE ) | 0x80 );
 800dd7a:	f7ff fdee 	bl	800d95a <SX1276Write>
 800dd7e:	e7ba      	b.n	800dcf6 <SX1276SetRx+0x132>
 800dd80:	f7ff fe36 	bl	800d9f0 <SX1276Read>
 800dd84:	2180      	movs	r1, #128	@ 0x80
 800dd86:	4249      	negs	r1, r1
 800dd88:	4301      	orrs	r1, r0
 800dd8a:	b2c9      	uxtb	r1, r1
 800dd8c:	2031      	movs	r0, #49	@ 0x31
 800dd8e:	e7f4      	b.n	800dd7a <SX1276SetRx+0x1b6>
                SX1276Write( REG_LR_IRQFLAGSMASK, //RFLR_IRQFLAGS_RXTIMEOUT |
 800dd90:	211f      	movs	r1, #31
 800dd92:	2011      	movs	r0, #17
 800dd94:	f7ff fde1 	bl	800d95a <SX1276Write>
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_00 );
 800dd98:	2040      	movs	r0, #64	@ 0x40
 800dd9a:	f7ff fe29 	bl	800d9f0 <SX1276Read>
 800dd9e:	213f      	movs	r1, #63	@ 0x3f
 800dda0:	e7b9      	b.n	800dd16 <SX1276SetRx+0x152>
        if( rxContinuous == true )
 800dda2:	2005      	movs	r0, #5
 800dda4:	2e00      	cmp	r6, #0
 800dda6:	d100      	bne.n	800ddaa <SX1276SetRx+0x1e6>
    if( opMode == RF_OPMODE_SLEEP )
 800dda8:	2006      	movs	r0, #6
 800ddaa:	f7ff fec3 	bl	800db34 <SX1276SetOpMode.part.0>
}
 800ddae:	e78e      	b.n	800dcce <SX1276SetRx+0x10a>
 800ddb0:	200013e8 	.word	0x200013e8
 800ddb4:	20001404 	.word	0x20001404
 800ddb8:	20001368 	.word	0x20001368
 800ddbc:	2000141c 	.word	0x2000141c
 800ddc0:	00001e82 	.word	0x00001e82
 800ddc4:	000028b4 	.word	0x000028b4
 800ddc8:	00003d04 	.word	0x00003d04
 800ddcc:	0000515e 	.word	0x0000515e
 800ddd0:	00007a12 	.word	0x00007a12
 800ddd4:	0000a2c6 	.word	0x0000a2c6

0800ddd8 <SX1276StartCad>:
{
 800ddd8:	b570      	push	{r4, r5, r6, lr}
    switch( SX1276.Settings.Modem )
 800ddda:	4c0b      	ldr	r4, [pc, #44]	@ (800de08 <SX1276StartCad+0x30>)
 800dddc:	7963      	ldrb	r3, [r4, #5]
 800ddde:	2b01      	cmp	r3, #1
 800dde0:	d110      	bne.n	800de04 <SX1276StartCad+0x2c>
            SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 800dde2:	21fa      	movs	r1, #250	@ 0xfa
 800dde4:	2011      	movs	r0, #17
 800dde6:	f7ff fdb8 	bl	800d95a <SX1276Write>
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO3_MASK ) | RFLR_DIOMAPPING1_DIO3_00 );
 800ddea:	2040      	movs	r0, #64	@ 0x40
 800ddec:	f7ff fe00 	bl	800d9f0 <SX1276Read>
 800ddf0:	2503      	movs	r5, #3
 800ddf2:	43a8      	bics	r0, r5
 800ddf4:	b2c1      	uxtb	r1, r0
 800ddf6:	2040      	movs	r0, #64	@ 0x40
 800ddf8:	f7ff fdaf 	bl	800d95a <SX1276Write>
            SX1276.Settings.State = RF_CAD;
 800ddfc:	2007      	movs	r0, #7
 800ddfe:	7125      	strb	r5, [r4, #4]
    if( opMode == RF_OPMODE_SLEEP )
 800de00:	f7ff fe98 	bl	800db34 <SX1276SetOpMode.part.0>
}
 800de04:	bd70      	pop	{r4, r5, r6, pc}
 800de06:	46c0      	nop			@ (mov r8, r8)
 800de08:	20001368 	.word	0x20001368

0800de0c <SX1276ReadRssi>:
{
 800de0c:	b510      	push	{r4, lr}
    switch( modem )
 800de0e:	2800      	cmp	r0, #0
 800de10:	d004      	beq.n	800de1c <SX1276ReadRssi+0x10>
 800de12:	2801      	cmp	r0, #1
 800de14:	d00a      	beq.n	800de2c <SX1276ReadRssi+0x20>
 800de16:	2001      	movs	r0, #1
 800de18:	4240      	negs	r0, r0
}
 800de1a:	bd10      	pop	{r4, pc}
        rssi = -( SX1276Read( REG_RSSIVALUE ) >> 1 );
 800de1c:	2011      	movs	r0, #17
 800de1e:	f7ff fde7 	bl	800d9f0 <SX1276Read>
 800de22:	0840      	lsrs	r0, r0, #1
 800de24:	b2c0      	uxtb	r0, r0
 800de26:	4240      	negs	r0, r0
            rssi = RSSI_OFFSET_LF + SX1276Read( REG_LR_RSSIVALUE );
 800de28:	b200      	sxth	r0, r0
 800de2a:	e7f6      	b.n	800de1a <SX1276ReadRssi+0xe>
        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 800de2c:	4b06      	ldr	r3, [pc, #24]	@ (800de48 <SX1276ReadRssi+0x3c>)
 800de2e:	4a07      	ldr	r2, [pc, #28]	@ (800de4c <SX1276ReadRssi+0x40>)
 800de30:	689b      	ldr	r3, [r3, #8]
            rssi = RSSI_OFFSET_HF + SX1276Read( REG_LR_RSSIVALUE );
 800de32:	201b      	movs	r0, #27
        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 800de34:	4293      	cmp	r3, r2
 800de36:	d903      	bls.n	800de40 <SX1276ReadRssi+0x34>
            rssi = RSSI_OFFSET_HF + SX1276Read( REG_LR_RSSIVALUE );
 800de38:	f7ff fdda 	bl	800d9f0 <SX1276Read>
 800de3c:	389d      	subs	r0, #157	@ 0x9d
 800de3e:	e7f3      	b.n	800de28 <SX1276ReadRssi+0x1c>
            rssi = RSSI_OFFSET_LF + SX1276Read( REG_LR_RSSIVALUE );
 800de40:	f7ff fdd6 	bl	800d9f0 <SX1276Read>
 800de44:	38a4      	subs	r0, #164	@ 0xa4
 800de46:	e7ef      	b.n	800de28 <SX1276ReadRssi+0x1c>
 800de48:	20001368 	.word	0x20001368
 800de4c:	1f4add40 	.word	0x1f4add40

0800de50 <SX1276SetOpMode.constprop.0>:
static void SX1276SetOpMode( uint8_t opMode )
 800de50:	b510      	push	{r4, lr}
      SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
 800de52:	2001      	movs	r0, #1
 800de54:	f7ff fdcc 	bl	800d9f0 <SX1276Read>
 800de58:	21f8      	movs	r1, #248	@ 0xf8
 800de5a:	4001      	ands	r1, r0
 800de5c:	2001      	movs	r0, #1
 800de5e:	f7ff fd7c 	bl	800d95a <SX1276Write>
      Sx_Board_SetAntSw( RFSW_OFF );
 800de62:	2000      	movs	r0, #0
 800de64:	f7f6 fa0c 	bl	8004280 <CMWX1ZZABZ0XX_RADIO_SetAntSw>
      Sx_Board_SetXO( RESET ); 
 800de68:	2000      	movs	r0, #0
 800de6a:	f7f6 f891 	bl	8003f90 <CMWX1ZZABZ0XX_RADIO_SetXO>
}
 800de6e:	bd10      	pop	{r4, pc}

0800de70 <SX1276SetModem>:
{
 800de70:	b510      	push	{r4, lr}
 800de72:	0004      	movs	r4, r0
    if( ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_ON ) != 0 )
 800de74:	2001      	movs	r0, #1
 800de76:	f7ff fdbb 	bl	800d9f0 <SX1276Read>
 800de7a:	b2c0      	uxtb	r0, r0
 800de7c:	4b16      	ldr	r3, [pc, #88]	@ (800ded8 <SX1276SetModem+0x68>)
 800de7e:	09c0      	lsrs	r0, r0, #7
    if( SX1276.Settings.Modem == modem )
 800de80:	42a0      	cmp	r0, r4
 800de82:	d101      	bne.n	800de88 <SX1276SetModem+0x18>
 800de84:	7158      	strb	r0, [r3, #5]
}
 800de86:	bd10      	pop	{r4, pc}
    SX1276.Settings.Modem = modem;
 800de88:	715c      	strb	r4, [r3, #5]
    switch( SX1276.Settings.Modem )
 800de8a:	2c01      	cmp	r4, #1
 800de8c:	d012      	beq.n	800deb4 <SX1276SetModem+0x44>
        SX1276SetOpMode( RF_OPMODE_SLEEP );
 800de8e:	f7ff ffdf 	bl	800de50 <SX1276SetOpMode.constprop.0>
        SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_MASK ) | RFLR_OPMODE_LONGRANGEMODE_OFF );
 800de92:	2001      	movs	r0, #1
 800de94:	f7ff fdac 	bl	800d9f0 <SX1276Read>
 800de98:	217f      	movs	r1, #127	@ 0x7f
 800de9a:	4001      	ands	r1, r0
 800de9c:	2001      	movs	r0, #1
 800de9e:	f7ff fd5c 	bl	800d95a <SX1276Write>
        SX1276Write( REG_DIOMAPPING1, 0x00 );
 800dea2:	2100      	movs	r1, #0
 800dea4:	2040      	movs	r0, #64	@ 0x40
 800dea6:	f7ff fd58 	bl	800d95a <SX1276Write>
        SX1276Write( REG_DIOMAPPING2, 0x30 ); // DIO5=ModeReady
 800deaa:	2130      	movs	r1, #48	@ 0x30
        SX1276Write( REG_DIOMAPPING2, 0x00 );
 800deac:	2041      	movs	r0, #65	@ 0x41
 800deae:	f7ff fd54 	bl	800d95a <SX1276Write>
        break;
 800deb2:	e7e8      	b.n	800de86 <SX1276SetModem+0x16>
        SX1276SetOpMode( RF_OPMODE_SLEEP );
 800deb4:	f7ff ffcc 	bl	800de50 <SX1276SetOpMode.constprop.0>
        SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_MASK ) | RFLR_OPMODE_LONGRANGEMODE_ON );
 800deb8:	0020      	movs	r0, r4
 800deba:	f7ff fd99 	bl	800d9f0 <SX1276Read>
 800debe:	2180      	movs	r1, #128	@ 0x80
 800dec0:	4249      	negs	r1, r1
 800dec2:	4301      	orrs	r1, r0
 800dec4:	b2c9      	uxtb	r1, r1
 800dec6:	0020      	movs	r0, r4
 800dec8:	f7ff fd47 	bl	800d95a <SX1276Write>
        SX1276Write( REG_DIOMAPPING1, 0x00 );
 800decc:	2100      	movs	r1, #0
 800dece:	2040      	movs	r0, #64	@ 0x40
 800ded0:	f7ff fd43 	bl	800d95a <SX1276Write>
        SX1276Write( REG_DIOMAPPING2, 0x00 );
 800ded4:	2100      	movs	r1, #0
 800ded6:	e7e9      	b.n	800deac <SX1276SetModem+0x3c>
 800ded8:	20001368 	.word	0x20001368

0800dedc <SX1276SetMaxPayloadLength>:
{
 800dedc:	b570      	push	{r4, r5, r6, lr}
 800dede:	0004      	movs	r4, r0
 800dee0:	000d      	movs	r5, r1
    SX1276SetModem( modem );
 800dee2:	f7ff ffc5 	bl	800de70 <SX1276SetModem>
    switch( modem )
 800dee6:	2c00      	cmp	r4, #0
 800dee8:	d002      	beq.n	800def0 <SX1276SetMaxPayloadLength+0x14>
 800deea:	2c01      	cmp	r4, #1
 800deec:	d009      	beq.n	800df02 <SX1276SetMaxPayloadLength+0x26>
}
 800deee:	bd70      	pop	{r4, r5, r6, pc}
        if( SX1276.Settings.Fsk.FixLen == false )
 800def0:	4b05      	ldr	r3, [pc, #20]	@ (800df08 <SX1276SetMaxPayloadLength+0x2c>)
 800def2:	7fdb      	ldrb	r3, [r3, #31]
 800def4:	2b00      	cmp	r3, #0
 800def6:	d1fa      	bne.n	800deee <SX1276SetMaxPayloadLength+0x12>
            SX1276Write( REG_PAYLOADLENGTH, max );
 800def8:	0029      	movs	r1, r5
 800defa:	2032      	movs	r0, #50	@ 0x32
        SX1276Write( REG_LR_PAYLOADMAXLENGTH, max );
 800defc:	f7ff fd2d 	bl	800d95a <SX1276Write>
}
 800df00:	e7f5      	b.n	800deee <SX1276SetMaxPayloadLength+0x12>
        SX1276Write( REG_LR_PAYLOADMAXLENGTH, max );
 800df02:	0029      	movs	r1, r5
 800df04:	2023      	movs	r0, #35	@ 0x23
 800df06:	e7f9      	b.n	800defc <SX1276SetMaxPayloadLength+0x20>
 800df08:	2000136b 	.word	0x2000136b

0800df0c <SX1276SetPublicNetwork>:
{
 800df0c:	b510      	push	{r4, lr}
 800df0e:	0004      	movs	r4, r0
    SX1276SetModem( MODEM_LORA );
 800df10:	2001      	movs	r0, #1
 800df12:	f7ff ffad 	bl	800de70 <SX1276SetModem>
    SX1276.Settings.LoRa.PublicNetwork = enable;
 800df16:	4b05      	ldr	r3, [pc, #20]	@ (800df2c <SX1276SetPublicNetwork+0x20>)
        SX1276Write( REG_LR_SYNCWORD, LORA_MAC_PUBLIC_SYNCWORD );
 800df18:	2134      	movs	r1, #52	@ 0x34
    SX1276.Settings.LoRa.PublicNetwork = enable;
 800df1a:	701c      	strb	r4, [r3, #0]
    if( enable == true )
 800df1c:	2c00      	cmp	r4, #0
 800df1e:	d100      	bne.n	800df22 <SX1276SetPublicNetwork+0x16>
        SX1276Write( REG_LR_SYNCWORD, LORA_MAC_PRIVATE_SYNCWORD );
 800df20:	2112      	movs	r1, #18
 800df22:	2039      	movs	r0, #57	@ 0x39
 800df24:	f7ff fd19 	bl	800d95a <SX1276Write>
}
 800df28:	bd10      	pop	{r4, pc}
 800df2a:	46c0      	nop			@ (mov r8, r8)
 800df2c:	200013c4 	.word	0x200013c4

0800df30 <SX1276SetRxConfig>:
{
 800df30:	b5f0      	push	{r4, r5, r6, r7, lr}
 800df32:	b08b      	sub	sp, #44	@ 0x2c
 800df34:	9305      	str	r3, [sp, #20]
 800df36:	ab10      	add	r3, sp, #64	@ 0x40
 800df38:	cb80      	ldmia	r3!, {r7}
 800df3a:	0014      	movs	r4, r2
 800df3c:	881b      	ldrh	r3, [r3, #0]
 800df3e:	aa0a      	add	r2, sp, #40	@ 0x28
 800df40:	9300      	str	r3, [sp, #0]
 800df42:	ab12      	add	r3, sp, #72	@ 0x48
 800df44:	881b      	ldrh	r3, [r3, #0]
 800df46:	0005      	movs	r5, r0
 800df48:	9304      	str	r3, [sp, #16]
 800df4a:	ab13      	add	r3, sp, #76	@ 0x4c
 800df4c:	781b      	ldrb	r3, [r3, #0]
 800df4e:	000e      	movs	r6, r1
 800df50:	9301      	str	r3, [sp, #4]
 800df52:	ab14      	add	r3, sp, #80	@ 0x50
 800df54:	781b      	ldrb	r3, [r3, #0]
 800df56:	9302      	str	r3, [sp, #8]
 800df58:	ab15      	add	r3, sp, #84	@ 0x54
 800df5a:	781b      	ldrb	r3, [r3, #0]
 800df5c:	9303      	str	r3, [sp, #12]
 800df5e:	ab16      	add	r3, sp, #88	@ 0x58
 800df60:	781b      	ldrb	r3, [r3, #0]
 800df62:	9308      	str	r3, [sp, #32]
 800df64:	ab17      	add	r3, sp, #92	@ 0x5c
 800df66:	781b      	ldrb	r3, [r3, #0]
 800df68:	9309      	str	r3, [sp, #36]	@ 0x24
 800df6a:	2319      	movs	r3, #25
 800df6c:	189b      	adds	r3, r3, r2
 800df6e:	7fdb      	ldrb	r3, [r3, #31]
 800df70:	9306      	str	r3, [sp, #24]
 800df72:	231d      	movs	r3, #29
 800df74:	189b      	adds	r3, r3, r2
 800df76:	7fdb      	ldrb	r3, [r3, #31]
 800df78:	9307      	str	r3, [sp, #28]
    SX1276SetModem( modem );
 800df7a:	f7ff ff79 	bl	800de70 <SX1276SetModem>
    switch( modem )
 800df7e:	2d00      	cmp	r5, #0
 800df80:	d003      	beq.n	800df8a <SX1276SetRxConfig+0x5a>
 800df82:	2d01      	cmp	r5, #1
 800df84:	d067      	beq.n	800e056 <SX1276SetRxConfig+0x126>
}
 800df86:	b00b      	add	sp, #44	@ 0x2c
 800df88:	bdf0      	pop	{r4, r5, r6, r7, pc}
            SX1276.Settings.Fsk.RxSingleTimeout = ( uint32_t )symbTimeout * 8000UL / datarate;
 800df8a:	20fa      	movs	r0, #250	@ 0xfa
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
 800df8c:	4d9a      	ldr	r5, [pc, #616]	@ (800e1f8 <SX1276SetRxConfig+0x2c8>)
            SX1276.Settings.Fsk.FixLen = fixLen;
 800df8e:	9a01      	ldr	r2, [sp, #4]
 800df90:	1ceb      	adds	r3, r5, #3
 800df92:	77da      	strb	r2, [r3, #31]
            SX1276.Settings.Fsk.PayloadLen = payloadLen;
 800df94:	9a02      	ldr	r2, [sp, #8]
 800df96:	1d2b      	adds	r3, r5, #4
 800df98:	77da      	strb	r2, [r3, #31]
            SX1276.Settings.Fsk.CrcOn = crcOn;
 800df9a:	9a03      	ldr	r2, [sp, #12]
 800df9c:	1d6b      	adds	r3, r5, #5
 800df9e:	77da      	strb	r2, [r3, #31]
            SX1276.Settings.Fsk.IqInverted = iqInverted;
 800dfa0:	9a06      	ldr	r2, [sp, #24]
 800dfa2:	1dab      	adds	r3, r5, #6
 800dfa4:	77da      	strb	r2, [r3, #31]
            SX1276.Settings.Fsk.RxContinuous = rxContinuous;
 800dfa6:	9a07      	ldr	r2, [sp, #28]
 800dfa8:	1deb      	adds	r3, r5, #7
 800dfaa:	77da      	strb	r2, [r3, #31]
            SX1276.Settings.Fsk.PreambleLen = preambleLen;
 800dfac:	9b00      	ldr	r3, [sp, #0]
            SX1276.Settings.Fsk.RxSingleTimeout = ( uint32_t )symbTimeout * 8000UL / datarate;
 800dfae:	0140      	lsls	r0, r0, #5
            SX1276.Settings.Fsk.PreambleLen = preambleLen;
 800dfb0:	842b      	strh	r3, [r5, #32]
            SX1276.Settings.Fsk.RxSingleTimeout = ( uint32_t )symbTimeout * 8000UL / datarate;
 800dfb2:	9b04      	ldr	r3, [sp, #16]
 800dfb4:	0021      	movs	r1, r4
 800dfb6:	4358      	muls	r0, r3
            SX1276.Settings.Fsk.Datarate = datarate;
 800dfb8:	61ec      	str	r4, [r5, #28]
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
 800dfba:	616e      	str	r6, [r5, #20]
            SX1276.Settings.Fsk.BandwidthAfc = bandwidthAfc;
 800dfbc:	61af      	str	r7, [r5, #24]
            SX1276.Settings.Fsk.RxSingleTimeout = ( uint32_t )symbTimeout * 8000UL / datarate;
 800dfbe:	f7f2 f8d3 	bl	8000168 <__udivsi3>
            uint32_t bitRate = ( uint32_t )( SX1276_XTAL_FREQ / datarate );
 800dfc2:	0021      	movs	r1, r4
            SX1276.Settings.Fsk.RxSingleTimeout = ( uint32_t )symbTimeout * 8000UL / datarate;
 800dfc4:	62e8      	str	r0, [r5, #44]	@ 0x2c
            uint32_t bitRate = ( uint32_t )( SX1276_XTAL_FREQ / datarate );
 800dfc6:	488d      	ldr	r0, [pc, #564]	@ (800e1fc <SX1276SetRxConfig+0x2cc>)
 800dfc8:	f7f2 f8ce 	bl	8000168 <__udivsi3>
 800dfcc:	0004      	movs	r4, r0
            SX1276Write( REG_BITRATEMSB, ( uint8_t )( bitRate >> 8 ) );
 800dfce:	0a01      	lsrs	r1, r0, #8
 800dfd0:	b2c9      	uxtb	r1, r1
 800dfd2:	2002      	movs	r0, #2
 800dfd4:	f7ff fcc1 	bl	800d95a <SX1276Write>
            SX1276Write( REG_BITRATELSB, ( uint8_t )( bitRate & 0xFF ) );
 800dfd8:	b2e1      	uxtb	r1, r4
 800dfda:	2003      	movs	r0, #3
 800dfdc:	f7ff fcbd 	bl	800d95a <SX1276Write>
            SX1276Write( REG_RXBW, GetFskBandwidthRegValue( bandwidth ) );
 800dfe0:	0030      	movs	r0, r6
 800dfe2:	f7ff fc11 	bl	800d808 <GetFskBandwidthRegValue>
 800dfe6:	0001      	movs	r1, r0
 800dfe8:	2012      	movs	r0, #18
 800dfea:	f7ff fcb6 	bl	800d95a <SX1276Write>
            SX1276Write( REG_AFCBW, GetFskBandwidthRegValue( bandwidthAfc ) );
 800dfee:	0038      	movs	r0, r7
 800dff0:	f7ff fc0a 	bl	800d808 <GetFskBandwidthRegValue>
 800dff4:	0001      	movs	r1, r0
 800dff6:	2013      	movs	r0, #19
 800dff8:	f7ff fcaf 	bl	800d95a <SX1276Write>
            SX1276Write( REG_PREAMBLEMSB, ( uint8_t )( ( preambleLen >> 8 ) & 0xFF ) );
 800dffc:	9b00      	ldr	r3, [sp, #0]
 800dffe:	2025      	movs	r0, #37	@ 0x25
 800e000:	0a19      	lsrs	r1, r3, #8
 800e002:	f7ff fcaa 	bl	800d95a <SX1276Write>
            SX1276Write( REG_PREAMBLELSB, ( uint8_t )( preambleLen & 0xFF ) );
 800e006:	466b      	mov	r3, sp
 800e008:	2026      	movs	r0, #38	@ 0x26
 800e00a:	7819      	ldrb	r1, [r3, #0]
 800e00c:	f7ff fca5 	bl	800d95a <SX1276Write>
            if( fixLen == 1 )
 800e010:	9b01      	ldr	r3, [sp, #4]
                SX1276Write( REG_PAYLOADLENGTH, payloadLen );
 800e012:	9902      	ldr	r1, [sp, #8]
            if( fixLen == 1 )
 800e014:	2b00      	cmp	r3, #0
 800e016:	d100      	bne.n	800e01a <SX1276SetRxConfig+0xea>
                SX1276Write( REG_PAYLOADLENGTH, 0xFF ); // Set payload length to the maximum
 800e018:	21ff      	movs	r1, #255	@ 0xff
 800e01a:	2032      	movs	r0, #50	@ 0x32
 800e01c:	f7ff fc9d 	bl	800d95a <SX1276Write>
                         ( SX1276Read( REG_PACKETCONFIG1 ) &
 800e020:	2030      	movs	r0, #48	@ 0x30
 800e022:	f7ff fce5 	bl	800d9f0 <SX1276Read>
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 800e026:	2101      	movs	r1, #1
 800e028:	9b01      	ldr	r3, [sp, #4]
 800e02a:	4059      	eors	r1, r3
                           ( crcOn << 4 ) );
 800e02c:	9b03      	ldr	r3, [sp, #12]
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 800e02e:	01c9      	lsls	r1, r1, #7
                           ( crcOn << 4 ) );
 800e030:	011b      	lsls	r3, r3, #4
            SX1276Write( REG_PACKETCONFIG1,
 800e032:	4319      	orrs	r1, r3
 800e034:	236f      	movs	r3, #111	@ 0x6f
 800e036:	4018      	ands	r0, r3
 800e038:	4301      	orrs	r1, r0
 800e03a:	b2c9      	uxtb	r1, r1
 800e03c:	2030      	movs	r0, #48	@ 0x30
 800e03e:	f7ff fc8c 	bl	800d95a <SX1276Write>
            SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) | RF_PACKETCONFIG2_DATAMODE_PACKET ) );
 800e042:	2031      	movs	r0, #49	@ 0x31
 800e044:	f7ff fcd4 	bl	800d9f0 <SX1276Read>
 800e048:	2140      	movs	r1, #64	@ 0x40
 800e04a:	4301      	orrs	r1, r0
 800e04c:	2031      	movs	r0, #49	@ 0x31
 800e04e:	b2c9      	uxtb	r1, r1
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 800e050:	f7ff fc83 	bl	800d95a <SX1276Write>
}
 800e054:	e797      	b.n	800df86 <SX1276SetRxConfig+0x56>
            if( bandwidth > 2 )
 800e056:	2e02      	cmp	r6, #2
 800e058:	d900      	bls.n	800e05c <SX1276SetRxConfig+0x12c>
                while( 1 );
 800e05a:	e7fe      	b.n	800e05a <SX1276SetRxConfig+0x12a>
            SX1276.Settings.LoRa.Bandwidth = bandwidth;
 800e05c:	4b66      	ldr	r3, [pc, #408]	@ (800e1f8 <SX1276SetRxConfig+0x2c8>)
            SX1276.Settings.LoRa.Coderate = coderate;
 800e05e:	9905      	ldr	r1, [sp, #20]
 800e060:	001a      	movs	r2, r3
 800e062:	324d      	adds	r2, #77	@ 0x4d
 800e064:	7011      	strb	r1, [r2, #0]
            SX1276.Settings.LoRa.PreambleLen = preambleLen;
 800e066:	001a      	movs	r2, r3
 800e068:	9900      	ldr	r1, [sp, #0]
 800e06a:	324e      	adds	r2, #78	@ 0x4e
 800e06c:	8011      	strh	r1, [r2, #0]
            SX1276.Settings.LoRa.FixLen = fixLen;
 800e06e:	001a      	movs	r2, r3
 800e070:	9901      	ldr	r1, [sp, #4]
 800e072:	3250      	adds	r2, #80	@ 0x50
 800e074:	7011      	strb	r1, [r2, #0]
            SX1276.Settings.LoRa.PayloadLen = payloadLen;
 800e076:	001a      	movs	r2, r3
 800e078:	9902      	ldr	r1, [sp, #8]
 800e07a:	3251      	adds	r2, #81	@ 0x51
 800e07c:	7011      	strb	r1, [r2, #0]
            SX1276.Settings.LoRa.CrcOn = crcOn;
 800e07e:	001a      	movs	r2, r3
 800e080:	9903      	ldr	r1, [sp, #12]
 800e082:	3252      	adds	r2, #82	@ 0x52
 800e084:	7011      	strb	r1, [r2, #0]
            SX1276.Settings.LoRa.FreqHopOn = freqHopOn;
 800e086:	001a      	movs	r2, r3
 800e088:	9908      	ldr	r1, [sp, #32]
 800e08a:	3253      	adds	r2, #83	@ 0x53
 800e08c:	7011      	strb	r1, [r2, #0]
            SX1276.Settings.LoRa.HopPeriod = hopPeriod;
 800e08e:	001a      	movs	r2, r3
 800e090:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800e092:	3254      	adds	r2, #84	@ 0x54
 800e094:	7011      	strb	r1, [r2, #0]
            SX1276.Settings.LoRa.IqInverted = iqInverted;
 800e096:	001a      	movs	r2, r3
 800e098:	9906      	ldr	r1, [sp, #24]
 800e09a:	3255      	adds	r2, #85	@ 0x55
            bandwidth += 7;
 800e09c:	1df7      	adds	r7, r6, #7
            SX1276.Settings.LoRa.IqInverted = iqInverted;
 800e09e:	7011      	strb	r1, [r2, #0]
            SX1276.Settings.LoRa.RxContinuous = rxContinuous;
 800e0a0:	9a07      	ldr	r2, [sp, #28]
            SX1276.Settings.LoRa.Bandwidth = bandwidth;
 800e0a2:	645f      	str	r7, [r3, #68]	@ 0x44
            SX1276.Settings.LoRa.Datarate = datarate;
 800e0a4:	649c      	str	r4, [r3, #72]	@ 0x48
            SX1276.Settings.LoRa.RxContinuous = rxContinuous;
 800e0a6:	3356      	adds	r3, #86	@ 0x56
            else if( datarate < 6 )
 800e0a8:	0025      	movs	r5, r4
            SX1276.Settings.LoRa.RxContinuous = rxContinuous;
 800e0aa:	701a      	strb	r2, [r3, #0]
            else if( datarate < 6 )
 800e0ac:	2c06      	cmp	r4, #6
 800e0ae:	d300      	bcc.n	800e0b2 <SX1276SetRxConfig+0x182>
 800e0b0:	e082      	b.n	800e1b8 <SX1276SetRxConfig+0x288>
 800e0b2:	2506      	movs	r5, #6
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800e0b4:	2f07      	cmp	r7, #7
 800e0b6:	d000      	beq.n	800e0ba <SX1276SetRxConfig+0x18a>
 800e0b8:	e083      	b.n	800e1c2 <SX1276SetRxConfig+0x292>
 800e0ba:	002a      	movs	r2, r5
 800e0bc:	2300      	movs	r3, #0
 800e0be:	2101      	movs	r1, #1
 800e0c0:	3a0b      	subs	r2, #11
 800e0c2:	4291      	cmp	r1, r2
 800e0c4:	415b      	adcs	r3, r3
 800e0c6:	b2db      	uxtb	r3, r3
 800e0c8:	4a4d      	ldr	r2, [pc, #308]	@ (800e200 <SX1276SetRxConfig+0x2d0>)
                         ( SX1276Read( REG_LR_MODEMCONFIG1 ) &
 800e0ca:	201d      	movs	r0, #29
 800e0cc:	7013      	strb	r3, [r2, #0]
            SX1276Write( REG_LR_MODEMCONFIG1,
 800e0ce:	9206      	str	r2, [sp, #24]
 800e0d0:	4e49      	ldr	r6, [pc, #292]	@ (800e1f8 <SX1276SetRxConfig+0x2c8>)
                         ( SX1276Read( REG_LR_MODEMCONFIG1 ) &
 800e0d2:	f7ff fc8d 	bl	800d9f0 <SX1276Read>
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 800e0d6:	9b05      	ldr	r3, [sp, #20]
            SX1276Write( REG_LR_MODEMCONFIG1,
 800e0d8:	201d      	movs	r0, #29
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 800e0da:	0059      	lsls	r1, r3, #1
 800e0dc:	9b01      	ldr	r3, [sp, #4]
                           ( datarate << 4 ) | ( crcOn << 2 ) |
 800e0de:	012d      	lsls	r5, r5, #4
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 800e0e0:	4319      	orrs	r1, r3
 800e0e2:	013b      	lsls	r3, r7, #4
 800e0e4:	4319      	orrs	r1, r3
            SX1276Write( REG_LR_MODEMCONFIG1,
 800e0e6:	b2c9      	uxtb	r1, r1
 800e0e8:	f7ff fc37 	bl	800d95a <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG2 ) &
 800e0ec:	201e      	movs	r0, #30
 800e0ee:	f7ff fc7f 	bl	800d9f0 <SX1276Read>
                           ( ( symbTimeout >> 8 ) & ~RFLR_MODEMCONFIG2_SYMBTIMEOUTMSB_MASK ) );
 800e0f2:	9b04      	ldr	r3, [sp, #16]
 800e0f4:	0599      	lsls	r1, r3, #22
                           ( datarate << 4 ) | ( crcOn << 2 ) |
 800e0f6:	9b03      	ldr	r3, [sp, #12]
                           ( ( symbTimeout >> 8 ) & ~RFLR_MODEMCONFIG2_SYMBTIMEOUTMSB_MASK ) );
 800e0f8:	0f89      	lsrs	r1, r1, #30
                           ( datarate << 4 ) | ( crcOn << 2 ) |
 800e0fa:	009b      	lsls	r3, r3, #2
            SX1276Write( REG_LR_MODEMCONFIG2,
 800e0fc:	4319      	orrs	r1, r3
 800e0fe:	4329      	orrs	r1, r5
                           RFLR_MODEMCONFIG2_RXPAYLOADCRC_MASK &
 800e100:	2508      	movs	r5, #8
 800e102:	4028      	ands	r0, r5
            SX1276Write( REG_LR_MODEMCONFIG2,
 800e104:	4301      	orrs	r1, r0
 800e106:	b2c9      	uxtb	r1, r1
 800e108:	201e      	movs	r0, #30
 800e10a:	f7ff fc26 	bl	800d95a <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
 800e10e:	2026      	movs	r0, #38	@ 0x26
 800e110:	f7ff fc6e 	bl	800d9f0 <SX1276Read>
                           ( SX1276.Settings.LoRa.LowDatarateOptimize << 3 ) );
 800e114:	9b06      	ldr	r3, [sp, #24]
            SX1276Write( REG_LR_MODEMCONFIG3,
 800e116:	43a8      	bics	r0, r5
                           ( SX1276.Settings.LoRa.LowDatarateOptimize << 3 ) );
 800e118:	7819      	ldrb	r1, [r3, #0]
 800e11a:	00c9      	lsls	r1, r1, #3
            SX1276Write( REG_LR_MODEMCONFIG3,
 800e11c:	4301      	orrs	r1, r0
 800e11e:	b2c9      	uxtb	r1, r1
 800e120:	2026      	movs	r0, #38	@ 0x26
 800e122:	f7ff fc1a 	bl	800d95a <SX1276Write>
            SX1276Write( REG_LR_SYMBTIMEOUTLSB, ( uint8_t )( symbTimeout & 0xFF ) );
 800e126:	466b      	mov	r3, sp
 800e128:	201f      	movs	r0, #31
 800e12a:	7c19      	ldrb	r1, [r3, #16]
 800e12c:	f7ff fc15 	bl	800d95a <SX1276Write>
            SX1276Write( REG_LR_PREAMBLEMSB, ( uint8_t )( ( preambleLen >> 8 ) & 0xFF ) );
 800e130:	9b00      	ldr	r3, [sp, #0]
 800e132:	2020      	movs	r0, #32
 800e134:	0a19      	lsrs	r1, r3, #8
 800e136:	f7ff fc10 	bl	800d95a <SX1276Write>
            SX1276Write( REG_LR_PREAMBLELSB, ( uint8_t )( preambleLen & 0xFF ) );
 800e13a:	466b      	mov	r3, sp
 800e13c:	2021      	movs	r0, #33	@ 0x21
 800e13e:	7819      	ldrb	r1, [r3, #0]
 800e140:	f7ff fc0b 	bl	800d95a <SX1276Write>
            if( fixLen == 1 )
 800e144:	9b01      	ldr	r3, [sp, #4]
 800e146:	2b00      	cmp	r3, #0
 800e148:	d003      	beq.n	800e152 <SX1276SetRxConfig+0x222>
                SX1276Write( REG_LR_PAYLOADLENGTH, payloadLen );
 800e14a:	2022      	movs	r0, #34	@ 0x22
 800e14c:	9902      	ldr	r1, [sp, #8]
 800e14e:	f7ff fc04 	bl	800d95a <SX1276Write>
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 800e152:	0033      	movs	r3, r6
 800e154:	3353      	adds	r3, #83	@ 0x53
 800e156:	781b      	ldrb	r3, [r3, #0]
 800e158:	2b00      	cmp	r3, #0
 800e15a:	d00f      	beq.n	800e17c <SX1276SetRxConfig+0x24c>
                SX1276Write( REG_LR_PLLHOP, ( SX1276Read( REG_LR_PLLHOP ) & RFLR_PLLHOP_FASTHOP_MASK ) | RFLR_PLLHOP_FASTHOP_ON );
 800e15c:	2044      	movs	r0, #68	@ 0x44
 800e15e:	f7ff fc47 	bl	800d9f0 <SX1276Read>
 800e162:	2180      	movs	r1, #128	@ 0x80
 800e164:	4249      	negs	r1, r1
 800e166:	4301      	orrs	r1, r0
 800e168:	b2c9      	uxtb	r1, r1
 800e16a:	2044      	movs	r0, #68	@ 0x44
 800e16c:	f7ff fbf5 	bl	800d95a <SX1276Write>
                SX1276Write( REG_LR_HOPPERIOD, SX1276.Settings.LoRa.HopPeriod );
 800e170:	0033      	movs	r3, r6
 800e172:	3354      	adds	r3, #84	@ 0x54
 800e174:	2024      	movs	r0, #36	@ 0x24
 800e176:	7819      	ldrb	r1, [r3, #0]
 800e178:	f7ff fbef 	bl	800d95a <SX1276Write>
            if( ( bandwidth == 9 ) && ( SX1276.Settings.Channel > RF_MID_BAND_THRESH ) )
 800e17c:	2f09      	cmp	r7, #9
 800e17e:	d12d      	bne.n	800e1dc <SX1276SetRxConfig+0x2ac>
 800e180:	4b20      	ldr	r3, [pc, #128]	@ (800e204 <SX1276SetRxConfig+0x2d4>)
 800e182:	68b2      	ldr	r2, [r6, #8]
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x02 );
 800e184:	2102      	movs	r1, #2
 800e186:	2036      	movs	r0, #54	@ 0x36
            if( ( bandwidth == 9 ) && ( SX1276.Settings.Channel > RF_MID_BAND_THRESH ) )
 800e188:	429a      	cmp	r2, r3
 800e18a:	d923      	bls.n	800e1d4 <SX1276SetRxConfig+0x2a4>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x02 );
 800e18c:	f7ff fbe5 	bl	800d95a <SX1276Write>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE2, 0x64 );
 800e190:	2164      	movs	r1, #100	@ 0x64
                SX1276Write( REG_LR_HIGHBWOPTIMIZE2, 0x7F );
 800e192:	203a      	movs	r0, #58	@ 0x3a
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x03 );
 800e194:	f7ff fbe1 	bl	800d95a <SX1276Write>
            if( datarate == 6 )
 800e198:	2507      	movs	r5, #7
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 800e19a:	2031      	movs	r0, #49	@ 0x31
            if( datarate == 6 )
 800e19c:	2c06      	cmp	r4, #6
 800e19e:	d820      	bhi.n	800e1e2 <SX1276SetRxConfig+0x2b2>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 800e1a0:	f7ff fc26 	bl	800d9f0 <SX1276Read>
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 800e1a4:	2105      	movs	r1, #5
 800e1a6:	43a8      	bics	r0, r5
 800e1a8:	4301      	orrs	r1, r0
 800e1aa:	b2c9      	uxtb	r1, r1
 800e1ac:	2031      	movs	r0, #49	@ 0x31
 800e1ae:	f7ff fbd4 	bl	800d95a <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 800e1b2:	210c      	movs	r1, #12
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 800e1b4:	2037      	movs	r0, #55	@ 0x37
 800e1b6:	e74b      	b.n	800e050 <SX1276SetRxConfig+0x120>
 800e1b8:	2c0c      	cmp	r4, #12
 800e1ba:	d800      	bhi.n	800e1be <SX1276SetRxConfig+0x28e>
 800e1bc:	e77a      	b.n	800e0b4 <SX1276SetRxConfig+0x184>
 800e1be:	250c      	movs	r5, #12
 800e1c0:	e778      	b.n	800e0b4 <SX1276SetRxConfig+0x184>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x00;
 800e1c2:	2300      	movs	r3, #0
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800e1c4:	2f08      	cmp	r7, #8
 800e1c6:	d000      	beq.n	800e1ca <SX1276SetRxConfig+0x29a>
 800e1c8:	e77e      	b.n	800e0c8 <SX1276SetRxConfig+0x198>
                ( ( bandwidth == 8 ) && ( datarate == 12 ) ) )
 800e1ca:	330b      	adds	r3, #11
 800e1cc:	42a3      	cmp	r3, r4
 800e1ce:	419b      	sbcs	r3, r3
 800e1d0:	425b      	negs	r3, r3
 800e1d2:	e779      	b.n	800e0c8 <SX1276SetRxConfig+0x198>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x02 );
 800e1d4:	f7ff fbc1 	bl	800d95a <SX1276Write>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE2, 0x7F );
 800e1d8:	217f      	movs	r1, #127	@ 0x7f
 800e1da:	e7da      	b.n	800e192 <SX1276SetRxConfig+0x262>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x03 );
 800e1dc:	2103      	movs	r1, #3
 800e1de:	2036      	movs	r0, #54	@ 0x36
 800e1e0:	e7d8      	b.n	800e194 <SX1276SetRxConfig+0x264>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 800e1e2:	f7ff fc05 	bl	800d9f0 <SX1276Read>
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 800e1e6:	2103      	movs	r1, #3
 800e1e8:	43a8      	bics	r0, r5
 800e1ea:	4301      	orrs	r1, r0
 800e1ec:	b2c9      	uxtb	r1, r1
 800e1ee:	2031      	movs	r0, #49	@ 0x31
 800e1f0:	f7ff fbb3 	bl	800d95a <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 800e1f4:	210a      	movs	r1, #10
 800e1f6:	e7dd      	b.n	800e1b4 <SX1276SetRxConfig+0x284>
 800e1f8:	20001368 	.word	0x20001368
 800e1fc:	01e84800 	.word	0x01e84800
 800e200:	200013b4 	.word	0x200013b4
 800e204:	1f4add40 	.word	0x1f4add40

0800e208 <SX1276SetSleep>:
{
 800e208:	b510      	push	{r4, lr}
    TimerStop( &RxTimeoutTimer );
 800e20a:	4c0a      	ldr	r4, [pc, #40]	@ (800e234 <SX1276SetSleep+0x2c>)
 800e20c:	480a      	ldr	r0, [pc, #40]	@ (800e238 <SX1276SetSleep+0x30>)
 800e20e:	f001 fa89 	bl	800f724 <UTIL_TIMER_Stop>
    TimerStop( &TxTimeoutTimer );
 800e212:	0020      	movs	r0, r4
 800e214:	301c      	adds	r0, #28
 800e216:	f001 fa85 	bl	800f724 <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutSyncWord );
 800e21a:	4808      	ldr	r0, [pc, #32]	@ (800e23c <SX1276SetSleep+0x34>)
 800e21c:	4c08      	ldr	r4, [pc, #32]	@ (800e240 <SX1276SetSleep+0x38>)
 800e21e:	f001 fa81 	bl	800f724 <UTIL_TIMER_Stop>
    SX1276SetOpMode( RF_OPMODE_SLEEP );
 800e222:	f7ff fe15 	bl	800de50 <SX1276SetOpMode.constprop.0>
    Sx_Board_SetXO( RESET );
 800e226:	2000      	movs	r0, #0
 800e228:	f7f5 feb2 	bl	8003f90 <CMWX1ZZABZ0XX_RADIO_SetXO>
    SX1276.Settings.State = RF_IDLE;
 800e22c:	2300      	movs	r3, #0
 800e22e:	7123      	strb	r3, [r4, #4]
}
 800e230:	bd10      	pop	{r4, pc}
 800e232:	46c0      	nop			@ (mov r8, r8)
 800e234:	200013e8 	.word	0x200013e8
 800e238:	200013ec 	.word	0x200013ec
 800e23c:	200013d0 	.word	0x200013d0
 800e240:	20001368 	.word	0x20001368

0800e244 <SX1276IsChannelFree>:
{
 800e244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e246:	0007      	movs	r7, r0
 800e248:	000c      	movs	r4, r1
 800e24a:	0016      	movs	r6, r2
 800e24c:	001d      	movs	r5, r3
    SX1276SetSleep( );
 800e24e:	f7ff ffdb 	bl	800e208 <SX1276SetSleep>
    SX1276SetModem( MODEM_FSK );
 800e252:	2000      	movs	r0, #0
 800e254:	f7ff fe0c 	bl	800de70 <SX1276SetModem>
    SX1276SetChannel( freq );
 800e258:	0038      	movs	r0, r7
 800e25a:	f7ff fb87 	bl	800d96c <SX1276SetChannel>
    SX1276Write( REG_RXBW, GetFskBandwidthRegValue( rxBandwidth ) );
 800e25e:	0020      	movs	r0, r4
 800e260:	f7ff fad2 	bl	800d808 <GetFskBandwidthRegValue>
 800e264:	0004      	movs	r4, r0
 800e266:	0001      	movs	r1, r0
 800e268:	2012      	movs	r0, #18
 800e26a:	f7ff fb76 	bl	800d95a <SX1276Write>
    SX1276Write( REG_AFCBW, GetFskBandwidthRegValue( rxBandwidth ) );
 800e26e:	0021      	movs	r1, r4
 800e270:	2013      	movs	r0, #19
 800e272:	f7ff fb72 	bl	800d95a <SX1276Write>
    if( opMode == RF_OPMODE_SLEEP )
 800e276:	2005      	movs	r0, #5
 800e278:	f7ff fc5c 	bl	800db34 <SX1276SetOpMode.part.0>
    RADIO_DELAY_MS( 1 );
 800e27c:	2001      	movs	r0, #1
 800e27e:	f7f5 fc02 	bl	8003a86 <HAL_Delay>
    carrierSenseTime = TimerGetCurrentTime( );
 800e282:	f001 fa0d 	bl	800f6a0 <UTIL_TIMER_GetCurrentTime>
 800e286:	0004      	movs	r4, r0
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 800e288:	0020      	movs	r0, r4
 800e28a:	f001 fa13 	bl	800f6b4 <UTIL_TIMER_GetElapsedTime>
 800e28e:	42a8      	cmp	r0, r5
 800e290:	d304      	bcc.n	800e29c <SX1276IsChannelFree+0x58>
    bool status = true;
 800e292:	2401      	movs	r4, #1
    SX1276SetSleep( );
 800e294:	f7ff ffb8 	bl	800e208 <SX1276SetSleep>
}
 800e298:	0020      	movs	r0, r4
 800e29a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        rssi = SX1276ReadRssi( MODEM_FSK );
 800e29c:	2000      	movs	r0, #0
 800e29e:	f7ff fdb5 	bl	800de0c <SX1276ReadRssi>
        if( rssi > rssiThresh )
 800e2a2:	42b0      	cmp	r0, r6
 800e2a4:	ddf0      	ble.n	800e288 <SX1276IsChannelFree+0x44>
            status = false;
 800e2a6:	2400      	movs	r4, #0
 800e2a8:	e7f4      	b.n	800e294 <SX1276IsChannelFree+0x50>

0800e2aa <SX1276Random>:
{
 800e2aa:	b570      	push	{r4, r5, r6, lr}
 800e2ac:	2400      	movs	r4, #0
    SX1276SetModem( MODEM_LORA );
 800e2ae:	2001      	movs	r0, #1
 800e2b0:	f7ff fdde 	bl	800de70 <SX1276SetModem>
    SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 800e2b4:	21ff      	movs	r1, #255	@ 0xff
 800e2b6:	2011      	movs	r0, #17
 800e2b8:	f7ff fb4f 	bl	800d95a <SX1276Write>
    if( opMode == RF_OPMODE_SLEEP )
 800e2bc:	2005      	movs	r0, #5
 800e2be:	f7ff fc39 	bl	800db34 <SX1276SetOpMode.part.0>
    uint32_t rnd = 0;
 800e2c2:	0025      	movs	r5, r4
        RADIO_DELAY_MS( 1 );
 800e2c4:	2601      	movs	r6, #1
 800e2c6:	0030      	movs	r0, r6
 800e2c8:	f7f5 fbdd 	bl	8003a86 <HAL_Delay>
        rnd |= ( ( uint32_t )SX1276Read( REG_LR_RSSIWIDEBAND ) & 0x01 ) << i;
 800e2cc:	202c      	movs	r0, #44	@ 0x2c
 800e2ce:	f7ff fb8f 	bl	800d9f0 <SX1276Read>
 800e2d2:	4030      	ands	r0, r6
 800e2d4:	40a0      	lsls	r0, r4
    for( i = 0; i < 32; i++ )
 800e2d6:	3401      	adds	r4, #1
        rnd |= ( ( uint32_t )SX1276Read( REG_LR_RSSIWIDEBAND ) & 0x01 ) << i;
 800e2d8:	4305      	orrs	r5, r0
    for( i = 0; i < 32; i++ )
 800e2da:	2c20      	cmp	r4, #32
 800e2dc:	d1f3      	bne.n	800e2c6 <SX1276Random+0x1c>
    SX1276SetSleep( );
 800e2de:	f7ff ff93 	bl	800e208 <SX1276SetSleep>
}
 800e2e2:	0028      	movs	r0, r5
 800e2e4:	bd70      	pop	{r4, r5, r6, pc}
	...

0800e2e8 <SX1276SetTxConfig>:
{
 800e2e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e2ea:	b08d      	sub	sp, #52	@ 0x34
 800e2ec:	9306      	str	r3, [sp, #24]
 800e2ee:	ab12      	add	r3, sp, #72	@ 0x48
 800e2f0:	cb80      	ldmia	r3!, {r7}
 800e2f2:	9002      	str	r0, [sp, #8]
 800e2f4:	781b      	ldrb	r3, [r3, #0]
 800e2f6:	9205      	str	r2, [sp, #20]
 800e2f8:	9307      	str	r3, [sp, #28]
 800e2fa:	ab14      	add	r3, sp, #80	@ 0x50
 800e2fc:	881b      	ldrh	r3, [r3, #0]
 800e2fe:	000d      	movs	r5, r1
 800e300:	9301      	str	r3, [sp, #4]
 800e302:	ab15      	add	r3, sp, #84	@ 0x54
 800e304:	781b      	ldrb	r3, [r3, #0]
 800e306:	9303      	str	r3, [sp, #12]
 800e308:	ab16      	add	r3, sp, #88	@ 0x58
 800e30a:	781b      	ldrb	r3, [r3, #0]
 800e30c:	9304      	str	r3, [sp, #16]
 800e30e:	ab17      	add	r3, sp, #92	@ 0x5c
 800e310:	781b      	ldrb	r3, [r3, #0]
 800e312:	9308      	str	r3, [sp, #32]
 800e314:	ab18      	add	r3, sp, #96	@ 0x60
 800e316:	781b      	ldrb	r3, [r3, #0]
 800e318:	930a      	str	r3, [sp, #40]	@ 0x28
 800e31a:	ab19      	add	r3, sp, #100	@ 0x64
 800e31c:	781b      	ldrb	r3, [r3, #0]
 800e31e:	9309      	str	r3, [sp, #36]	@ 0x24
    if( ( SX1276.Settings.State == RF_RX_RUNNING ) && ( modem == MODEM_FSK ) )
 800e320:	4bbd      	ldr	r3, [pc, #756]	@ (800e618 <SX1276SetTxConfig+0x330>)
 800e322:	791c      	ldrb	r4, [r3, #4]
 800e324:	2c01      	cmp	r4, #1
 800e326:	d106      	bne.n	800e336 <SX1276SetTxConfig+0x4e>
 800e328:	2800      	cmp	r0, #0
 800e32a:	d104      	bne.n	800e336 <SX1276SetTxConfig+0x4e>
        SX1276SetSleep( );
 800e32c:	f7ff ff6c 	bl	800e208 <SX1276SetSleep>
        RADIO_DELAY_MS( 1 );
 800e330:	0020      	movs	r0, r4
 800e332:	f7f5 fba8 	bl	8003a86 <HAL_Delay>
    SX1276SetModem( modem );
 800e336:	9802      	ldr	r0, [sp, #8]
 800e338:	f7ff fd9a 	bl	800de70 <SX1276SetModem>
    paConfig = SX1276Read( REG_PACONFIG );
 800e33c:	2009      	movs	r0, #9
 800e33e:	f7ff fb57 	bl	800d9f0 <SX1276Read>
 800e342:	900b      	str	r0, [sp, #44]	@ 0x2c
    paDac = SX1276Read( REG_PADAC );
 800e344:	204d      	movs	r0, #77	@ 0x4d
 800e346:	f7ff fb53 	bl	800d9f0 <SX1276Read>
    switch( Sx_Board_GetPaSelect(SX1276.Settings.Channel) )
 800e34a:	4bb3      	ldr	r3, [pc, #716]	@ (800e618 <SX1276SetTxConfig+0x330>)
    paDac = SX1276Read( REG_PADAC );
 800e34c:	0004      	movs	r4, r0
 800e34e:	0006      	movs	r6, r0
    switch( Sx_Board_GetPaSelect(SX1276.Settings.Channel) )
 800e350:	6898      	ldr	r0, [r3, #8]
 800e352:	f7f5 ff93 	bl	800427c <CMWX1ZZABZ0XX_RADIO_GetPaSelect>
 800e356:	2800      	cmp	r0, #0
 800e358:	d02e      	beq.n	800e3b8 <SX1276SetTxConfig+0xd0>
 800e35a:	2300      	movs	r3, #0
 800e35c:	2201      	movs	r2, #1
 800e35e:	3802      	subs	r0, #2
 800e360:	b2c0      	uxtb	r0, r0
 800e362:	4282      	cmp	r2, r0
 800e364:	415b      	adcs	r3, r3
 800e366:	217f      	movs	r1, #127	@ 0x7f
 800e368:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
        if (power > 14)
 800e36a:	01db      	lsls	r3, r3, #7
 800e36c:	400a      	ands	r2, r1
 800e36e:	0011      	movs	r1, r2
 800e370:	b2db      	uxtb	r3, r3
    if( ( paConfig & RF_PACONFIG_PASELECT_PABOOST ) == RF_PACONFIG_PASELECT_PABOOST )
 800e372:	4319      	orrs	r1, r3
 800e374:	2b00      	cmp	r3, #0
 800e376:	d039      	beq.n	800e3ec <SX1276SetTxConfig+0x104>
        if( power > 17 )
 800e378:	2607      	movs	r6, #7
 800e37a:	2d11      	cmp	r5, #17
 800e37c:	dd21      	ble.n	800e3c2 <SX1276SetTxConfig+0xda>
            paDac = ( paDac & RF_PADAC_20DBM_MASK ) | RF_PADAC_20DBM_ON;
 800e37e:	4326      	orrs	r6, r4
 800e380:	230f      	movs	r3, #15
 800e382:	b2f6      	uxtb	r6, r6
        if( ( paDac & RF_PADAC_20DBM_ON ) == RF_PADAC_20DBM_ON )
 800e384:	4399      	bics	r1, r3
 800e386:	43f3      	mvns	r3, r6
 800e388:	075b      	lsls	r3, r3, #29
 800e38a:	d124      	bne.n	800e3d6 <SX1276SetTxConfig+0xee>
            if( power > 20 )
 800e38c:	1c2b      	adds	r3, r5, #0
 800e38e:	2d14      	cmp	r5, #20
 800e390:	dd1c      	ble.n	800e3cc <SX1276SetTxConfig+0xe4>
 800e392:	2314      	movs	r3, #20
            paConfig = ( paConfig & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( uint8_t )( ( uint16_t )( power - 5 ) & 0x0F );
 800e394:	3b05      	subs	r3, #5
            paConfig = ( paConfig & RF_PACONFIG_MAX_POWER_MASK & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( 7 << 4 ) | ( power );
 800e396:	4319      	orrs	r1, r3
    SX1276Write( REG_PACONFIG, paConfig );
 800e398:	2009      	movs	r0, #9
            paConfig = ( paConfig & RF_PACONFIG_MAX_POWER_MASK & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( 0 << 4 ) | ( power + 4 );
 800e39a:	b2c9      	uxtb	r1, r1
    SX1276Write( REG_PACONFIG, paConfig );
 800e39c:	f7ff fadd 	bl	800d95a <SX1276Write>
    SX1276Write( REG_PADAC, paDac );
 800e3a0:	0031      	movs	r1, r6
 800e3a2:	204d      	movs	r0, #77	@ 0x4d
 800e3a4:	f7ff fad9 	bl	800d95a <SX1276Write>
    switch( modem )
 800e3a8:	9b02      	ldr	r3, [sp, #8]
 800e3aa:	2b00      	cmp	r3, #0
 800e3ac:	d02d      	beq.n	800e40a <SX1276SetTxConfig+0x122>
 800e3ae:	2b01      	cmp	r3, #1
 800e3b0:	d100      	bne.n	800e3b4 <SX1276SetTxConfig+0xcc>
 800e3b2:	e08b      	b.n	800e4cc <SX1276SetTxConfig+0x1e4>
}
 800e3b4:	b00d      	add	sp, #52	@ 0x34
 800e3b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (power > 14)
 800e3b8:	2301      	movs	r3, #1
 800e3ba:	2d0e      	cmp	r5, #14
 800e3bc:	dcd3      	bgt.n	800e366 <SX1276SetTxConfig+0x7e>
 800e3be:	1c03      	adds	r3, r0, #0
 800e3c0:	e7d1      	b.n	800e366 <SX1276SetTxConfig+0x7e>
            paDac = ( paDac & RF_PADAC_20DBM_MASK ) | RF_PADAC_20DBM_OFF;
 800e3c2:	0023      	movs	r3, r4
 800e3c4:	43b3      	bics	r3, r6
 800e3c6:	2604      	movs	r6, #4
 800e3c8:	431e      	orrs	r6, r3
 800e3ca:	e7d9      	b.n	800e380 <SX1276SetTxConfig+0x98>
            paConfig = ( paConfig & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( uint8_t )( ( uint16_t )( power - 5 ) & 0x0F );
 800e3cc:	b26a      	sxtb	r2, r5
 800e3ce:	2a05      	cmp	r2, #5
 800e3d0:	dae0      	bge.n	800e394 <SX1276SetTxConfig+0xac>
 800e3d2:	2305      	movs	r3, #5
 800e3d4:	e7de      	b.n	800e394 <SX1276SetTxConfig+0xac>
            if( power > 17 )
 800e3d6:	1c2b      	adds	r3, r5, #0
 800e3d8:	2d11      	cmp	r5, #17
 800e3da:	dd02      	ble.n	800e3e2 <SX1276SetTxConfig+0xfa>
 800e3dc:	2311      	movs	r3, #17
            paConfig = ( paConfig & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( uint8_t )( ( uint16_t )( power - 2 ) & 0x0F );
 800e3de:	3b02      	subs	r3, #2
 800e3e0:	e7d9      	b.n	800e396 <SX1276SetTxConfig+0xae>
 800e3e2:	b26a      	sxtb	r2, r5
 800e3e4:	2a02      	cmp	r2, #2
 800e3e6:	dafa      	bge.n	800e3de <SX1276SetTxConfig+0xf6>
 800e3e8:	2302      	movs	r3, #2
 800e3ea:	e7f8      	b.n	800e3de <SX1276SetTxConfig+0xf6>
        if( power > 0 )
 800e3ec:	2d00      	cmp	r5, #0
 800e3ee:	dd05      	ble.n	800e3fc <SX1276SetTxConfig+0x114>
            if( power > 15 )
 800e3f0:	1c2b      	adds	r3, r5, #0
 800e3f2:	2d0f      	cmp	r5, #15
 800e3f4:	dd00      	ble.n	800e3f8 <SX1276SetTxConfig+0x110>
 800e3f6:	230f      	movs	r3, #15
            paConfig = ( paConfig & RF_PACONFIG_MAX_POWER_MASK & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( 7 << 4 ) | ( power );
 800e3f8:	2170      	movs	r1, #112	@ 0x70
 800e3fa:	e7cc      	b.n	800e396 <SX1276SetTxConfig+0xae>
            if( power < -4 )
 800e3fc:	1c29      	adds	r1, r5, #0
 800e3fe:	1d2b      	adds	r3, r5, #4
 800e400:	da01      	bge.n	800e406 <SX1276SetTxConfig+0x11e>
 800e402:	4b86      	ldr	r3, [pc, #536]	@ (800e61c <SX1276SetTxConfig+0x334>)
 800e404:	7819      	ldrb	r1, [r3, #0]
            paConfig = ( paConfig & RF_PACONFIG_MAX_POWER_MASK & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( 0 << 4 ) | ( power + 4 );
 800e406:	3104      	adds	r1, #4
 800e408:	e7c6      	b.n	800e398 <SX1276SetTxConfig+0xb0>
            SX1276.Settings.Fsk.Power = power;
 800e40a:	4b83      	ldr	r3, [pc, #524]	@ (800e618 <SX1276SetTxConfig+0x330>)
            SX1276.Settings.Fsk.Fdev = fdev;
 800e40c:	9a05      	ldr	r2, [sp, #20]
            SX1276.Settings.Fsk.FixLen = fixLen;
 800e40e:	9903      	ldr	r1, [sp, #12]
            SX1276.Settings.Fsk.Fdev = fdev;
 800e410:	611a      	str	r2, [r3, #16]
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
 800e412:	9a06      	ldr	r2, [sp, #24]
           ( ( ( stepsFrac << SX1276_PLL_STEP_SHIFT_AMOUNT ) + ( SX1276_PLL_STEP_SCALED >> 1 ) ) /
 800e414:	9805      	ldr	r0, [sp, #20]
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
 800e416:	615a      	str	r2, [r3, #20]
            SX1276.Settings.Fsk.PreambleLen = preambleLen;
 800e418:	9a01      	ldr	r2, [sp, #4]
            SX1276.Settings.Fsk.Power = power;
 800e41a:	731d      	strb	r5, [r3, #12]
            SX1276.Settings.Fsk.PreambleLen = preambleLen;
 800e41c:	841a      	strh	r2, [r3, #32]
            SX1276.Settings.Fsk.FixLen = fixLen;
 800e41e:	1cda      	adds	r2, r3, #3
 800e420:	77d1      	strb	r1, [r2, #31]
            SX1276.Settings.Fsk.CrcOn = crcOn;
 800e422:	9904      	ldr	r1, [sp, #16]
 800e424:	1d5a      	adds	r2, r3, #5
 800e426:	77d1      	strb	r1, [r2, #31]
            SX1276.Settings.Fsk.IqInverted = iqInverted;
 800e428:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800e42a:	1d9a      	adds	r2, r3, #6
 800e42c:	77d1      	strb	r1, [r2, #31]
            SX1276.Settings.Fsk.TxTimeout = timeout;
 800e42e:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
            SX1276.Settings.Fsk.Datarate = datarate;
 800e430:	61df      	str	r7, [r3, #28]
            SX1276.Settings.Fsk.TxTimeout = timeout;
 800e432:	629a      	str	r2, [r3, #40]	@ 0x28
           ( ( ( stepsFrac << SX1276_PLL_STEP_SHIFT_AMOUNT ) + ( SX1276_PLL_STEP_SCALED >> 1 ) ) /
 800e434:	497a      	ldr	r1, [pc, #488]	@ (800e620 <SX1276SetTxConfig+0x338>)
 800e436:	f7f1 ff1d 	bl	8000274 <__aeabi_uidivmod>
 800e43a:	4b7a      	ldr	r3, [pc, #488]	@ (800e624 <SX1276SetTxConfig+0x33c>)
 800e43c:	0208      	lsls	r0, r1, #8
 800e43e:	18c0      	adds	r0, r0, r3
 800e440:	4977      	ldr	r1, [pc, #476]	@ (800e620 <SX1276SetTxConfig+0x338>)
 800e442:	f7f1 fe91 	bl	8000168 <__udivsi3>
    stepsInt = freqInHz / SX1276_PLL_STEP_SCALED;
 800e446:	4976      	ldr	r1, [pc, #472]	@ (800e620 <SX1276SetTxConfig+0x338>)
           ( ( ( stepsFrac << SX1276_PLL_STEP_SHIFT_AMOUNT ) + ( SX1276_PLL_STEP_SCALED >> 1 ) ) /
 800e448:	0004      	movs	r4, r0
    stepsInt = freqInHz / SX1276_PLL_STEP_SCALED;
 800e44a:	9805      	ldr	r0, [sp, #20]
 800e44c:	f7f1 fe8c 	bl	8000168 <__udivsi3>
    return ( stepsInt << SX1276_PLL_STEP_SHIFT_AMOUNT ) + 
 800e450:	0200      	lsls	r0, r0, #8
 800e452:	1824      	adds	r4, r4, r0
            SX1276Write( REG_FDEVMSB, ( uint8_t )( fdevInPllSteps >> 8 ) );
 800e454:	0a21      	lsrs	r1, r4, #8
 800e456:	2004      	movs	r0, #4
 800e458:	b2c9      	uxtb	r1, r1
 800e45a:	f7ff fa7e 	bl	800d95a <SX1276Write>
            SX1276Write( REG_FDEVLSB, ( uint8_t )( fdevInPllSteps & 0xFF ) );
 800e45e:	b2e1      	uxtb	r1, r4
 800e460:	2005      	movs	r0, #5
 800e462:	f7ff fa7a 	bl	800d95a <SX1276Write>
            uint32_t bitRate = ( uint32_t )( SX1276_XTAL_FREQ / datarate );
 800e466:	0039      	movs	r1, r7
 800e468:	486f      	ldr	r0, [pc, #444]	@ (800e628 <SX1276SetTxConfig+0x340>)
 800e46a:	f7f1 fe7d 	bl	8000168 <__udivsi3>
 800e46e:	0004      	movs	r4, r0
            SX1276Write( REG_BITRATEMSB, ( uint8_t )( bitRate >> 8 ) );
 800e470:	0a01      	lsrs	r1, r0, #8
 800e472:	b2c9      	uxtb	r1, r1
 800e474:	2002      	movs	r0, #2
 800e476:	f7ff fa70 	bl	800d95a <SX1276Write>
            SX1276Write( REG_BITRATELSB, ( uint8_t )( bitRate & 0xFF ) );
 800e47a:	2003      	movs	r0, #3
 800e47c:	b2e1      	uxtb	r1, r4
 800e47e:	f7ff fa6c 	bl	800d95a <SX1276Write>
            SX1276Write( REG_PREAMBLEMSB, ( preambleLen >> 8 ) & 0x00FF );
 800e482:	9b01      	ldr	r3, [sp, #4]
 800e484:	2025      	movs	r0, #37	@ 0x25
 800e486:	0a19      	lsrs	r1, r3, #8
 800e488:	f7ff fa67 	bl	800d95a <SX1276Write>
            SX1276Write( REG_PREAMBLELSB, preambleLen & 0xFF );
 800e48c:	466b      	mov	r3, sp
 800e48e:	2026      	movs	r0, #38	@ 0x26
 800e490:	7919      	ldrb	r1, [r3, #4]
 800e492:	f7ff fa62 	bl	800d95a <SX1276Write>
                         ( SX1276Read( REG_PACKETCONFIG1 ) &
 800e496:	2030      	movs	r0, #48	@ 0x30
 800e498:	f7ff faaa 	bl	800d9f0 <SX1276Read>
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 800e49c:	2101      	movs	r1, #1
 800e49e:	9b03      	ldr	r3, [sp, #12]
 800e4a0:	4059      	eors	r1, r3
                           ( crcOn << 4 ) );
 800e4a2:	9b04      	ldr	r3, [sp, #16]
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 800e4a4:	01c9      	lsls	r1, r1, #7
                           ( crcOn << 4 ) );
 800e4a6:	011b      	lsls	r3, r3, #4
            SX1276Write( REG_PACKETCONFIG1,
 800e4a8:	4319      	orrs	r1, r3
 800e4aa:	236f      	movs	r3, #111	@ 0x6f
 800e4ac:	4018      	ands	r0, r3
 800e4ae:	4301      	orrs	r1, r0
 800e4b0:	b2c9      	uxtb	r1, r1
 800e4b2:	2030      	movs	r0, #48	@ 0x30
 800e4b4:	f7ff fa51 	bl	800d95a <SX1276Write>
            SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) | RF_PACKETCONFIG2_DATAMODE_PACKET ) );
 800e4b8:	2031      	movs	r0, #49	@ 0x31
 800e4ba:	f7ff fa99 	bl	800d9f0 <SX1276Read>
 800e4be:	2140      	movs	r1, #64	@ 0x40
 800e4c0:	4301      	orrs	r1, r0
 800e4c2:	2031      	movs	r0, #49	@ 0x31
 800e4c4:	b2c9      	uxtb	r1, r1
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 800e4c6:	f7ff fa48 	bl	800d95a <SX1276Write>
}
 800e4ca:	e773      	b.n	800e3b4 <SX1276SetTxConfig+0xcc>
            SX1276.Settings.LoRa.Power = power;
 800e4cc:	4a57      	ldr	r2, [pc, #348]	@ (800e62c <SX1276SetTxConfig+0x344>)
 800e4ce:	4b52      	ldr	r3, [pc, #328]	@ (800e618 <SX1276SetTxConfig+0x330>)
 800e4d0:	7015      	strb	r5, [r2, #0]
            if( bandwidth > 2 )
 800e4d2:	9a06      	ldr	r2, [sp, #24]
 800e4d4:	2a02      	cmp	r2, #2
 800e4d6:	d900      	bls.n	800e4da <SX1276SetTxConfig+0x1f2>
                while( 1 );
 800e4d8:	e7fe      	b.n	800e4d8 <SX1276SetTxConfig+0x1f0>
            SX1276.Settings.LoRa.Coderate = coderate;
 800e4da:	001a      	movs	r2, r3
 800e4dc:	9907      	ldr	r1, [sp, #28]
 800e4de:	324d      	adds	r2, #77	@ 0x4d
 800e4e0:	7011      	strb	r1, [r2, #0]
            SX1276.Settings.LoRa.PreambleLen = preambleLen;
 800e4e2:	001a      	movs	r2, r3
 800e4e4:	9901      	ldr	r1, [sp, #4]
 800e4e6:	324e      	adds	r2, #78	@ 0x4e
 800e4e8:	8011      	strh	r1, [r2, #0]
            SX1276.Settings.LoRa.FixLen = fixLen;
 800e4ea:	001a      	movs	r2, r3
 800e4ec:	9903      	ldr	r1, [sp, #12]
 800e4ee:	3250      	adds	r2, #80	@ 0x50
 800e4f0:	7011      	strb	r1, [r2, #0]
            SX1276.Settings.LoRa.FreqHopOn = freqHopOn;
 800e4f2:	001a      	movs	r2, r3
 800e4f4:	9908      	ldr	r1, [sp, #32]
 800e4f6:	3253      	adds	r2, #83	@ 0x53
 800e4f8:	7011      	strb	r1, [r2, #0]
            SX1276.Settings.LoRa.HopPeriod = hopPeriod;
 800e4fa:	001a      	movs	r2, r3
 800e4fc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800e4fe:	3254      	adds	r2, #84	@ 0x54
 800e500:	7011      	strb	r1, [r2, #0]
            SX1276.Settings.LoRa.CrcOn = crcOn;
 800e502:	001a      	movs	r2, r3
 800e504:	9904      	ldr	r1, [sp, #16]
 800e506:	3252      	adds	r2, #82	@ 0x52
 800e508:	7011      	strb	r1, [r2, #0]
            SX1276.Settings.LoRa.IqInverted = iqInverted;
 800e50a:	001a      	movs	r2, r3
 800e50c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800e50e:	3255      	adds	r2, #85	@ 0x55
            bandwidth += 7;
 800e510:	9d06      	ldr	r5, [sp, #24]
            SX1276.Settings.LoRa.IqInverted = iqInverted;
 800e512:	7011      	strb	r1, [r2, #0]
            SX1276.Settings.LoRa.TxTimeout = timeout;
 800e514:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
            bandwidth += 7;
 800e516:	3507      	adds	r5, #7
            else if( datarate < 6 )
 800e518:	003c      	movs	r4, r7
            SX1276.Settings.LoRa.Bandwidth = bandwidth;
 800e51a:	645d      	str	r5, [r3, #68]	@ 0x44
            SX1276.Settings.LoRa.Datarate = datarate;
 800e51c:	649f      	str	r7, [r3, #72]	@ 0x48
            SX1276.Settings.LoRa.TxTimeout = timeout;
 800e51e:	659a      	str	r2, [r3, #88]	@ 0x58
            else if( datarate < 6 )
 800e520:	2f06      	cmp	r7, #6
 800e522:	d262      	bcs.n	800e5ea <SX1276SetTxConfig+0x302>
 800e524:	2406      	movs	r4, #6
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800e526:	2d07      	cmp	r5, #7
 800e528:	d163      	bne.n	800e5f2 <SX1276SetTxConfig+0x30a>
 800e52a:	0022      	movs	r2, r4
 800e52c:	2300      	movs	r3, #0
 800e52e:	2101      	movs	r1, #1
 800e530:	3a0b      	subs	r2, #11
 800e532:	4291      	cmp	r1, r2
 800e534:	415b      	adcs	r3, r3
 800e536:	b2db      	uxtb	r3, r3
 800e538:	4a3d      	ldr	r2, [pc, #244]	@ (800e630 <SX1276SetTxConfig+0x348>)
 800e53a:	4e37      	ldr	r6, [pc, #220]	@ (800e618 <SX1276SetTxConfig+0x330>)
 800e53c:	7013      	strb	r3, [r2, #0]
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 800e53e:	9b08      	ldr	r3, [sp, #32]
 800e540:	2b00      	cmp	r3, #0
 800e542:	d00f      	beq.n	800e564 <SX1276SetTxConfig+0x27c>
                SX1276Write( REG_LR_PLLHOP, ( SX1276Read( REG_LR_PLLHOP ) & RFLR_PLLHOP_FASTHOP_MASK ) | RFLR_PLLHOP_FASTHOP_ON );
 800e544:	2044      	movs	r0, #68	@ 0x44
 800e546:	f7ff fa53 	bl	800d9f0 <SX1276Read>
 800e54a:	2180      	movs	r1, #128	@ 0x80
 800e54c:	4249      	negs	r1, r1
 800e54e:	4301      	orrs	r1, r0
 800e550:	b2c9      	uxtb	r1, r1
 800e552:	2044      	movs	r0, #68	@ 0x44
 800e554:	f7ff fa01 	bl	800d95a <SX1276Write>
                SX1276Write( REG_LR_HOPPERIOD, SX1276.Settings.LoRa.HopPeriod );
 800e558:	0033      	movs	r3, r6
 800e55a:	3354      	adds	r3, #84	@ 0x54
 800e55c:	2024      	movs	r0, #36	@ 0x24
 800e55e:	7819      	ldrb	r1, [r3, #0]
 800e560:	f7ff f9fb 	bl	800d95a <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG1 ) &
 800e564:	201d      	movs	r0, #29
 800e566:	f7ff fa43 	bl	800d9f0 <SX1276Read>
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 800e56a:	9b07      	ldr	r3, [sp, #28]
 800e56c:	012d      	lsls	r5, r5, #4
 800e56e:	0059      	lsls	r1, r3, #1
 800e570:	9b03      	ldr	r3, [sp, #12]
            SX1276Write( REG_LR_MODEMCONFIG1,
 800e572:	201d      	movs	r0, #29
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 800e574:	430b      	orrs	r3, r1
 800e576:	0019      	movs	r1, r3
 800e578:	4329      	orrs	r1, r5
            SX1276Write( REG_LR_MODEMCONFIG1,
 800e57a:	b2c9      	uxtb	r1, r1
 800e57c:	f7ff f9ed 	bl	800d95a <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG2 ) &
 800e580:	201e      	movs	r0, #30
 800e582:	f7ff fa35 	bl	800d9f0 <SX1276Read>
                           ( datarate << 4 ) | ( crcOn << 2 ) );
 800e586:	9b04      	ldr	r3, [sp, #16]
 800e588:	0124      	lsls	r4, r4, #4
 800e58a:	009b      	lsls	r3, r3, #2
            SX1276Write( REG_LR_MODEMCONFIG2,
 800e58c:	431c      	orrs	r4, r3
                           RFLR_MODEMCONFIG2_SF_MASK &
 800e58e:	230b      	movs	r3, #11
 800e590:	4018      	ands	r0, r3
            SX1276Write( REG_LR_MODEMCONFIG2,
 800e592:	4304      	orrs	r4, r0
 800e594:	b2e1      	uxtb	r1, r4
 800e596:	201e      	movs	r0, #30
 800e598:	f7ff f9df 	bl	800d95a <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
 800e59c:	2026      	movs	r0, #38	@ 0x26
 800e59e:	f7ff fa27 	bl	800d9f0 <SX1276Read>
            SX1276Write( REG_LR_MODEMCONFIG3,
 800e5a2:	2308      	movs	r3, #8
                           ( SX1276.Settings.LoRa.LowDatarateOptimize << 3 ) );
 800e5a4:	364c      	adds	r6, #76	@ 0x4c
 800e5a6:	7831      	ldrb	r1, [r6, #0]
            SX1276Write( REG_LR_MODEMCONFIG3,
 800e5a8:	4398      	bics	r0, r3
                           ( SX1276.Settings.LoRa.LowDatarateOptimize << 3 ) );
 800e5aa:	00c9      	lsls	r1, r1, #3
            SX1276Write( REG_LR_MODEMCONFIG3,
 800e5ac:	4301      	orrs	r1, r0
 800e5ae:	b2c9      	uxtb	r1, r1
 800e5b0:	2026      	movs	r0, #38	@ 0x26
 800e5b2:	f7ff f9d2 	bl	800d95a <SX1276Write>
            SX1276Write( REG_LR_PREAMBLEMSB, ( preambleLen >> 8 ) & 0x00FF );
 800e5b6:	9b01      	ldr	r3, [sp, #4]
 800e5b8:	2020      	movs	r0, #32
 800e5ba:	0a19      	lsrs	r1, r3, #8
 800e5bc:	f7ff f9cd 	bl	800d95a <SX1276Write>
            SX1276Write( REG_LR_PREAMBLELSB, preambleLen & 0xFF );
 800e5c0:	466b      	mov	r3, sp
 800e5c2:	2021      	movs	r0, #33	@ 0x21
 800e5c4:	7919      	ldrb	r1, [r3, #4]
 800e5c6:	f7ff f9c8 	bl	800d95a <SX1276Write>
            if( datarate == 6 )
 800e5ca:	2407      	movs	r4, #7
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 800e5cc:	2031      	movs	r0, #49	@ 0x31
            if( datarate == 6 )
 800e5ce:	2f06      	cmp	r7, #6
 800e5d0:	d817      	bhi.n	800e602 <SX1276SetTxConfig+0x31a>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 800e5d2:	f7ff fa0d 	bl	800d9f0 <SX1276Read>
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 800e5d6:	2105      	movs	r1, #5
 800e5d8:	43a0      	bics	r0, r4
 800e5da:	4301      	orrs	r1, r0
 800e5dc:	b2c9      	uxtb	r1, r1
 800e5de:	2031      	movs	r0, #49	@ 0x31
 800e5e0:	f7ff f9bb 	bl	800d95a <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 800e5e4:	210c      	movs	r1, #12
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 800e5e6:	2037      	movs	r0, #55	@ 0x37
 800e5e8:	e76d      	b.n	800e4c6 <SX1276SetTxConfig+0x1de>
 800e5ea:	2f0c      	cmp	r7, #12
 800e5ec:	d99b      	bls.n	800e526 <SX1276SetTxConfig+0x23e>
 800e5ee:	240c      	movs	r4, #12
 800e5f0:	e799      	b.n	800e526 <SX1276SetTxConfig+0x23e>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x00;
 800e5f2:	2300      	movs	r3, #0
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800e5f4:	2d08      	cmp	r5, #8
 800e5f6:	d19f      	bne.n	800e538 <SX1276SetTxConfig+0x250>
                ( ( bandwidth == 8 ) && ( datarate == 12 ) ) )
 800e5f8:	330b      	adds	r3, #11
 800e5fa:	42bb      	cmp	r3, r7
 800e5fc:	419b      	sbcs	r3, r3
 800e5fe:	425b      	negs	r3, r3
 800e600:	e79a      	b.n	800e538 <SX1276SetTxConfig+0x250>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 800e602:	f7ff f9f5 	bl	800d9f0 <SX1276Read>
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 800e606:	2103      	movs	r1, #3
 800e608:	43a0      	bics	r0, r4
 800e60a:	4301      	orrs	r1, r0
 800e60c:	b2c9      	uxtb	r1, r1
 800e60e:	2031      	movs	r0, #49	@ 0x31
 800e610:	f7ff f9a3 	bl	800d95a <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 800e614:	210a      	movs	r1, #10
 800e616:	e7e6      	b.n	800e5e6 <SX1276SetTxConfig+0x2fe>
 800e618:	20001368 	.word	0x20001368
 800e61c:	0801224b 	.word	0x0801224b
 800e620:	00003d09 	.word	0x00003d09
 800e624:	00001e84 	.word	0x00001e84
 800e628:	01e84800 	.word	0x01e84800
 800e62c:	200013a8 	.word	0x200013a8
 800e630:	200013b4 	.word	0x200013b4

0800e634 <SX1276SetTxContinuousWave>:
{
 800e634:	b530      	push	{r4, r5, lr}
    uint32_t timeout = ( uint32_t )time * 1000;
 800e636:	24fa      	movs	r4, #250	@ 0xfa
{
 800e638:	b08b      	sub	sp, #44	@ 0x2c
    uint32_t timeout = ( uint32_t )time * 1000;
 800e63a:	00a4      	lsls	r4, r4, #2
 800e63c:	4354      	muls	r4, r2
{
 800e63e:	000d      	movs	r5, r1
    SX1276SetChannel( freq );
 800e640:	f7ff f994 	bl	800d96c <SX1276SetChannel>
    SX1276SetTxConfig( MODEM_FSK, power, 0, 0, 4800, 0, 5, false, false, 0, 0, 0, timeout );
 800e644:	2305      	movs	r3, #5
 800e646:	9302      	str	r3, [sp, #8]
 800e648:	2396      	movs	r3, #150	@ 0x96
 800e64a:	2000      	movs	r0, #0
 800e64c:	015b      	lsls	r3, r3, #5
 800e64e:	0002      	movs	r2, r0
 800e650:	0029      	movs	r1, r5
 800e652:	9408      	str	r4, [sp, #32]
 800e654:	9007      	str	r0, [sp, #28]
 800e656:	9006      	str	r0, [sp, #24]
 800e658:	9005      	str	r0, [sp, #20]
 800e65a:	9004      	str	r0, [sp, #16]
 800e65c:	9003      	str	r0, [sp, #12]
 800e65e:	9001      	str	r0, [sp, #4]
 800e660:	9300      	str	r3, [sp, #0]
 800e662:	0003      	movs	r3, r0
 800e664:	f7ff fe40 	bl	800e2e8 <SX1276SetTxConfig>
    SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) & RF_PACKETCONFIG2_DATAMODE_MASK ) );
 800e668:	2031      	movs	r0, #49	@ 0x31
 800e66a:	f7ff f9c1 	bl	800d9f0 <SX1276Read>
 800e66e:	2540      	movs	r5, #64	@ 0x40
 800e670:	43a8      	bics	r0, r5
 800e672:	b2c1      	uxtb	r1, r0
 800e674:	2031      	movs	r0, #49	@ 0x31
 800e676:	f7ff f970 	bl	800d95a <SX1276Write>
    SX1276Write( REG_DIOMAPPING1, RF_DIOMAPPING1_DIO0_11 | RF_DIOMAPPING1_DIO1_11 );
 800e67a:	0028      	movs	r0, r5
 800e67c:	21f0      	movs	r1, #240	@ 0xf0
 800e67e:	f7ff f96c 	bl	800d95a <SX1276Write>
    SX1276Write( REG_DIOMAPPING2, RF_DIOMAPPING2_DIO4_10 | RF_DIOMAPPING2_DIO5_10 );
 800e682:	21a0      	movs	r1, #160	@ 0xa0
 800e684:	2041      	movs	r0, #65	@ 0x41
 800e686:	f7ff f968 	bl	800d95a <SX1276Write>
    TimerSetValue( &TxTimeoutTimer, timeout );
 800e68a:	4b08      	ldr	r3, [pc, #32]	@ (800e6ac <SX1276SetTxContinuousWave+0x78>)
 800e68c:	0021      	movs	r1, r4
 800e68e:	0018      	movs	r0, r3
 800e690:	001c      	movs	r4, r3
 800e692:	f001 f8d9 	bl	800f848 <UTIL_TIMER_SetPeriod>
    SX1276.Settings.State = RF_TX_RUNNING;
 800e696:	2202      	movs	r2, #2
 800e698:	4b05      	ldr	r3, [pc, #20]	@ (800e6b0 <SX1276SetTxContinuousWave+0x7c>)
    TimerStart( &TxTimeoutTimer );
 800e69a:	0020      	movs	r0, r4
    SX1276.Settings.State = RF_TX_RUNNING;
 800e69c:	711a      	strb	r2, [r3, #4]
    TimerStart( &TxTimeoutTimer );
 800e69e:	f001 f895 	bl	800f7cc <UTIL_TIMER_Start>
    if( opMode == RF_OPMODE_SLEEP )
 800e6a2:	2003      	movs	r0, #3
 800e6a4:	f7ff fa46 	bl	800db34 <SX1276SetOpMode.part.0>
}
 800e6a8:	b00b      	add	sp, #44	@ 0x2c
 800e6aa:	bd30      	pop	{r4, r5, pc}
 800e6ac:	20001404 	.word	0x20001404
 800e6b0:	20001368 	.word	0x20001368

0800e6b4 <RxChainCalibration>:
{
 800e6b4:	b570      	push	{r4, r5, r6, lr}
    regPaConfigInitVal = SX1276Read( REG_PACONFIG );
 800e6b6:	2009      	movs	r0, #9
 800e6b8:	f7ff f99a 	bl	800d9f0 <SX1276Read>
 800e6bc:	0005      	movs	r5, r0
    initialFreq = SX1276ConvertPllStepToFreqInHz( ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 800e6be:	2006      	movs	r0, #6
 800e6c0:	f7ff f996 	bl	800d9f0 <SX1276Read>
 800e6c4:	0004      	movs	r4, r0
                                                    ( ( uint32_t )SX1276Read( REG_FRFMID ) << 8 ) |
 800e6c6:	2007      	movs	r0, #7
 800e6c8:	f7ff f992 	bl	800d9f0 <SX1276Read>
    initialFreq = SX1276ConvertPllStepToFreqInHz( ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 800e6cc:	0424      	lsls	r4, r4, #16
                                                    ( ( uint32_t )SX1276Read( REG_FRFMID ) << 8 ) |
 800e6ce:	0200      	lsls	r0, r0, #8
    initialFreq = SX1276ConvertPllStepToFreqInHz( ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 800e6d0:	4304      	orrs	r4, r0
                                                    ( ( uint32_t )SX1276Read( REG_FRFLSB ) ) ) );
 800e6d2:	2008      	movs	r0, #8
 800e6d4:	f7ff f98c 	bl	800d9f0 <SX1276Read>
           ( ( freqInHzFrac * SX1276_PLL_STEP_SCALED + ( 128 ) ) >> SX1276_PLL_STEP_SHIFT_AMOUNT );
 800e6d8:	4b1a      	ldr	r3, [pc, #104]	@ (800e744 <RxChainCalibration+0x90>)
    initialFreq = SX1276ConvertPllStepToFreqInHz( ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 800e6da:	4304      	orrs	r4, r0
           ( ( freqInHzFrac * SX1276_PLL_STEP_SCALED + ( 128 ) ) >> SX1276_PLL_STEP_SHIFT_AMOUNT );
 800e6dc:	b2c0      	uxtb	r0, r0
 800e6de:	4358      	muls	r0, r3
    freqInHzInt = pllSteps >> SX1276_PLL_STEP_SHIFT_AMOUNT;
 800e6e0:	0a24      	lsrs	r4, r4, #8
    return freqInHzInt * SX1276_PLL_STEP_SCALED + 
 800e6e2:	435c      	muls	r4, r3
           ( ( freqInHzFrac * SX1276_PLL_STEP_SCALED + ( 128 ) ) >> SX1276_PLL_STEP_SHIFT_AMOUNT );
 800e6e4:	3080      	adds	r0, #128	@ 0x80
 800e6e6:	0a00      	lsrs	r0, r0, #8
    SX1276Write( REG_PACONFIG, 0x00 );
 800e6e8:	2100      	movs	r1, #0
    return freqInHzInt * SX1276_PLL_STEP_SCALED + 
 800e6ea:	1904      	adds	r4, r0, r4
    SX1276Write( REG_PACONFIG, 0x00 );
 800e6ec:	2009      	movs	r0, #9
 800e6ee:	f7ff f934 	bl	800d95a <SX1276Write>
    SX1276Write( REG_IMAGECAL, ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_MASK ) | RF_IMAGECAL_IMAGECAL_START );
 800e6f2:	203b      	movs	r0, #59	@ 0x3b
 800e6f4:	f7ff f97c 	bl	800d9f0 <SX1276Read>
 800e6f8:	2140      	movs	r1, #64	@ 0x40
 800e6fa:	4301      	orrs	r1, r0
 800e6fc:	b2c9      	uxtb	r1, r1
 800e6fe:	203b      	movs	r0, #59	@ 0x3b
 800e700:	f7ff f92b 	bl	800d95a <SX1276Write>
    while( ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_RUNNING ) == RF_IMAGECAL_IMAGECAL_RUNNING )
 800e704:	2620      	movs	r6, #32
 800e706:	203b      	movs	r0, #59	@ 0x3b
 800e708:	f7ff f972 	bl	800d9f0 <SX1276Read>
 800e70c:	4230      	tst	r0, r6
 800e70e:	d1fa      	bne.n	800e706 <RxChainCalibration+0x52>
    SX1276SetChannel( 868000000 );
 800e710:	480d      	ldr	r0, [pc, #52]	@ (800e748 <RxChainCalibration+0x94>)
 800e712:	f7ff f92b 	bl	800d96c <SX1276SetChannel>
    SX1276Write( REG_IMAGECAL, ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_MASK ) | RF_IMAGECAL_IMAGECAL_START );
 800e716:	203b      	movs	r0, #59	@ 0x3b
 800e718:	f7ff f96a 	bl	800d9f0 <SX1276Read>
 800e71c:	2140      	movs	r1, #64	@ 0x40
 800e71e:	4301      	orrs	r1, r0
 800e720:	b2c9      	uxtb	r1, r1
 800e722:	203b      	movs	r0, #59	@ 0x3b
 800e724:	f7ff f919 	bl	800d95a <SX1276Write>
    while( ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_RUNNING ) == RF_IMAGECAL_IMAGECAL_RUNNING )
 800e728:	2620      	movs	r6, #32
 800e72a:	203b      	movs	r0, #59	@ 0x3b
 800e72c:	f7ff f960 	bl	800d9f0 <SX1276Read>
 800e730:	4230      	tst	r0, r6
 800e732:	d1fa      	bne.n	800e72a <RxChainCalibration+0x76>
    SX1276Write( REG_PACONFIG, regPaConfigInitVal );
 800e734:	0029      	movs	r1, r5
 800e736:	2009      	movs	r0, #9
 800e738:	f7ff f90f 	bl	800d95a <SX1276Write>
    SX1276SetChannel( initialFreq );
 800e73c:	0020      	movs	r0, r4
 800e73e:	f7ff f915 	bl	800d96c <SX1276SetChannel>
}
 800e742:	bd70      	pop	{r4, r5, r6, pc}
 800e744:	00003d09 	.word	0x00003d09
 800e748:	33bca100 	.word	0x33bca100

0800e74c <SX1276Init>:
{
 800e74c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    RadioEvents = events;
 800e74e:	4e1f      	ldr	r6, [pc, #124]	@ (800e7cc <SX1276Init+0x80>)
    TimerInit( &TxTimeoutTimer, SX1276OnTimeoutIrq );
 800e750:	2400      	movs	r4, #0
    RadioEvents = events;
 800e752:	6030      	str	r0, [r6, #0]
    TimerInit( &TxTimeoutTimer, SX1276OnTimeoutIrq );
 800e754:	2101      	movs	r1, #1
 800e756:	0030      	movs	r0, r6
 800e758:	4d1d      	ldr	r5, [pc, #116]	@ (800e7d0 <SX1276Init+0x84>)
 800e75a:	0022      	movs	r2, r4
 800e75c:	002b      	movs	r3, r5
 800e75e:	9400      	str	r4, [sp, #0]
 800e760:	4249      	negs	r1, r1
 800e762:	301c      	adds	r0, #28
 800e764:	f000 ff80 	bl	800f668 <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutTimer, SX1276OnTimeoutIrq );
 800e768:	2101      	movs	r1, #1
 800e76a:	002b      	movs	r3, r5
 800e76c:	0022      	movs	r2, r4
 800e76e:	1d30      	adds	r0, r6, #4
 800e770:	9400      	str	r4, [sp, #0]
 800e772:	4249      	negs	r1, r1
 800e774:	f000 ff78 	bl	800f668 <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutSyncWord, SX1276OnTimeoutIrq );
 800e778:	2101      	movs	r1, #1
 800e77a:	002b      	movs	r3, r5
 800e77c:	0022      	movs	r2, r4
 800e77e:	4249      	negs	r1, r1
 800e780:	9400      	str	r4, [sp, #0]
 800e782:	4814      	ldr	r0, [pc, #80]	@ (800e7d4 <SX1276Init+0x88>)
 800e784:	4e14      	ldr	r6, [pc, #80]	@ (800e7d8 <SX1276Init+0x8c>)
 800e786:	f000 ff6f 	bl	800f668 <UTIL_TIMER_Create>
    Sx_Board_SetXO( SET );
 800e78a:	2001      	movs	r0, #1
 800e78c:	f7f5 fc00 	bl	8003f90 <CMWX1ZZABZ0XX_RADIO_SetXO>
    Sx_Board_Reset();
 800e790:	f7f5 fd9e 	bl	80042d0 <CMWX1ZZABZ0XX_RADIO_Reset>
    RxChainCalibration( );
 800e794:	f7ff ff8e 	bl	800e6b4 <RxChainCalibration>
    SX1276SetOpMode( RF_OPMODE_SLEEP );
 800e798:	f7ff fb5a 	bl	800de50 <SX1276SetOpMode.constprop.0>
    Sx_Board_IoIrqInit( DioIrq );
 800e79c:	480f      	ldr	r0, [pc, #60]	@ (800e7dc <SX1276Init+0x90>)
 800e79e:	f7f5 fd3f 	bl	8004220 <CMWX1ZZABZ0XX_RADIO_IoIrqInit>
    for( i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 800e7a2:	4c0f      	ldr	r4, [pc, #60]	@ (800e7e0 <SX1276Init+0x94>)
 800e7a4:	4d0f      	ldr	r5, [pc, #60]	@ (800e7e4 <SX1276Init+0x98>)
        SX1276SetModem( RadioRegsInit[i].Modem );
 800e7a6:	7820      	ldrb	r0, [r4, #0]
 800e7a8:	f7ff fb62 	bl	800de70 <SX1276SetModem>
        SX1276Write( RadioRegsInit[i].Addr, RadioRegsInit[i].Value );
 800e7ac:	78a1      	ldrb	r1, [r4, #2]
 800e7ae:	7860      	ldrb	r0, [r4, #1]
    for( i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 800e7b0:	3403      	adds	r4, #3
        SX1276Write( RadioRegsInit[i].Addr, RadioRegsInit[i].Value );
 800e7b2:	f7ff f8d2 	bl	800d95a <SX1276Write>
    for( i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 800e7b6:	42ac      	cmp	r4, r5
 800e7b8:	d1f5      	bne.n	800e7a6 <SX1276Init+0x5a>
    SX1276SetModem( MODEM_FSK );
 800e7ba:	2000      	movs	r0, #0
 800e7bc:	f7ff fb58 	bl	800de70 <SX1276SetModem>
    SX1276.Settings.State = RF_IDLE;
 800e7c0:	2300      	movs	r3, #0
 800e7c2:	7133      	strb	r3, [r6, #4]
    return ( uint32_t )Sx_Board_GetWakeUpTime( ) + RADIO_WAKEUP_TIME;
 800e7c4:	f7f5 fbe2 	bl	8003f8c <CMWX1ZZABZ0XX_RADIO_GetWakeUpTime>
 800e7c8:	3002      	adds	r0, #2
}
 800e7ca:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 800e7cc:	200013e8 	.word	0x200013e8
 800e7d0:	0800e7e9 	.word	0x0800e7e9
 800e7d4:	200013d0 	.word	0x200013d0
 800e7d8:	20001368 	.word	0x20001368
 800e7dc:	20000114 	.word	0x20000114
 800e7e0:	080107f8 	.word	0x080107f8
 800e7e4:	08010828 	.word	0x08010828

0800e7e8 <SX1276OnTimeoutIrq>:
{
 800e7e8:	b570      	push	{r4, r5, r6, lr}
    switch( SX1276.Settings.State )
 800e7ea:	4c29      	ldr	r4, [pc, #164]	@ (800e890 <SX1276OnTimeoutIrq+0xa8>)
 800e7ec:	7923      	ldrb	r3, [r4, #4]
 800e7ee:	2b01      	cmp	r3, #1
 800e7f0:	d002      	beq.n	800e7f8 <SX1276OnTimeoutIrq+0x10>
 800e7f2:	2b02      	cmp	r3, #2
 800e7f4:	d02a      	beq.n	800e84c <SX1276OnTimeoutIrq+0x64>
}
 800e7f6:	bd70      	pop	{r4, r5, r6, pc}
        if( SX1276.Settings.Modem == MODEM_FSK )
 800e7f8:	7963      	ldrb	r3, [r4, #5]
 800e7fa:	2b00      	cmp	r3, #0
 800e7fc:	d117      	bne.n	800e82e <SX1276OnTimeoutIrq+0x46>
            SX1276Write( REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI |
 800e7fe:	210b      	movs	r1, #11
 800e800:	203e      	movs	r0, #62	@ 0x3e
            SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 800e802:	8623      	strh	r3, [r4, #48]	@ 0x30
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 800e804:	87a3      	strh	r3, [r4, #60]	@ 0x3c
            SX1276.Settings.FskPacketHandler.Size = 0;
 800e806:	8763      	strh	r3, [r4, #58]	@ 0x3a
            SX1276Write( REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI |
 800e808:	f7ff f8a7 	bl	800d95a <SX1276Write>
            SX1276Write( REG_IRQFLAGS2, RF_IRQFLAGS2_FIFOOVERRUN );
 800e80c:	2110      	movs	r1, #16
 800e80e:	203f      	movs	r0, #63	@ 0x3f
 800e810:	f7ff f8a3 	bl	800d95a <SX1276Write>
            if( SX1276.Settings.Fsk.RxContinuous == true )
 800e814:	1de3      	adds	r3, r4, #7
 800e816:	7fdb      	ldrb	r3, [r3, #31]
 800e818:	2b00      	cmp	r3, #0
 800e81a:	d011      	beq.n	800e840 <SX1276OnTimeoutIrq+0x58>
                SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 800e81c:	200d      	movs	r0, #13
 800e81e:	f7ff f8e7 	bl	800d9f0 <SX1276Read>
 800e822:	2140      	movs	r1, #64	@ 0x40
 800e824:	4301      	orrs	r1, r0
 800e826:	b2c9      	uxtb	r1, r1
 800e828:	200d      	movs	r0, #13
 800e82a:	f7ff f896 	bl	800d95a <SX1276Write>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 800e82e:	4b19      	ldr	r3, [pc, #100]	@ (800e894 <SX1276OnTimeoutIrq+0xac>)
 800e830:	681b      	ldr	r3, [r3, #0]
 800e832:	2b00      	cmp	r3, #0
 800e834:	d0df      	beq.n	800e7f6 <SX1276OnTimeoutIrq+0xe>
 800e836:	68db      	ldr	r3, [r3, #12]
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 800e838:	2b00      	cmp	r3, #0
 800e83a:	d0dc      	beq.n	800e7f6 <SX1276OnTimeoutIrq+0xe>
            RadioEvents->TxTimeout( );
 800e83c:	4798      	blx	r3
}
 800e83e:	e7da      	b.n	800e7f6 <SX1276OnTimeoutIrq+0xe>
                TimerStop( &RxTimeoutSyncWord );
 800e840:	0020      	movs	r0, r4
 800e842:	3068      	adds	r0, #104	@ 0x68
                SX1276.Settings.State = RF_IDLE;
 800e844:	7123      	strb	r3, [r4, #4]
                TimerStop( &RxTimeoutSyncWord );
 800e846:	f000 ff6d 	bl	800f724 <UTIL_TIMER_Stop>
 800e84a:	e7f0      	b.n	800e82e <SX1276OnTimeoutIrq+0x46>
    Sx_Board_Reset();
 800e84c:	f7f5 fd40 	bl	80042d0 <CMWX1ZZABZ0XX_RADIO_Reset>
        RxChainCalibration( );
 800e850:	f7ff ff30 	bl	800e6b4 <RxChainCalibration>
        SX1276SetOpMode( RF_OPMODE_SLEEP );
 800e854:	f7ff fafc 	bl	800de50 <SX1276SetOpMode.constprop.0>
        for( uint8_t i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 800e858:	4d0f      	ldr	r5, [pc, #60]	@ (800e898 <SX1276OnTimeoutIrq+0xb0>)
 800e85a:	4e10      	ldr	r6, [pc, #64]	@ (800e89c <SX1276OnTimeoutIrq+0xb4>)
            SX1276SetModem( RadioRegsInit[i].Modem );
 800e85c:	7828      	ldrb	r0, [r5, #0]
 800e85e:	f7ff fb07 	bl	800de70 <SX1276SetModem>
            SX1276Write( RadioRegsInit[i].Addr, RadioRegsInit[i].Value );
 800e862:	78a9      	ldrb	r1, [r5, #2]
 800e864:	7868      	ldrb	r0, [r5, #1]
        for( uint8_t i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 800e866:	3503      	adds	r5, #3
            SX1276Write( RadioRegsInit[i].Addr, RadioRegsInit[i].Value );
 800e868:	f7ff f877 	bl	800d95a <SX1276Write>
        for( uint8_t i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 800e86c:	42b5      	cmp	r5, r6
 800e86e:	d1f5      	bne.n	800e85c <SX1276OnTimeoutIrq+0x74>
        SX1276SetModem( MODEM_FSK );
 800e870:	2000      	movs	r0, #0
 800e872:	f7ff fafd 	bl	800de70 <SX1276SetModem>
        SX1276SetPublicNetwork( SX1276.Settings.LoRa.PublicNetwork );
 800e876:	0023      	movs	r3, r4
 800e878:	335c      	adds	r3, #92	@ 0x5c
 800e87a:	7818      	ldrb	r0, [r3, #0]
 800e87c:	f7ff fb46 	bl	800df0c <SX1276SetPublicNetwork>
        SX1276.Settings.State = RF_IDLE;
 800e880:	2300      	movs	r3, #0
 800e882:	7123      	strb	r3, [r4, #4]
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 800e884:	4b03      	ldr	r3, [pc, #12]	@ (800e894 <SX1276OnTimeoutIrq+0xac>)
 800e886:	681b      	ldr	r3, [r3, #0]
 800e888:	2b00      	cmp	r3, #0
 800e88a:	d0b4      	beq.n	800e7f6 <SX1276OnTimeoutIrq+0xe>
 800e88c:	685b      	ldr	r3, [r3, #4]
 800e88e:	e7d3      	b.n	800e838 <SX1276OnTimeoutIrq+0x50>
 800e890:	20001368 	.word	0x20001368
 800e894:	200013e8 	.word	0x200013e8
 800e898:	080107f8 	.word	0x080107f8
 800e89c:	08010828 	.word	0x08010828

0800e8a0 <SX1276OnDio0Irq>:
{
 800e8a0:	b573      	push	{r0, r1, r4, r5, r6, lr}
    volatile uint8_t irqFlags = 0;
 800e8a2:	466b      	mov	r3, sp
 800e8a4:	1dde      	adds	r6, r3, #7
 800e8a6:	2300      	movs	r3, #0
    switch( SX1276.Settings.State )
 800e8a8:	4c8c      	ldr	r4, [pc, #560]	@ (800eadc <SX1276OnDio0Irq+0x23c>)
    volatile uint8_t irqFlags = 0;
 800e8aa:	7033      	strb	r3, [r6, #0]
    switch( SX1276.Settings.State )
 800e8ac:	7923      	ldrb	r3, [r4, #4]
 800e8ae:	2b01      	cmp	r3, #1
 800e8b0:	d003      	beq.n	800e8ba <SX1276OnDio0Irq+0x1a>
 800e8b2:	2b02      	cmp	r3, #2
 800e8b4:	d100      	bne.n	800e8b8 <SX1276OnDio0Irq+0x18>
 800e8b6:	e0fd      	b.n	800eab4 <SX1276OnDio0Irq+0x214>
}
 800e8b8:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
            switch( SX1276.Settings.Modem )
 800e8ba:	7963      	ldrb	r3, [r4, #5]
 800e8bc:	2b00      	cmp	r3, #0
 800e8be:	d023      	beq.n	800e908 <SX1276OnDio0Irq+0x68>
 800e8c0:	2b01      	cmp	r3, #1
 800e8c2:	d1f9      	bne.n	800e8b8 <SX1276OnDio0Irq+0x18>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_RXDONE );
 800e8c4:	2140      	movs	r1, #64	@ 0x40
 800e8c6:	2012      	movs	r0, #18
 800e8c8:	f7ff f847 	bl	800d95a <SX1276Write>
                    irqFlags = SX1276Read( REG_LR_IRQFLAGS );
 800e8cc:	2012      	movs	r0, #18
 800e8ce:	f7ff f88f 	bl	800d9f0 <SX1276Read>
                    if( ( irqFlags & RFLR_IRQFLAGS_PAYLOADCRCERROR_MASK ) == RFLR_IRQFLAGS_PAYLOADCRCERROR )
 800e8d2:	2120      	movs	r1, #32
                    irqFlags = SX1276Read( REG_LR_IRQFLAGS );
 800e8d4:	7030      	strb	r0, [r6, #0]
                    if( ( irqFlags & RFLR_IRQFLAGS_PAYLOADCRCERROR_MASK ) == RFLR_IRQFLAGS_PAYLOADCRCERROR )
 800e8d6:	7833      	ldrb	r3, [r6, #0]
 800e8d8:	4d81      	ldr	r5, [pc, #516]	@ (800eae0 <SX1276OnDio0Irq+0x240>)
 800e8da:	420b      	tst	r3, r1
 800e8dc:	d100      	bne.n	800e8e0 <SX1276OnDio0Irq+0x40>
 800e8de:	e08a      	b.n	800e9f6 <SX1276OnDio0Irq+0x156>
                        SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_PAYLOADCRCERROR );
 800e8e0:	2012      	movs	r0, #18
 800e8e2:	f7ff f83a 	bl	800d95a <SX1276Write>
                        if( SX1276.Settings.LoRa.RxContinuous == false )
 800e8e6:	0023      	movs	r3, r4
 800e8e8:	3356      	adds	r3, #86	@ 0x56
 800e8ea:	781b      	ldrb	r3, [r3, #0]
 800e8ec:	2b00      	cmp	r3, #0
 800e8ee:	d100      	bne.n	800e8f2 <SX1276OnDio0Irq+0x52>
                            SX1276.Settings.State = RF_IDLE;
 800e8f0:	7123      	strb	r3, [r4, #4]
                        TimerStop( &RxTimeoutTimer );
 800e8f2:	1d28      	adds	r0, r5, #4
 800e8f4:	f000 ff16 	bl	800f724 <UTIL_TIMER_Stop>
                        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError != NULL ) )
 800e8f8:	682b      	ldr	r3, [r5, #0]
 800e8fa:	2b00      	cmp	r3, #0
 800e8fc:	d0dc      	beq.n	800e8b8 <SX1276OnDio0Irq+0x18>
 800e8fe:	691b      	ldr	r3, [r3, #16]
                if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 800e900:	2b00      	cmp	r3, #0
 800e902:	d0d9      	beq.n	800e8b8 <SX1276OnDio0Irq+0x18>
                    RadioEvents->TxDone( );
 800e904:	4798      	blx	r3
}
 800e906:	e7d7      	b.n	800e8b8 <SX1276OnDio0Irq+0x18>
                if( SX1276.Settings.Fsk.CrcOn == true )
 800e908:	1d63      	adds	r3, r4, #5
 800e90a:	7fdb      	ldrb	r3, [r3, #31]
 800e90c:	4d74      	ldr	r5, [pc, #464]	@ (800eae0 <SX1276OnDio0Irq+0x240>)
 800e90e:	2b00      	cmp	r3, #0
 800e910:	d030      	beq.n	800e974 <SX1276OnDio0Irq+0xd4>
                    irqFlags = SX1276Read( REG_IRQFLAGS2 );
 800e912:	203f      	movs	r0, #63	@ 0x3f
 800e914:	f7ff f86c 	bl	800d9f0 <SX1276Read>
 800e918:	7030      	strb	r0, [r6, #0]
                    if( ( irqFlags & RF_IRQFLAGS2_CRCOK ) != RF_IRQFLAGS2_CRCOK )
 800e91a:	7833      	ldrb	r3, [r6, #0]
 800e91c:	079b      	lsls	r3, r3, #30
 800e91e:	d429      	bmi.n	800e974 <SX1276OnDio0Irq+0xd4>
                        SX1276Write( REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI |
 800e920:	210b      	movs	r1, #11
 800e922:	203e      	movs	r0, #62	@ 0x3e
 800e924:	f7ff f819 	bl	800d95a <SX1276Write>
                        SX1276Write( REG_IRQFLAGS2, RF_IRQFLAGS2_FIFOOVERRUN );
 800e928:	2110      	movs	r1, #16
 800e92a:	203f      	movs	r0, #63	@ 0x3f
 800e92c:	f7ff f815 	bl	800d95a <SX1276Write>
                        TimerStop( &RxTimeoutTimer );
 800e930:	1d28      	adds	r0, r5, #4
 800e932:	f000 fef7 	bl	800f724 <UTIL_TIMER_Stop>
                        if( SX1276.Settings.Fsk.RxContinuous == false )
 800e936:	1de3      	adds	r3, r4, #7
 800e938:	7fde      	ldrb	r6, [r3, #31]
 800e93a:	2e00      	cmp	r6, #0
 800e93c:	d110      	bne.n	800e960 <SX1276OnDio0Irq+0xc0>
                            TimerStop( &RxTimeoutSyncWord );
 800e93e:	0020      	movs	r0, r4
 800e940:	3068      	adds	r0, #104	@ 0x68
 800e942:	f000 feef 	bl	800f724 <UTIL_TIMER_Stop>
                            SX1276.Settings.State = RF_IDLE;
 800e946:	7126      	strb	r6, [r4, #4]
                        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError != NULL ) )
 800e948:	682b      	ldr	r3, [r5, #0]
 800e94a:	2b00      	cmp	r3, #0
 800e94c:	d003      	beq.n	800e956 <SX1276OnDio0Irq+0xb6>
 800e94e:	691b      	ldr	r3, [r3, #16]
 800e950:	2b00      	cmp	r3, #0
 800e952:	d000      	beq.n	800e956 <SX1276OnDio0Irq+0xb6>
                            RadioEvents->RxError( );
 800e954:	4798      	blx	r3
                        SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 800e956:	2300      	movs	r3, #0
 800e958:	8623      	strh	r3, [r4, #48]	@ 0x30
                        SX1276.Settings.FskPacketHandler.NbBytes = 0;
 800e95a:	87a3      	strh	r3, [r4, #60]	@ 0x3c
                        SX1276.Settings.FskPacketHandler.Size = 0;
 800e95c:	8763      	strh	r3, [r4, #58]	@ 0x3a
                        break;
 800e95e:	e7ab      	b.n	800e8b8 <SX1276OnDio0Irq+0x18>
                            SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 800e960:	200d      	movs	r0, #13
 800e962:	f7ff f845 	bl	800d9f0 <SX1276Read>
 800e966:	2140      	movs	r1, #64	@ 0x40
 800e968:	4301      	orrs	r1, r0
 800e96a:	b2c9      	uxtb	r1, r1
 800e96c:	200d      	movs	r0, #13
 800e96e:	f7fe fff4 	bl	800d95a <SX1276Write>
 800e972:	e7e9      	b.n	800e948 <SX1276OnDio0Irq+0xa8>
                if( ( SX1276.Settings.FskPacketHandler.Size == 0 ) && ( SX1276.Settings.FskPacketHandler.NbBytes == 0 ) )
 800e974:	8f62      	ldrh	r2, [r4, #58]	@ 0x3a
 800e976:	8fa1      	ldrh	r1, [r4, #60]	@ 0x3c
 800e978:	0013      	movs	r3, r2
 800e97a:	4e5a      	ldr	r6, [pc, #360]	@ (800eae4 <SX1276OnDio0Irq+0x244>)
 800e97c:	430b      	orrs	r3, r1
 800e97e:	d10a      	bne.n	800e996 <SX1276OnDio0Irq+0xf6>
                    if( SX1276.Settings.Fsk.FixLen == false )
 800e980:	1ce3      	adds	r3, r4, #3
 800e982:	7fd8      	ldrb	r0, [r3, #31]
 800e984:	2800      	cmp	r0, #0
 800e986:	d127      	bne.n	800e9d8 <SX1276OnDio0Irq+0x138>
    SX1276ReadBuffer( 0, buffer, size );
 800e988:	0021      	movs	r1, r4
 800e98a:	2201      	movs	r2, #1
 800e98c:	313a      	adds	r1, #58	@ 0x3a
 800e98e:	f7ff f817 	bl	800d9c0 <SX1276ReadBuffer>
                    SX1276ReadFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 800e992:	8fa1      	ldrh	r1, [r4, #60]	@ 0x3c
 800e994:	8f62      	ldrh	r2, [r4, #58]	@ 0x3a
                    SX1276ReadFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 800e996:	1a52      	subs	r2, r2, r1
    SX1276ReadBuffer( 0, buffer, size );
 800e998:	2000      	movs	r0, #0
 800e99a:	b2d2      	uxtb	r2, r2
                    SX1276ReadFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 800e99c:	1871      	adds	r1, r6, r1
    SX1276ReadBuffer( 0, buffer, size );
 800e99e:	f7ff f80f 	bl	800d9c0 <SX1276ReadBuffer>
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 800e9a2:	8f63      	ldrh	r3, [r4, #58]	@ 0x3a
                TimerStop( &RxTimeoutTimer );
 800e9a4:	1d28      	adds	r0, r5, #4
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 800e9a6:	87a3      	strh	r3, [r4, #60]	@ 0x3c
                TimerStop( &RxTimeoutTimer );
 800e9a8:	f000 febc 	bl	800f724 <UTIL_TIMER_Stop>
                if( SX1276.Settings.Fsk.RxContinuous == false )
 800e9ac:	1de3      	adds	r3, r4, #7
 800e9ae:	7fdb      	ldrb	r3, [r3, #31]
 800e9b0:	2b00      	cmp	r3, #0
 800e9b2:	d116      	bne.n	800e9e2 <SX1276OnDio0Irq+0x142>
                    TimerStop( &RxTimeoutSyncWord );
 800e9b4:	0020      	movs	r0, r4
 800e9b6:	3068      	adds	r0, #104	@ 0x68
                    SX1276.Settings.State = RF_IDLE;
 800e9b8:	7123      	strb	r3, [r4, #4]
                    TimerStop( &RxTimeoutSyncWord );
 800e9ba:	f000 feb3 	bl	800f724 <UTIL_TIMER_Stop>
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 800e9be:	682b      	ldr	r3, [r5, #0]
 800e9c0:	2b00      	cmp	r3, #0
 800e9c2:	d0c8      	beq.n	800e956 <SX1276OnDio0Irq+0xb6>
 800e9c4:	689d      	ldr	r5, [r3, #8]
 800e9c6:	2d00      	cmp	r5, #0
 800e9c8:	d0c5      	beq.n	800e956 <SX1276OnDio0Irq+0xb6>
                    RadioEvents->RxDone( RxTxBuffer, SX1276.Settings.FskPacketHandler.Size, SX1276.Settings.FskPacketHandler.RssiValue, 0 );
 800e9ca:	2232      	movs	r2, #50	@ 0x32
 800e9cc:	2300      	movs	r3, #0
 800e9ce:	0030      	movs	r0, r6
 800e9d0:	56a2      	ldrsb	r2, [r4, r2]
 800e9d2:	8f61      	ldrh	r1, [r4, #58]	@ 0x3a
 800e9d4:	47a8      	blx	r5
 800e9d6:	e7be      	b.n	800e956 <SX1276OnDio0Irq+0xb6>
                        SX1276.Settings.FskPacketHandler.Size = SX1276Read( REG_PAYLOADLENGTH );
 800e9d8:	2032      	movs	r0, #50	@ 0x32
 800e9da:	f7ff f809 	bl	800d9f0 <SX1276Read>
 800e9de:	8760      	strh	r0, [r4, #58]	@ 0x3a
 800e9e0:	e7d7      	b.n	800e992 <SX1276OnDio0Irq+0xf2>
                    SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 800e9e2:	200d      	movs	r0, #13
 800e9e4:	f7ff f804 	bl	800d9f0 <SX1276Read>
 800e9e8:	2140      	movs	r1, #64	@ 0x40
 800e9ea:	4301      	orrs	r1, r0
 800e9ec:	b2c9      	uxtb	r1, r1
 800e9ee:	200d      	movs	r0, #13
 800e9f0:	f7fe ffb3 	bl	800d95a <SX1276Write>
 800e9f4:	e7e3      	b.n	800e9be <SX1276OnDio0Irq+0x11e>
                    SX1276.Settings.LoRaPacketHandler.SnrValue = ( ( ( int8_t )SX1276Read( REG_LR_PKTSNRVALUE ) ) + 2 ) >> 2;
 800e9f6:	2019      	movs	r0, #25
 800e9f8:	f7fe fffa 	bl	800d9f0 <SX1276Read>
 800e9fc:	0026      	movs	r6, r4
 800e9fe:	b240      	sxtb	r0, r0
 800ea00:	3002      	adds	r0, #2
 800ea02:	1080      	asrs	r0, r0, #2
 800ea04:	3660      	adds	r6, #96	@ 0x60
 800ea06:	7030      	strb	r0, [r6, #0]
                    int16_t rssi = SX1276Read( REG_LR_PKTRSSIVALUE );
 800ea08:	201a      	movs	r0, #26
 800ea0a:	f7fe fff1 	bl	800d9f0 <SX1276Read>
                    if( SX1276.Settings.LoRaPacketHandler.SnrValue < 0 )
 800ea0e:	2200      	movs	r2, #0
 800ea10:	56b2      	ldrsb	r2, [r6, r2]
                    int16_t rssi = SX1276Read( REG_LR_PKTRSSIVALUE );
 800ea12:	b203      	sxth	r3, r0
                    if( SX1276.Settings.LoRaPacketHandler.SnrValue < 0 )
 800ea14:	4934      	ldr	r1, [pc, #208]	@ (800eae8 <SX1276OnDio0Irq+0x248>)
 800ea16:	111b      	asrs	r3, r3, #4
 800ea18:	2a00      	cmp	r2, #0
 800ea1a:	da41      	bge.n	800eaa0 <SX1276OnDio0Irq+0x200>
                        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 800ea1c:	68a6      	ldr	r6, [r4, #8]
                                                                          SX1276.Settings.LoRaPacketHandler.SnrValue;
 800ea1e:	b292      	uxth	r2, r2
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 ) +
 800ea20:	b29b      	uxth	r3, r3
                        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 800ea22:	428e      	cmp	r6, r1
 800ea24:	d937      	bls.n	800ea96 <SX1276OnDio0Irq+0x1f6>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 ) +
 800ea26:	3a9d      	subs	r2, #157	@ 0x9d
 800ea28:	1882      	adds	r2, r0, r2
 800ea2a:	189a      	adds	r2, r3, r2
 800ea2c:	b210      	sxth	r0, r2
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 ) +
 800ea2e:	0023      	movs	r3, r4
 800ea30:	3362      	adds	r3, #98	@ 0x62
 800ea32:	8018      	strh	r0, [r3, #0]
                    SX1276.Settings.LoRaPacketHandler.Size = SX1276Read( REG_LR_RXNBBYTES );
 800ea34:	0026      	movs	r6, r4
 800ea36:	2013      	movs	r0, #19
 800ea38:	f7fe ffda 	bl	800d9f0 <SX1276Read>
 800ea3c:	3664      	adds	r6, #100	@ 0x64
 800ea3e:	7030      	strb	r0, [r6, #0]
                    SX1276Write( REG_LR_FIFOADDRPTR, SX1276Read( REG_LR_FIFORXCURRENTADDR ) );
 800ea40:	2010      	movs	r0, #16
 800ea42:	f7fe ffd5 	bl	800d9f0 <SX1276Read>
 800ea46:	0001      	movs	r1, r0
 800ea48:	200d      	movs	r0, #13
 800ea4a:	f7fe ff86 	bl	800d95a <SX1276Write>
    SX1276ReadBuffer( 0, buffer, size );
 800ea4e:	7832      	ldrb	r2, [r6, #0]
 800ea50:	4e24      	ldr	r6, [pc, #144]	@ (800eae4 <SX1276OnDio0Irq+0x244>)
 800ea52:	2000      	movs	r0, #0
 800ea54:	0031      	movs	r1, r6
 800ea56:	f7fe ffb3 	bl	800d9c0 <SX1276ReadBuffer>
                    if( SX1276.Settings.LoRa.RxContinuous == false )
 800ea5a:	0023      	movs	r3, r4
 800ea5c:	3356      	adds	r3, #86	@ 0x56
 800ea5e:	781b      	ldrb	r3, [r3, #0]
 800ea60:	2b00      	cmp	r3, #0
 800ea62:	d100      	bne.n	800ea66 <SX1276OnDio0Irq+0x1c6>
                        SX1276.Settings.State = RF_IDLE;
 800ea64:	7123      	strb	r3, [r4, #4]
                    TimerStop( &RxTimeoutTimer );
 800ea66:	1d28      	adds	r0, r5, #4
 800ea68:	f000 fe5c 	bl	800f724 <UTIL_TIMER_Stop>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 800ea6c:	682b      	ldr	r3, [r5, #0]
 800ea6e:	2b00      	cmp	r3, #0
 800ea70:	d100      	bne.n	800ea74 <SX1276OnDio0Irq+0x1d4>
 800ea72:	e721      	b.n	800e8b8 <SX1276OnDio0Irq+0x18>
 800ea74:	689d      	ldr	r5, [r3, #8]
 800ea76:	2d00      	cmp	r5, #0
 800ea78:	d100      	bne.n	800ea7c <SX1276OnDio0Irq+0x1dc>
 800ea7a:	e71d      	b.n	800e8b8 <SX1276OnDio0Irq+0x18>
                        RadioEvents->RxDone( RxTxBuffer, SX1276.Settings.LoRaPacketHandler.Size, SX1276.Settings.LoRaPacketHandler.RssiValue, SX1276.Settings.LoRaPacketHandler.SnrValue );
 800ea7c:	0023      	movs	r3, r4
 800ea7e:	0022      	movs	r2, r4
 800ea80:	3360      	adds	r3, #96	@ 0x60
 800ea82:	781b      	ldrb	r3, [r3, #0]
 800ea84:	3464      	adds	r4, #100	@ 0x64
 800ea86:	3262      	adds	r2, #98	@ 0x62
 800ea88:	2100      	movs	r1, #0
 800ea8a:	5e52      	ldrsh	r2, [r2, r1]
 800ea8c:	0030      	movs	r0, r6
 800ea8e:	7821      	ldrb	r1, [r4, #0]
 800ea90:	b25b      	sxtb	r3, r3
 800ea92:	47a8      	blx	r5
 800ea94:	e710      	b.n	800e8b8 <SX1276OnDio0Irq+0x18>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 ) +
 800ea96:	3aa4      	subs	r2, #164	@ 0xa4
 800ea98:	1882      	adds	r2, r0, r2
 800ea9a:	189b      	adds	r3, r3, r2
 800ea9c:	b218      	sxth	r0, r3
 800ea9e:	e7c6      	b.n	800ea2e <SX1276OnDio0Irq+0x18e>
                        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 800eaa0:	68a2      	ldr	r2, [r4, #8]
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 );
 800eaa2:	b29b      	uxth	r3, r3
                        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 800eaa4:	428a      	cmp	r2, r1
 800eaa6:	d903      	bls.n	800eab0 <SX1276OnDio0Irq+0x210>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 );
 800eaa8:	389d      	subs	r0, #157	@ 0x9d
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 );
 800eaaa:	1818      	adds	r0, r3, r0
 800eaac:	b200      	sxth	r0, r0
 800eaae:	e7be      	b.n	800ea2e <SX1276OnDio0Irq+0x18e>
 800eab0:	38a4      	subs	r0, #164	@ 0xa4
 800eab2:	e7fa      	b.n	800eaaa <SX1276OnDio0Irq+0x20a>
            TimerStop( &TxTimeoutTimer );
 800eab4:	480d      	ldr	r0, [pc, #52]	@ (800eaec <SX1276OnDio0Irq+0x24c>)
 800eab6:	4d0a      	ldr	r5, [pc, #40]	@ (800eae0 <SX1276OnDio0Irq+0x240>)
 800eab8:	f000 fe34 	bl	800f724 <UTIL_TIMER_Stop>
            switch( SX1276.Settings.Modem )
 800eabc:	7963      	ldrb	r3, [r4, #5]
 800eabe:	2b01      	cmp	r3, #1
 800eac0:	d103      	bne.n	800eaca <SX1276OnDio0Irq+0x22a>
                SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_TXDONE );
 800eac2:	2108      	movs	r1, #8
 800eac4:	2012      	movs	r0, #18
 800eac6:	f7fe ff48 	bl	800d95a <SX1276Write>
                SX1276.Settings.State = RF_IDLE;
 800eaca:	2300      	movs	r3, #0
 800eacc:	7123      	strb	r3, [r4, #4]
                if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 800eace:	682b      	ldr	r3, [r5, #0]
 800ead0:	2b00      	cmp	r3, #0
 800ead2:	d100      	bne.n	800ead6 <SX1276OnDio0Irq+0x236>
 800ead4:	e6f0      	b.n	800e8b8 <SX1276OnDio0Irq+0x18>
 800ead6:	681b      	ldr	r3, [r3, #0]
 800ead8:	e712      	b.n	800e900 <SX1276OnDio0Irq+0x60>
 800eada:	46c0      	nop			@ (mov r8, r8)
 800eadc:	20001368 	.word	0x20001368
 800eae0:	200013e8 	.word	0x200013e8
 800eae4:	2000141c 	.word	0x2000141c
 800eae8:	1f4add40 	.word	0x1f4add40
 800eaec:	20001404 	.word	0x20001404

0800eaf0 <SX1276Send>:
{
 800eaf0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800eaf2:	466b      	mov	r3, sp
    switch( SX1276.Settings.Modem )
 800eaf4:	4c5f      	ldr	r4, [pc, #380]	@ (800ec74 <SX1276Send+0x184>)
{
 800eaf6:	71d9      	strb	r1, [r3, #7]
    switch( SX1276.Settings.Modem )
 800eaf8:	7965      	ldrb	r5, [r4, #5]
{
 800eafa:	1ddf      	adds	r7, r3, #7
 800eafc:	0006      	movs	r6, r0
    switch( SX1276.Settings.Modem )
 800eafe:	2d00      	cmp	r5, #0
 800eb00:	d01c      	beq.n	800eb3c <SX1276Send+0x4c>
 800eb02:	2d01      	cmp	r5, #1
 800eb04:	d041      	beq.n	800eb8a <SX1276Send+0x9a>
 800eb06:	2600      	movs	r6, #0
    TimerStop( &RxTimeoutTimer );
 800eb08:	4d5b      	ldr	r5, [pc, #364]	@ (800ec78 <SX1276Send+0x188>)
 800eb0a:	485c      	ldr	r0, [pc, #368]	@ (800ec7c <SX1276Send+0x18c>)
 800eb0c:	f000 fe0a 	bl	800f724 <UTIL_TIMER_Stop>
    TimerSetValue( &TxTimeoutTimer, timeout );
 800eb10:	0028      	movs	r0, r5
 800eb12:	0031      	movs	r1, r6
 800eb14:	301c      	adds	r0, #28
 800eb16:	f000 fe97 	bl	800f848 <UTIL_TIMER_SetPeriod>
    switch( SX1276.Settings.Modem )
 800eb1a:	7963      	ldrb	r3, [r4, #5]
 800eb1c:	2b00      	cmp	r3, #0
 800eb1e:	d100      	bne.n	800eb22 <SX1276Send+0x32>
 800eb20:	e072      	b.n	800ec08 <SX1276Send+0x118>
 800eb22:	2b01      	cmp	r3, #1
 800eb24:	d100      	bne.n	800eb28 <SX1276Send+0x38>
 800eb26:	e088      	b.n	800ec3a <SX1276Send+0x14a>
    TimerStart( &TxTimeoutTimer );
 800eb28:	0028      	movs	r0, r5
    SX1276.Settings.State = RF_TX_RUNNING;
 800eb2a:	2302      	movs	r3, #2
    TimerStart( &TxTimeoutTimer );
 800eb2c:	301c      	adds	r0, #28
    SX1276.Settings.State = RF_TX_RUNNING;
 800eb2e:	7123      	strb	r3, [r4, #4]
    TimerStart( &TxTimeoutTimer );
 800eb30:	f000 fe4c 	bl	800f7cc <UTIL_TIMER_Start>
    if( opMode == RF_OPMODE_SLEEP )
 800eb34:	2003      	movs	r0, #3
 800eb36:	f7fe fffd 	bl	800db34 <SX1276SetOpMode.part.0>
}
 800eb3a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 800eb3c:	87a5      	strh	r5, [r4, #60]	@ 0x3c
            SX1276.Settings.FskPacketHandler.Size = size;
 800eb3e:	783d      	ldrb	r5, [r7, #0]
            if( SX1276.Settings.Fsk.FixLen == false )
 800eb40:	1ce3      	adds	r3, r4, #3
            SX1276.Settings.FskPacketHandler.Size = size;
 800eb42:	8765      	strh	r5, [r4, #58]	@ 0x3a
            if( SX1276.Settings.Fsk.FixLen == false )
 800eb44:	7fd8      	ldrb	r0, [r3, #31]
 800eb46:	2800      	cmp	r0, #0
 800eb48:	d11a      	bne.n	800eb80 <SX1276Send+0x90>
    SX1276WriteBuffer( 0, buffer, size );
 800eb4a:	2201      	movs	r2, #1
 800eb4c:	0039      	movs	r1, r7
 800eb4e:	f7fe feec 	bl	800d92a <SX1276WriteBuffer>
            if( ( size > 0 ) && ( size <= 64 ) )
 800eb52:	1e6b      	subs	r3, r5, #1
 800eb54:	2b3f      	cmp	r3, #63	@ 0x3f
 800eb56:	d905      	bls.n	800eb64 <SX1276Send+0x74>
                RADIO_MEMCPY8( RxTxBuffer, buffer, size );
 800eb58:	002a      	movs	r2, r5
 800eb5a:	0031      	movs	r1, r6
 800eb5c:	4848      	ldr	r0, [pc, #288]	@ (800ec80 <SX1276Send+0x190>)
 800eb5e:	f000 faed 	bl	800f13c <UTIL_MEM_cpy_8>
 800eb62:	2520      	movs	r5, #32
                SX1276.Settings.FskPacketHandler.ChunkSize = size;
 800eb64:	0027      	movs	r7, r4
    SX1276WriteBuffer( 0, buffer, size );
 800eb66:	002a      	movs	r2, r5
 800eb68:	0031      	movs	r1, r6
                SX1276.Settings.FskPacketHandler.ChunkSize = size;
 800eb6a:	373f      	adds	r7, #63	@ 0x3f
    SX1276WriteBuffer( 0, buffer, size );
 800eb6c:	2000      	movs	r0, #0
                SX1276.Settings.FskPacketHandler.ChunkSize = size;
 800eb6e:	703d      	strb	r5, [r7, #0]
    SX1276WriteBuffer( 0, buffer, size );
 800eb70:	f7fe fedb 	bl	800d92a <SX1276WriteBuffer>
            SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
 800eb74:	783b      	ldrb	r3, [r7, #0]
 800eb76:	8fa2      	ldrh	r2, [r4, #60]	@ 0x3c
            txTimeout = SX1276.Settings.Fsk.TxTimeout;
 800eb78:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
            SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
 800eb7a:	189b      	adds	r3, r3, r2
 800eb7c:	87a3      	strh	r3, [r4, #60]	@ 0x3c
        break;
 800eb7e:	e7c3      	b.n	800eb08 <SX1276Send+0x18>
                SX1276Write( REG_PAYLOADLENGTH, size );
 800eb80:	0029      	movs	r1, r5
 800eb82:	2032      	movs	r0, #50	@ 0x32
 800eb84:	f7fe fee9 	bl	800d95a <SX1276Write>
 800eb88:	e7e3      	b.n	800eb52 <SX1276Send+0x62>
            if( SX1276.Settings.LoRa.IqInverted == true )
 800eb8a:	0023      	movs	r3, r4
 800eb8c:	3355      	adds	r3, #85	@ 0x55
 800eb8e:	781b      	ldrb	r3, [r3, #0]
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_ON ) );
 800eb90:	2033      	movs	r0, #51	@ 0x33
            if( SX1276.Settings.LoRa.IqInverted == true )
 800eb92:	2b00      	cmp	r3, #0
 800eb94:	d02d      	beq.n	800ebf2 <SX1276Send+0x102>
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_ON ) );
 800eb96:	f7fe ff2b 	bl	800d9f0 <SX1276Read>
 800eb9a:	2341      	movs	r3, #65	@ 0x41
 800eb9c:	4398      	bics	r0, r3
 800eb9e:	b2c1      	uxtb	r1, r0
 800eba0:	2033      	movs	r0, #51	@ 0x33
 800eba2:	f7fe feda 	bl	800d95a <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_ON );
 800eba6:	2119      	movs	r1, #25
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
 800eba8:	203b      	movs	r0, #59	@ 0x3b
 800ebaa:	f7fe fed6 	bl	800d95a <SX1276Write>
            SX1276.Settings.LoRaPacketHandler.Size = size;
 800ebae:	0023      	movs	r3, r4
 800ebb0:	783d      	ldrb	r5, [r7, #0]
 800ebb2:	3364      	adds	r3, #100	@ 0x64
            SX1276Write( REG_LR_PAYLOADLENGTH, size );
 800ebb4:	0029      	movs	r1, r5
 800ebb6:	2022      	movs	r0, #34	@ 0x22
            SX1276.Settings.LoRaPacketHandler.Size = size;
 800ebb8:	701d      	strb	r5, [r3, #0]
            SX1276Write( REG_LR_PAYLOADLENGTH, size );
 800ebba:	f7fe fece 	bl	800d95a <SX1276Write>
            SX1276Write( REG_LR_FIFOTXBASEADDR, 0 );
 800ebbe:	2100      	movs	r1, #0
 800ebc0:	200e      	movs	r0, #14
 800ebc2:	f7fe feca 	bl	800d95a <SX1276Write>
            SX1276Write( REG_LR_FIFOADDRPTR, 0 );
 800ebc6:	2100      	movs	r1, #0
 800ebc8:	200d      	movs	r0, #13
 800ebca:	f7fe fec6 	bl	800d95a <SX1276Write>
            if( ( SX1276Read( REG_OPMODE ) & ~RF_OPMODE_MASK ) == RF_OPMODE_SLEEP )
 800ebce:	2001      	movs	r0, #1
 800ebd0:	f7fe ff0e 	bl	800d9f0 <SX1276Read>
 800ebd4:	23f8      	movs	r3, #248	@ 0xf8
 800ebd6:	4398      	bics	r0, r3
 800ebd8:	d104      	bne.n	800ebe4 <SX1276Send+0xf4>
                SX1276SetStby( );
 800ebda:	f7fe ffd7 	bl	800db8c <SX1276SetStby>
                RADIO_DELAY_MS( 1 );
 800ebde:	2001      	movs	r0, #1
 800ebe0:	f7f4 ff51 	bl	8003a86 <HAL_Delay>
    SX1276WriteBuffer( 0, buffer, size );
 800ebe4:	0031      	movs	r1, r6
 800ebe6:	002a      	movs	r2, r5
 800ebe8:	2000      	movs	r0, #0
 800ebea:	f7fe fe9e 	bl	800d92a <SX1276WriteBuffer>
            txTimeout = SX1276.Settings.LoRa.TxTimeout;
 800ebee:	6da6      	ldr	r6, [r4, #88]	@ 0x58
        break;
 800ebf0:	e78a      	b.n	800eb08 <SX1276Send+0x18>
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_OFF ) );
 800ebf2:	f7fe fefd 	bl	800d9f0 <SX1276Read>
 800ebf6:	2341      	movs	r3, #65	@ 0x41
 800ebf8:	4398      	bics	r0, r3
 800ebfa:	4305      	orrs	r5, r0
 800ebfc:	b2e9      	uxtb	r1, r5
 800ebfe:	2033      	movs	r0, #51	@ 0x33
 800ec00:	f7fe feab 	bl	800d95a <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
 800ec04:	211d      	movs	r1, #29
 800ec06:	e7cf      	b.n	800eba8 <SX1276Send+0xb8>
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 800ec08:	2040      	movs	r0, #64	@ 0x40
 800ec0a:	f7fe fef1 	bl	800d9f0 <SX1276Read>
 800ec0e:	2103      	movs	r1, #3
 800ec10:	4001      	ands	r1, r0
 800ec12:	2040      	movs	r0, #64	@ 0x40
 800ec14:	f7fe fea1 	bl	800d95a <SX1276Write>
            SX1276Write( REG_DIOMAPPING2, ( SX1276Read( REG_DIOMAPPING2 ) & RF_DIOMAPPING2_DIO4_MASK &
 800ec18:	2041      	movs	r0, #65	@ 0x41
 800ec1a:	f7fe fee9 	bl	800d9f0 <SX1276Read>
 800ec1e:	213e      	movs	r1, #62	@ 0x3e
 800ec20:	4001      	ands	r1, r0
 800ec22:	2041      	movs	r0, #65	@ 0x41
 800ec24:	f7fe fe99 	bl	800d95a <SX1276Write>
            SX1276.Settings.FskPacketHandler.FifoThresh = SX1276Read( REG_FIFOTHRESH ) & 0x3F;
 800ec28:	2035      	movs	r0, #53	@ 0x35
 800ec2a:	f7fe fee1 	bl	800d9f0 <SX1276Read>
 800ec2e:	233f      	movs	r3, #63	@ 0x3f
 800ec30:	4018      	ands	r0, r3
 800ec32:	0023      	movs	r3, r4
 800ec34:	333e      	adds	r3, #62	@ 0x3e
 800ec36:	7018      	strb	r0, [r3, #0]
        break;
 800ec38:	e776      	b.n	800eb28 <SX1276Send+0x38>
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 800ec3a:	0023      	movs	r3, r4
 800ec3c:	3353      	adds	r3, #83	@ 0x53
 800ec3e:	781b      	ldrb	r3, [r3, #0]
 800ec40:	2b00      	cmp	r3, #0
 800ec42:	d00e      	beq.n	800ec62 <SX1276Send+0x172>
                SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 800ec44:	21f5      	movs	r1, #245	@ 0xf5
 800ec46:	2011      	movs	r0, #17
 800ec48:	f7fe fe87 	bl	800d95a <SX1276Write>
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK & RFLR_DIOMAPPING1_DIO2_MASK ) | RFLR_DIOMAPPING1_DIO0_01 | RFLR_DIOMAPPING1_DIO2_00 );
 800ec4c:	2040      	movs	r0, #64	@ 0x40
 800ec4e:	f7fe fecf 	bl	800d9f0 <SX1276Read>
 800ec52:	2333      	movs	r3, #51	@ 0x33
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_01 );
 800ec54:	0001      	movs	r1, r0
 800ec56:	2040      	movs	r0, #64	@ 0x40
 800ec58:	4019      	ands	r1, r3
 800ec5a:	4301      	orrs	r1, r0
 800ec5c:	f7fe fe7d 	bl	800d95a <SX1276Write>
 800ec60:	e762      	b.n	800eb28 <SX1276Send+0x38>
                SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 800ec62:	21f7      	movs	r1, #247	@ 0xf7
 800ec64:	2011      	movs	r0, #17
 800ec66:	f7fe fe78 	bl	800d95a <SX1276Write>
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_01 );
 800ec6a:	2040      	movs	r0, #64	@ 0x40
 800ec6c:	f7fe fec0 	bl	800d9f0 <SX1276Read>
 800ec70:	233f      	movs	r3, #63	@ 0x3f
 800ec72:	e7ef      	b.n	800ec54 <SX1276Send+0x164>
 800ec74:	20001368 	.word	0x20001368
 800ec78:	200013e8 	.word	0x200013e8
 800ec7c:	200013ec 	.word	0x200013ec
 800ec80:	2000141c 	.word	0x2000141c

0800ec84 <SX1276OnDio1Irq>:
{
 800ec84:	b570      	push	{r4, r5, r6, lr}
    switch( SX1276.Settings.State )
 800ec86:	4c39      	ldr	r4, [pc, #228]	@ (800ed6c <SX1276OnDio1Irq+0xe8>)
 800ec88:	7925      	ldrb	r5, [r4, #4]
 800ec8a:	2d01      	cmp	r5, #1
 800ec8c:	d002      	beq.n	800ec94 <SX1276OnDio1Irq+0x10>
 800ec8e:	2d02      	cmp	r5, #2
 800ec90:	d050      	beq.n	800ed34 <SX1276OnDio1Irq+0xb0>
}
 800ec92:	bd70      	pop	{r4, r5, r6, pc}
            switch( SX1276.Settings.Modem )
 800ec94:	7963      	ldrb	r3, [r4, #5]
 800ec96:	2b00      	cmp	r3, #0
 800ec98:	d017      	beq.n	800ecca <SX1276OnDio1Irq+0x46>
 800ec9a:	2b01      	cmp	r3, #1
 800ec9c:	d1f9      	bne.n	800ec92 <SX1276OnDio1Irq+0xe>
                if( Sx_Board_GetDio1PinState( ) == 0 )
 800ec9e:	f7f5 fb5d 	bl	800435c <CMWX1ZZABZ0XX_RADIO_GetDio1PinState>
 800eca2:	2800      	cmp	r0, #0
 800eca4:	d0f5      	beq.n	800ec92 <SX1276OnDio1Irq+0xe>
                TimerStop( &RxTimeoutTimer );
 800eca6:	4832      	ldr	r0, [pc, #200]	@ (800ed70 <SX1276OnDio1Irq+0xec>)
 800eca8:	4d32      	ldr	r5, [pc, #200]	@ (800ed74 <SX1276OnDio1Irq+0xf0>)
 800ecaa:	f000 fd3b 	bl	800f724 <UTIL_TIMER_Stop>
                SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_RXTIMEOUT );
 800ecae:	2180      	movs	r1, #128	@ 0x80
 800ecb0:	2012      	movs	r0, #18
 800ecb2:	f7fe fe52 	bl	800d95a <SX1276Write>
                SX1276.Settings.State = RF_IDLE;
 800ecb6:	2300      	movs	r3, #0
 800ecb8:	7123      	strb	r3, [r4, #4]
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 800ecba:	682b      	ldr	r3, [r5, #0]
 800ecbc:	2b00      	cmp	r3, #0
 800ecbe:	d0e8      	beq.n	800ec92 <SX1276OnDio1Irq+0xe>
 800ecc0:	68db      	ldr	r3, [r3, #12]
 800ecc2:	2b00      	cmp	r3, #0
 800ecc4:	d0e5      	beq.n	800ec92 <SX1276OnDio1Irq+0xe>
                    RadioEvents->RxTimeout( );
 800ecc6:	4798      	blx	r3
 800ecc8:	e7e3      	b.n	800ec92 <SX1276OnDio1Irq+0xe>
                if( Sx_Board_GetDio1PinState( ) == 0 )
 800ecca:	f7f5 fb47 	bl	800435c <CMWX1ZZABZ0XX_RADIO_GetDio1PinState>
 800ecce:	2800      	cmp	r0, #0
 800ecd0:	d0df      	beq.n	800ec92 <SX1276OnDio1Irq+0xe>
                TimerStop( &RxTimeoutSyncWord );
 800ecd2:	0020      	movs	r0, r4
 800ecd4:	3068      	adds	r0, #104	@ 0x68
 800ecd6:	f000 fd25 	bl	800f724 <UTIL_TIMER_Stop>
                if( ( SX1276.Settings.FskPacketHandler.Size == 0 ) && ( SX1276.Settings.FskPacketHandler.NbBytes == 0 ) )
 800ecda:	8f63      	ldrh	r3, [r4, #58]	@ 0x3a
 800ecdc:	8fa2      	ldrh	r2, [r4, #60]	@ 0x3c
 800ecde:	4313      	orrs	r3, r2
 800ece0:	d108      	bne.n	800ecf4 <SX1276OnDio1Irq+0x70>
                    if( SX1276.Settings.Fsk.FixLen == false )
 800ece2:	1ce3      	adds	r3, r4, #3
 800ece4:	7fd8      	ldrb	r0, [r3, #31]
 800ece6:	2800      	cmp	r0, #0
 800ece8:	d119      	bne.n	800ed1e <SX1276OnDio1Irq+0x9a>
    SX1276ReadBuffer( 0, buffer, size );
 800ecea:	0021      	movs	r1, r4
 800ecec:	002a      	movs	r2, r5
 800ecee:	313a      	adds	r1, #58	@ 0x3a
 800ecf0:	f7fe fe66 	bl	800d9c0 <SX1276ReadBuffer>
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) >= SX1276.Settings.FskPacketHandler.FifoThresh )
 800ecf4:	0025      	movs	r5, r4
 800ecf6:	353e      	adds	r5, #62	@ 0x3e
 800ecf8:	8fa0      	ldrh	r0, [r4, #60]	@ 0x3c
 800ecfa:	8f63      	ldrh	r3, [r4, #58]	@ 0x3a
                    SX1276ReadFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.FifoThresh - 1 );
 800ecfc:	491e      	ldr	r1, [pc, #120]	@ (800ed78 <SX1276OnDio1Irq+0xf4>)
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) >= SX1276.Settings.FskPacketHandler.FifoThresh )
 800ecfe:	782a      	ldrb	r2, [r5, #0]
                    SX1276ReadFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.FifoThresh - 1 );
 800ed00:	1841      	adds	r1, r0, r1
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) >= SX1276.Settings.FskPacketHandler.FifoThresh )
 800ed02:	1a1b      	subs	r3, r3, r0
 800ed04:	4293      	cmp	r3, r2
 800ed06:	db0f      	blt.n	800ed28 <SX1276OnDio1Irq+0xa4>
                    SX1276ReadFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.FifoThresh - 1 );
 800ed08:	3a01      	subs	r2, #1
    SX1276ReadBuffer( 0, buffer, size );
 800ed0a:	b2d2      	uxtb	r2, r2
 800ed0c:	2000      	movs	r0, #0
 800ed0e:	f7fe fe57 	bl	800d9c0 <SX1276ReadBuffer>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.FifoThresh - 1;
 800ed12:	8fa2      	ldrh	r2, [r4, #60]	@ 0x3c
 800ed14:	782b      	ldrb	r3, [r5, #0]
 800ed16:	3a01      	subs	r2, #1
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
 800ed18:	189b      	adds	r3, r3, r2
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes;
 800ed1a:	87a3      	strh	r3, [r4, #60]	@ 0x3c
}
 800ed1c:	e7b9      	b.n	800ec92 <SX1276OnDio1Irq+0xe>
                        SX1276.Settings.FskPacketHandler.Size = SX1276Read( REG_PAYLOADLENGTH );
 800ed1e:	2032      	movs	r0, #50	@ 0x32
 800ed20:	f7fe fe66 	bl	800d9f0 <SX1276Read>
 800ed24:	8760      	strh	r0, [r4, #58]	@ 0x3a
 800ed26:	e7e5      	b.n	800ecf4 <SX1276OnDio1Irq+0x70>
    SX1276ReadBuffer( 0, buffer, size );
 800ed28:	2000      	movs	r0, #0
 800ed2a:	b2da      	uxtb	r2, r3
 800ed2c:	f7fe fe48 	bl	800d9c0 <SX1276ReadBuffer>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes;
 800ed30:	8f63      	ldrh	r3, [r4, #58]	@ 0x3a
 800ed32:	e7f2      	b.n	800ed1a <SX1276OnDio1Irq+0x96>
            switch( SX1276.Settings.Modem )
 800ed34:	7965      	ldrb	r5, [r4, #5]
 800ed36:	2d00      	cmp	r5, #0
 800ed38:	d1ab      	bne.n	800ec92 <SX1276OnDio1Irq+0xe>
                if( Sx_Board_GetDio1PinState( ) == 1 )
 800ed3a:	f7f5 fb0f 	bl	800435c <CMWX1ZZABZ0XX_RADIO_GetDio1PinState>
 800ed3e:	2801      	cmp	r0, #1
 800ed40:	d0a7      	beq.n	800ec92 <SX1276OnDio1Irq+0xe>
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) > SX1276.Settings.FskPacketHandler.ChunkSize )
 800ed42:	0026      	movs	r6, r4
 800ed44:	363f      	adds	r6, #63	@ 0x3f
 800ed46:	8fa0      	ldrh	r0, [r4, #60]	@ 0x3c
 800ed48:	8f63      	ldrh	r3, [r4, #58]	@ 0x3a
                    SX1276WriteFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.ChunkSize );
 800ed4a:	490b      	ldr	r1, [pc, #44]	@ (800ed78 <SX1276OnDio1Irq+0xf4>)
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) > SX1276.Settings.FskPacketHandler.ChunkSize )
 800ed4c:	7832      	ldrb	r2, [r6, #0]
                    SX1276WriteFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.ChunkSize );
 800ed4e:	1841      	adds	r1, r0, r1
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) > SX1276.Settings.FskPacketHandler.ChunkSize )
 800ed50:	1a1b      	subs	r3, r3, r0
 800ed52:	4293      	cmp	r3, r2
 800ed54:	dd05      	ble.n	800ed62 <SX1276OnDio1Irq+0xde>
    SX1276WriteBuffer( 0, buffer, size );
 800ed56:	0028      	movs	r0, r5
 800ed58:	f7fe fde7 	bl	800d92a <SX1276WriteBuffer>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
 800ed5c:	7833      	ldrb	r3, [r6, #0]
 800ed5e:	8fa2      	ldrh	r2, [r4, #60]	@ 0x3c
 800ed60:	e7da      	b.n	800ed18 <SX1276OnDio1Irq+0x94>
    SX1276WriteBuffer( 0, buffer, size );
 800ed62:	0028      	movs	r0, r5
 800ed64:	b2da      	uxtb	r2, r3
 800ed66:	f7fe fde0 	bl	800d92a <SX1276WriteBuffer>
 800ed6a:	e7e1      	b.n	800ed30 <SX1276OnDio1Irq+0xac>
 800ed6c:	20001368 	.word	0x20001368
 800ed70:	200013ec 	.word	0x200013ec
 800ed74:	200013e8 	.word	0x200013e8
 800ed78:	2000141c 	.word	0x2000141c

0800ed7c <TRACE_AllocateBufer>:
 * @param  Size to allocate within fifo
 * @param  Pos position within the fifo
 * @retval write position inside the buffer is -1 no space available.
 */
static int16_t TRACE_AllocateBufer(uint16_t Size, uint16_t *Pos)
{
 800ed7c:	b570      	push	{r4, r5, r6, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ed7e:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800ed82:	b672      	cpsid	i
  uint16_t freesize;
  int16_t ret = -1;

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();

  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 800ed84:	4b16      	ldr	r3, [pc, #88]	@ (800ede0 <TRACE_AllocateBufer+0x64>)
 800ed86:	8a5d      	ldrh	r5, [r3, #18]
 800ed88:	8a1a      	ldrh	r2, [r3, #16]
 800ed8a:	4295      	cmp	r5, r2
 800ed8c:	d114      	bne.n	800edb8 <TRACE_AllocateBufer+0x3c>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 800ed8e:	2280      	movs	r2, #128	@ 0x80
 800ed90:	00d2      	lsls	r2, r2, #3
 800ed92:	1b52      	subs	r2, r2, r5
    if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size))
 800ed94:	b292      	uxth	r2, r2
 800ed96:	4290      	cmp	r0, r2
 800ed98:	d306      	bcc.n	800eda8 <TRACE_AllocateBufer+0x2c>
 800ed9a:	4285      	cmp	r5, r0
 800ed9c:	d916      	bls.n	800edcc <TRACE_AllocateBufer+0x50>
    if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
    {
      freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
      if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size)) 
      {
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 800ed9e:	2201      	movs	r2, #1
 800eda0:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
        ADV_TRACE_Ctx.TraceWrPtr = 0;
 800eda2:	2200      	movs	r2, #0
        ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 800eda4:	801d      	strh	r5, [r3, #0]
        ADV_TRACE_Ctx.TraceWrPtr = 0;
 800eda6:	825a      	strh	r2, [r3, #18]
#endif
  }

  if(freesize > Size)
  {
    *Pos = ADV_TRACE_Ctx.TraceWrPtr;
 800eda8:	8a5a      	ldrh	r2, [r3, #18]
 800edaa:	800a      	strh	r2, [r1, #0]
    ADV_TRACE_Ctx.TraceWrPtr = (ADV_TRACE_Ctx.TraceWrPtr + Size) % UTIL_ADV_TRACE_FIFO_SIZE;
 800edac:	1812      	adds	r2, r2, r0
 800edae:	0592      	lsls	r2, r2, #22
 800edb0:	0d92      	lsrs	r2, r2, #22
    ret = 0;
 800edb2:	2000      	movs	r0, #0
    ADV_TRACE_Ctx.TraceWrPtr = (ADV_TRACE_Ctx.TraceWrPtr + Size) % UTIL_ADV_TRACE_FIFO_SIZE;
 800edb4:	825a      	strh	r2, [r3, #18]
    ret = 0;
 800edb6:	e00b      	b.n	800edd0 <TRACE_AllocateBufer+0x54>
    if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 800edb8:	4295      	cmp	r5, r2
 800edba:	d90c      	bls.n	800edd6 <TRACE_AllocateBufer+0x5a>
      freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 800edbc:	2680      	movs	r6, #128	@ 0x80
 800edbe:	00f6      	lsls	r6, r6, #3
 800edc0:	1b76      	subs	r6, r6, r5
      if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size)) 
 800edc2:	b2b6      	uxth	r6, r6
 800edc4:	4286      	cmp	r6, r0
 800edc6:	d8ef      	bhi.n	800eda8 <TRACE_AllocateBufer+0x2c>
 800edc8:	4282      	cmp	r2, r0
 800edca:	d8e8      	bhi.n	800ed9e <TRACE_AllocateBufer+0x22>
  int16_t ret = -1;
 800edcc:	2001      	movs	r0, #1
 800edce:	4240      	negs	r0, r0
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800edd0:	f384 8810 	msr	PRIMASK, r4
  }
#endif

  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  return ret;
}
 800edd4:	bd70      	pop	{r4, r5, r6, pc}
      freesize = (uint16_t)(ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr);
 800edd6:	1b52      	subs	r2, r2, r5
  if(freesize > Size)
 800edd8:	b292      	uxth	r2, r2
 800edda:	4282      	cmp	r2, r0
 800eddc:	d8e4      	bhi.n	800eda8 <TRACE_AllocateBufer+0x2c>
 800edde:	e7f5      	b.n	800edcc <TRACE_AllocateBufer+0x50>
 800ede0:	2000151c 	.word	0x2000151c

0800ede4 <TRACE_Lock>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ede4:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800ede8:	b672      	cpsid	i
 * @retval None.
 */
static void TRACE_Lock(void)
{
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
  ADV_TRACE_Ctx.TraceLock++;
 800edea:	4a03      	ldr	r2, [pc, #12]	@ (800edf8 <TRACE_Lock+0x14>)
 800edec:	8ad3      	ldrh	r3, [r2, #22]
 800edee:	3301      	adds	r3, #1
 800edf0:	82d3      	strh	r3, [r2, #22]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800edf2:	f381 8810 	msr	PRIMASK, r1
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 800edf6:	4770      	bx	lr
 800edf8:	2000151c 	.word	0x2000151c

0800edfc <TRACE_UnLock>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800edfc:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800ee00:	b672      	cpsid	i
 * @retval None.
 */
static void TRACE_UnLock(void)
{
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
  ADV_TRACE_Ctx.TraceLock--;
 800ee02:	4a03      	ldr	r2, [pc, #12]	@ (800ee10 <TRACE_UnLock+0x14>)
 800ee04:	8ad3      	ldrh	r3, [r2, #22]
 800ee06:	3b01      	subs	r3, #1
 800ee08:	82d3      	strh	r3, [r2, #22]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ee0a:	f381 8810 	msr	PRIMASK, r1
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 800ee0e:	4770      	bx	lr
 800ee10:	2000151c 	.word	0x2000151c

0800ee14 <UTIL_ADV_TRACE_Init>:
{
 800ee14:	b510      	push	{r4, lr}
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Ctx, 0x0, sizeof(ADV_TRACE_Context));
 800ee16:	2218      	movs	r2, #24
 800ee18:	2100      	movs	r1, #0
 800ee1a:	4807      	ldr	r0, [pc, #28]	@ (800ee38 <UTIL_ADV_TRACE_Init+0x24>)
 800ee1c:	f000 f997 	bl	800f14e <UTIL_MEM_set_8>
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Buffer, 0x0, sizeof(ADV_TRACE_Buffer));
 800ee20:	2280      	movs	r2, #128	@ 0x80
 800ee22:	2100      	movs	r1, #0
 800ee24:	4805      	ldr	r0, [pc, #20]	@ (800ee3c <UTIL_ADV_TRACE_Init+0x28>)
 800ee26:	00d2      	lsls	r2, r2, #3
 800ee28:	f000 f991 	bl	800f14e <UTIL_MEM_set_8>
  return UTIL_TraceDriver.Init(TRACE_TxCpltCallback);
 800ee2c:	4b04      	ldr	r3, [pc, #16]	@ (800ee40 <UTIL_ADV_TRACE_Init+0x2c>)
 800ee2e:	4805      	ldr	r0, [pc, #20]	@ (800ee44 <UTIL_ADV_TRACE_Init+0x30>)
 800ee30:	681b      	ldr	r3, [r3, #0]
 800ee32:	4798      	blx	r3
}
 800ee34:	bd10      	pop	{r4, pc}
 800ee36:	46c0      	nop			@ (mov r8, r8)
 800ee38:	2000151c 	.word	0x2000151c
 800ee3c:	20001734 	.word	0x20001734
 800ee40:	080103c4 	.word	0x080103c4
 800ee44:	0800efdd 	.word	0x0800efdd

0800ee48 <UTIL_ADV_TRACE_IsBufferEmpty>:
  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 800ee48:	4b03      	ldr	r3, [pc, #12]	@ (800ee58 <UTIL_ADV_TRACE_IsBufferEmpty+0x10>)
 800ee4a:	8a58      	ldrh	r0, [r3, #18]
 800ee4c:	8a1b      	ldrh	r3, [r3, #16]
 800ee4e:	1ac0      	subs	r0, r0, r3
 800ee50:	4243      	negs	r3, r0
 800ee52:	4158      	adcs	r0, r3
}
 800ee54:	b2c0      	uxtb	r0, r0
 800ee56:	4770      	bx	lr
 800ee58:	2000151c 	.word	0x2000151c

0800ee5c <UTIL_ADV_TRACE_StartRxProcess>:
{
 800ee5c:	b510      	push	{r4, lr}
  return UTIL_TraceDriver.StartRx(UserCallback);
 800ee5e:	4b02      	ldr	r3, [pc, #8]	@ (800ee68 <UTIL_ADV_TRACE_StartRxProcess+0xc>)
 800ee60:	689b      	ldr	r3, [r3, #8]
 800ee62:	4798      	blx	r3
}
 800ee64:	bd10      	pop	{r4, pc}
 800ee66:	46c0      	nop			@ (mov r8, r8)
 800ee68:	080103c4 	.word	0x080103c4

0800ee6c <UTIL_ADV_TRACE_RegisterTimeStampFunction>:
  ADV_TRACE_Ctx.timestamp_func = *cb;
 800ee6c:	4b01      	ldr	r3, [pc, #4]	@ (800ee74 <UTIL_ADV_TRACE_RegisterTimeStampFunction+0x8>)
 800ee6e:	6058      	str	r0, [r3, #4]
}
 800ee70:	4770      	bx	lr
 800ee72:	46c0      	nop			@ (mov r8, r8)
 800ee74:	2000151c 	.word	0x2000151c

0800ee78 <UTIL_ADV_TRACE_SetVerboseLevel>:
  ADV_TRACE_Ctx.CurrentVerboseLevel = Level;
 800ee78:	4b01      	ldr	r3, [pc, #4]	@ (800ee80 <UTIL_ADV_TRACE_SetVerboseLevel+0x8>)
 800ee7a:	7218      	strb	r0, [r3, #8]
}
 800ee7c:	4770      	bx	lr
 800ee7e:	46c0      	nop			@ (mov r8, r8)
 800ee80:	2000151c 	.word	0x2000151c

0800ee84 <UTIL_ADV_TRACE_GetVerboseLevel>:
  return ADV_TRACE_Ctx.CurrentVerboseLevel;
 800ee84:	4b01      	ldr	r3, [pc, #4]	@ (800ee8c <UTIL_ADV_TRACE_GetVerboseLevel+0x8>)
 800ee86:	7a18      	ldrb	r0, [r3, #8]
}
 800ee88:	4770      	bx	lr
 800ee8a:	46c0      	nop			@ (mov r8, r8)
 800ee8c:	2000151c 	.word	0x2000151c

0800ee90 <TRACE_Send>:
{
 800ee90:	b570      	push	{r4, r5, r6, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ee92:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800ee96:	b672      	cpsid	i
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static uint32_t TRACE_IsLocked(void)
{
  return (ADV_TRACE_Ctx.TraceLock == 0u? 0u: 1u);
 800ee98:	4c1b      	ldr	r4, [pc, #108]	@ (800ef08 <TRACE_Send+0x78>)
  if(TRACE_IsLocked() == 0u)
 800ee9a:	8ae6      	ldrh	r6, [r4, #22]
 800ee9c:	2e00      	cmp	r6, #0
 800ee9e:	d12f      	bne.n	800ef00 <TRACE_Send+0x70>
    TRACE_Lock();
 800eea0:	f7ff ffa0 	bl	800ede4 <TRACE_Lock>
    if(ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr)
 800eea4:	8a21      	ldrh	r1, [r4, #16]
 800eea6:	8a62      	ldrh	r2, [r4, #18]
 800eea8:	4291      	cmp	r1, r2
 800eeaa:	d027      	beq.n	800eefc <TRACE_Send+0x6c>
      if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 800eeac:	78a3      	ldrb	r3, [r4, #2]
 800eeae:	2b01      	cmp	r3, #1
 800eeb0:	d110      	bne.n	800eed4 <TRACE_Send+0x44>
        ADV_TRACE_Ctx.TraceSentSize = (uint16_t) (ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr);
 800eeb2:	8823      	ldrh	r3, [r4, #0]
        ADV_TRACE_Ctx.unchunk_enabled = 0;
 800eeb4:	8026      	strh	r6, [r4, #0]
        ADV_TRACE_Ctx.TraceSentSize = (uint16_t) (ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr);
 800eeb6:	1a5b      	subs	r3, r3, r1
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 800eeb8:	2102      	movs	r1, #2
        ADV_TRACE_Ctx.TraceSentSize = (uint16_t) (ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr);
 800eeba:	b29b      	uxth	r3, r3
 800eebc:	82a3      	strh	r3, [r4, #20]
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 800eebe:	70a1      	strb	r1, [r4, #2]
        if(0u == ADV_TRACE_Ctx.TraceSentSize)
 800eec0:	2b00      	cmp	r3, #0
 800eec2:	d109      	bne.n	800eed8 <TRACE_Send+0x48>
          ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 800eec4:	70a3      	strb	r3, [r4, #2]
          ADV_TRACE_Ctx.TraceRdPtr = 0;
 800eec6:	8223      	strh	r3, [r4, #16]
        if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 800eec8:	8a21      	ldrh	r1, [r4, #16]
 800eeca:	428a      	cmp	r2, r1
 800eecc:	d911      	bls.n	800eef2 <TRACE_Send+0x62>
          ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 800eece:	1a52      	subs	r2, r2, r1
 800eed0:	82a2      	strh	r2, [r4, #20]
 800eed2:	e001      	b.n	800eed8 <TRACE_Send+0x48>
      if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 800eed4:	2b00      	cmp	r3, #0
 800eed6:	d0f7      	beq.n	800eec8 <TRACE_Send+0x38>
      ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 800eed8:	8a26      	ldrh	r6, [r4, #16]
 800eeda:	4b0c      	ldr	r3, [pc, #48]	@ (800ef0c <TRACE_Send+0x7c>)
 800eedc:	18f6      	adds	r6, r6, r3
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800eede:	f385 8810 	msr	PRIMASK, r5
      UTIL_ADV_TRACE_PreSendHook();
 800eee2:	f7f4 fdbe 	bl	8003a62 <UTIL_ADV_TRACE_PreSendHook>
      ret = UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 800eee6:	4b0a      	ldr	r3, [pc, #40]	@ (800ef10 <TRACE_Send+0x80>)
 800eee8:	0030      	movs	r0, r6
 800eeea:	8aa1      	ldrh	r1, [r4, #20]
 800eeec:	68db      	ldr	r3, [r3, #12]
 800eeee:	4798      	blx	r3
}
 800eef0:	bd70      	pop	{r4, r5, r6, pc}
          ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 800eef2:	2380      	movs	r3, #128	@ 0x80
 800eef4:	00db      	lsls	r3, r3, #3
 800eef6:	1a5b      	subs	r3, r3, r1
 800eef8:	82a3      	strh	r3, [r4, #20]
 800eefa:	e7ed      	b.n	800eed8 <TRACE_Send+0x48>
      TRACE_UnLock();
 800eefc:	f7ff ff7e 	bl	800edfc <TRACE_UnLock>
 800ef00:	f385 8810 	msr	PRIMASK, r5
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;
 800ef04:	2000      	movs	r0, #0
 800ef06:	e7f3      	b.n	800eef0 <TRACE_Send+0x60>
 800ef08:	2000151c 	.word	0x2000151c
 800ef0c:	20001734 	.word	0x20001734
 800ef10:	080103c4 	.word	0x080103c4

0800ef14 <UTIL_ADV_TRACE_COND_FSend>:
{
 800ef14:	b408      	push	{r3}
 800ef16:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ef18:	b086      	sub	sp, #24
  uint16_t timestamp_size = 0u;
 800ef1a:	2300      	movs	r3, #0
 800ef1c:	466c      	mov	r4, sp
 800ef1e:	8023      	strh	r3, [r4, #0]
  if(!(ADV_TRACE_Ctx.CurrentVerboseLevel >= VerboseLevel))
 800ef20:	4b2b      	ldr	r3, [pc, #172]	@ (800efd0 <UTIL_ADV_TRACE_COND_FSend+0xbc>)
 800ef22:	7a1c      	ldrb	r4, [r3, #8]
 800ef24:	4284      	cmp	r4, r0
 800ef26:	d34f      	bcc.n	800efc8 <UTIL_ADV_TRACE_COND_FSend+0xb4>
  if((Region & ADV_TRACE_Ctx.RegionMask) != Region)
 800ef28:	68d8      	ldr	r0, [r3, #12]
 800ef2a:	4008      	ands	r0, r1
 800ef2c:	4288      	cmp	r0, r1
 800ef2e:	d14d      	bne.n	800efcc <UTIL_ADV_TRACE_COND_FSend+0xb8>
  if((ADV_TRACE_Ctx.timestamp_func != NULL) && (TimeStampState != 0u))
 800ef30:	685b      	ldr	r3, [r3, #4]
 800ef32:	2b00      	cmp	r3, #0
 800ef34:	d004      	beq.n	800ef40 <UTIL_ADV_TRACE_COND_FSend+0x2c>
 800ef36:	2a00      	cmp	r2, #0
 800ef38:	d002      	beq.n	800ef40 <UTIL_ADV_TRACE_COND_FSend+0x2c>
    ADV_TRACE_Ctx.timestamp_func(buf,&timestamp_size);
 800ef3a:	4669      	mov	r1, sp
 800ef3c:	a802      	add	r0, sp, #8
 800ef3e:	4798      	blx	r3
  buff_size =(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)sztmp,UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 800ef40:	2180      	movs	r1, #128	@ 0x80
  va_start( vaArgs, strFormat);
 800ef42:	ab0c      	add	r3, sp, #48	@ 0x30
  buff_size =(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)sztmp,UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 800ef44:	0089      	lsls	r1, r1, #2
 800ef46:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800ef48:	4822      	ldr	r0, [pc, #136]	@ (800efd4 <UTIL_ADV_TRACE_COND_FSend+0xc0>)
  va_start( vaArgs, strFormat);
 800ef4a:	9301      	str	r3, [sp, #4]
  buff_size =(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)sztmp,UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 800ef4c:	f000 fe08 	bl	800fb60 <tiny_vsnprintf_like>
 800ef50:	0005      	movs	r5, r0
  TRACE_Lock();
 800ef52:	f7ff ff47 	bl	800ede4 <TRACE_Lock>
  if (TRACE_AllocateBufer((buff_size+timestamp_size),&writepos) != -1)
 800ef56:	466b      	mov	r3, sp
 800ef58:	8818      	ldrh	r0, [r3, #0]
 800ef5a:	1c9c      	adds	r4, r3, #2
 800ef5c:	1940      	adds	r0, r0, r5
 800ef5e:	0021      	movs	r1, r4
 800ef60:	b280      	uxth	r0, r0
 800ef62:	f7ff ff0b 	bl	800ed7c <TRACE_AllocateBufer>
 800ef66:	3001      	adds	r0, #1
 800ef68:	d029      	beq.n	800efbe <UTIL_ADV_TRACE_COND_FSend+0xaa>
    for (idx = 0u; idx < timestamp_size; idx++)
 800ef6a:	466b      	mov	r3, sp
      ADV_TRACE_Buffer[writepos] = buf[idx];
 800ef6c:	2101      	movs	r1, #1
    for (idx = 0u; idx < timestamp_size; idx++)
 800ef6e:	881a      	ldrh	r2, [r3, #0]
 800ef70:	2300      	movs	r3, #0
      ADV_TRACE_Buffer[writepos] = buf[idx];
 800ef72:	468c      	mov	ip, r1
    for (idx = 0u; idx < timestamp_size; idx++)
 800ef74:	001e      	movs	r6, r3
 800ef76:	8825      	ldrh	r5, [r4, #0]
 800ef78:	4817      	ldr	r0, [pc, #92]	@ (800efd8 <UTIL_ADV_TRACE_COND_FSend+0xc4>)
 800ef7a:	b29f      	uxth	r7, r3
 800ef7c:	19e9      	adds	r1, r5, r7
 800ef7e:	b289      	uxth	r1, r1
 800ef80:	42ba      	cmp	r2, r7
 800ef82:	d814      	bhi.n	800efae <UTIL_ADV_TRACE_COND_FSend+0x9a>
 800ef84:	2e00      	cmp	r6, #0
 800ef86:	d001      	beq.n	800ef8c <UTIL_ADV_TRACE_COND_FSend+0x78>
 800ef88:	1952      	adds	r2, r2, r5
 800ef8a:	8022      	strh	r2, [r4, #0]
    (void)UTIL_ADV_TRACE_VSNPRINTF((char *)(&ADV_TRACE_Buffer[writepos]), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 800ef8c:	2180      	movs	r1, #128	@ 0x80
 800ef8e:	8823      	ldrh	r3, [r4, #0]
 800ef90:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800ef92:	0089      	lsls	r1, r1, #2
 800ef94:	18c0      	adds	r0, r0, r3
 800ef96:	9b01      	ldr	r3, [sp, #4]
 800ef98:	f000 fde2 	bl	800fb60 <tiny_vsnprintf_like>
    TRACE_UnLock();
 800ef9c:	f7ff ff2e 	bl	800edfc <TRACE_UnLock>
    return TRACE_Send();
 800efa0:	f7ff ff76 	bl	800ee90 <TRACE_Send>
}
 800efa4:	b006      	add	sp, #24
 800efa6:	bcf0      	pop	{r4, r5, r6, r7}
 800efa8:	bc08      	pop	{r3}
 800efaa:	b001      	add	sp, #4
 800efac:	4718      	bx	r3
      ADV_TRACE_Buffer[writepos] = buf[idx];
 800efae:	466e      	mov	r6, sp
 800efb0:	2708      	movs	r7, #8
 800efb2:	19f6      	adds	r6, r6, r7
 800efb4:	5cf6      	ldrb	r6, [r6, r3]
 800efb6:	3301      	adds	r3, #1
 800efb8:	5446      	strb	r6, [r0, r1]
 800efba:	4666      	mov	r6, ip
 800efbc:	e7dd      	b.n	800ef7a <UTIL_ADV_TRACE_COND_FSend+0x66>
  TRACE_UnLock();
 800efbe:	f7ff ff1d 	bl	800edfc <TRACE_UnLock>
  return UTIL_ADV_TRACE_MEM_FULL;
 800efc2:	2003      	movs	r0, #3
    return UTIL_ADV_TRACE_REGIONMASKED;
 800efc4:	4240      	negs	r0, r0
 800efc6:	e7ed      	b.n	800efa4 <UTIL_ADV_TRACE_COND_FSend+0x90>
    return UTIL_ADV_TRACE_GIVEUP;
 800efc8:	2005      	movs	r0, #5
 800efca:	e7fb      	b.n	800efc4 <UTIL_ADV_TRACE_COND_FSend+0xb0>
    return UTIL_ADV_TRACE_REGIONMASKED;
 800efcc:	2006      	movs	r0, #6
 800efce:	e7f9      	b.n	800efc4 <UTIL_ADV_TRACE_COND_FSend+0xb0>
 800efd0:	2000151c 	.word	0x2000151c
 800efd4:	20001534 	.word	0x20001534
 800efd8:	20001734 	.word	0x20001734

0800efdc <TRACE_TxCpltCallback>:
{
 800efdc:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800efde:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800efe2:	b672      	cpsid	i
  if(TRACE_UNCHUNK_TRANSFER == ADV_TRACE_Ctx.unchunk_status)
 800efe4:	4b1f      	ldr	r3, [pc, #124]	@ (800f064 <TRACE_TxCpltCallback+0x88>)
 800efe6:	789a      	ldrb	r2, [r3, #2]
 800efe8:	2a02      	cmp	r2, #2
 800efea:	d11d      	bne.n	800f028 <TRACE_TxCpltCallback+0x4c>
    ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 800efec:	2200      	movs	r2, #0
 800efee:	709a      	strb	r2, [r3, #2]
  if((ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr) && (1u == ADV_TRACE_Ctx.TraceLock))
 800eff0:	8a5c      	ldrh	r4, [r3, #18]
    ADV_TRACE_Ctx.TraceRdPtr = 0;
 800eff2:	821a      	strh	r2, [r3, #16]
  if((ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr) && (1u == ADV_TRACE_Ctx.TraceLock))
 800eff4:	4294      	cmp	r4, r2
 800eff6:	d02e      	beq.n	800f056 <TRACE_TxCpltCallback+0x7a>
 800eff8:	8ad8      	ldrh	r0, [r3, #22]
 800effa:	2801      	cmp	r0, #1
 800effc:	d12b      	bne.n	800f056 <TRACE_TxCpltCallback+0x7a>
    if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 800effe:	7898      	ldrb	r0, [r3, #2]
 800f000:	2801      	cmp	r0, #1
 800f002:	d117      	bne.n	800f034 <TRACE_TxCpltCallback+0x58>
      ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr;
 800f004:	8818      	ldrh	r0, [r3, #0]
 800f006:	1a82      	subs	r2, r0, r2
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 800f008:	2002      	movs	r0, #2
 800f00a:	7098      	strb	r0, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = 0;
 800f00c:	2000      	movs	r0, #0
      ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr;
 800f00e:	b292      	uxth	r2, r2
 800f010:	829a      	strh	r2, [r3, #20]
      ADV_TRACE_Ctx.unchunk_enabled = 0;
 800f012:	8018      	strh	r0, [r3, #0]
      if(0u == ADV_TRACE_Ctx.TraceSentSize)
 800f014:	4282      	cmp	r2, r0
 800f016:	d10f      	bne.n	800f038 <TRACE_TxCpltCallback+0x5c>
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 800f018:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.TraceRdPtr = 0;
 800f01a:	821a      	strh	r2, [r3, #16]
      if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 800f01c:	8a18      	ldrh	r0, [r3, #16]
 800f01e:	4284      	cmp	r4, r0
 800f020:	d914      	bls.n	800f04c <TRACE_TxCpltCallback+0x70>
        ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 800f022:	1a24      	subs	r4, r4, r0
 800f024:	829c      	strh	r4, [r3, #20]
 800f026:	e007      	b.n	800f038 <TRACE_TxCpltCallback+0x5c>
    ADV_TRACE_Ctx.TraceRdPtr = (ADV_TRACE_Ctx.TraceRdPtr + ADV_TRACE_Ctx.TraceSentSize) % UTIL_ADV_TRACE_FIFO_SIZE;
 800f028:	8a1a      	ldrh	r2, [r3, #16]
 800f02a:	8a98      	ldrh	r0, [r3, #20]
 800f02c:	1812      	adds	r2, r2, r0
 800f02e:	0592      	lsls	r2, r2, #22
 800f030:	0d92      	lsrs	r2, r2, #22
 800f032:	e7dd      	b.n	800eff0 <TRACE_TxCpltCallback+0x14>
    if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 800f034:	2800      	cmp	r0, #0
 800f036:	d0f1      	beq.n	800f01c <TRACE_TxCpltCallback+0x40>
    ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 800f038:	8a18      	ldrh	r0, [r3, #16]
 800f03a:	4a0b      	ldr	r2, [pc, #44]	@ (800f068 <TRACE_TxCpltCallback+0x8c>)
 800f03c:	1880      	adds	r0, r0, r2
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f03e:	f381 8810 	msr	PRIMASK, r1
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 800f042:	8a99      	ldrh	r1, [r3, #20]
 800f044:	4b09      	ldr	r3, [pc, #36]	@ (800f06c <TRACE_TxCpltCallback+0x90>)
 800f046:	68db      	ldr	r3, [r3, #12]
 800f048:	4798      	blx	r3
}
 800f04a:	bd10      	pop	{r4, pc}
        ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 800f04c:	2280      	movs	r2, #128	@ 0x80
 800f04e:	00d2      	lsls	r2, r2, #3
 800f050:	1a12      	subs	r2, r2, r0
 800f052:	829a      	strh	r2, [r3, #20]
 800f054:	e7f0      	b.n	800f038 <TRACE_TxCpltCallback+0x5c>
 800f056:	f381 8810 	msr	PRIMASK, r1
    UTIL_ADV_TRACE_PostSendHook();
 800f05a:	f7f4 fd08 	bl	8003a6e <UTIL_ADV_TRACE_PostSendHook>
    TRACE_UnLock();
 800f05e:	f7ff fecd 	bl	800edfc <TRACE_UnLock>
}
 800f062:	e7f2      	b.n	800f04a <TRACE_TxCpltCallback+0x6e>
 800f064:	2000151c 	.word	0x2000151c
 800f068:	20001734 	.word	0x20001734
 800f06c:	080103c4 	.word	0x080103c4

0800f070 <UTIL_LPM_Init>:
/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 800f070:	2200      	movs	r2, #0
 800f072:	4b02      	ldr	r3, [pc, #8]	@ (800f07c <UTIL_LPM_Init+0xc>)
 800f074:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 800f076:	605a      	str	r2, [r3, #4]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 800f078:	4770      	bx	lr
 800f07a:	46c0      	nop			@ (mov r8, r8)
 800f07c:	20001b34 	.word	0x20001b34

0800f080 <UTIL_LPM_SetStopMode>:
void UTIL_LPM_DeInit( void )
{
}

void UTIL_LPM_SetStopMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 800f080:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f082:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800f086:	b672      	cpsid	i
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
  
  switch( state )
 800f088:	2900      	cmp	r1, #0
 800f08a:	d008      	beq.n	800f09e <UTIL_LPM_SetStopMode+0x1e>
 800f08c:	2901      	cmp	r1, #1
 800f08e:	d103      	bne.n	800f098 <UTIL_LPM_SetStopMode+0x18>
  {
  case UTIL_LPM_DISABLE:
    {
      StopModeDisable |= lpm_id_bm;
 800f090:	4a05      	ldr	r2, [pc, #20]	@ (800f0a8 <UTIL_LPM_SetStopMode+0x28>)
 800f092:	6813      	ldr	r3, [r2, #0]
 800f094:	4303      	orrs	r3, r0
      break;
    }
  case UTIL_LPM_ENABLE:
    {
      StopModeDisable &= ( ~lpm_id_bm );
 800f096:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f098:	f384 8810 	msr	PRIMASK, r4
      break;
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 800f09c:	bd10      	pop	{r4, pc}
      StopModeDisable &= ( ~lpm_id_bm );
 800f09e:	4a02      	ldr	r2, [pc, #8]	@ (800f0a8 <UTIL_LPM_SetStopMode+0x28>)
 800f0a0:	6813      	ldr	r3, [r2, #0]
 800f0a2:	4383      	bics	r3, r0
 800f0a4:	e7f7      	b.n	800f096 <UTIL_LPM_SetStopMode+0x16>
 800f0a6:	46c0      	nop			@ (mov r8, r8)
 800f0a8:	20001b34 	.word	0x20001b34

0800f0ac <UTIL_LPM_SetOffMode>:

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 800f0ac:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f0ae:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800f0b2:	b672      	cpsid	i
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
  
  switch(state)
 800f0b4:	2900      	cmp	r1, #0
 800f0b6:	d008      	beq.n	800f0ca <UTIL_LPM_SetOffMode+0x1e>
 800f0b8:	2901      	cmp	r1, #1
 800f0ba:	d103      	bne.n	800f0c4 <UTIL_LPM_SetOffMode+0x18>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 800f0bc:	4a05      	ldr	r2, [pc, #20]	@ (800f0d4 <UTIL_LPM_SetOffMode+0x28>)
 800f0be:	6853      	ldr	r3, [r2, #4]
 800f0c0:	4303      	orrs	r3, r0
      break;
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 800f0c2:	6053      	str	r3, [r2, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f0c4:	f384 8810 	msr	PRIMASK, r4
      break;
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 800f0c8:	bd10      	pop	{r4, pc}
      OffModeDisable &= ( ~lpm_id_bm );
 800f0ca:	4a02      	ldr	r2, [pc, #8]	@ (800f0d4 <UTIL_LPM_SetOffMode+0x28>)
 800f0cc:	6853      	ldr	r3, [r2, #4]
 800f0ce:	4383      	bics	r3, r0
 800f0d0:	e7f7      	b.n	800f0c2 <UTIL_LPM_SetOffMode+0x16>
 800f0d2:	46c0      	nop			@ (mov r8, r8)
 800f0d4:	20001b34 	.word	0x20001b34

0800f0d8 <UTIL_LPM_GetMode>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f0d8:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800f0dc:	b672      	cpsid	i
  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
  {
    /**
     * At least one user disallows Stop Mode
     */
    mode_selected = UTIL_LPM_SLEEPMODE;
 800f0de:	2000      	movs	r0, #0
  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 800f0e0:	4b05      	ldr	r3, [pc, #20]	@ (800f0f8 <UTIL_LPM_GetMode+0x20>)
 800f0e2:	6819      	ldr	r1, [r3, #0]
 800f0e4:	4281      	cmp	r1, r0
 800f0e6:	d103      	bne.n	800f0f0 <UTIL_LPM_GetMode+0x18>
  }
  else
  {
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 800f0e8:	6858      	ldr	r0, [r3, #4]
    {
      /**
       * At least one user disallows Off Mode
       */
      mode_selected = UTIL_LPM_STOPMODE;
 800f0ea:	4243      	negs	r3, r0
 800f0ec:	4158      	adcs	r0, r3
 800f0ee:	3001      	adds	r0, #1
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f0f0:	f382 8810 	msr	PRIMASK, r2
  }

  UTIL_LPM_EXIT_CRITICAL_SECTION( );

  return mode_selected;
}
 800f0f4:	4770      	bx	lr
 800f0f6:	46c0      	nop			@ (mov r8, r8)
 800f0f8:	20001b34 	.word	0x20001b34

0800f0fc <UTIL_LPM_EnterLowPower>:

void UTIL_LPM_EnterLowPower( void )
{
 800f0fc:	b570      	push	{r4, r5, r6, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f0fe:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800f102:	b672      	cpsid	i
  UTIL_LPM_ENTER_CRITICAL_SECTION_ELP( );

  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 800f104:	4b0b      	ldr	r3, [pc, #44]	@ (800f134 <UTIL_LPM_EnterLowPower+0x38>)
 800f106:	4c0c      	ldr	r4, [pc, #48]	@ (800f138 <UTIL_LPM_EnterLowPower+0x3c>)
 800f108:	681a      	ldr	r2, [r3, #0]
 800f10a:	2a00      	cmp	r2, #0
 800f10c:	d006      	beq.n	800f11c <UTIL_LPM_EnterLowPower+0x20>
  {
    /**
     * At least one user disallows Stop Mode
     * SLEEP mode is required
     */
      UTIL_PowerDriver.EnterSleepMode( );
 800f10e:	6823      	ldr	r3, [r4, #0]
 800f110:	4798      	blx	r3
      UTIL_PowerDriver.ExitSleepMode( );
 800f112:	6863      	ldr	r3, [r4, #4]
    {
      /**
       * OFF mode is required
       */
      UTIL_PowerDriver.EnterOffMode( );
      UTIL_PowerDriver.ExitOffMode( );
 800f114:	4798      	blx	r3
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f116:	f385 8810 	msr	PRIMASK, r5
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION_ELP( );
}
 800f11a:	bd70      	pop	{r4, r5, r6, pc}
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 800f11c:	685b      	ldr	r3, [r3, #4]
 800f11e:	2b00      	cmp	r3, #0
 800f120:	d003      	beq.n	800f12a <UTIL_LPM_EnterLowPower+0x2e>
        UTIL_PowerDriver.EnterStopMode( );
 800f122:	68a3      	ldr	r3, [r4, #8]
 800f124:	4798      	blx	r3
        UTIL_PowerDriver.ExitStopMode( );
 800f126:	68e3      	ldr	r3, [r4, #12]
 800f128:	e7f4      	b.n	800f114 <UTIL_LPM_EnterLowPower+0x18>
      UTIL_PowerDriver.EnterOffMode( );
 800f12a:	6923      	ldr	r3, [r4, #16]
 800f12c:	4798      	blx	r3
      UTIL_PowerDriver.ExitOffMode( );
 800f12e:	6963      	ldr	r3, [r4, #20]
 800f130:	e7f0      	b.n	800f114 <UTIL_LPM_EnterLowPower+0x18>
 800f132:	46c0      	nop			@ (mov r8, r8)
 800f134:	20001b34 	.word	0x20001b34
 800f138:	080103ac 	.word	0x080103ac

0800f13c <UTIL_MEM_cpy_8>:
void UTIL_MEM_cpy_8( void *dst, const void *src, uint16_t size )
{
  uint8_t* dst8= (uint8_t *) dst;
  uint8_t* src8= (uint8_t *) src;

  while( size-- )
 800f13c:	2300      	movs	r3, #0
{
 800f13e:	b510      	push	{r4, lr}
  while( size-- )
 800f140:	4293      	cmp	r3, r2
 800f142:	d100      	bne.n	800f146 <UTIL_MEM_cpy_8+0xa>
    {
        *dst8++ = *src8++;
    }
}
 800f144:	bd10      	pop	{r4, pc}
        *dst8++ = *src8++;
 800f146:	5ccc      	ldrb	r4, [r1, r3]
 800f148:	54c4      	strb	r4, [r0, r3]
 800f14a:	3301      	adds	r3, #1
 800f14c:	e7f8      	b.n	800f140 <UTIL_MEM_cpy_8+0x4>

0800f14e <UTIL_MEM_set_8>:
        *dst8-- = *src8++;
    }
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
 800f14e:	b510      	push	{r4, lr}
  uint8_t* dst8= (uint8_t *) dst;
  while( size-- )
  {
    *dst8++ = value;
 800f150:	f000 fe2e 	bl	800fdb0 <memset>
  }
}
 800f154:	bd10      	pop	{r4, pc}
	...

0800f158 <UTIL_SEQ_SetTask>:

  return;
}

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 800f158:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f15a:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800f15e:	b672      	cpsid	i
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );

  TaskSet |= TaskId_bm;
 800f160:	4b05      	ldr	r3, [pc, #20]	@ (800f178 <UTIL_SEQ_SetTask+0x20>)
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 800f162:	00c9      	lsls	r1, r1, #3
  TaskSet |= TaskId_bm;
 800f164:	681a      	ldr	r2, [r3, #0]
 800f166:	4302      	orrs	r2, r0
 800f168:	601a      	str	r2, [r3, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 800f16a:	185b      	adds	r3, r3, r1
 800f16c:	691a      	ldr	r2, [r3, #16]
 800f16e:	4302      	orrs	r2, r0
 800f170:	611a      	str	r2, [r3, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f172:	f384 8810 	msr	PRIMASK, r4

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
}
 800f176:	bd10      	pop	{r4, pc}
 800f178:	20001b3c 	.word	0x20001b3c

0800f17c <UTIL_SEQ_SetEvt>:

  return;
}

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 800f17c:	0003      	movs	r3, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f17e:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800f182:	b672      	cpsid	i
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );

  EvtSet |= EvtId_bm;
 800f184:	4a03      	ldr	r2, [pc, #12]	@ (800f194 <UTIL_SEQ_SetEvt+0x18>)
 800f186:	6850      	ldr	r0, [r2, #4]
 800f188:	4318      	orrs	r0, r3
 800f18a:	6050      	str	r0, [r2, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f18c:	f381 8810 	msr	PRIMASK, r1

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
}
 800f190:	4770      	bx	lr
 800f192:	46c0      	nop			@ (mov r8, r8)
 800f194:	20001b3c 	.word	0x20001b3c

0800f198 <UTIL_SEQ_PreIdle>:
__WEAK void UTIL_SEQ_Idle( void )
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
 800f198:	4770      	bx	lr

0800f19a <UTIL_SEQ_PostIdle>:
   * Unless specified by the application, there is nothing to be done
   */
  return;
}

__WEAK void UTIL_SEQ_PostIdle( void )
 800f19a:	4770      	bx	lr

0800f19c <SEQ_BitPosition>:
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
  uint8_t n = 0U;

  if ((Value & 0xFFFF0000U) == 0U)  { n  = 16U; Value <<= 16U;  }
 800f19c:	2280      	movs	r2, #128	@ 0x80
  uint8_t n = 0U;
 800f19e:	2300      	movs	r3, #0
  if ((Value & 0xFFFF0000U) == 0U)  { n  = 16U; Value <<= 16U;  }
 800f1a0:	0252      	lsls	r2, r2, #9
 800f1a2:	4290      	cmp	r0, r2
 800f1a4:	d201      	bcs.n	800f1aa <SEQ_BitPosition+0xe>
 800f1a6:	0400      	lsls	r0, r0, #16
 800f1a8:	3310      	adds	r3, #16
  if ((Value & 0xFF000000U) == 0U)  { n +=  8U; Value <<=  8U;  }
 800f1aa:	2280      	movs	r2, #128	@ 0x80
 800f1ac:	0452      	lsls	r2, r2, #17
 800f1ae:	4290      	cmp	r0, r2
 800f1b0:	d202      	bcs.n	800f1b8 <SEQ_BitPosition+0x1c>
 800f1b2:	3308      	adds	r3, #8
 800f1b4:	b2db      	uxtb	r3, r3
 800f1b6:	0200      	lsls	r0, r0, #8
  if ((Value & 0xF0000000U) == 0U)  { n +=  4U; Value <<=  4U;  }
 800f1b8:	2280      	movs	r2, #128	@ 0x80
 800f1ba:	0552      	lsls	r2, r2, #21
 800f1bc:	4290      	cmp	r0, r2
 800f1be:	d202      	bcs.n	800f1c6 <SEQ_BitPosition+0x2a>
 800f1c0:	3304      	adds	r3, #4
 800f1c2:	b2db      	uxtb	r3, r3
 800f1c4:	0100      	lsls	r0, r0, #4

  n += SEQ_clz_table_4bit[Value >> (32-4)];

  return (uint8_t)(31U-n);
 800f1c6:	221f      	movs	r2, #31
 800f1c8:	1ad3      	subs	r3, r2, r3
  n += SEQ_clz_table_4bit[Value >> (32-4)];
 800f1ca:	4a03      	ldr	r2, [pc, #12]	@ (800f1d8 <SEQ_BitPosition+0x3c>)
 800f1cc:	0f00      	lsrs	r0, r0, #28
  return (uint8_t)(31U-n);
 800f1ce:	5c10      	ldrb	r0, [r2, r0]
 800f1d0:	1a18      	subs	r0, r3, r0
 800f1d2:	b2c0      	uxtb	r0, r0
}
 800f1d4:	4770      	bx	lr
 800f1d6:	46c0      	nop			@ (mov r8, r8)
 800f1d8:	08010944 	.word	0x08010944

0800f1dc <UTIL_SEQ_Run>:
{
 800f1dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  super_mask_backup = SuperMask;
 800f1de:	4e2f      	ldr	r6, [pc, #188]	@ (800f29c <UTIL_SEQ_Run+0xc0>)
 800f1e0:	6873      	ldr	r3, [r6, #4]
  SuperMask &= Mask_bm;
 800f1e2:	4018      	ands	r0, r3
  super_mask_backup = SuperMask;
 800f1e4:	9301      	str	r3, [sp, #4]
  SuperMask &= Mask_bm;
 800f1e6:	6070      	str	r0, [r6, #4]
  while(((TaskSet & TaskMask & SuperMask) != 0U) && ((EvtSet & EvtWaited)==0U))
 800f1e8:	4c2d      	ldr	r4, [pc, #180]	@ (800f2a0 <UTIL_SEQ_Run+0xc4>)
 800f1ea:	6831      	ldr	r1, [r6, #0]
 800f1ec:	6822      	ldr	r2, [r4, #0]
 800f1ee:	6873      	ldr	r3, [r6, #4]
 800f1f0:	400a      	ands	r2, r1
 800f1f2:	4213      	tst	r3, r2
 800f1f4:	d037      	beq.n	800f266 <UTIL_SEQ_Run+0x8a>
 800f1f6:	68a0      	ldr	r0, [r4, #8]
 800f1f8:	6862      	ldr	r2, [r4, #4]
 800f1fa:	0005      	movs	r5, r0
 800f1fc:	4015      	ands	r5, r2
 800f1fe:	4210      	tst	r0, r2
 800f200:	d131      	bne.n	800f266 <UTIL_SEQ_Run+0x8a>
    while((TaskPrio[counter].priority & TaskMask & SuperMask)== 0U)
 800f202:	6922      	ldr	r2, [r4, #16]
 800f204:	400b      	ands	r3, r1
 800f206:	0010      	movs	r0, r2
 800f208:	4018      	ands	r0, r3
 800f20a:	421a      	tst	r2, r3
 800f20c:	d102      	bne.n	800f214 <UTIL_SEQ_Run+0x38>
      counter++;
 800f20e:	2501      	movs	r5, #1
    while((TaskPrio[counter].priority & TaskMask & SuperMask)== 0U)
 800f210:	69a0      	ldr	r0, [r4, #24]
 800f212:	4018      	ands	r0, r3
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 800f214:	00ed      	lsls	r5, r5, #3
 800f216:	1963      	adds	r3, r4, r5
 800f218:	695a      	ldr	r2, [r3, #20]
 800f21a:	4202      	tst	r2, r0
 800f21c:	d102      	bne.n	800f224 <UTIL_SEQ_Run+0x48>
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 800f21e:	2201      	movs	r2, #1
 800f220:	4252      	negs	r2, r2
 800f222:	615a      	str	r2, [r3, #20]
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 800f224:	1965      	adds	r5, r4, r5
 800f226:	696f      	ldr	r7, [r5, #20]
 800f228:	4038      	ands	r0, r7
 800f22a:	f7ff ffb7 	bl	800f19c <SEQ_BitPosition>
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 800f22e:	2301      	movs	r3, #1
 800f230:	4083      	lsls	r3, r0
 800f232:	439f      	bics	r7, r3
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 800f234:	60e0      	str	r0, [r4, #12]
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 800f236:	616f      	str	r7, [r5, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f238:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800f23c:	b672      	cpsid	i
    TaskSet &= ~(1U << CurrentTaskIdx);
 800f23e:	2201      	movs	r2, #1
 800f240:	68e3      	ldr	r3, [r4, #12]
 800f242:	409a      	lsls	r2, r3
 800f244:	6823      	ldr	r3, [r4, #0]
 800f246:	4393      	bics	r3, r2
 800f248:	6023      	str	r3, [r4, #0]
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 800f24a:	69a3      	ldr	r3, [r4, #24]
 800f24c:	4393      	bics	r3, r2
 800f24e:	61a3      	str	r3, [r4, #24]
 800f250:	6923      	ldr	r3, [r4, #16]
 800f252:	4393      	bics	r3, r2
 800f254:	6123      	str	r3, [r4, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f256:	f381 8810 	msr	PRIMASK, r1
    TaskCb[CurrentTaskIdx]( );
 800f25a:	68e2      	ldr	r2, [r4, #12]
 800f25c:	4b11      	ldr	r3, [pc, #68]	@ (800f2a4 <UTIL_SEQ_Run+0xc8>)
 800f25e:	0092      	lsls	r2, r2, #2
 800f260:	58d3      	ldr	r3, [r2, r3]
 800f262:	4798      	blx	r3
 800f264:	e7c0      	b.n	800f1e8 <UTIL_SEQ_Run+0xc>
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 800f266:	2301      	movs	r3, #1
 800f268:	425b      	negs	r3, r3
 800f26a:	60e3      	str	r3, [r4, #12]
  UTIL_SEQ_PreIdle( );
 800f26c:	f7ff ff94 	bl	800f198 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f270:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800f274:	b672      	cpsid	i
  if (!(((TaskSet & TaskMask & SuperMask) != 0U) || ((EvtSet & EvtWaited)!= 0U))) 
 800f276:	6823      	ldr	r3, [r4, #0]
 800f278:	6832      	ldr	r2, [r6, #0]
 800f27a:	6861      	ldr	r1, [r4, #4]
 800f27c:	401a      	ands	r2, r3
 800f27e:	6873      	ldr	r3, [r6, #4]
 800f280:	4013      	ands	r3, r2
 800f282:	68a2      	ldr	r2, [r4, #8]
 800f284:	400a      	ands	r2, r1
 800f286:	4313      	orrs	r3, r2
 800f288:	d101      	bne.n	800f28e <UTIL_SEQ_Run+0xb2>
	UTIL_SEQ_Idle( );
 800f28a:	f7f4 fb95 	bl	80039b8 <UTIL_SEQ_Idle>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f28e:	f385 8810 	msr	PRIMASK, r5
  UTIL_SEQ_PostIdle( );
 800f292:	f7ff ff82 	bl	800f19a <UTIL_SEQ_PostIdle>
  SuperMask = super_mask_backup;
 800f296:	9b01      	ldr	r3, [sp, #4]
 800f298:	6073      	str	r3, [r6, #4]
}
 800f29a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800f29c:	2000012c 	.word	0x2000012c
 800f2a0:	20001b3c 	.word	0x20001b3c
 800f2a4:	20001b5c 	.word	0x20001b5c

0800f2a8 <UTIL_SEQ_EvtIdle>:
{
 800f2a8:	b510      	push	{r4, lr}
  UTIL_SEQ_Run(~TaskId_bm);
 800f2aa:	43c0      	mvns	r0, r0
 800f2ac:	f7ff ff96 	bl	800f1dc <UTIL_SEQ_Run>
}
 800f2b0:	bd10      	pop	{r4, pc}
	...

0800f2b4 <UTIL_SEQ_WaitEvt>:
{
 800f2b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  current_task_idx = CurrentTaskIdx;
 800f2b6:	4c0b      	ldr	r4, [pc, #44]	@ (800f2e4 <UTIL_SEQ_WaitEvt+0x30>)
    wait_task_idx = 0;
 800f2b8:	2500      	movs	r5, #0
  current_task_idx = CurrentTaskIdx;
 800f2ba:	68e6      	ldr	r6, [r4, #12]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 800f2bc:	1c73      	adds	r3, r6, #1
 800f2be:	d001      	beq.n	800f2c4 <UTIL_SEQ_WaitEvt+0x10>
    wait_task_idx = 1 << CurrentTaskIdx;
 800f2c0:	3501      	adds	r5, #1
 800f2c2:	40b5      	lsls	r5, r6
  event_waited_id_backup = EvtWaited;
 800f2c4:	68a7      	ldr	r7, [r4, #8]
  EvtWaited = EvtId_bm;
 800f2c6:	60a0      	str	r0, [r4, #8]
  while ((EvtSet & EvtWaited) == 0U)
 800f2c8:	6863      	ldr	r3, [r4, #4]
 800f2ca:	68a1      	ldr	r1, [r4, #8]
 800f2cc:	4219      	tst	r1, r3
 800f2ce:	d004      	beq.n	800f2da <UTIL_SEQ_WaitEvt+0x26>
  EvtSet &= (~EvtWaited);
 800f2d0:	438b      	bics	r3, r1
  CurrentTaskIdx = current_task_idx;
 800f2d2:	60e6      	str	r6, [r4, #12]
  EvtWaited = event_waited_id_backup;
 800f2d4:	60a7      	str	r7, [r4, #8]
  EvtSet &= (~EvtWaited);
 800f2d6:	6063      	str	r3, [r4, #4]
}
 800f2d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtWaited);
 800f2da:	0028      	movs	r0, r5
 800f2dc:	f7ff ffe4 	bl	800f2a8 <UTIL_SEQ_EvtIdle>
 800f2e0:	e7f2      	b.n	800f2c8 <UTIL_SEQ_WaitEvt+0x14>
 800f2e2:	46c0      	nop			@ (mov r8, r8)
 800f2e4:	20001b3c 	.word	0x20001b3c

0800f2e8 <UTIL_SEQ_RegTask>:
{
 800f2e8:	b570      	push	{r4, r5, r6, lr}
 800f2ea:	0014      	movs	r4, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f2ec:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800f2f0:	b672      	cpsid	i
  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 800f2f2:	f7ff ff53 	bl	800f19c <SEQ_BitPosition>
 800f2f6:	4b03      	ldr	r3, [pc, #12]	@ (800f304 <UTIL_SEQ_RegTask+0x1c>)
 800f2f8:	0080      	lsls	r0, r0, #2
 800f2fa:	50c4      	str	r4, [r0, r3]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f2fc:	f385 8810 	msr	PRIMASK, r5
}
 800f300:	bd70      	pop	{r4, r5, r6, pc}
 800f302:	46c0      	nop			@ (mov r8, r8)
 800f304:	20001b5c 	.word	0x20001b5c

0800f308 <CalendarDiv61>:
{
#if 0
  return( in / 61 );
#else
  uint32_t outTemp = 0;
  uint32_t divResult = DIV_APPROX_61( in );
 800f308:	490a      	ldr	r1, [pc, #40]	@ (800f334 <CalendarDiv61+0x2c>)
{
 800f30a:	0002      	movs	r2, r0
  uint32_t divResult = DIV_APPROX_61( in );
 800f30c:	000b      	movs	r3, r1
{
 800f30e:	b510      	push	{r4, lr}
  uint32_t divResult = DIV_APPROX_61( in );
 800f310:	4343      	muls	r3, r0
  while( divResult >=1 )
  {
    outTemp += divResult;
    in -= divResult * 61;
 800f312:	243d      	movs	r4, #61	@ 0x3d
  uint32_t outTemp = 0;
 800f314:	2000      	movs	r0, #0
  uint32_t divResult = DIV_APPROX_61( in );
 800f316:	0d9b      	lsrs	r3, r3, #22
  while( divResult >=1 )
 800f318:	2b00      	cmp	r3, #0
 800f31a:	d103      	bne.n	800f324 <CalendarDiv61+0x1c>
    divResult = DIV_APPROX_61( in );
  }
  if( in >= 61 )
 800f31c:	2a3c      	cmp	r2, #60	@ 0x3c
 800f31e:	d900      	bls.n	800f322 <CalendarDiv61+0x1a>
  {
    outTemp += 1;
 800f320:	3001      	adds	r0, #1
    in -= 61;
  }
  return outTemp;
#endif
}
 800f322:	bd10      	pop	{r4, pc}
    outTemp += divResult;
 800f324:	18c0      	adds	r0, r0, r3
    in -= divResult * 61;
 800f326:	4363      	muls	r3, r4
 800f328:	1ad2      	subs	r2, r2, r3
    divResult = DIV_APPROX_61( in );
 800f32a:	000b      	movs	r3, r1
 800f32c:	4353      	muls	r3, r2
 800f32e:	0d9b      	lsrs	r3, r3, #22
 800f330:	e7f2      	b.n	800f318 <CalendarDiv61+0x10>
 800f332:	46c0      	nop			@ (mov r8, r8)
 800f334:	00010c97 	.word	0x00010c97

0800f338 <CalendarDiv60>:

static void CalendarDiv60( uint32_t in, uint32_t* out, uint32_t* remainder )
{
 800f338:	b570      	push	{r4, r5, r6, lr}
#if 0
  *remainder = in % 60;
  *out     = in / 60;
#else
  uint32_t outTemp = 0;
  uint32_t divResult = DIV_APPROX_60( in );
 800f33a:	4d0b      	ldr	r5, [pc, #44]	@ (800f368 <CalendarDiv60+0x30>)
  uint32_t outTemp = 0;
 800f33c:	2400      	movs	r4, #0
  uint32_t divResult = DIV_APPROX_60( in );
 800f33e:	002b      	movs	r3, r5

  while( divResult >=1 )
  {
    outTemp += divResult;
    in -= divResult * 60;
 800f340:	263c      	movs	r6, #60	@ 0x3c
  uint32_t divResult = DIV_APPROX_60( in );
 800f342:	4343      	muls	r3, r0
 800f344:	0d1b      	lsrs	r3, r3, #20
  while( divResult >=1 )
 800f346:	2b00      	cmp	r3, #0
 800f348:	d106      	bne.n	800f358 <CalendarDiv60+0x20>
    divResult = DIV_APPROX_60( in );
  }
  if( in >= 60 )
 800f34a:	283b      	cmp	r0, #59	@ 0x3b
 800f34c:	d901      	bls.n	800f352 <CalendarDiv60+0x1a>
  {
    outTemp += 1;
 800f34e:	3401      	adds	r4, #1
    in -= 60;
 800f350:	383c      	subs	r0, #60	@ 0x3c
  }
  *remainder = in;
 800f352:	6010      	str	r0, [r2, #0]
  *out = outTemp;
 800f354:	600c      	str	r4, [r1, #0]
#endif
}
 800f356:	bd70      	pop	{r4, r5, r6, pc}
    outTemp += divResult;
 800f358:	18e4      	adds	r4, r4, r3
    in -= divResult * 60;
 800f35a:	4373      	muls	r3, r6
 800f35c:	1ac0      	subs	r0, r0, r3
    divResult = DIV_APPROX_60( in );
 800f35e:	002b      	movs	r3, r5
 800f360:	4343      	muls	r3, r0
 800f362:	0d1b      	lsrs	r3, r3, #20
 800f364:	e7ef      	b.n	800f346 <CalendarDiv60+0xe>
 800f366:	46c0      	nop			@ (mov r8, r8)
 800f368:	00004444 	.word	0x00004444

0800f36c <SysTimeAdd>:
{
 800f36c:	b082      	sub	sp, #8
 800f36e:	b513      	push	{r0, r1, r4, lr}
  c.Seconds = a.Seconds + b.Seconds;
 800f370:	18c9      	adds	r1, r1, r3
{
 800f372:	9305      	str	r3, [sp, #20]
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 800f374:	ab05      	add	r3, sp, #20
 800f376:	889c      	ldrh	r4, [r3, #4]
 800f378:	18a2      	adds	r2, r4, r2
  if( c.SubSeconds >= 1000 )
 800f37a:	24fa      	movs	r4, #250	@ 0xfa
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 800f37c:	b293      	uxth	r3, r2
 800f37e:	b212      	sxth	r2, r2
  if( c.SubSeconds >= 1000 )
 800f380:	00a4      	lsls	r4, r4, #2
 800f382:	42a2      	cmp	r2, r4
 800f384:	db03      	blt.n	800f38e <SysTimeAdd+0x22>
    c.SubSeconds -= 1000;
 800f386:	4a05      	ldr	r2, [pc, #20]	@ (800f39c <SysTimeAdd+0x30>)
    c.Seconds++;
 800f388:	3101      	adds	r1, #1
    c.SubSeconds -= 1000;
 800f38a:	189b      	adds	r3, r3, r2
 800f38c:	b21a      	sxth	r2, r3
  return c;
 800f38e:	6001      	str	r1, [r0, #0]
 800f390:	8082      	strh	r2, [r0, #4]
}
 800f392:	bc16      	pop	{r1, r2, r4}
 800f394:	bc08      	pop	{r3}
 800f396:	b002      	add	sp, #8
 800f398:	4718      	bx	r3
 800f39a:	46c0      	nop			@ (mov r8, r8)
 800f39c:	fffffc18 	.word	0xfffffc18

0800f3a0 <SysTimeSub>:
{
 800f3a0:	b082      	sub	sp, #8
 800f3a2:	b513      	push	{r0, r1, r4, lr}
  c.Seconds = a.Seconds - b.Seconds;
 800f3a4:	1ac9      	subs	r1, r1, r3
{
 800f3a6:	9305      	str	r3, [sp, #20]
  c.SubSeconds = a.SubSeconds - b.SubSeconds;
 800f3a8:	ab05      	add	r3, sp, #20
 800f3aa:	889b      	ldrh	r3, [r3, #4]
 800f3ac:	1ad2      	subs	r2, r2, r3
 800f3ae:	b293      	uxth	r3, r2
 800f3b0:	b214      	sxth	r4, r2
  if( c.SubSeconds < 0 )
 800f3b2:	0412      	lsls	r2, r2, #16
 800f3b4:	d504      	bpl.n	800f3c0 <SysTimeSub+0x20>
    c.SubSeconds += 1000;
 800f3b6:	22fa      	movs	r2, #250	@ 0xfa
 800f3b8:	0092      	lsls	r2, r2, #2
 800f3ba:	189b      	adds	r3, r3, r2
    c.Seconds--;
 800f3bc:	3901      	subs	r1, #1
    c.SubSeconds += 1000;
 800f3be:	b21c      	sxth	r4, r3
  return c;
 800f3c0:	6001      	str	r1, [r0, #0]
 800f3c2:	8084      	strh	r4, [r0, #4]
}
 800f3c4:	bc16      	pop	{r1, r2, r4}
 800f3c6:	bc08      	pop	{r3}
 800f3c8:	b002      	add	sp, #8
 800f3ca:	4718      	bx	r3

0800f3cc <SysTimeSet>:
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 800f3cc:	2300      	movs	r3, #0
{
 800f3ce:	b530      	push	{r4, r5, lr}
  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 800f3d0:	4c10      	ldr	r4, [pc, #64]	@ (800f414 <SysTimeSet+0x48>)
{
 800f3d2:	b085      	sub	sp, #20
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 800f3d4:	ad02      	add	r5, sp, #8
 800f3d6:	80ab      	strh	r3, [r5, #4]
{
 800f3d8:	9000      	str	r0, [sp, #0]
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 800f3da:	9302      	str	r3, [sp, #8]
  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 800f3dc:	a803      	add	r0, sp, #12
 800f3de:	6923      	ldr	r3, [r4, #16]
{
 800f3e0:	9101      	str	r1, [sp, #4]
  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 800f3e2:	4798      	blx	r3
  c.Seconds = a.Seconds - b.Seconds;
 800f3e4:	9b00      	ldr	r3, [sp, #0]
  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 800f3e6:	9002      	str	r0, [sp, #8]
  c.Seconds = a.Seconds - b.Seconds;
 800f3e8:	1a18      	subs	r0, r3, r0
  c.SubSeconds = a.SubSeconds - b.SubSeconds;
 800f3ea:	466b      	mov	r3, sp
 800f3ec:	88aa      	ldrh	r2, [r5, #4]
 800f3ee:	889b      	ldrh	r3, [r3, #4]
 800f3f0:	1a9b      	subs	r3, r3, r2
 800f3f2:	b29a      	uxth	r2, r3
 800f3f4:	b21d      	sxth	r5, r3
  if( c.SubSeconds < 0 )
 800f3f6:	041b      	lsls	r3, r3, #16
 800f3f8:	d504      	bpl.n	800f404 <SysTimeSet+0x38>
    c.SubSeconds += 1000;
 800f3fa:	23fa      	movs	r3, #250	@ 0xfa
 800f3fc:	009b      	lsls	r3, r3, #2
 800f3fe:	18d2      	adds	r2, r2, r3
    c.Seconds--;
 800f400:	3801      	subs	r0, #1
    c.SubSeconds += 1000;
 800f402:	b215      	sxth	r5, r2
  UTIL_SYSTIMDriver.BKUPWrite_Seconds( DeltaTime.Seconds );
 800f404:	6823      	ldr	r3, [r4, #0]
 800f406:	4798      	blx	r3
  UTIL_SYSTIMDriver.BKUPWrite_SubSeconds( ( uint32_t ) DeltaTime.SubSeconds );
 800f408:	0028      	movs	r0, r5
 800f40a:	68a3      	ldr	r3, [r4, #8]
 800f40c:	4798      	blx	r3
}
 800f40e:	b005      	add	sp, #20
 800f410:	bd30      	pop	{r4, r5, pc}
 800f412:	46c0      	nop			@ (mov r8, r8)
 800f414:	0801036c 	.word	0x0801036c

0800f418 <SysTimeGet>:
{
 800f418:	b573      	push	{r0, r1, r4, r5, r6, lr}
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 800f41a:	2300      	movs	r3, #0
 800f41c:	466a      	mov	r2, sp
  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 800f41e:	4e10      	ldr	r6, [pc, #64]	@ (800f460 <SysTimeGet+0x48>)
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 800f420:	8093      	strh	r3, [r2, #4]
 800f422:	9300      	str	r3, [sp, #0]
{
 800f424:	0004      	movs	r4, r0
  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 800f426:	6933      	ldr	r3, [r6, #16]
 800f428:	a801      	add	r0, sp, #4
 800f42a:	4798      	blx	r3
  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 800f42c:	68f3      	ldr	r3, [r6, #12]
  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 800f42e:	9000      	str	r0, [sp, #0]
  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 800f430:	4798      	blx	r3
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 800f432:	6873      	ldr	r3, [r6, #4]
  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 800f434:	0005      	movs	r5, r0
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 800f436:	4798      	blx	r3
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 800f438:	466b      	mov	r3, sp
  c.Seconds = a.Seconds + b.Seconds;
 800f43a:	9a00      	ldr	r2, [sp, #0]
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 800f43c:	889b      	ldrh	r3, [r3, #4]
  c.Seconds = a.Seconds + b.Seconds;
 800f43e:	1882      	adds	r2, r0, r2
  if( c.SubSeconds >= 1000 )
 800f440:	20fa      	movs	r0, #250	@ 0xfa
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 800f442:	195b      	adds	r3, r3, r5
 800f444:	b299      	uxth	r1, r3
 800f446:	b21b      	sxth	r3, r3
  if( c.SubSeconds >= 1000 )
 800f448:	0080      	lsls	r0, r0, #2
 800f44a:	4283      	cmp	r3, r0
 800f44c:	db03      	blt.n	800f456 <SysTimeGet+0x3e>
    c.SubSeconds -= 1000;
 800f44e:	4b05      	ldr	r3, [pc, #20]	@ (800f464 <SysTimeGet+0x4c>)
    c.Seconds++;
 800f450:	3201      	adds	r2, #1
    c.SubSeconds -= 1000;
 800f452:	18cb      	adds	r3, r1, r3
 800f454:	b21b      	sxth	r3, r3
}
 800f456:	0020      	movs	r0, r4
  return sysTime;
 800f458:	6022      	str	r2, [r4, #0]
 800f45a:	80a3      	strh	r3, [r4, #4]
}
 800f45c:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 800f45e:	46c0      	nop			@ (mov r8, r8)
 800f460:	0801036c 	.word	0x0801036c
 800f464:	fffffc18 	.word	0xfffffc18

0800f468 <SysTimeGetMcuTime>:
{
 800f468:	b537      	push	{r0, r1, r2, r4, r5, lr}
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 800f46a:	2300      	movs	r3, #0
 800f46c:	466d      	mov	r5, sp
{
 800f46e:	0004      	movs	r4, r0
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 800f470:	9300      	str	r3, [sp, #0]
 800f472:	80ab      	strh	r3, [r5, #4]
  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 800f474:	4b04      	ldr	r3, [pc, #16]	@ (800f488 <SysTimeGetMcuTime+0x20>)
 800f476:	a801      	add	r0, sp, #4
 800f478:	691b      	ldr	r3, [r3, #16]
 800f47a:	4798      	blx	r3
  return calendarTime;
 800f47c:	0023      	movs	r3, r4
  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 800f47e:	9000      	str	r0, [sp, #0]
  return calendarTime;
 800f480:	cd06      	ldmia	r5!, {r1, r2}
 800f482:	c306      	stmia	r3!, {r1, r2}
}
 800f484:	0020      	movs	r0, r4
 800f486:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
 800f488:	0801036c 	.word	0x0801036c

0800f48c <SysTimeToMs>:
{
 800f48c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 800f48e:	4d0d      	ldr	r5, [pc, #52]	@ (800f4c4 <SysTimeToMs+0x38>)
{
 800f490:	9101      	str	r1, [sp, #4]
  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 800f492:	68eb      	ldr	r3, [r5, #12]
{
 800f494:	9000      	str	r0, [sp, #0]
  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 800f496:	4798      	blx	r3
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 800f498:	686b      	ldr	r3, [r5, #4]
  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 800f49a:	0004      	movs	r4, r0
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 800f49c:	4798      	blx	r3
  c.SubSeconds = a.SubSeconds - b.SubSeconds;
 800f49e:	466b      	mov	r3, sp
 800f4a0:	889b      	ldrh	r3, [r3, #4]
  c.Seconds = a.Seconds - b.Seconds;
 800f4a2:	9a00      	ldr	r2, [sp, #0]
  c.SubSeconds = a.SubSeconds - b.SubSeconds;
 800f4a4:	1b1b      	subs	r3, r3, r4
  c.Seconds = a.Seconds - b.Seconds;
 800f4a6:	1a12      	subs	r2, r2, r0
  c.SubSeconds = a.SubSeconds - b.SubSeconds;
 800f4a8:	b299      	uxth	r1, r3
 800f4aa:	b21c      	sxth	r4, r3
  if( c.SubSeconds < 0 )
 800f4ac:	041b      	lsls	r3, r3, #16
 800f4ae:	d504      	bpl.n	800f4ba <SysTimeToMs+0x2e>
    c.SubSeconds += 1000;
 800f4b0:	23fa      	movs	r3, #250	@ 0xfa
 800f4b2:	009b      	lsls	r3, r3, #2
 800f4b4:	18c9      	adds	r1, r1, r3
    c.Seconds--;
 800f4b6:	3a01      	subs	r2, #1
    c.SubSeconds += 1000;
 800f4b8:	b20c      	sxth	r4, r1
  return calendarTime.Seconds * 1000 + calendarTime.SubSeconds;
 800f4ba:	20fa      	movs	r0, #250	@ 0xfa
 800f4bc:	0080      	lsls	r0, r0, #2
 800f4be:	4350      	muls	r0, r2
 800f4c0:	1900      	adds	r0, r0, r4
}
 800f4c2:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
 800f4c4:	0801036c 	.word	0x0801036c

0800f4c8 <SysTimeFromMs>:
{
 800f4c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f4ca:	000f      	movs	r7, r1
  SysTime_t sysTime = { .Seconds = seconds, .SubSeconds =  timeMs - seconds * 1000 };
 800f4cc:	26fa      	movs	r6, #250	@ 0xfa
  uint32_t seconds = timeMs / 1000;
 800f4ce:	21fa      	movs	r1, #250	@ 0xfa
{
 800f4d0:	0004      	movs	r4, r0
  uint32_t seconds = timeMs / 1000;
 800f4d2:	0089      	lsls	r1, r1, #2
 800f4d4:	0038      	movs	r0, r7
  SysTime_t sysTime = { .Seconds = seconds, .SubSeconds =  timeMs - seconds * 1000 };
 800f4d6:	00b6      	lsls	r6, r6, #2
  uint32_t seconds = timeMs / 1000;
 800f4d8:	f7f0 fe46 	bl	8000168 <__udivsi3>
  SysTime_t sysTime = { .Seconds = seconds, .SubSeconds =  timeMs - seconds * 1000 };
 800f4dc:	0033      	movs	r3, r6
 800f4de:	4343      	muls	r3, r0
 800f4e0:	1aff      	subs	r7, r7, r3
 800f4e2:	b2bb      	uxth	r3, r7
  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 800f4e4:	4f0c      	ldr	r7, [pc, #48]	@ (800f518 <SysTimeFromMs+0x50>)
  SysTime_t sysTime = { .Seconds = seconds, .SubSeconds =  timeMs - seconds * 1000 };
 800f4e6:	9300      	str	r3, [sp, #0]
  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 800f4e8:	68fb      	ldr	r3, [r7, #12]
  uint32_t seconds = timeMs / 1000;
 800f4ea:	0005      	movs	r5, r0
  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 800f4ec:	4798      	blx	r3
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 800f4ee:	687b      	ldr	r3, [r7, #4]
  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 800f4f0:	9001      	str	r0, [sp, #4]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 800f4f2:	4798      	blx	r3
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 800f4f4:	9a00      	ldr	r2, [sp, #0]
 800f4f6:	9b01      	ldr	r3, [sp, #4]
 800f4f8:	4694      	mov	ip, r2
 800f4fa:	4463      	add	r3, ip
 800f4fc:	b29a      	uxth	r2, r3
 800f4fe:	b21b      	sxth	r3, r3
  c.Seconds = a.Seconds + b.Seconds;
 800f500:	1940      	adds	r0, r0, r5
  if( c.SubSeconds >= 1000 )
 800f502:	42b3      	cmp	r3, r6
 800f504:	db03      	blt.n	800f50e <SysTimeFromMs+0x46>
    c.SubSeconds -= 1000;
 800f506:	4b05      	ldr	r3, [pc, #20]	@ (800f51c <SysTimeFromMs+0x54>)
    c.Seconds++;
 800f508:	3001      	adds	r0, #1
    c.SubSeconds -= 1000;
 800f50a:	18d3      	adds	r3, r2, r3
 800f50c:	b21b      	sxth	r3, r3
  return c;
 800f50e:	6020      	str	r0, [r4, #0]
 800f510:	80a3      	strh	r3, [r4, #4]
}
 800f512:	0020      	movs	r0, r4
 800f514:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800f516:	46c0      	nop			@ (mov r8, r8)
 800f518:	0801036c 	.word	0x0801036c
 800f51c:	fffffc18 	.word	0xfffffc18

0800f520 <SysTimeLocalTime>:
{
 800f520:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f522:	b08b      	sub	sp, #44	@ 0x2c
  uint32_t correctionMonth[4] =
 800f524:	af06      	add	r7, sp, #24
 800f526:	003a      	movs	r2, r7
 800f528:	4b40      	ldr	r3, [pc, #256]	@ (800f62c <SysTimeLocalTime+0x10c>)
{
 800f52a:	000e      	movs	r6, r1
  uint32_t correctionMonth[4] =
 800f52c:	cb32      	ldmia	r3!, {r1, r4, r5}
 800f52e:	c232      	stmia	r2!, {r1, r4, r5}
  uint32_t outTemp = 0;
 800f530:	2400      	movs	r4, #0
  uint32_t correctionMonth[4] =
 800f532:	681b      	ldr	r3, [r3, #0]
 800f534:	6013      	str	r3, [r2, #0]
  CalendarDiv86400( timestamp + CALC_REF_YEAR_TO_UNIX_REF_YEAR_COMPENSATION_IN_SECONDS, &days, &seconds );
 800f536:	4b3e      	ldr	r3, [pc, #248]	@ (800f630 <SysTimeLocalTime+0x110>)
 800f538:	18c0      	adds	r0, r0, r3
  uint32_t divResult = DIV_APPROX_86400( in );
 800f53a:	0c42      	lsrs	r2, r0, #17
 800f53c:	0c83      	lsrs	r3, r0, #18
 800f53e:	189b      	adds	r3, r3, r2
    in -= divResult * 86400;
 800f540:	4a3c      	ldr	r2, [pc, #240]	@ (800f634 <SysTimeLocalTime+0x114>)
  while( divResult >=1 )
 800f542:	2b00      	cmp	r3, #0
 800f544:	d152      	bne.n	800f5ec <SysTimeLocalTime+0xcc>
  if( in >= 86400 )
 800f546:	4b3c      	ldr	r3, [pc, #240]	@ (800f638 <SysTimeLocalTime+0x118>)
 800f548:	4298      	cmp	r0, r3
 800f54a:	d902      	bls.n	800f552 <SysTimeLocalTime+0x32>
    in -= 86400;
 800f54c:	4b3b      	ldr	r3, [pc, #236]	@ (800f63c <SysTimeLocalTime+0x11c>)
    outTemp += 1;
 800f54e:	3401      	adds	r4, #1
    in -= 86400;
 800f550:	18c0      	adds	r0, r0, r3
  localtime->tm_sec = ( uint8_t )divReminder;
 800f552:	25ff      	movs	r5, #255	@ 0xff
  CalendarDiv60( seconds, &minutes, &divReminder );
 800f554:	aa05      	add	r2, sp, #20
 800f556:	a903      	add	r1, sp, #12
 800f558:	f7ff feee 	bl	800f338 <CalendarDiv60>
  localtime->tm_sec = ( uint8_t )divReminder;
 800f55c:	9b05      	ldr	r3, [sp, #20]
  CalendarDiv60( minutes, &divOut, &divReminder);
 800f55e:	aa05      	add	r2, sp, #20
  localtime->tm_sec = ( uint8_t )divReminder;
 800f560:	402b      	ands	r3, r5
 800f562:	6033      	str	r3, [r6, #0]
  CalendarDiv60( minutes, &divOut, &divReminder);
 800f564:	9803      	ldr	r0, [sp, #12]
 800f566:	a904      	add	r1, sp, #16
 800f568:	f7ff fee6 	bl	800f338 <CalendarDiv60>
  localtime->tm_min = ( uint8_t )divReminder;
 800f56c:	9b05      	ldr	r3, [sp, #20]
 800f56e:	402b      	ands	r3, r5
 800f570:	6073      	str	r3, [r6, #4]
  localtime->tm_hour = ( uint8_t )divOut;
 800f572:	9b04      	ldr	r3, [sp, #16]
 800f574:	402b      	ands	r3, r5
  localtime->tm_year = DIV_365_25( days );
 800f576:	4d32      	ldr	r5, [pc, #200]	@ (800f640 <SysTimeLocalTime+0x120>)
  localtime->tm_hour = ( uint8_t )divOut;
 800f578:	60b3      	str	r3, [r6, #8]
  localtime->tm_year = DIV_365_25( days );
 800f57a:	4365      	muls	r5, r4
 800f57c:	4b31      	ldr	r3, [pc, #196]	@ (800f644 <SysTimeLocalTime+0x124>)
 800f57e:	18ed      	adds	r5, r5, r3
  days-= DIVC_BY_4( ( TM_DAYS_IN_YEAR * 3 + TM_DAYS_IN_LEAP_YEAR ) * localtime->tm_year );
 800f580:	4b31      	ldr	r3, [pc, #196]	@ (800f648 <SysTimeLocalTime+0x128>)
  localtime->tm_year = DIV_365_25( days );
 800f582:	0e6d      	lsrs	r5, r5, #25
  days-= DIVC_BY_4( ( TM_DAYS_IN_YEAR * 3 + TM_DAYS_IN_LEAP_YEAR ) * localtime->tm_year );
 800f584:	436b      	muls	r3, r5
 800f586:	3303      	adds	r3, #3
 800f588:	089b      	lsrs	r3, r3, #2
 800f58a:	1ae4      	subs	r4, r4, r3
  if( ( year % 4 ) == 0 )
 800f58c:	002a      	movs	r2, r5
 800f58e:	2303      	movs	r3, #3
 800f590:	401a      	ands	r2, r3
  localtime->tm_yday = days;
 800f592:	61f4      	str	r4, [r6, #28]
  if( ( year % 4 ) == 0 )
 800f594:	9201      	str	r2, [sp, #4]
 800f596:	421d      	tst	r5, r3
 800f598:	d13e      	bne.n	800f618 <SysTimeLocalTime+0xf8>
    if( days < END_OF_FEBRUARY_LEAP )
 800f59a:	2c3b      	cmp	r4, #59	@ 0x3b
 800f59c:	d82d      	bhi.n	800f5fa <SysTimeLocalTime+0xda>
      month = CalendarDiv61( days * 2 );
 800f59e:	0060      	lsls	r0, r4, #1
 800f5a0:	f7ff feb2 	bl	800f308 <CalendarDiv61>
  weekDays += DIVC_BY_4( ( localtime->tm_year * 5 ) );
 800f5a4:	2305      	movs	r3, #5
 800f5a6:	436b      	muls	r3, r5
 800f5a8:	3303      	adds	r3, #3
 800f5aa:	3401      	adds	r4, #1
 800f5ac:	109b      	asrs	r3, r3, #2
  weekDays += days;
 800f5ae:	191b      	adds	r3, r3, r4
  localtime->tm_wday = MODULO_7( weekDays );
 800f5b0:	4a26      	ldr	r2, [pc, #152]	@ (800f64c <SysTimeLocalTime+0x12c>)
 800f5b2:	1c59      	adds	r1, r3, #1
 800f5b4:	434a      	muls	r2, r1
 800f5b6:	2107      	movs	r1, #7
 800f5b8:	0d52      	lsrs	r2, r2, #21
 800f5ba:	434a      	muls	r2, r1
 800f5bc:	1a9b      	subs	r3, r3, r2
 800f5be:	61b3      	str	r3, [r6, #24]
        ( ( ( correctionMonth[localtime->tm_year % 4] >> ( ( localtime->tm_mon ) * 2 ) ) & 0x03 ) ) );
 800f5c0:	9b01      	ldr	r3, [sp, #4]
 800f5c2:	0042      	lsls	r2, r0, #1
 800f5c4:	009b      	lsls	r3, r3, #2
 800f5c6:	58fb      	ldr	r3, [r7, r3]
  localtime->tm_year += CALC_REF_YEAR;
 800f5c8:	3544      	adds	r5, #68	@ 0x44
        ( ( ( correctionMonth[localtime->tm_year % 4] >> ( ( localtime->tm_mon ) * 2 ) ) & 0x03 ) ) );
 800f5ca:	40d3      	lsrs	r3, r2
 800f5cc:	2203      	movs	r2, #3
 800f5ce:	4013      	ands	r3, r2
  localtime->tm_mday = days + 1;
 800f5d0:	191c      	adds	r4, r3, r4
  days -= ( DIVC_BY_2( ( localtime->tm_mon ) * ( 30 + 31 ) ) -
 800f5d2:	233d      	movs	r3, #61	@ 0x3d
 800f5d4:	4343      	muls	r3, r0
 800f5d6:	3301      	adds	r3, #1
 800f5d8:	105b      	asrs	r3, r3, #1
  localtime->tm_mday = days + 1;
 800f5da:	1ae4      	subs	r4, r4, r3
  localtime->tm_isdst = -1;
 800f5dc:	2301      	movs	r3, #1
 800f5de:	425b      	negs	r3, r3
  localtime->tm_mon = CalendarGetMonth( days, localtime->tm_year );
 800f5e0:	6130      	str	r0, [r6, #16]
  localtime->tm_mday = days + 1;
 800f5e2:	60f4      	str	r4, [r6, #12]
  localtime->tm_year += CALC_REF_YEAR;
 800f5e4:	6175      	str	r5, [r6, #20]
  localtime->tm_isdst = -1;
 800f5e6:	6233      	str	r3, [r6, #32]
}
 800f5e8:	b00b      	add	sp, #44	@ 0x2c
 800f5ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
    outTemp += divResult;
 800f5ec:	18e4      	adds	r4, r4, r3
    in -= divResult * 86400;
 800f5ee:	4353      	muls	r3, r2
 800f5f0:	1ac0      	subs	r0, r0, r3
    divResult= DIV_APPROX_86400( in );
 800f5f2:	0c83      	lsrs	r3, r0, #18
 800f5f4:	0c41      	lsrs	r1, r0, #17
 800f5f6:	185b      	adds	r3, r3, r1
 800f5f8:	e7a3      	b.n	800f542 <SysTimeLocalTime+0x22>
      month = CalendarDiv61( ( days - END_OF_FEBRUARY_LEAP ) * 2 ) + 2;
 800f5fa:	0020      	movs	r0, r4
    else if( days < END_OF_JULY_LEAP )
 800f5fc:	2cd4      	cmp	r4, #212	@ 0xd4
 800f5fe:	d805      	bhi.n	800f60c <SysTimeLocalTime+0xec>
      month = CalendarDiv61( ( days - END_OF_FEBRUARY_LEAP ) * 2 ) + 2;
 800f600:	383c      	subs	r0, #60	@ 0x3c
      month = CalendarDiv61( ( days - END_OF_FEBRUARY_NORM ) * 2 ) + 2;
 800f602:	0040      	lsls	r0, r0, #1
 800f604:	f7ff fe80 	bl	800f308 <CalendarDiv61>
 800f608:	3002      	adds	r0, #2
 800f60a:	e7cb      	b.n	800f5a4 <SysTimeLocalTime+0x84>
      month = CalendarDiv61( ( days - END_OF_JULY_LEAP ) * 2 ) + 7;
 800f60c:	38d5      	subs	r0, #213	@ 0xd5
      month = CalendarDiv61( ( days - END_OF_JULY_NORM ) * 2 ) + 7;
 800f60e:	0040      	lsls	r0, r0, #1
 800f610:	f7ff fe7a 	bl	800f308 <CalendarDiv61>
 800f614:	3007      	adds	r0, #7
 800f616:	e7c5      	b.n	800f5a4 <SysTimeLocalTime+0x84>
    if( days < END_OF_FEBRUARY_NORM )
 800f618:	2c3a      	cmp	r4, #58	@ 0x3a
 800f61a:	d9c0      	bls.n	800f59e <SysTimeLocalTime+0x7e>
      month = CalendarDiv61( ( days - END_OF_FEBRUARY_NORM ) * 2 ) + 2;
 800f61c:	0020      	movs	r0, r4
    else if( days < END_OF_JULY_NORM )
 800f61e:	2cd3      	cmp	r4, #211	@ 0xd3
 800f620:	d801      	bhi.n	800f626 <SysTimeLocalTime+0x106>
      month = CalendarDiv61( ( days - END_OF_FEBRUARY_NORM ) * 2 ) + 2;
 800f622:	383b      	subs	r0, #59	@ 0x3b
 800f624:	e7ed      	b.n	800f602 <SysTimeLocalTime+0xe2>
      month = CalendarDiv61( ( days - END_OF_JULY_NORM ) * 2 ) + 7;
 800f626:	38d4      	subs	r0, #212	@ 0xd4
 800f628:	e7f1      	b.n	800f60e <SysTimeLocalTime+0xee>
 800f62a:	46c0      	nop			@ (mov r8, r8)
 800f62c:	08010954 	.word	0x08010954
 800f630:	03c3b880 	.word	0x03c3b880
 800f634:	00015180 	.word	0x00015180
 800f638:	0001517f 	.word	0x0001517f
 800f63c:	fffeae80 	.word	0xfffeae80
 800f640:	000166db 	.word	0x000166db
 800f644:	000058de 	.word	0x000058de
 800f648:	000005b5 	.word	0x000005b5
 800f64c:	00049249 	.word	0x00049249

0800f650 <UTIL_TIMER_Init>:
  */

UTIL_TIMER_Status_t UTIL_TIMER_Init(void)
{
  UTIL_TIMER_INIT_CRITICAL_SECTION();
  TimerListHead = NULL;
 800f650:	2200      	movs	r2, #0
{
 800f652:	b510      	push	{r4, lr}
  TimerListHead = NULL;
 800f654:	4b02      	ldr	r3, [pc, #8]	@ (800f660 <UTIL_TIMER_Init+0x10>)
 800f656:	601a      	str	r2, [r3, #0]
  return UTIL_TimerDriver.InitTimer();
 800f658:	4b02      	ldr	r3, [pc, #8]	@ (800f664 <UTIL_TIMER_Init+0x14>)
 800f65a:	681b      	ldr	r3, [r3, #0]
 800f65c:	4798      	blx	r3
}
 800f65e:	bd10      	pop	{r4, pc}
 800f660:	20001bdc 	.word	0x20001bdc
 800f664:	08010380 	.word	0x08010380

0800f668 <UTIL_TIMER_Create>:
{
  return UTIL_TimerDriver.DeInitTimer();
}

UTIL_TIMER_Status_t UTIL_TIMER_Create( UTIL_TIMER_Object_t *TimerObject, uint32_t PeriodValue, UTIL_TIMER_Mode_t Mode, void ( *Callback )( void *), void *Argument)
{
 800f668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f66a:	0004      	movs	r4, r0
 800f66c:	0017      	movs	r7, r2
 800f66e:	0008      	movs	r0, r1
 800f670:	001e      	movs	r6, r3
    TimerObject->Next = NULL;
    return UTIL_TIMER_OK;
  }
  else
  {
    return UTIL_TIMER_INVALID_PARAM;
 800f672:	2501      	movs	r5, #1
  if((TimerObject != NULL) && (Callback != NULL))
 800f674:	2c00      	cmp	r4, #0
 800f676:	d00e      	beq.n	800f696 <UTIL_TIMER_Create+0x2e>
 800f678:	2b00      	cmp	r3, #0
 800f67a:	d00c      	beq.n	800f696 <UTIL_TIMER_Create+0x2e>
    TimerObject->Timestamp = 0U;
 800f67c:	2500      	movs	r5, #0
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 800f67e:	4b07      	ldr	r3, [pc, #28]	@ (800f69c <UTIL_TIMER_Create+0x34>)
    TimerObject->Timestamp = 0U;
 800f680:	6025      	str	r5, [r4, #0]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 800f682:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f684:	4798      	blx	r3
    TimerObject->argument = Argument;
 800f686:	9b06      	ldr	r3, [sp, #24]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 800f688:	6060      	str	r0, [r4, #4]
    TimerObject->IsPending = 0U;
 800f68a:	8125      	strh	r5, [r4, #8]
    TimerObject->IsReloadStopped = 0U;
 800f68c:	72a5      	strb	r5, [r4, #10]
    TimerObject->Callback = Callback;
 800f68e:	60e6      	str	r6, [r4, #12]
    TimerObject->argument = Argument;
 800f690:	6123      	str	r3, [r4, #16]
    TimerObject->Mode = Mode;
 800f692:	72e7      	strb	r7, [r4, #11]
    TimerObject->Next = NULL;
 800f694:	6165      	str	r5, [r4, #20]
  }
}
 800f696:	0028      	movs	r0, r5
 800f698:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f69a:	46c0      	nop			@ (mov r8, r8)
 800f69c:	08010380 	.word	0x08010380

0800f6a0 <UTIL_TIMER_GetCurrentTime>:
  }
  UTIL_TIMER_EXIT_CRITICAL_SECTION();
}

UTIL_TIMER_Time_t UTIL_TIMER_GetCurrentTime(void)
{
 800f6a0:	b510      	push	{r4, lr}
  uint32_t now = UTIL_TimerDriver.GetTimerValue( );
 800f6a2:	4c03      	ldr	r4, [pc, #12]	@ (800f6b0 <UTIL_TIMER_GetCurrentTime+0x10>)
 800f6a4:	69e3      	ldr	r3, [r4, #28]
 800f6a6:	4798      	blx	r3
  return  UTIL_TimerDriver.Tick2ms(now);
 800f6a8:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800f6aa:	4798      	blx	r3
}
 800f6ac:	bd10      	pop	{r4, pc}
 800f6ae:	46c0      	nop			@ (mov r8, r8)
 800f6b0:	08010380 	.word	0x08010380

0800f6b4 <UTIL_TIMER_GetElapsedTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetElapsedTime(UTIL_TIMER_Time_t past )
{
 800f6b4:	b570      	push	{r4, r5, r6, lr}
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 800f6b6:	4d06      	ldr	r5, [pc, #24]	@ (800f6d0 <UTIL_TIMER_GetElapsedTime+0x1c>)
{
 800f6b8:	0006      	movs	r6, r0
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 800f6ba:	69eb      	ldr	r3, [r5, #28]
 800f6bc:	4798      	blx	r3
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 800f6be:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 800f6c0:	0004      	movs	r4, r0
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 800f6c2:	0030      	movs	r0, r6
 800f6c4:	4798      	blx	r3
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return UTIL_TimerDriver.Tick2ms( nowInTicks- pastInTicks );
 800f6c6:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 800f6c8:	1a20      	subs	r0, r4, r0
 800f6ca:	4798      	blx	r3
}
 800f6cc:	bd70      	pop	{r4, r5, r6, pc}
 800f6ce:	46c0      	nop			@ (mov r8, r8)
 800f6d0:	08010380 	.word	0x08010380

0800f6d4 <TimerExists>:
 * @param TimerObject Structure containing the timer object parameters
 * @retval 1 (the object is already in the list) or 0
 */
bool TimerExists( UTIL_TIMER_Object_t *TimerObject )
{
  UTIL_TIMER_Object_t* cur = TimerListHead;
 800f6d4:	4b05      	ldr	r3, [pc, #20]	@ (800f6ec <TimerExists+0x18>)
 800f6d6:	681b      	ldr	r3, [r3, #0]

  while( cur != NULL )
 800f6d8:	2b00      	cmp	r3, #0
 800f6da:	d101      	bne.n	800f6e0 <TimerExists+0xc>
    {
      return true;
    }
    cur = cur->Next;
  }
  return false;
 800f6dc:	0018      	movs	r0, r3
}
 800f6de:	4770      	bx	lr
    if( cur == TimerObject )
 800f6e0:	4283      	cmp	r3, r0
 800f6e2:	d001      	beq.n	800f6e8 <TimerExists+0x14>
    cur = cur->Next;
 800f6e4:	695b      	ldr	r3, [r3, #20]
 800f6e6:	e7f7      	b.n	800f6d8 <TimerExists+0x4>
      return true;
 800f6e8:	2001      	movs	r0, #1
 800f6ea:	e7f8      	b.n	800f6de <TimerExists+0xa>
 800f6ec:	20001bdc 	.word	0x20001bdc

0800f6f0 <TimerSetTimeout>:
 * @brief Sets a timeout with the duration "timestamp"
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout( UTIL_TIMER_Object_t *TimerObject )
{
 800f6f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 800f6f2:	4e0b      	ldr	r6, [pc, #44]	@ (800f720 <TimerSetTimeout+0x30>)
{
 800f6f4:	0004      	movs	r4, r0
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 800f6f6:	6a33      	ldr	r3, [r6, #32]
 800f6f8:	4798      	blx	r3
  TimerObject->IsPending = 1;
 800f6fa:	2301      	movs	r3, #1
 800f6fc:	7223      	strb	r3, [r4, #8]

  /* In case deadline too soon */
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 800f6fe:	6823      	ldr	r3, [r4, #0]
 800f700:	69b7      	ldr	r7, [r6, #24]
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 800f702:	0005      	movs	r5, r0
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 800f704:	9301      	str	r3, [sp, #4]
 800f706:	47b8      	blx	r7
 800f708:	9b01      	ldr	r3, [sp, #4]
 800f70a:	1940      	adds	r0, r0, r5
 800f70c:	4283      	cmp	r3, r0
 800f70e:	d202      	bcs.n	800f716 <TimerSetTimeout+0x26>
  {
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 800f710:	47b8      	blx	r7
 800f712:	1940      	adds	r0, r0, r5
 800f714:	6020      	str	r0, [r4, #0]
  }
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 800f716:	68b3      	ldr	r3, [r6, #8]
 800f718:	6820      	ldr	r0, [r4, #0]
 800f71a:	4798      	blx	r3
}
 800f71c:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800f71e:	46c0      	nop			@ (mov r8, r8)
 800f720:	08010380 	.word	0x08010380

0800f724 <UTIL_TIMER_Stop>:
{
 800f724:	0003      	movs	r3, r0
 800f726:	b570      	push	{r4, r5, r6, lr}
    ret = UTIL_TIMER_INVALID_PARAM;
 800f728:	2001      	movs	r0, #1
  if (NULL != TimerObject)
 800f72a:	2b00      	cmp	r3, #0
 800f72c:	d016      	beq.n	800f75c <UTIL_TIMER_Stop+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f72e:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800f732:	b672      	cpsid	i
    UTIL_TIMER_Object_t* prev = TimerListHead;
 800f734:	4d11      	ldr	r5, [pc, #68]	@ (800f77c <UTIL_TIMER_Stop+0x58>)
    TimerObject->IsReloadStopped = 1U;
 800f736:	7298      	strb	r0, [r3, #10]
    UTIL_TIMER_Object_t* prev = TimerListHead;
 800f738:	682a      	ldr	r2, [r5, #0]
    if(NULL != TimerListHead)
 800f73a:	2a00      	cmp	r2, #0
 800f73c:	d00b      	beq.n	800f756 <UTIL_TIMER_Stop+0x32>
      TimerObject->IsRunning = 0U;
 800f73e:	2100      	movs	r1, #0
 800f740:	7259      	strb	r1, [r3, #9]
          if( TimerListHead->Next != NULL )
 800f742:	6954      	ldr	r4, [r2, #20]
      if( TimerListHead == TimerObject ) /* Stop the Head */
 800f744:	4293      	cmp	r3, r2
 800f746:	d10f      	bne.n	800f768 <UTIL_TIMER_Stop+0x44>
          TimerListHead->IsPending = 0;
 800f748:	7219      	strb	r1, [r3, #8]
          if( TimerListHead->Next != NULL )
 800f74a:	428c      	cmp	r4, r1
 800f74c:	d007      	beq.n	800f75e <UTIL_TIMER_Stop+0x3a>
            TimerSetTimeout( TimerListHead );
 800f74e:	0020      	movs	r0, r4
            TimerListHead = TimerListHead->Next;
 800f750:	602c      	str	r4, [r5, #0]
            TimerSetTimeout( TimerListHead );
 800f752:	f7ff ffcd 	bl	800f6f0 <TimerSetTimeout>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f756:	f386 8810 	msr	PRIMASK, r6
}
 800f75a:	2000      	movs	r0, #0
}
 800f75c:	bd70      	pop	{r4, r5, r6, pc}
            UTIL_TimerDriver.StopTimerEvt( );
 800f75e:	4b08      	ldr	r3, [pc, #32]	@ (800f780 <UTIL_TIMER_Stop+0x5c>)
 800f760:	68db      	ldr	r3, [r3, #12]
 800f762:	4798      	blx	r3
            TimerListHead = NULL;
 800f764:	602c      	str	r4, [r5, #0]
 800f766:	e7f6      	b.n	800f756 <UTIL_TIMER_Stop+0x32>
            cur = cur->Next;
 800f768:	0011      	movs	r1, r2
 800f76a:	6952      	ldr	r2, [r2, #20]
        while( cur != NULL )
 800f76c:	2a00      	cmp	r2, #0
 800f76e:	d0f2      	beq.n	800f756 <UTIL_TIMER_Stop+0x32>
          if( cur == TimerObject )
 800f770:	4293      	cmp	r3, r2
 800f772:	d1f9      	bne.n	800f768 <UTIL_TIMER_Stop+0x44>
            if( cur->Next != NULL )
 800f774:	695b      	ldr	r3, [r3, #20]
              prev->Next = cur;
 800f776:	614b      	str	r3, [r1, #20]
 800f778:	e7ed      	b.n	800f756 <UTIL_TIMER_Stop+0x32>
 800f77a:	46c0      	nop			@ (mov r8, r8)
 800f77c:	20001bdc 	.word	0x20001bdc
 800f780:	08010380 	.word	0x08010380

0800f784 <TimerInsertTimer>:
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer( UTIL_TIMER_Object_t *TimerObject)
{
  UTIL_TIMER_Object_t* cur = TimerListHead;
 800f784:	4b09      	ldr	r3, [pc, #36]	@ (800f7ac <TimerInsertTimer+0x28>)
{
 800f786:	b510      	push	{r4, lr}
  UTIL_TIMER_Object_t* cur = TimerListHead;
 800f788:	681a      	ldr	r2, [r3, #0]
  UTIL_TIMER_Object_t* next = TimerListHead->Next;
 800f78a:	6953      	ldr	r3, [r2, #20]

  while (cur->Next != NULL )
 800f78c:	6951      	ldr	r1, [r2, #20]
 800f78e:	2900      	cmp	r1, #0
 800f790:	d102      	bne.n	800f798 <TimerInsertTimer+0x14>
        cur = next;
        next = next->Next;
    }
    else
    {
        cur->Next = TimerObject;
 800f792:	6150      	str	r0, [r2, #20]
        TimerObject->Next = next;
 800f794:	6141      	str	r1, [r0, #20]

    }
  }
  cur->Next = TimerObject;
  TimerObject->Next = NULL;
}
 800f796:	bd10      	pop	{r4, pc}
    if( TimerObject->Timestamp  > next->Timestamp )
 800f798:	6804      	ldr	r4, [r0, #0]
 800f79a:	6819      	ldr	r1, [r3, #0]
 800f79c:	428c      	cmp	r4, r1
 800f79e:	d902      	bls.n	800f7a6 <TimerInsertTimer+0x22>
        next = next->Next;
 800f7a0:	001a      	movs	r2, r3
 800f7a2:	695b      	ldr	r3, [r3, #20]
 800f7a4:	e7f2      	b.n	800f78c <TimerInsertTimer+0x8>
 800f7a6:	0019      	movs	r1, r3
 800f7a8:	e7f3      	b.n	800f792 <TimerInsertTimer+0xe>
 800f7aa:	46c0      	nop			@ (mov r8, r8)
 800f7ac:	20001bdc 	.word	0x20001bdc

0800f7b0 <TimerInsertNewHeadTimer>:
 * @remark The list is automatically sorted. The list head always contains the
 *         next timer to expire.
 */
void TimerInsertNewHeadTimer( UTIL_TIMER_Object_t *TimerObject )
{
  UTIL_TIMER_Object_t* cur = TimerListHead;
 800f7b0:	4a05      	ldr	r2, [pc, #20]	@ (800f7c8 <TimerInsertNewHeadTimer+0x18>)
{
 800f7b2:	b510      	push	{r4, lr}
  UTIL_TIMER_Object_t* cur = TimerListHead;
 800f7b4:	6813      	ldr	r3, [r2, #0]

  if( cur != NULL )
 800f7b6:	2b00      	cmp	r3, #0
 800f7b8:	d001      	beq.n	800f7be <TimerInsertNewHeadTimer+0xe>
  {
    cur->IsPending = 0;
 800f7ba:	2100      	movs	r1, #0
 800f7bc:	7219      	strb	r1, [r3, #8]
  }

  TimerObject->Next = cur;
 800f7be:	6143      	str	r3, [r0, #20]
  TimerListHead = TimerObject;
 800f7c0:	6010      	str	r0, [r2, #0]
  TimerSetTimeout( TimerListHead );
 800f7c2:	f7ff ff95 	bl	800f6f0 <TimerSetTimeout>
}
 800f7c6:	bd10      	pop	{r4, pc}
 800f7c8:	20001bdc 	.word	0x20001bdc

0800f7cc <UTIL_TIMER_Start>:
{
 800f7cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f7ce:	0004      	movs	r4, r0
    ret =  UTIL_TIMER_INVALID_PARAM;
 800f7d0:	2501      	movs	r5, #1
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 800f7d2:	2800      	cmp	r0, #0
 800f7d4:	d023      	beq.n	800f81e <UTIL_TIMER_Start+0x52>
 800f7d6:	f7ff ff7d 	bl	800f6d4 <TimerExists>
 800f7da:	2800      	cmp	r0, #0
 800f7dc:	d11f      	bne.n	800f81e <UTIL_TIMER_Start+0x52>
 800f7de:	7a65      	ldrb	r5, [r4, #9]
 800f7e0:	2d00      	cmp	r5, #0
 800f7e2:	d12b      	bne.n	800f83c <UTIL_TIMER_Start+0x70>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f7e4:	f3ef 8310 	mrs	r3, PRIMASK
 800f7e8:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 800f7ea:	b672      	cpsid	i
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 800f7ec:	4e14      	ldr	r6, [pc, #80]	@ (800f840 <UTIL_TIMER_Start+0x74>)
    ticks = TimerObject->ReloadValue;
 800f7ee:	6867      	ldr	r7, [r4, #4]
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 800f7f0:	6a33      	ldr	r3, [r6, #32]
 800f7f2:	4798      	blx	r3
    TimerObject->Timestamp = ticks;
 800f7f4:	4287      	cmp	r7, r0
 800f7f6:	d200      	bcs.n	800f7fa <UTIL_TIMER_Start+0x2e>
 800f7f8:	0007      	movs	r7, r0
    TimerObject->IsPending = 0U;
 800f7fa:	2380      	movs	r3, #128	@ 0x80
 800f7fc:	005b      	lsls	r3, r3, #1
 800f7fe:	8123      	strh	r3, [r4, #8]
    TimerObject->IsReloadStopped = 0U;
 800f800:	2300      	movs	r3, #0
    TimerObject->Timestamp = ticks;
 800f802:	6027      	str	r7, [r4, #0]
    if( TimerListHead == NULL )
 800f804:	4f0f      	ldr	r7, [pc, #60]	@ (800f844 <UTIL_TIMER_Start+0x78>)
    TimerObject->IsReloadStopped = 0U;
 800f806:	72a3      	strb	r3, [r4, #10]
    if( TimerListHead == NULL )
 800f808:	683b      	ldr	r3, [r7, #0]
 800f80a:	2b00      	cmp	r3, #0
 800f80c:	d109      	bne.n	800f822 <UTIL_TIMER_Start+0x56>
      UTIL_TimerDriver.SetTimerContext();
 800f80e:	6933      	ldr	r3, [r6, #16]
 800f810:	4798      	blx	r3
        TimerInsertNewHeadTimer( TimerObject);
 800f812:	0020      	movs	r0, r4
 800f814:	f7ff ffcc 	bl	800f7b0 <TimerInsertNewHeadTimer>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f818:	9b01      	ldr	r3, [sp, #4]
 800f81a:	f383 8810 	msr	PRIMASK, r3
}
 800f81e:	0028      	movs	r0, r5
 800f820:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime( );
 800f822:	69b3      	ldr	r3, [r6, #24]
 800f824:	4798      	blx	r3
      TimerObject->Timestamp += elapsedTime;
 800f826:	6823      	ldr	r3, [r4, #0]
 800f828:	18c0      	adds	r0, r0, r3
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 800f82a:	683b      	ldr	r3, [r7, #0]
      TimerObject->Timestamp += elapsedTime;
 800f82c:	6020      	str	r0, [r4, #0]
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 800f82e:	681b      	ldr	r3, [r3, #0]
 800f830:	4298      	cmp	r0, r3
 800f832:	d3ee      	bcc.n	800f812 <UTIL_TIMER_Start+0x46>
        TimerInsertTimer( TimerObject);
 800f834:	0020      	movs	r0, r4
 800f836:	f7ff ffa5 	bl	800f784 <TimerInsertTimer>
 800f83a:	e7ed      	b.n	800f818 <UTIL_TIMER_Start+0x4c>
    ret =  UTIL_TIMER_INVALID_PARAM;
 800f83c:	2501      	movs	r5, #1
 800f83e:	e7ee      	b.n	800f81e <UTIL_TIMER_Start+0x52>
 800f840:	08010380 	.word	0x08010380
 800f844:	20001bdc 	.word	0x20001bdc

0800f848 <UTIL_TIMER_SetPeriod>:
{
 800f848:	b510      	push	{r4, lr}
	  ret = UTIL_TIMER_INVALID_PARAM;
 800f84a:	2301      	movs	r3, #1
{
 800f84c:	0004      	movs	r4, r0
 800f84e:	0008      	movs	r0, r1
  if(NULL == TimerObject)
 800f850:	2c00      	cmp	r4, #0
 800f852:	d010      	beq.n	800f876 <UTIL_TIMER_SetPeriod+0x2e>
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 800f854:	4b09      	ldr	r3, [pc, #36]	@ (800f87c <UTIL_TIMER_SetPeriod+0x34>)
 800f856:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f858:	4798      	blx	r3
 800f85a:	6060      	str	r0, [r4, #4]
    if(TimerExists(TimerObject))
 800f85c:	0020      	movs	r0, r4
 800f85e:	f7ff ff39 	bl	800f6d4 <TimerExists>
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 800f862:	2300      	movs	r3, #0
    if(TimerExists(TimerObject))
 800f864:	4298      	cmp	r0, r3
 800f866:	d006      	beq.n	800f876 <UTIL_TIMER_SetPeriod+0x2e>
      (void)UTIL_TIMER_Stop(TimerObject);
 800f868:	0020      	movs	r0, r4
 800f86a:	f7ff ff5b 	bl	800f724 <UTIL_TIMER_Stop>
      ret = UTIL_TIMER_Start(TimerObject);
 800f86e:	0020      	movs	r0, r4
 800f870:	f7ff ffac 	bl	800f7cc <UTIL_TIMER_Start>
 800f874:	0003      	movs	r3, r0
}
 800f876:	0018      	movs	r0, r3
 800f878:	bd10      	pop	{r4, pc}
 800f87a:	46c0      	nop			@ (mov r8, r8)
 800f87c:	08010380 	.word	0x08010380

0800f880 <UTIL_TIMER_IRQ_Handler>:
{
 800f880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f882:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800f886:	b672      	cpsid	i
  old  =  UTIL_TimerDriver.GetTimerContext( );
 800f888:	4e1c      	ldr	r6, [pc, #112]	@ (800f8fc <UTIL_TIMER_IRQ_Handler+0x7c>)
 800f88a:	6973      	ldr	r3, [r6, #20]
 800f88c:	4798      	blx	r3
  now  =  UTIL_TimerDriver.SetTimerContext( );
 800f88e:	6933      	ldr	r3, [r6, #16]
  old  =  UTIL_TimerDriver.GetTimerContext( );
 800f890:	0004      	movs	r4, r0
  now  =  UTIL_TimerDriver.SetTimerContext( );
 800f892:	4798      	blx	r3
  if ( TimerListHead != NULL )
 800f894:	4d1a      	ldr	r5, [pc, #104]	@ (800f900 <UTIL_TIMER_IRQ_Handler+0x80>)
  DeltaContext = now  - old; /*intentional wrap around */
 800f896:	1b01      	subs	r1, r0, r4
  if ( TimerListHead != NULL )
 800f898:	682b      	ldr	r3, [r5, #0]
        cur->Timestamp -= DeltaContext;
 800f89a:	1a24      	subs	r4, r4, r0
  if ( TimerListHead != NULL )
 800f89c:	2b00      	cmp	r3, #0
 800f89e:	d01e      	beq.n	800f8de <UTIL_TIMER_IRQ_Handler+0x5e>
      if (cur->Timestamp > DeltaContext)
 800f8a0:	6818      	ldr	r0, [r3, #0]
        cur->Timestamp = 0;
 800f8a2:	2200      	movs	r2, #0
      if (cur->Timestamp > DeltaContext)
 800f8a4:	4288      	cmp	r0, r1
 800f8a6:	d900      	bls.n	800f8aa <UTIL_TIMER_IRQ_Handler+0x2a>
        cur->Timestamp -= DeltaContext;
 800f8a8:	1822      	adds	r2, r4, r0
 800f8aa:	601a      	str	r2, [r3, #0]
      cur = cur->Next;
 800f8ac:	695b      	ldr	r3, [r3, #20]
    } while(cur != NULL);
 800f8ae:	e7f5      	b.n	800f89c <UTIL_TIMER_IRQ_Handler+0x1c>
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 800f8b0:	681c      	ldr	r4, [r3, #0]
 800f8b2:	2c00      	cmp	r4, #0
 800f8b4:	d003      	beq.n	800f8be <UTIL_TIMER_IRQ_Handler+0x3e>
 800f8b6:	69b3      	ldr	r3, [r6, #24]
 800f8b8:	4798      	blx	r3
 800f8ba:	4284      	cmp	r4, r0
 800f8bc:	d212      	bcs.n	800f8e4 <UTIL_TIMER_IRQ_Handler+0x64>
      cur = TimerListHead;
 800f8be:	682c      	ldr	r4, [r5, #0]
      TimerListHead = TimerListHead->Next;
 800f8c0:	6963      	ldr	r3, [r4, #20]
      cur->Callback(cur->argument);
 800f8c2:	6920      	ldr	r0, [r4, #16]
      TimerListHead = TimerListHead->Next;
 800f8c4:	602b      	str	r3, [r5, #0]
      cur->IsPending = 0;
 800f8c6:	2300      	movs	r3, #0
 800f8c8:	8123      	strh	r3, [r4, #8]
      cur->Callback(cur->argument);
 800f8ca:	68e3      	ldr	r3, [r4, #12]
 800f8cc:	4798      	blx	r3
      if(( cur->Mode == UTIL_TIMER_PERIODIC) && (cur->IsReloadStopped == 0U))
 800f8ce:	2280      	movs	r2, #128	@ 0x80
 800f8d0:	8963      	ldrh	r3, [r4, #10]
 800f8d2:	0052      	lsls	r2, r2, #1
 800f8d4:	4293      	cmp	r3, r2
 800f8d6:	d102      	bne.n	800f8de <UTIL_TIMER_IRQ_Handler+0x5e>
        (void)UTIL_TIMER_Start(cur);
 800f8d8:	0020      	movs	r0, r4
 800f8da:	f7ff ff77 	bl	800f7cc <UTIL_TIMER_Start>
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 800f8de:	682b      	ldr	r3, [r5, #0]
 800f8e0:	2b00      	cmp	r3, #0
 800f8e2:	d1e5      	bne.n	800f8b0 <UTIL_TIMER_IRQ_Handler+0x30>
  if(( TimerListHead != NULL ) && (TimerListHead->IsPending == 0U))
 800f8e4:	6828      	ldr	r0, [r5, #0]
 800f8e6:	2800      	cmp	r0, #0
 800f8e8:	d102      	bne.n	800f8f0 <UTIL_TIMER_IRQ_Handler+0x70>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f8ea:	f387 8810 	msr	PRIMASK, r7
}
 800f8ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if(( TimerListHead != NULL ) && (TimerListHead->IsPending == 0U))
 800f8f0:	7a03      	ldrb	r3, [r0, #8]
 800f8f2:	2b00      	cmp	r3, #0
 800f8f4:	d1f9      	bne.n	800f8ea <UTIL_TIMER_IRQ_Handler+0x6a>
    TimerSetTimeout( TimerListHead );
 800f8f6:	f7ff fefb 	bl	800f6f0 <TimerSetTimeout>
 800f8fa:	e7f6      	b.n	800f8ea <UTIL_TIMER_IRQ_Handler+0x6a>
 800f8fc:	08010380 	.word	0x08010380
 800f900:	20001bdc 	.word	0x20001bdc

0800f904 <tiny_vfscanf>:
 * vfscanf
 */

static inline int
VFSCANF(const char *str, const char *fmt0, va_list ap)
{
 800f904:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f906:	4c8c      	ldr	r4, [pc, #560]	@ (800fb38 <tiny_vfscanf+0x234>)
   fp_p = str;
  fp_r = strlen(str);

  nassigned = 0;
  nread = 0;
  base = 0;    /* XXX just to keep gcc happy */
 800f908:	2600      	movs	r6, #0
{
 800f90a:	44a5      	add	sp, r4
 800f90c:	9000      	str	r0, [sp, #0]
 800f90e:	000c      	movs	r4, r1
 800f910:	9204      	str	r2, [sp, #16]
  fp_r = strlen(str);
 800f912:	f7f0 fbf9 	bl	8000108 <strlen>
 800f916:	0007      	movs	r7, r0
  nassigned = 0;
 800f918:	9602      	str	r6, [sp, #8]
  for (;;) {
    c = *fmt++;
 800f91a:	7820      	ldrb	r0, [r4, #0]
 800f91c:	1c63      	adds	r3, r4, #1
 800f91e:	9301      	str	r3, [sp, #4]
    if (c == 0)
 800f920:	2800      	cmp	r0, #0
 800f922:	d07a      	beq.n	800fa1a <tiny_vfscanf+0x116>
          isspace(*fp_p))
        nread++, fp_r--, fp_p++;
      continue;
    }
#endif
    if (c != '%')
 800f924:	2825      	cmp	r0, #37	@ 0x25
 800f926:	d000      	beq.n	800f92a <tiny_vfscanf+0x26>
 800f928:	e07c      	b.n	800fa24 <tiny_vfscanf+0x120>
      goto literal;
    width = 0;
    flags = 0;
 800f92a:	2500      	movs	r5, #0
    c = *fmt++;
 800f92c:	001c      	movs	r4, r3
    width = 0;
 800f92e:	0029      	movs	r1, r5
    /*
     * switch on the format.  continue if done;
     * break once format type is derived.
     */
again:    c = *fmt++;
 800f930:	9b01      	ldr	r3, [sp, #4]
 800f932:	3301      	adds	r3, #1
 800f934:	9301      	str	r3, [sp, #4]
 800f936:	7823      	ldrb	r3, [r4, #0]
    switch (c) {
 800f938:	2b64      	cmp	r3, #100	@ 0x64
 800f93a:	d100      	bne.n	800f93e <tiny_vfscanf+0x3a>
 800f93c:	e089      	b.n	800fa52 <tiny_vfscanf+0x14e>
 800f93e:	d84e      	bhi.n	800f9de <tiny_vfscanf+0xda>
 800f940:	2b39      	cmp	r3, #57	@ 0x39
 800f942:	d845      	bhi.n	800f9d0 <tiny_vfscanf+0xcc>
 800f944:	2b2f      	cmp	r3, #47	@ 0x2f
 800f946:	d900      	bls.n	800f94a <tiny_vfscanf+0x46>
 800f948:	e07c      	b.n	800fa44 <tiny_vfscanf+0x140>
 800f94a:	2b00      	cmp	r3, #0
 800f94c:	d062      	beq.n	800fa14 <tiny_vfscanf+0x110>
 800f94e:	2b25      	cmp	r3, #37	@ 0x25
 800f950:	d068      	beq.n	800fa24 <tiny_vfscanf+0x120>
    }

    /*
     * We have a conversion that requires input.
     */
    if (fp_r <= 0 && __srefill(fp))
 800f952:	2f00      	cmp	r7, #0
 800f954:	d05b      	beq.n	800fa0e <tiny_vfscanf+0x10a>
#endif
    
    /*
     * Do the conversion.
     */
    switch (c) {
 800f956:	2b03      	cmp	r3, #3
 800f958:	d000      	beq.n	800f95c <tiny_vfscanf+0x58>
 800f95a:	e06d      	b.n	800fa38 <tiny_vfscanf+0x134>
#ifdef hardway
      if (width == 0 || width > sizeof(buf) - 1)
        width = sizeof(buf) - 1;
#else
      /* size_t is unsigned, hence this optimisation */
      if (--width > sizeof(buf) - 2)
 800f95c:	2380      	movs	r3, #128	@ 0x80
 800f95e:	3901      	subs	r1, #1
 800f960:	009b      	lsls	r3, r3, #2
 800f962:	4299      	cmp	r1, r3
 800f964:	d300      	bcc.n	800f968 <tiny_vfscanf+0x64>
 800f966:	4975      	ldr	r1, [pc, #468]	@ (800fb3c <tiny_vfscanf+0x238>)
        width = sizeof(buf) - 2;
      width++;
#endif

#ifdef TINY_NO_OX
      flags |= SIGNOK | NDIGITS;
 800f968:	23a0      	movs	r3, #160	@ 0xa0
 800f96a:	01db      	lsls	r3, r3, #7
 800f96c:	431d      	orrs	r5, r3
      flags |= SIGNOK | NDIGITS | NZDIGITS;
#endif
      
      sign_minus = 0;
      value = 0;
      for (p = buf; width; width--) {
 800f96e:	ab0f      	add	r3, sp, #60	@ 0x3c
 800f970:	9303      	str	r3, [sp, #12]
 800f972:	9b00      	ldr	r3, [sp, #0]
      width++;
 800f974:	3101      	adds	r1, #1
 800f976:	185b      	adds	r3, r3, r1
 800f978:	930d      	str	r3, [sp, #52]	@ 0x34
      sign_minus = 0;
 800f97a:	2300      	movs	r3, #0
      value = 0;
 800f97c:	2200      	movs	r2, #0
      sign_minus = 0;
 800f97e:	9305      	str	r3, [sp, #20]
      value = 0;
 800f980:	2300      	movs	r3, #0
 800f982:	9903      	ldr	r1, [sp, #12]
 800f984:	910c      	str	r1, [sp, #48]	@ 0x30
        c = *fp_p;
 800f986:	9900      	ldr	r1, [sp, #0]
 800f988:	780c      	ldrb	r4, [r1, #0]
        /*
         * Switch on the character; `goto ok'
         * if we accept it as a part of number.
         */
        switch (c) {
 800f98a:	2c39      	cmp	r4, #57	@ 0x39
 800f98c:	d866      	bhi.n	800fa5c <tiny_vfscanf+0x158>
 800f98e:	2c2f      	cmp	r4, #47	@ 0x2f
 800f990:	d900      	bls.n	800f994 <tiny_vfscanf+0x90>
 800f992:	e093      	b.n	800fabc <tiny_vfscanf+0x1b8>
 800f994:	2c2b      	cmp	r4, #43	@ 0x2b
 800f996:	d100      	bne.n	800f99a <tiny_vfscanf+0x96>
 800f998:	e0b7      	b.n	800fb0a <tiny_vfscanf+0x206>
 800f99a:	2c2d      	cmp	r4, #45	@ 0x2d
 800f99c:	d100      	bne.n	800f9a0 <tiny_vfscanf+0x9c>
 800f99e:	e0b0      	b.n	800fb02 <tiny_vfscanf+0x1fe>
       * If we had only a sign, it is no good; push
       * back the sign.  If the number ends in `x',
       * it was [sign] '0' 'x', so push back the x
       * and treat it as [sign] '0'.
       */
      if (flags & NDIGITS) {
 800f9a0:	2180      	movs	r1, #128	@ 0x80
 800f9a2:	0028      	movs	r0, r5
 800f9a4:	01c9      	lsls	r1, r1, #7
 800f9a6:	4008      	ands	r0, r1
 800f9a8:	420d      	tst	r5, r1
 800f9aa:	d136      	bne.n	800fa1a <tiny_vfscanf+0x116>
      {
#else
      if ((flags & SUPPRESS) == 0) {
#endif

        *p = '\0';
 800f9ac:	9903      	ldr	r1, [sp, #12]
 800f9ae:	7008      	strb	r0, [r1, #0]
        if (sign_minus)
 800f9b0:	9905      	ldr	r1, [sp, #20]
 800f9b2:	2900      	cmp	r1, #0
 800f9b4:	d004      	beq.n	800f9c0 <tiny_vfscanf+0xbc>
          value = -value;
 800f9b6:	0010      	movs	r0, r2
 800f9b8:	0019      	movs	r1, r3
 800f9ba:	2300      	movs	r3, #0
 800f9bc:	4242      	negs	r2, r0
 800f9be:	418b      	sbcs	r3, r1
        else if (flags & PTRINT)
          *va_arg(ap, ptrdiff_t *) = value;
        else 
#endif
        if (flags & LONG)
          *va_arg(ap, long *) = value;
 800f9c0:	9804      	ldr	r0, [sp, #16]
 800f9c2:	c802      	ldmia	r0!, {r1}
 800f9c4:	9004      	str	r0, [sp, #16]
        if (flags & LONG)
 800f9c6:	07e8      	lsls	r0, r5, #31
 800f9c8:	d400      	bmi.n	800f9cc <tiny_vfscanf+0xc8>
 800f9ca:	e0a9      	b.n	800fb20 <tiny_vfscanf+0x21c>
        else if (flags & SHORT)
          *va_arg(ap, short *) = value;
        else if (flags & SHORTSHORT)
          *va_arg(ap, char *) = value;
        else
          *va_arg(ap, int *) = value;
 800f9cc:	600a      	str	r2, [r1, #0]
 800f9ce:	e0aa      	b.n	800fb26 <tiny_vfscanf+0x222>
    switch (c) {
 800f9d0:	2b44      	cmp	r3, #68	@ 0x44
 800f9d2:	d03c      	beq.n	800fa4e <tiny_vfscanf+0x14a>
 800f9d4:	2b58      	cmp	r3, #88	@ 0x58
 800f9d6:	d014      	beq.n	800fa02 <tiny_vfscanf+0xfe>
    if (fp_r <= 0 && __srefill(fp))
 800f9d8:	2f00      	cmp	r7, #0
 800f9da:	d12d      	bne.n	800fa38 <tiny_vfscanf+0x134>
 800f9dc:	e017      	b.n	800fa0e <tiny_vfscanf+0x10a>
    switch (c) {
 800f9de:	2b6c      	cmp	r3, #108	@ 0x6c
 800f9e0:	d02e      	beq.n	800fa40 <tiny_vfscanf+0x13c>
 800f9e2:	d80a      	bhi.n	800f9fa <tiny_vfscanf+0xf6>
 800f9e4:	2b68      	cmp	r3, #104	@ 0x68
 800f9e6:	d1f7      	bne.n	800f9d8 <tiny_vfscanf+0xd4>
      if (*fmt == 'h') {
 800f9e8:	7863      	ldrb	r3, [r4, #1]
 800f9ea:	2b68      	cmp	r3, #104	@ 0x68
 800f9ec:	d126      	bne.n	800fa3c <tiny_vfscanf+0x138>
        fmt++;
 800f9ee:	1ca3      	adds	r3, r4, #2
 800f9f0:	9301      	str	r3, [sp, #4]
        flags |= SHORTSHORT;
 800f9f2:	2308      	movs	r3, #8
      flags |= LONG;
 800f9f4:	431d      	orrs	r5, r3
  nassigned = 0;
 800f9f6:	9c01      	ldr	r4, [sp, #4]
 800f9f8:	e79a      	b.n	800f930 <tiny_vfscanf+0x2c>
    switch (c) {
 800f9fa:	2b75      	cmp	r3, #117	@ 0x75
 800f9fc:	d02b      	beq.n	800fa56 <tiny_vfscanf+0x152>
 800f9fe:	2b78      	cmp	r3, #120	@ 0x78
 800fa00:	d1ea      	bne.n	800f9d8 <tiny_vfscanf+0xd4>
      flags |= UNSIGNED;
 800fa02:	2380      	movs	r3, #128	@ 0x80
      base = 16;
 800fa04:	2610      	movs	r6, #16
      flags |= UNSIGNED;
 800fa06:	011b      	lsls	r3, r3, #4
 800fa08:	431d      	orrs	r5, r3
    if (fp_r <= 0 && __srefill(fp))
 800fa0a:	2f00      	cmp	r7, #0
 800fa0c:	d1a6      	bne.n	800f95c <tiny_vfscanf+0x58>
      break;
#endif /* FLOATING_POINT */
    }
  }
input_failure:
  return (nassigned ? nassigned : -1);
 800fa0e:	9b02      	ldr	r3, [sp, #8]
 800fa10:	2b00      	cmp	r3, #0
 800fa12:	d102      	bne.n	800fa1a <tiny_vfscanf+0x116>
      return (EOF);
 800fa14:	2301      	movs	r3, #1
 800fa16:	425b      	negs	r3, r3
 800fa18:	9302      	str	r3, [sp, #8]
match_failure:
  return (nassigned);
}
 800fa1a:	9802      	ldr	r0, [sp, #8]
 800fa1c:	2391      	movs	r3, #145	@ 0x91
 800fa1e:	009b      	lsls	r3, r3, #2
 800fa20:	449d      	add	sp, r3
 800fa22:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (fp_r <= 0 && __srefill(fp))
 800fa24:	2f00      	cmp	r7, #0
 800fa26:	d0f2      	beq.n	800fa0e <tiny_vfscanf+0x10a>
      if (*fp_p != c)
 800fa28:	9b00      	ldr	r3, [sp, #0]
 800fa2a:	781b      	ldrb	r3, [r3, #0]
 800fa2c:	4283      	cmp	r3, r0
 800fa2e:	d1f4      	bne.n	800fa1a <tiny_vfscanf+0x116>
      fp_r--, fp_p++;
 800fa30:	9b00      	ldr	r3, [sp, #0]
 800fa32:	3f01      	subs	r7, #1
 800fa34:	3301      	adds	r3, #1
 800fa36:	9300      	str	r3, [sp, #0]
{
 800fa38:	9c01      	ldr	r4, [sp, #4]
 800fa3a:	e76e      	b.n	800f91a <tiny_vfscanf+0x16>
        flags |= SHORT;
 800fa3c:	2304      	movs	r3, #4
 800fa3e:	e7d9      	b.n	800f9f4 <tiny_vfscanf+0xf0>
      flags |= LONG;
 800fa40:	2301      	movs	r3, #1
 800fa42:	e7d7      	b.n	800f9f4 <tiny_vfscanf+0xf0>
      width = width * 10 + c - '0';
 800fa44:	240a      	movs	r4, #10
 800fa46:	4361      	muls	r1, r4
 800fa48:	3930      	subs	r1, #48	@ 0x30
 800fa4a:	1859      	adds	r1, r3, r1
      goto again;
 800fa4c:	e7d3      	b.n	800f9f6 <tiny_vfscanf+0xf2>
      flags |= LONG;
 800fa4e:	2301      	movs	r3, #1
      flags |= UNSIGNED;
 800fa50:	431d      	orrs	r5, r3
    switch (c) {
 800fa52:	260a      	movs	r6, #10
 800fa54:	e7d9      	b.n	800fa0a <tiny_vfscanf+0x106>
      flags |= UNSIGNED;
 800fa56:	2380      	movs	r3, #128	@ 0x80
 800fa58:	011b      	lsls	r3, r3, #4
 800fa5a:	e7f9      	b.n	800fa50 <tiny_vfscanf+0x14c>
 800fa5c:	2c46      	cmp	r4, #70	@ 0x46
 800fa5e:	d814      	bhi.n	800fa8a <tiny_vfscanf+0x186>
 800fa60:	2c40      	cmp	r4, #64	@ 0x40
 800fa62:	d99d      	bls.n	800f9a0 <tiny_vfscanf+0x9c>
          if (base <= 10)
 800fa64:	2e0a      	cmp	r6, #10
 800fa66:	dd9b      	ble.n	800f9a0 <tiny_vfscanf+0x9c>
          flags &= ~(SIGNOK | NDIGITS);
 800fa68:	4935      	ldr	r1, [pc, #212]	@ (800fb40 <tiny_vfscanf+0x23c>)
          value = value * base + c - 'A' + 10;
 800fa6a:	0030      	movs	r0, r6
          flags &= ~(SIGNOK | NDIGITS);
 800fa6c:	400d      	ands	r5, r1
          value = value * base + c - 'A' + 10;
 800fa6e:	17f1      	asrs	r1, r6, #31
 800fa70:	f7f0 fd4e 	bl	8000510 <__aeabi_lmul>
 800fa74:	2237      	movs	r2, #55	@ 0x37
 800fa76:	4252      	negs	r2, r2
 800fa78:	17d3      	asrs	r3, r2, #31
 800fa7a:	1812      	adds	r2, r2, r0
 800fa7c:	414b      	adcs	r3, r1
 800fa7e:	2100      	movs	r1, #0
 800fa80:	9408      	str	r4, [sp, #32]
 800fa82:	9109      	str	r1, [sp, #36]	@ 0x24
 800fa84:	9808      	ldr	r0, [sp, #32]
 800fa86:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800fa88:	e028      	b.n	800fadc <tiny_vfscanf+0x1d8>
 800fa8a:	0021      	movs	r1, r4
 800fa8c:	3961      	subs	r1, #97	@ 0x61
 800fa8e:	2905      	cmp	r1, #5
 800fa90:	d900      	bls.n	800fa94 <tiny_vfscanf+0x190>
 800fa92:	e785      	b.n	800f9a0 <tiny_vfscanf+0x9c>
          if (base <= 10)
 800fa94:	2e0a      	cmp	r6, #10
 800fa96:	dc00      	bgt.n	800fa9a <tiny_vfscanf+0x196>
 800fa98:	e782      	b.n	800f9a0 <tiny_vfscanf+0x9c>
          flags &= ~(SIGNOK | NDIGITS);
 800fa9a:	4929      	ldr	r1, [pc, #164]	@ (800fb40 <tiny_vfscanf+0x23c>)
          value = value * base + c - 'a' + 10;
 800fa9c:	0030      	movs	r0, r6
          flags &= ~(SIGNOK | NDIGITS);
 800fa9e:	400d      	ands	r5, r1
          value = value * base + c - 'a' + 10;
 800faa0:	17f1      	asrs	r1, r6, #31
 800faa2:	f7f0 fd35 	bl	8000510 <__aeabi_lmul>
 800faa6:	2257      	movs	r2, #87	@ 0x57
 800faa8:	4252      	negs	r2, r2
 800faaa:	17d3      	asrs	r3, r2, #31
 800faac:	1812      	adds	r2, r2, r0
 800faae:	414b      	adcs	r3, r1
 800fab0:	2100      	movs	r1, #0
 800fab2:	940a      	str	r4, [sp, #40]	@ 0x28
 800fab4:	910b      	str	r1, [sp, #44]	@ 0x2c
 800fab6:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800fab8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800faba:	e00f      	b.n	800fadc <tiny_vfscanf+0x1d8>
          flags &= ~(SIGNOK | NDIGITS);
 800fabc:	4920      	ldr	r1, [pc, #128]	@ (800fb40 <tiny_vfscanf+0x23c>)
          value = value * base + c - '0';
 800fabe:	0030      	movs	r0, r6
          flags &= ~(SIGNOK | NDIGITS);
 800fac0:	400d      	ands	r5, r1
          value = value * base + c - '0';
 800fac2:	17f1      	asrs	r1, r6, #31
 800fac4:	f7f0 fd24 	bl	8000510 <__aeabi_lmul>
 800fac8:	2230      	movs	r2, #48	@ 0x30
 800faca:	4252      	negs	r2, r2
 800facc:	17d3      	asrs	r3, r2, #31
 800face:	1812      	adds	r2, r2, r0
 800fad0:	414b      	adcs	r3, r1
 800fad2:	2100      	movs	r1, #0
 800fad4:	9406      	str	r4, [sp, #24]
 800fad6:	9107      	str	r1, [sp, #28]
 800fad8:	9806      	ldr	r0, [sp, #24]
 800fada:	9907      	ldr	r1, [sp, #28]
          value = value * base + c - 'A' + 10;
 800fadc:	1812      	adds	r2, r2, r0
 800fade:	414b      	adcs	r3, r1
        *p++ = c;
 800fae0:	9903      	ldr	r1, [sp, #12]
        if (--fp_r > 0)
 800fae2:	3f01      	subs	r7, #1
 800fae4:	3101      	adds	r1, #1
 800fae6:	9103      	str	r1, [sp, #12]
        *p++ = c;
 800fae8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800faea:	700c      	strb	r4, [r1, #0]
        if (--fp_r > 0)
 800faec:	2f00      	cmp	r7, #0
 800faee:	d100      	bne.n	800faf2 <tiny_vfscanf+0x1ee>
 800faf0:	e756      	b.n	800f9a0 <tiny_vfscanf+0x9c>
          fp_p++;
 800faf2:	9900      	ldr	r1, [sp, #0]
      for (p = buf; width; width--) {
 800faf4:	980d      	ldr	r0, [sp, #52]	@ 0x34
          fp_p++;
 800faf6:	3101      	adds	r1, #1
 800faf8:	9100      	str	r1, [sp, #0]
      for (p = buf; width; width--) {
 800fafa:	4281      	cmp	r1, r0
 800fafc:	d000      	beq.n	800fb00 <tiny_vfscanf+0x1fc>
 800fafe:	e740      	b.n	800f982 <tiny_vfscanf+0x7e>
 800fb00:	e74e      	b.n	800f9a0 <tiny_vfscanf+0x9c>
          if (!(flags & HAVESIGN)) {
 800fb02:	04a9      	lsls	r1, r5, #18
 800fb04:	d401      	bmi.n	800fb0a <tiny_vfscanf+0x206>
            sign_minus = 1;
 800fb06:	2101      	movs	r1, #1
 800fb08:	9105      	str	r1, [sp, #20]
          if (flags & SIGNOK) {
 800fb0a:	2180      	movs	r1, #128	@ 0x80
 800fb0c:	0149      	lsls	r1, r1, #5
 800fb0e:	420d      	tst	r5, r1
 800fb10:	d100      	bne.n	800fb14 <tiny_vfscanf+0x210>
 800fb12:	e745      	b.n	800f9a0 <tiny_vfscanf+0x9c>
            flags &= ~SIGNOK;
 800fb14:	490b      	ldr	r1, [pc, #44]	@ (800fb44 <tiny_vfscanf+0x240>)
 800fb16:	400d      	ands	r5, r1
            flags |= HAVESIGN;
 800fb18:	2180      	movs	r1, #128	@ 0x80
 800fb1a:	0189      	lsls	r1, r1, #6
 800fb1c:	430d      	orrs	r5, r1
            goto ok;
 800fb1e:	e7df      	b.n	800fae0 <tiny_vfscanf+0x1dc>
        else if (flags & SHORT)
 800fb20:	0768      	lsls	r0, r5, #29
 800fb22:	d504      	bpl.n	800fb2e <tiny_vfscanf+0x22a>
          *va_arg(ap, short *) = value;
 800fb24:	800a      	strh	r2, [r1, #0]
        nassigned++;
 800fb26:	9b02      	ldr	r3, [sp, #8]
 800fb28:	3301      	adds	r3, #1
 800fb2a:	9302      	str	r3, [sp, #8]
      break;
 800fb2c:	e784      	b.n	800fa38 <tiny_vfscanf+0x134>
        else if (flags & SHORTSHORT)
 800fb2e:	072d      	lsls	r5, r5, #28
 800fb30:	d400      	bmi.n	800fb34 <tiny_vfscanf+0x230>
 800fb32:	e74b      	b.n	800f9cc <tiny_vfscanf+0xc8>
          *va_arg(ap, char *) = value;
 800fb34:	700a      	strb	r2, [r1, #0]
 800fb36:	e7f6      	b.n	800fb26 <tiny_vfscanf+0x222>
 800fb38:	fffffdbc 	.word	0xfffffdbc
 800fb3c:	000001ff 	.word	0x000001ff
 800fb40:	ffffafff 	.word	0xffffafff
 800fb44:	ffffefff 	.word	0xffffefff

0800fb48 <tiny_sscanf>:
}
#endif

int
tiny_sscanf(const char *str, const char *fmt, ...)
{
 800fb48:	b40e      	push	{r1, r2, r3}
 800fb4a:	b503      	push	{r0, r1, lr}
 800fb4c:	aa03      	add	r2, sp, #12
 800fb4e:	ca02      	ldmia	r2!, {r1}
  int ret;
  va_list ap;
  
  va_start(ap, fmt);
 800fb50:	9201      	str	r2, [sp, #4]
  ret = tiny_vfscanf(str, fmt, ap);
 800fb52:	f7ff fed7 	bl	800f904 <tiny_vfscanf>
  va_end(ap);
  return (ret);
}
 800fb56:	b002      	add	sp, #8
 800fb58:	bc08      	pop	{r3}
 800fb5a:	b003      	add	sp, #12
 800fb5c:	4718      	bx	r3
	...

0800fb60 <tiny_vsnprintf_like>:

#define CHECK_STR_SIZE(_buf, _str, _size) \
  if ((((_str) - (_buf)) >= ((_size)-1))) { break; }

int tiny_vsnprintf_like(char *buf, const int size, const char *fmt, va_list args)
{
 800fb60:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fb62:	b09d      	sub	sp, #116	@ 0x74
 800fb64:	9002      	str	r0, [sp, #8]
  int precision;        // Min. # of digits for integers; max number of chars for from string
  int qualifier;        // 'h', 'l', or 'L' for integer fields

  if (size <= 0)
  {
    return 0;
 800fb66:	2000      	movs	r0, #0
{
 800fb68:	9109      	str	r1, [sp, #36]	@ 0x24
  if (size <= 0)
 800fb6a:	4281      	cmp	r1, r0
 800fb6c:	dd0a      	ble.n	800fb84 <tiny_vsnprintf_like+0x24>
 800fb6e:	001f      	movs	r7, r3
  }
  
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 800fb70:	9e02      	ldr	r6, [sp, #8]
  {
    CHECK_STR_SIZE(buf, str, size);
 800fb72:	9902      	ldr	r1, [sp, #8]
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 800fb74:	7813      	ldrb	r3, [r2, #0]
    CHECK_STR_SIZE(buf, str, size);
 800fb76:	1a70      	subs	r0, r6, r1
 800fb78:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800fb7a:	3901      	subs	r1, #1
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 800fb7c:	2b00      	cmp	r3, #0
 800fb7e:	d103      	bne.n	800fb88 <tiny_vsnprintf_like+0x28>
      num = va_arg(args, unsigned int);

    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
  }

  *str = '\0';
 800fb80:	2300      	movs	r3, #0
 800fb82:	7033      	strb	r3, [r6, #0]
  return str - buf;
}
 800fb84:	b01d      	add	sp, #116	@ 0x74
 800fb86:	bdf0      	pop	{r4, r5, r6, r7, pc}
    CHECK_STR_SIZE(buf, str, size);
 800fb88:	4288      	cmp	r0, r1
 800fb8a:	daf9      	bge.n	800fb80 <tiny_vsnprintf_like+0x20>
    if (*fmt != '%')
 800fb8c:	2b25      	cmp	r3, #37	@ 0x25
 800fb8e:	d005      	beq.n	800fb9c <tiny_vsnprintf_like+0x3c>
      *str++ = *fmt;
 800fb90:	7033      	strb	r3, [r6, #0]
      continue;
 800fb92:	9201      	str	r2, [sp, #4]
      *str++ = *fmt;
 800fb94:	3601      	adds	r6, #1
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 800fb96:	9a01      	ldr	r2, [sp, #4]
 800fb98:	3201      	adds	r2, #1
 800fb9a:	e7ea      	b.n	800fb72 <tiny_vsnprintf_like+0x12>
    fmt++;
 800fb9c:	1c53      	adds	r3, r2, #1
 800fb9e:	9301      	str	r3, [sp, #4]
    if (*fmt == '0')
 800fba0:	7853      	ldrb	r3, [r2, #1]
 800fba2:	0018      	movs	r0, r3
 800fba4:	3830      	subs	r0, #48	@ 0x30
 800fba6:	9304      	str	r3, [sp, #16]
 800fba8:	4242      	negs	r2, r0
 800fbaa:	4142      	adcs	r2, r0
    if (is_digit(*fmt))
 800fbac:	b2c0      	uxtb	r0, r0
    if (*fmt == '0')
 800fbae:	0013      	movs	r3, r2
    if (is_digit(*fmt))
 800fbb0:	2809      	cmp	r0, #9
 800fbb2:	d92e      	bls.n	800fc12 <tiny_vsnprintf_like+0xb2>
    field_width = -1;
 800fbb4:	2001      	movs	r0, #1
 800fbb6:	4240      	negs	r0, r0
 800fbb8:	9000      	str	r0, [sp, #0]
    switch (*fmt)
 800fbba:	9801      	ldr	r0, [sp, #4]
 800fbbc:	7800      	ldrb	r0, [r0, #0]
 800fbbe:	2869      	cmp	r0, #105	@ 0x69
 800fbc0:	d100      	bne.n	800fbc4 <tiny_vsnprintf_like+0x64>
 800fbc2:	e0a4      	b.n	800fd0e <tiny_vsnprintf_like+0x1ae>
 800fbc4:	d829      	bhi.n	800fc1a <tiny_vsnprintf_like+0xba>
 800fbc6:	2863      	cmp	r0, #99	@ 0x63
 800fbc8:	d038      	beq.n	800fc3c <tiny_vsnprintf_like+0xdc>
 800fbca:	2864      	cmp	r0, #100	@ 0x64
 800fbcc:	d100      	bne.n	800fbd0 <tiny_vsnprintf_like+0x70>
 800fbce:	e09e      	b.n	800fd0e <tiny_vsnprintf_like+0x1ae>
 800fbd0:	2858      	cmp	r0, #88	@ 0x58
 800fbd2:	d066      	beq.n	800fca2 <tiny_vsnprintf_like+0x142>
        if (*fmt != '%') *str++ = '%';
 800fbd4:	0032      	movs	r2, r6
 800fbd6:	2825      	cmp	r0, #37	@ 0x25
 800fbd8:	d126      	bne.n	800fc28 <tiny_vsnprintf_like+0xc8>
        if (*fmt)
 800fbda:	9801      	ldr	r0, [sp, #4]
 800fbdc:	7800      	ldrb	r0, [r0, #0]
 800fbde:	2800      	cmp	r0, #0
 800fbe0:	d100      	bne.n	800fbe4 <tiny_vsnprintf_like+0x84>
 800fbe2:	e098      	b.n	800fd16 <tiny_vsnprintf_like+0x1b6>
          *str++ = *fmt;
 800fbe4:	1c56      	adds	r6, r2, #1
 800fbe6:	7010      	strb	r0, [r2, #0]
        CHECK_STR_SIZE(buf, str, size);
 800fbe8:	9a02      	ldr	r2, [sp, #8]
 800fbea:	1ab2      	subs	r2, r6, r2
 800fbec:	428a      	cmp	r2, r1
 800fbee:	db00      	blt.n	800fbf2 <tiny_vsnprintf_like+0x92>
 800fbf0:	e08f      	b.n	800fd12 <tiny_vsnprintf_like+0x1b2>
 800fbf2:	e7d0      	b.n	800fb96 <tiny_vsnprintf_like+0x36>
  while (is_digit(**s)) i = i*10 + *((*s)++) - '0';
 800fbf4:	9c01      	ldr	r4, [sp, #4]
 800fbf6:	3401      	adds	r4, #1
 800fbf8:	9401      	str	r4, [sp, #4]
 800fbfa:	9c00      	ldr	r4, [sp, #0]
 800fbfc:	436c      	muls	r4, r5
 800fbfe:	1824      	adds	r4, r4, r0
 800fc00:	3c30      	subs	r4, #48	@ 0x30
 800fc02:	9400      	str	r4, [sp, #0]
 800fc04:	9801      	ldr	r0, [sp, #4]
 800fc06:	7800      	ldrb	r0, [r0, #0]
 800fc08:	0004      	movs	r4, r0
 800fc0a:	3c30      	subs	r4, #48	@ 0x30
 800fc0c:	2c09      	cmp	r4, #9
 800fc0e:	d9f1      	bls.n	800fbf4 <tiny_vsnprintf_like+0x94>
 800fc10:	e7d3      	b.n	800fbba <tiny_vsnprintf_like+0x5a>
  int i = 0;
 800fc12:	2000      	movs	r0, #0
  while (is_digit(**s)) i = i*10 + *((*s)++) - '0';
 800fc14:	250a      	movs	r5, #10
  int i = 0;
 800fc16:	9000      	str	r0, [sp, #0]
 800fc18:	e7f4      	b.n	800fc04 <tiny_vsnprintf_like+0xa4>
    switch (*fmt)
 800fc1a:	2875      	cmp	r0, #117	@ 0x75
 800fc1c:	d079      	beq.n	800fd12 <tiny_vsnprintf_like+0x1b2>
 800fc1e:	2410      	movs	r4, #16
 800fc20:	2878      	cmp	r0, #120	@ 0x78
 800fc22:	d041      	beq.n	800fca8 <tiny_vsnprintf_like+0x148>
 800fc24:	2873      	cmp	r0, #115	@ 0x73
 800fc26:	d01d      	beq.n	800fc64 <tiny_vsnprintf_like+0x104>
        if (*fmt != '%') *str++ = '%';
 800fc28:	2025      	movs	r0, #37	@ 0x25
 800fc2a:	7030      	strb	r0, [r6, #0]
        CHECK_STR_SIZE(buf, str, size);
 800fc2c:	9802      	ldr	r0, [sp, #8]
        if (*fmt != '%') *str++ = '%';
 800fc2e:	1c72      	adds	r2, r6, #1
 800fc30:	0016      	movs	r6, r2
    base = 10;
 800fc32:	240a      	movs	r4, #10
        CHECK_STR_SIZE(buf, str, size);
 800fc34:	1a10      	subs	r0, r2, r0
 800fc36:	4288      	cmp	r0, r1
 800fc38:	da36      	bge.n	800fca8 <tiny_vsnprintf_like+0x148>
 800fc3a:	e7ce      	b.n	800fbda <tiny_vsnprintf_like+0x7a>
          while (--field_width > 0) *str++ = ' ';
 800fc3c:	2400      	movs	r4, #0
 800fc3e:	9b00      	ldr	r3, [sp, #0]
 800fc40:	42a3      	cmp	r3, r4
 800fc42:	dd00      	ble.n	800fc46 <tiny_vsnprintf_like+0xe6>
 800fc44:	1e5c      	subs	r4, r3, #1
 800fc46:	0022      	movs	r2, r4
 800fc48:	2120      	movs	r1, #32
 800fc4a:	0030      	movs	r0, r6
 800fc4c:	f000 f8b0 	bl	800fdb0 <memset>
 800fc50:	9a00      	ldr	r2, [sp, #0]
 800fc52:	2301      	movs	r3, #1
 800fc54:	1934      	adds	r4, r6, r4
 800fc56:	2a00      	cmp	r2, #0
 800fc58:	dd00      	ble.n	800fc5c <tiny_vsnprintf_like+0xfc>
 800fc5a:	0013      	movs	r3, r2
        *str++ = (unsigned char) va_arg(args, int);
 800fc5c:	cf04      	ldmia	r7!, {r2}
          while (--field_width > 0) *str++ = ' ';
 800fc5e:	18f6      	adds	r6, r6, r3
        *str++ = (unsigned char) va_arg(args, int);
 800fc60:	7022      	strb	r2, [r4, #0]
        continue;
 800fc62:	e798      	b.n	800fb96 <tiny_vsnprintf_like+0x36>
        s = va_arg(args, char *);
 800fc64:	cf20      	ldmia	r7!, {r5}
        if (!s) s = "<NULL>";
 800fc66:	2d00      	cmp	r5, #0
 800fc68:	d100      	bne.n	800fc6c <tiny_vsnprintf_like+0x10c>
 800fc6a:	4d4e      	ldr	r5, [pc, #312]	@ (800fda4 <tiny_vsnprintf_like+0x244>)
        len = strlen(s);
 800fc6c:	0028      	movs	r0, r5
 800fc6e:	f7f0 fa4b 	bl	8000108 <strlen>
          while (len < field_width--) *str++ = ' ';
 800fc72:	2300      	movs	r3, #0
 800fc74:	9303      	str	r3, [sp, #12]
 800fc76:	9b00      	ldr	r3, [sp, #0]
        len = strlen(s);
 800fc78:	0004      	movs	r4, r0
          while (len < field_width--) *str++ = ' ';
 800fc7a:	4283      	cmp	r3, r0
 800fc7c:	db01      	blt.n	800fc82 <tiny_vsnprintf_like+0x122>
 800fc7e:	1a1b      	subs	r3, r3, r0
 800fc80:	9303      	str	r3, [sp, #12]
 800fc82:	0030      	movs	r0, r6
 800fc84:	2120      	movs	r1, #32
 800fc86:	9a03      	ldr	r2, [sp, #12]
 800fc88:	f000 f892 	bl	800fdb0 <memset>
 800fc8c:	9b03      	ldr	r3, [sp, #12]
 800fc8e:	18f6      	adds	r6, r6, r3
        for (i = 0; i < len; ++i) *str++ = *s++;
 800fc90:	2300      	movs	r3, #0
 800fc92:	42a3      	cmp	r3, r4
 800fc94:	db01      	blt.n	800fc9a <tiny_vsnprintf_like+0x13a>
 800fc96:	1936      	adds	r6, r6, r4
 800fc98:	e77d      	b.n	800fb96 <tiny_vsnprintf_like+0x36>
 800fc9a:	5cea      	ldrb	r2, [r5, r3]
 800fc9c:	54f2      	strb	r2, [r6, r3]
 800fc9e:	3301      	adds	r3, #1
 800fca0:	e7f7      	b.n	800fc92 <tiny_vsnprintf_like+0x132>
        flags |= UPPERCASE;
 800fca2:	2340      	movs	r3, #64	@ 0x40
        base = 16;
 800fca4:	2410      	movs	r4, #16
        flags |= UPPERCASE;
 800fca6:	4313      	orrs	r3, r2
    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 800fca8:	9802      	ldr	r0, [sp, #8]
    else if (flags & SIGN)
 800fcaa:	2202      	movs	r2, #2
    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 800fcac:	1a35      	subs	r5, r6, r0
 800fcae:	1b4d      	subs	r5, r1, r5
  char *dig = lower_digits;
 800fcb0:	493d      	ldr	r1, [pc, #244]	@ (800fda8 <tiny_vsnprintf_like+0x248>)
    else if (flags & SIGN)
 800fcb2:	401a      	ands	r2, r3
  char *dig = lower_digits;
 800fcb4:	9107      	str	r1, [sp, #28]
  if (type & UPPERCASE)  dig = upper_digits;
 800fcb6:	2140      	movs	r1, #64	@ 0x40
    else if (flags & SIGN)
 800fcb8:	4694      	mov	ip, r2
      num = va_arg(args, int);
 800fcba:	cf04      	ldmia	r7!, {r2}
    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 800fcbc:	0010      	movs	r0, r2
  if (type & UPPERCASE)  dig = upper_digits;
 800fcbe:	420b      	tst	r3, r1
 800fcc0:	d001      	beq.n	800fcc6 <tiny_vsnprintf_like+0x166>
 800fcc2:	4b3a      	ldr	r3, [pc, #232]	@ (800fdac <tiny_vsnprintf_like+0x24c>)
 800fcc4:	9307      	str	r3, [sp, #28]
  c = (type & ZEROPAD) ? '0' : ' ';
 800fcc6:	2330      	movs	r3, #48	@ 0x30
 800fcc8:	9308      	str	r3, [sp, #32]
 800fcca:	9b04      	ldr	r3, [sp, #16]
 800fccc:	2b30      	cmp	r3, #48	@ 0x30
 800fcce:	d001      	beq.n	800fcd4 <tiny_vsnprintf_like+0x174>
 800fcd0:	2320      	movs	r3, #32
 800fcd2:	9308      	str	r3, [sp, #32]
  if (type & SIGN)
 800fcd4:	4663      	mov	r3, ip
 800fcd6:	2b00      	cmp	r3, #0
 800fcd8:	d022      	beq.n	800fd20 <tiny_vsnprintf_like+0x1c0>
    if (num < 0)
 800fcda:	2a00      	cmp	r2, #0
 800fcdc:	da20      	bge.n	800fd20 <tiny_vsnprintf_like+0x1c0>
      size--;
 800fcde:	9b00      	ldr	r3, [sp, #0]
      num = -num;
 800fce0:	4250      	negs	r0, r2
      size--;
 800fce2:	3b01      	subs	r3, #1
 800fce4:	9300      	str	r3, [sp, #0]
      sign = '-';
 800fce6:	232d      	movs	r3, #45	@ 0x2d
 800fce8:	9305      	str	r3, [sp, #20]
  if (base < 2 || base > 36) return 0;
 800fcea:	2300      	movs	r3, #0
 800fcec:	9303      	str	r3, [sp, #12]
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 800fcee:	0021      	movs	r1, r4
 800fcf0:	9006      	str	r0, [sp, #24]
 800fcf2:	f7f0 fabf 	bl	8000274 <__aeabi_uidivmod>
 800fcf6:	9a07      	ldr	r2, [sp, #28]
 800fcf8:	9b03      	ldr	r3, [sp, #12]
 800fcfa:	5c52      	ldrb	r2, [r2, r1]
 800fcfc:	a90b      	add	r1, sp, #44	@ 0x2c
 800fcfe:	54ca      	strb	r2, [r1, r3]
 800fd00:	3301      	adds	r3, #1
 800fd02:	9303      	str	r3, [sp, #12]
    while (num != 0)
 800fd04:	9b06      	ldr	r3, [sp, #24]
 800fd06:	429c      	cmp	r4, r3
 800fd08:	d9f1      	bls.n	800fcee <tiny_vsnprintf_like+0x18e>
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 800fd0a:	9c03      	ldr	r4, [sp, #12]
 800fd0c:	e011      	b.n	800fd32 <tiny_vsnprintf_like+0x1d2>
        flags |= SIGN;
 800fd0e:	2302      	movs	r3, #2
 800fd10:	4313      	orrs	r3, r2
    base = 10;
 800fd12:	240a      	movs	r4, #10
 800fd14:	e7c8      	b.n	800fca8 <tiny_vsnprintf_like+0x148>
          --fmt;
 800fd16:	9801      	ldr	r0, [sp, #4]
 800fd18:	0016      	movs	r6, r2
 800fd1a:	3801      	subs	r0, #1
 800fd1c:	9001      	str	r0, [sp, #4]
 800fd1e:	e763      	b.n	800fbe8 <tiny_vsnprintf_like+0x88>
  if (num == 0)
 800fd20:	2a00      	cmp	r2, #0
 800fd22:	d001      	beq.n	800fd28 <tiny_vsnprintf_like+0x1c8>
 800fd24:	2300      	movs	r3, #0
 800fd26:	e7df      	b.n	800fce8 <tiny_vsnprintf_like+0x188>
    tmp[i++] = '0';
 800fd28:	2130      	movs	r1, #48	@ 0x30
 800fd2a:	2401      	movs	r4, #1
 800fd2c:	ab0b      	add	r3, sp, #44	@ 0x2c
 800fd2e:	7019      	strb	r1, [r3, #0]
 800fd30:	9205      	str	r2, [sp, #20]
  size -= precision;
 800fd32:	9b00      	ldr	r3, [sp, #0]
 800fd34:	1b19      	subs	r1, r3, r4
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 800fd36:	9b04      	ldr	r3, [sp, #16]
 800fd38:	2b30      	cmp	r3, #48	@ 0x30
 800fd3a:	d006      	beq.n	800fd4a <tiny_vsnprintf_like+0x1ea>
 800fd3c:	0030      	movs	r0, r6
 800fd3e:	2220      	movs	r2, #32
 800fd40:	000b      	movs	r3, r1
 800fd42:	0006      	movs	r6, r0
 800fd44:	3901      	subs	r1, #1
 800fd46:	2b00      	cmp	r3, #0
 800fd48:	dc1a      	bgt.n	800fd80 <tiny_vsnprintf_like+0x220>
  if (sign) ASSIGN_STR(sign);
 800fd4a:	9b05      	ldr	r3, [sp, #20]
 800fd4c:	2b00      	cmp	r3, #0
 800fd4e:	d026      	beq.n	800fd9e <tiny_vsnprintf_like+0x23e>
 800fd50:	232d      	movs	r3, #45	@ 0x2d
 800fd52:	3d01      	subs	r5, #1
 800fd54:	1c70      	adds	r0, r6, #1
 800fd56:	7033      	strb	r3, [r6, #0]
 800fd58:	2d00      	cmp	r5, #0
 800fd5a:	d016      	beq.n	800fd8a <tiny_vsnprintf_like+0x22a>
 800fd5c:	0002      	movs	r2, r0
 800fd5e:	002b      	movs	r3, r5
 800fd60:	1b49      	subs	r1, r1, r5
 800fd62:	18c8      	adds	r0, r1, r3
 800fd64:	0015      	movs	r5, r2
  while (size-- > 0) ASSIGN_STR(c);
 800fd66:	2800      	cmp	r0, #0
 800fd68:	dc11      	bgt.n	800fd8e <tiny_vsnprintf_like+0x22e>
  while (i-- > 0) ASSIGN_STR(tmp[i]);
 800fd6a:	a90b      	add	r1, sp, #44	@ 0x2c
 800fd6c:	18d3      	adds	r3, r2, r3
 800fd6e:	0010      	movs	r0, r2
 800fd70:	3c01      	subs	r4, #1
 800fd72:	d30a      	bcc.n	800fd8a <tiny_vsnprintf_like+0x22a>
 800fd74:	5c65      	ldrb	r5, [r4, r1]
 800fd76:	1c42      	adds	r2, r0, #1
 800fd78:	7005      	strb	r5, [r0, #0]
 800fd7a:	429a      	cmp	r2, r3
 800fd7c:	d1f7      	bne.n	800fd6e <tiny_vsnprintf_like+0x20e>
 800fd7e:	e00c      	b.n	800fd9a <tiny_vsnprintf_like+0x23a>
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 800fd80:	3d01      	subs	r5, #1
 800fd82:	3001      	adds	r0, #1
 800fd84:	7032      	strb	r2, [r6, #0]
 800fd86:	2d00      	cmp	r5, #0
 800fd88:	d1da      	bne.n	800fd40 <tiny_vsnprintf_like+0x1e0>
    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 800fd8a:	0006      	movs	r6, r0
 800fd8c:	e703      	b.n	800fb96 <tiny_vsnprintf_like+0x36>
  while (size-- > 0) ASSIGN_STR(c);
 800fd8e:	9808      	ldr	r0, [sp, #32]
 800fd90:	3b01      	subs	r3, #1
 800fd92:	3201      	adds	r2, #1
 800fd94:	7028      	strb	r0, [r5, #0]
 800fd96:	2b00      	cmp	r3, #0
 800fd98:	d1e3      	bne.n	800fd62 <tiny_vsnprintf_like+0x202>
  while (i-- > 0) ASSIGN_STR(tmp[i]);
 800fd9a:	0010      	movs	r0, r2
 800fd9c:	e7f5      	b.n	800fd8a <tiny_vsnprintf_like+0x22a>
 800fd9e:	0030      	movs	r0, r6
 800fda0:	e7dc      	b.n	800fd5c <tiny_vsnprintf_like+0x1fc>
 800fda2:	46c0      	nop			@ (mov r8, r8)
 800fda4:	0801224c 	.word	0x0801224c
 800fda8:	08012253 	.word	0x08012253
 800fdac:	08012278 	.word	0x08012278

0800fdb0 <memset>:
 800fdb0:	0003      	movs	r3, r0
 800fdb2:	1882      	adds	r2, r0, r2
 800fdb4:	4293      	cmp	r3, r2
 800fdb6:	d100      	bne.n	800fdba <memset+0xa>
 800fdb8:	4770      	bx	lr
 800fdba:	7019      	strb	r1, [r3, #0]
 800fdbc:	3301      	adds	r3, #1
 800fdbe:	e7f9      	b.n	800fdb4 <memset+0x4>

0800fdc0 <strncmp>:
 800fdc0:	b530      	push	{r4, r5, lr}
 800fdc2:	0005      	movs	r5, r0
 800fdc4:	1e10      	subs	r0, r2, #0
 800fdc6:	d00b      	beq.n	800fde0 <strncmp+0x20>
 800fdc8:	2400      	movs	r4, #0
 800fdca:	3a01      	subs	r2, #1
 800fdcc:	5d2b      	ldrb	r3, [r5, r4]
 800fdce:	5d08      	ldrb	r0, [r1, r4]
 800fdd0:	4283      	cmp	r3, r0
 800fdd2:	d104      	bne.n	800fdde <strncmp+0x1e>
 800fdd4:	42a2      	cmp	r2, r4
 800fdd6:	d002      	beq.n	800fdde <strncmp+0x1e>
 800fdd8:	3401      	adds	r4, #1
 800fdda:	2b00      	cmp	r3, #0
 800fddc:	d1f6      	bne.n	800fdcc <strncmp+0xc>
 800fdde:	1a18      	subs	r0, r3, r0
 800fde0:	bd30      	pop	{r4, r5, pc}
	...

0800fde4 <__libc_init_array>:
 800fde4:	b570      	push	{r4, r5, r6, lr}
 800fde6:	2600      	movs	r6, #0
 800fde8:	4c0c      	ldr	r4, [pc, #48]	@ (800fe1c <__libc_init_array+0x38>)
 800fdea:	4d0d      	ldr	r5, [pc, #52]	@ (800fe20 <__libc_init_array+0x3c>)
 800fdec:	1b64      	subs	r4, r4, r5
 800fdee:	10a4      	asrs	r4, r4, #2
 800fdf0:	42a6      	cmp	r6, r4
 800fdf2:	d109      	bne.n	800fe08 <__libc_init_array+0x24>
 800fdf4:	2600      	movs	r6, #0
 800fdf6:	f000 f89f 	bl	800ff38 <_init>
 800fdfa:	4c0a      	ldr	r4, [pc, #40]	@ (800fe24 <__libc_init_array+0x40>)
 800fdfc:	4d0a      	ldr	r5, [pc, #40]	@ (800fe28 <__libc_init_array+0x44>)
 800fdfe:	1b64      	subs	r4, r4, r5
 800fe00:	10a4      	asrs	r4, r4, #2
 800fe02:	42a6      	cmp	r6, r4
 800fe04:	d105      	bne.n	800fe12 <__libc_init_array+0x2e>
 800fe06:	bd70      	pop	{r4, r5, r6, pc}
 800fe08:	00b3      	lsls	r3, r6, #2
 800fe0a:	58eb      	ldr	r3, [r5, r3]
 800fe0c:	4798      	blx	r3
 800fe0e:	3601      	adds	r6, #1
 800fe10:	e7ee      	b.n	800fdf0 <__libc_init_array+0xc>
 800fe12:	00b3      	lsls	r3, r6, #2
 800fe14:	58eb      	ldr	r3, [r5, r3]
 800fe16:	4798      	blx	r3
 800fe18:	3601      	adds	r6, #1
 800fe1a:	e7f2      	b.n	800fe02 <__libc_init_array+0x1e>
 800fe1c:	080122a8 	.word	0x080122a8
 800fe20:	080122a8 	.word	0x080122a8
 800fe24:	080122ac 	.word	0x080122ac
 800fe28:	080122a8 	.word	0x080122a8

0800fe2c <memcpy>:
 800fe2c:	2300      	movs	r3, #0
 800fe2e:	b510      	push	{r4, lr}
 800fe30:	429a      	cmp	r2, r3
 800fe32:	d100      	bne.n	800fe36 <memcpy+0xa>
 800fe34:	bd10      	pop	{r4, pc}
 800fe36:	5ccc      	ldrb	r4, [r1, r3]
 800fe38:	54c4      	strb	r4, [r0, r3]
 800fe3a:	3301      	adds	r3, #1
 800fe3c:	e7f8      	b.n	800fe30 <memcpy+0x4>
	...

0800fe40 <floor>:
 800fe40:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fe42:	004b      	lsls	r3, r1, #1
 800fe44:	4a36      	ldr	r2, [pc, #216]	@ (800ff20 <floor+0xe0>)
 800fe46:	0d5b      	lsrs	r3, r3, #21
 800fe48:	189e      	adds	r6, r3, r2
 800fe4a:	000c      	movs	r4, r1
 800fe4c:	0005      	movs	r5, r0
 800fe4e:	9001      	str	r0, [sp, #4]
 800fe50:	2e13      	cmp	r6, #19
 800fe52:	dc2f      	bgt.n	800feb4 <floor+0x74>
 800fe54:	2e00      	cmp	r6, #0
 800fe56:	da14      	bge.n	800fe82 <floor+0x42>
 800fe58:	4a32      	ldr	r2, [pc, #200]	@ (800ff24 <floor+0xe4>)
 800fe5a:	4b33      	ldr	r3, [pc, #204]	@ (800ff28 <floor+0xe8>)
 800fe5c:	f7f0 fe38 	bl	8000ad0 <__aeabi_dadd>
 800fe60:	2200      	movs	r2, #0
 800fe62:	2300      	movs	r3, #0
 800fe64:	f7f0 fb20 	bl	80004a8 <__aeabi_dcmpgt>
 800fe68:	2800      	cmp	r0, #0
 800fe6a:	d007      	beq.n	800fe7c <floor+0x3c>
 800fe6c:	2c00      	cmp	r4, #0
 800fe6e:	da50      	bge.n	800ff12 <floor+0xd2>
 800fe70:	0064      	lsls	r4, r4, #1
 800fe72:	0864      	lsrs	r4, r4, #1
 800fe74:	4325      	orrs	r5, r4
 800fe76:	d14f      	bne.n	800ff18 <floor+0xd8>
 800fe78:	2480      	movs	r4, #128	@ 0x80
 800fe7a:	0624      	lsls	r4, r4, #24
 800fe7c:	0021      	movs	r1, r4
 800fe7e:	0028      	movs	r0, r5
 800fe80:	e022      	b.n	800fec8 <floor+0x88>
 800fe82:	4f2a      	ldr	r7, [pc, #168]	@ (800ff2c <floor+0xec>)
 800fe84:	4137      	asrs	r7, r6
 800fe86:	003b      	movs	r3, r7
 800fe88:	400b      	ands	r3, r1
 800fe8a:	4303      	orrs	r3, r0
 800fe8c:	d01c      	beq.n	800fec8 <floor+0x88>
 800fe8e:	4a25      	ldr	r2, [pc, #148]	@ (800ff24 <floor+0xe4>)
 800fe90:	4b25      	ldr	r3, [pc, #148]	@ (800ff28 <floor+0xe8>)
 800fe92:	f7f0 fe1d 	bl	8000ad0 <__aeabi_dadd>
 800fe96:	2200      	movs	r2, #0
 800fe98:	2300      	movs	r3, #0
 800fe9a:	f7f0 fb05 	bl	80004a8 <__aeabi_dcmpgt>
 800fe9e:	2800      	cmp	r0, #0
 800fea0:	d0ec      	beq.n	800fe7c <floor+0x3c>
 800fea2:	2c00      	cmp	r4, #0
 800fea4:	da03      	bge.n	800feae <floor+0x6e>
 800fea6:	2380      	movs	r3, #128	@ 0x80
 800fea8:	035b      	lsls	r3, r3, #13
 800feaa:	4133      	asrs	r3, r6
 800feac:	18e4      	adds	r4, r4, r3
 800feae:	2500      	movs	r5, #0
 800feb0:	43bc      	bics	r4, r7
 800feb2:	e7e3      	b.n	800fe7c <floor+0x3c>
 800feb4:	2e33      	cmp	r6, #51	@ 0x33
 800feb6:	dd09      	ble.n	800fecc <floor+0x8c>
 800feb8:	2380      	movs	r3, #128	@ 0x80
 800feba:	00db      	lsls	r3, r3, #3
 800febc:	429e      	cmp	r6, r3
 800febe:	d103      	bne.n	800fec8 <floor+0x88>
 800fec0:	0002      	movs	r2, r0
 800fec2:	000b      	movs	r3, r1
 800fec4:	f7f0 fe04 	bl	8000ad0 <__aeabi_dadd>
 800fec8:	b003      	add	sp, #12
 800feca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fecc:	2701      	movs	r7, #1
 800fece:	4a18      	ldr	r2, [pc, #96]	@ (800ff30 <floor+0xf0>)
 800fed0:	427f      	negs	r7, r7
 800fed2:	189b      	adds	r3, r3, r2
 800fed4:	40df      	lsrs	r7, r3
 800fed6:	4238      	tst	r0, r7
 800fed8:	d0f6      	beq.n	800fec8 <floor+0x88>
 800feda:	4a12      	ldr	r2, [pc, #72]	@ (800ff24 <floor+0xe4>)
 800fedc:	4b12      	ldr	r3, [pc, #72]	@ (800ff28 <floor+0xe8>)
 800fede:	f7f0 fdf7 	bl	8000ad0 <__aeabi_dadd>
 800fee2:	2200      	movs	r2, #0
 800fee4:	2300      	movs	r3, #0
 800fee6:	f7f0 fadf 	bl	80004a8 <__aeabi_dcmpgt>
 800feea:	2800      	cmp	r0, #0
 800feec:	d0c6      	beq.n	800fe7c <floor+0x3c>
 800feee:	2c00      	cmp	r4, #0
 800fef0:	da02      	bge.n	800fef8 <floor+0xb8>
 800fef2:	2e14      	cmp	r6, #20
 800fef4:	d102      	bne.n	800fefc <floor+0xbc>
 800fef6:	3401      	adds	r4, #1
 800fef8:	43bd      	bics	r5, r7
 800fefa:	e7bf      	b.n	800fe7c <floor+0x3c>
 800fefc:	2234      	movs	r2, #52	@ 0x34
 800fefe:	2301      	movs	r3, #1
 800ff00:	1b92      	subs	r2, r2, r6
 800ff02:	4093      	lsls	r3, r2
 800ff04:	18ed      	adds	r5, r5, r3
 800ff06:	9b01      	ldr	r3, [sp, #4]
 800ff08:	429d      	cmp	r5, r3
 800ff0a:	419b      	sbcs	r3, r3
 800ff0c:	425b      	negs	r3, r3
 800ff0e:	18e4      	adds	r4, r4, r3
 800ff10:	e7f2      	b.n	800fef8 <floor+0xb8>
 800ff12:	2500      	movs	r5, #0
 800ff14:	002c      	movs	r4, r5
 800ff16:	e7b1      	b.n	800fe7c <floor+0x3c>
 800ff18:	2500      	movs	r5, #0
 800ff1a:	4c06      	ldr	r4, [pc, #24]	@ (800ff34 <floor+0xf4>)
 800ff1c:	e7ae      	b.n	800fe7c <floor+0x3c>
 800ff1e:	46c0      	nop			@ (mov r8, r8)
 800ff20:	fffffc01 	.word	0xfffffc01
 800ff24:	8800759c 	.word	0x8800759c
 800ff28:	7e37e43c 	.word	0x7e37e43c
 800ff2c:	000fffff 	.word	0x000fffff
 800ff30:	fffffbed 	.word	0xfffffbed
 800ff34:	bff00000 	.word	0xbff00000

0800ff38 <_init>:
 800ff38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ff3a:	46c0      	nop			@ (mov r8, r8)
 800ff3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ff3e:	bc08      	pop	{r3}
 800ff40:	469e      	mov	lr, r3
 800ff42:	4770      	bx	lr

0800ff44 <_fini>:
 800ff44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ff46:	46c0      	nop			@ (mov r8, r8)
 800ff48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ff4a:	bc08      	pop	{r3}
 800ff4c:	469e      	mov	lr, r3
 800ff4e:	4770      	bx	lr
